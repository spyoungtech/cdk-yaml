from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.AccessControlListConfigurationProperty
class CfnDataSource_AccessControlListConfigurationPropertyDef(BaseStruct):
    key_path: typing.Optional[str] = pydantic.Field(None, description='Path to the AWS S3 bucket that contains the access control list files.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-accesscontrollistconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    access_control_list_configuration_property = kendra.CfnDataSource.AccessControlListConfigurationProperty(\n        key_path="keyPath"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.AccessControlListConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.AclConfigurationProperty
class CfnDataSource_AclConfigurationPropertyDef(BaseStruct):
    allowed_groups_column_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of groups, separated by semi-colons, that filters a query response based on user context. The document is only returned to users that are in one of the groups specified in the ``UserContext`` field of the `Query <https://docs.aws.amazon.com/kendra/latest/dg/API_Query.html>`_ operation.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-aclconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    acl_configuration_property = kendra.CfnDataSource.AclConfigurationProperty(\n        allowed_groups_column_name="allowedGroupsColumnName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['allowed_groups_column_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.AclConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.ColumnConfigurationProperty
class CfnDataSource_ColumnConfigurationPropertyDef(BaseStruct):
    change_detecting_columns: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='One to five columns that indicate when a document in the database has changed.\n')
    document_data_column_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The column that contains the contents of the document.\n')
    document_id_column_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The column that provides the document's identifier.\n")
    document_title_column_name: typing.Optional[str] = pydantic.Field(None, description='The column that contains the title of the document.\n')
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An array of objects that map database column names to the corresponding fields in an index. You must first create the fields in the index using the `UpdateIndex <https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateIndex.html>`_ operation.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-columnconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    column_configuration_property = kendra.CfnDataSource.ColumnConfigurationProperty(\n        change_detecting_columns=["changeDetectingColumns"],\n        document_data_column_name="documentDataColumnName",\n        document_id_column_name="documentIdColumnName",\n\n        # the properties below are optional\n        document_title_column_name="documentTitleColumnName",\n        field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n            data_source_field_name="dataSourceFieldName",\n            index_field_name="indexFieldName",\n\n            # the properties below are optional\n            date_field_format="dateFieldFormat"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['change_detecting_columns', 'document_data_column_name', 'document_id_column_name', 'document_title_column_name', 'field_mappings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.ColumnConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.ConfluenceAttachmentConfigurationProperty
class CfnDataSource_ConfluenceAttachmentConfigurationPropertyDef(BaseStruct):
    attachment_field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ConfluenceAttachmentToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Maps attributes or field names of Confluence attachments to Amazon Kendra index field names. To create custom fields, use the ``UpdateIndex`` API before you map to Confluence fields. For more information, see `Mapping data source fields <https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html>`_ . The Confluence data source field names must exist in your Confluence custom metadata. If you specify the ``AttachentFieldMappings`` parameter, you must specify at least one field mapping.\n')
    crawl_attachments: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='``TRUE`` to index attachments of pages and blogs in Confluence.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-confluenceattachmentconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    confluence_attachment_configuration_property = kendra.CfnDataSource.ConfluenceAttachmentConfigurationProperty(\n        attachment_field_mappings=[kendra.CfnDataSource.ConfluenceAttachmentToIndexFieldMappingProperty(\n            data_source_field_name="dataSourceFieldName",\n            index_field_name="indexFieldName",\n\n            # the properties below are optional\n            date_field_format="dateFieldFormat"\n        )],\n        crawl_attachments=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['attachment_field_mappings', 'crawl_attachments']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.ConfluenceAttachmentConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.ConfluenceAttachmentToIndexFieldMappingProperty
class CfnDataSource_ConfluenceAttachmentToIndexFieldMappingPropertyDef(BaseStruct):
    data_source_field_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the field in the data source. You must first create the index field using the ``UpdateIndex`` API.\n')
    index_field_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the index field to map to the Confluence data source field. The index field type must match the Confluence field type.\n')
    date_field_format: typing.Optional[str] = pydantic.Field(None, description='The format for date fields in the data source. If the field specified in ``DataSourceFieldName`` is a date field you must specify the date format. If the field is not a date field, an exception is thrown.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-confluenceattachmenttoindexfieldmapping.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    confluence_attachment_to_index_field_mapping_property = kendra.CfnDataSource.ConfluenceAttachmentToIndexFieldMappingProperty(\n        data_source_field_name="dataSourceFieldName",\n        index_field_name="indexFieldName",\n\n        # the properties below are optional\n        date_field_format="dateFieldFormat"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['data_source_field_name', 'index_field_name', 'date_field_format']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.ConfluenceAttachmentToIndexFieldMappingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.ConfluenceBlogConfigurationProperty
class CfnDataSource_ConfluenceBlogConfigurationPropertyDef(BaseStruct):
    blog_field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ConfluenceBlogToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Maps attributes or field names of Confluence blogs to Amazon Kendra index field names. To create custom fields, use the ``UpdateIndex`` API before you map to Confluence fields. For more information, see `Mapping data source fields <https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html>`_ . The Confluence data source field names must exist in your Confluence custom metadata. If you specify the ``BlogFieldMappings`` parameter, you must specify at least one field mapping.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-confluenceblogconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    confluence_blog_configuration_property = kendra.CfnDataSource.ConfluenceBlogConfigurationProperty(\n        blog_field_mappings=[kendra.CfnDataSource.ConfluenceBlogToIndexFieldMappingProperty(\n            data_source_field_name="dataSourceFieldName",\n            index_field_name="indexFieldName",\n\n            # the properties below are optional\n            date_field_format="dateFieldFormat"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['blog_field_mappings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.ConfluenceBlogConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.ConfluenceBlogToIndexFieldMappingProperty
class CfnDataSource_ConfluenceBlogToIndexFieldMappingPropertyDef(BaseStruct):
    data_source_field_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the field in the data source.\n')
    index_field_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the index field to map to the Confluence data source field. The index field type must match the Confluence field type.\n')
    date_field_format: typing.Optional[str] = pydantic.Field(None, description='The format for date fields in the data source. If the field specified in ``DataSourceFieldName`` is a date field you must specify the date format. If the field is not a date field, an exception is thrown.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-confluenceblogtoindexfieldmapping.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    confluence_blog_to_index_field_mapping_property = kendra.CfnDataSource.ConfluenceBlogToIndexFieldMappingProperty(\n        data_source_field_name="dataSourceFieldName",\n        index_field_name="indexFieldName",\n\n        # the properties below are optional\n        date_field_format="dateFieldFormat"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['data_source_field_name', 'index_field_name', 'date_field_format']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.ConfluenceBlogToIndexFieldMappingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.ConfluenceConfigurationProperty
class CfnDataSource_ConfluenceConfigurationPropertyDef(BaseStruct):
    secret_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of an AWS Secrets Manager secret that contains the user name and password required to connect to the Confluence instance. If you use Confluence Cloud, you use a generated API token as the password. You can also provide authentication credentials in the form of a personal access token. For more information, see `Using a Confluence data source <https://docs.aws.amazon.com/kendra/latest/dg/data-source-confluence.html>`_ .\n')
    server_url: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The URL of your Confluence instance. Use the full URL of the server. For example, *https://server.example.com:port/* . You can also use an IP address, for example, *https://192.168.1.113/* .\n')
    version: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The version or the type of Confluence installation to connect to.\n')
    attachment_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ConfluenceAttachmentConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for indexing attachments to Confluence blogs and pages.\n')
    blog_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ConfluenceBlogConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for indexing Confluence blogs.\n')
    exclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="A list of regular expression patterns to exclude certain blog posts, pages, spaces, or attachments in your Confluence. Content that matches the patterns are excluded from the index. Content that doesn't match the patterns is included in the index. If content matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the content isn't included in the index.\n")
    inclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="A list of regular expression patterns to include certain blog posts, pages, spaces, or attachments in your Confluence. Content that matches the patterns are included in the index. Content that doesn't match the patterns is excluded from the index. If content matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the content isn't included in the index.\n")
    page_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ConfluencePageConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for indexing Confluence pages.\n')
    space_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ConfluenceSpaceConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for indexing Confluence spaces.\n')
    vpc_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceVpcConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for an Amazon Virtual Private Cloud to connect to your Confluence. For more information, see `Configuring a VPC <https://docs.aws.amazon.com/kendra/latest/dg/vpc-configuration.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-confluenceconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    confluence_configuration_property = kendra.CfnDataSource.ConfluenceConfigurationProperty(\n        secret_arn="secretArn",\n        server_url="serverUrl",\n        version="version",\n\n        # the properties below are optional\n        attachment_configuration=kendra.CfnDataSource.ConfluenceAttachmentConfigurationProperty(\n            attachment_field_mappings=[kendra.CfnDataSource.ConfluenceAttachmentToIndexFieldMappingProperty(\n                data_source_field_name="dataSourceFieldName",\n                index_field_name="indexFieldName",\n\n                # the properties below are optional\n                date_field_format="dateFieldFormat"\n            )],\n            crawl_attachments=False\n        ),\n        blog_configuration=kendra.CfnDataSource.ConfluenceBlogConfigurationProperty(\n            blog_field_mappings=[kendra.CfnDataSource.ConfluenceBlogToIndexFieldMappingProperty(\n                data_source_field_name="dataSourceFieldName",\n                index_field_name="indexFieldName",\n\n                # the properties below are optional\n                date_field_format="dateFieldFormat"\n            )]\n        ),\n        exclusion_patterns=["exclusionPatterns"],\n        inclusion_patterns=["inclusionPatterns"],\n        page_configuration=kendra.CfnDataSource.ConfluencePageConfigurationProperty(\n            page_field_mappings=[kendra.CfnDataSource.ConfluencePageToIndexFieldMappingProperty(\n                data_source_field_name="dataSourceFieldName",\n                index_field_name="indexFieldName",\n\n                # the properties below are optional\n                date_field_format="dateFieldFormat"\n            )]\n        ),\n        space_configuration=kendra.CfnDataSource.ConfluenceSpaceConfigurationProperty(\n            crawl_archived_spaces=False,\n            crawl_personal_spaces=False,\n            exclude_spaces=["excludeSpaces"],\n            include_spaces=["includeSpaces"],\n            space_field_mappings=[kendra.CfnDataSource.ConfluenceSpaceToIndexFieldMappingProperty(\n                data_source_field_name="dataSourceFieldName",\n                index_field_name="indexFieldName",\n\n                # the properties below are optional\n                date_field_format="dateFieldFormat"\n            )]\n        ),\n        vpc_configuration=kendra.CfnDataSource.DataSourceVpcConfigurationProperty(\n            security_group_ids=["securityGroupIds"],\n            subnet_ids=["subnetIds"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['secret_arn', 'server_url', 'version', 'attachment_configuration', 'blog_configuration', 'exclusion_patterns', 'inclusion_patterns', 'page_configuration', 'space_configuration', 'vpc_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.ConfluenceConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.ConfluencePageConfigurationProperty
class CfnDataSource_ConfluencePageConfigurationPropertyDef(BaseStruct):
    page_field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ConfluencePageToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Maps attributes or field names of Confluence pages to Amazon Kendra index field names. To create custom fields, use the ``UpdateIndex`` API before you map to Confluence fields. For more information, see `Mapping data source fields <https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html>`_ . The Confluence data source field names must exist in your Confluence custom metadata. If you specify the ``PageFieldMappings`` parameter, you must specify at least one field mapping.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-confluencepageconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    confluence_page_configuration_property = kendra.CfnDataSource.ConfluencePageConfigurationProperty(\n        page_field_mappings=[kendra.CfnDataSource.ConfluencePageToIndexFieldMappingProperty(\n            data_source_field_name="dataSourceFieldName",\n            index_field_name="indexFieldName",\n\n            # the properties below are optional\n            date_field_format="dateFieldFormat"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['page_field_mappings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.ConfluencePageConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.ConfluencePageToIndexFieldMappingProperty
class CfnDataSource_ConfluencePageToIndexFieldMappingPropertyDef(BaseStruct):
    data_source_field_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the field in the data source.\n')
    index_field_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the index field to map to the Confluence data source field. The index field type must match the Confluence field type.\n')
    date_field_format: typing.Optional[str] = pydantic.Field(None, description='The format for date fields in the data source. If the field specified in ``DataSourceFieldName`` is a date field you must specify the date format. If the field is not a date field, an exception is thrown.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-confluencepagetoindexfieldmapping.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    confluence_page_to_index_field_mapping_property = kendra.CfnDataSource.ConfluencePageToIndexFieldMappingProperty(\n        data_source_field_name="dataSourceFieldName",\n        index_field_name="indexFieldName",\n\n        # the properties below are optional\n        date_field_format="dateFieldFormat"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['data_source_field_name', 'index_field_name', 'date_field_format']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.ConfluencePageToIndexFieldMappingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.ConfluenceSpaceConfigurationProperty
class CfnDataSource_ConfluenceSpaceConfigurationPropertyDef(BaseStruct):
    crawl_archived_spaces: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='``TRUE`` to index archived spaces.\n')
    crawl_personal_spaces: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='``TRUE`` to index personal spaces. You can add restrictions to items in personal spaces. If personal spaces are indexed, queries without user context information may return restricted items from a personal space in their results. For more information, see `Filtering on user context <https://docs.aws.amazon.com/kendra/latest/dg/user-context-filter.html>`_ .\n')
    exclude_spaces: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of space keys of Confluence spaces. If you include a key, the blogs, documents, and attachments in the space are not indexed. If a space is in both the ``ExcludeSpaces`` and the ``IncludeSpaces`` list, the space is excluded.\n')
    include_spaces: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="A list of space keys for Confluence spaces. If you include a key, the blogs, documents, and attachments in the space are indexed. Spaces that aren't in the list aren't indexed. A space in the list must exist. Otherwise, Amazon Kendra logs an error when the data source is synchronized. If a space is in both the ``IncludeSpaces`` and the ``ExcludeSpaces`` list, the space is excluded.\n")
    space_field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ConfluenceSpaceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Maps attributes or field names of Confluence spaces to Amazon Kendra index field names. To create custom fields, use the ``UpdateIndex`` API before you map to Confluence fields. For more information, see `Mapping data source fields <https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html>`_ . The Confluence data source field names must exist in your Confluence custom metadata. If you specify the ``SpaceFieldMappings`` parameter, you must specify at least one field mapping.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-confluencespaceconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    confluence_space_configuration_property = kendra.CfnDataSource.ConfluenceSpaceConfigurationProperty(\n        crawl_archived_spaces=False,\n        crawl_personal_spaces=False,\n        exclude_spaces=["excludeSpaces"],\n        include_spaces=["includeSpaces"],\n        space_field_mappings=[kendra.CfnDataSource.ConfluenceSpaceToIndexFieldMappingProperty(\n            data_source_field_name="dataSourceFieldName",\n            index_field_name="indexFieldName",\n\n            # the properties below are optional\n            date_field_format="dateFieldFormat"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['crawl_archived_spaces', 'crawl_personal_spaces', 'exclude_spaces', 'include_spaces', 'space_field_mappings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.ConfluenceSpaceConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.ConfluenceSpaceToIndexFieldMappingProperty
class CfnDataSource_ConfluenceSpaceToIndexFieldMappingPropertyDef(BaseStruct):
    data_source_field_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the field in the data source.\n')
    index_field_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the index field to map to the Confluence data source field. The index field type must match the Confluence field type.\n')
    date_field_format: typing.Optional[str] = pydantic.Field(None, description='The format for date fields in the data source. If the field specified in ``DataSourceFieldName`` is a date field you must specify the date format. If the field is not a date field, an exception is thrown.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-confluencespacetoindexfieldmapping.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    confluence_space_to_index_field_mapping_property = kendra.CfnDataSource.ConfluenceSpaceToIndexFieldMappingProperty(\n        data_source_field_name="dataSourceFieldName",\n        index_field_name="indexFieldName",\n\n        # the properties below are optional\n        date_field_format="dateFieldFormat"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['data_source_field_name', 'index_field_name', 'date_field_format']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.ConfluenceSpaceToIndexFieldMappingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.ConnectionConfigurationProperty
class CfnDataSource_ConnectionConfigurationPropertyDef(BaseStruct):
    database_host: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the host for the database. Can be either a string (host.subdomain.domain.tld) or an IPv4 or IPv6 address.\n')
    database_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the database containing the document data.\n')
    database_port: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The port that the database uses for connections.\n')
    secret_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of an AWS Secrets Manager secret that stores the credentials. The credentials should be a user-password pair. For more information, see `Using a Database Data Source <https://docs.aws.amazon.com/kendra/latest/dg/data-source-database.html>`_ . For more information about AWS Secrets Manager , see `What Is AWS Secrets Manager <https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html>`_ in the *AWS Secrets Manager* user guide.\n')
    table_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the table that contains the document data.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-connectionconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    connection_configuration_property = kendra.CfnDataSource.ConnectionConfigurationProperty(\n        database_host="databaseHost",\n        database_name="databaseName",\n        database_port=123,\n        secret_arn="secretArn",\n        table_name="tableName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['database_host', 'database_name', 'database_port', 'secret_arn', 'table_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.ConnectionConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.CustomDocumentEnrichmentConfigurationProperty
class CfnDataSource_CustomDocumentEnrichmentConfigurationPropertyDef(BaseStruct):
    inline_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_InlineCustomDocumentEnrichmentConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Configuration information to alter document attributes or metadata fields and content when ingesting documents into Amazon Kendra.\n')
    post_extraction_hook_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_HookConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for invoking a Lambda function in AWS Lambda on the structured documents with their metadata and text extracted. You can use a Lambda function to apply advanced logic for creating, modifying, or deleting document metadata and content. For more information, see `Advanced data manipulation <https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#advanced-data-manipulation>`_ .\n')
    pre_extraction_hook_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_HookConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for invoking a Lambda function in AWS Lambda on the original or raw documents before extracting their metadata and text. You can use a Lambda function to apply advanced logic for creating, modifying, or deleting document metadata and content. For more information, see `Advanced data manipulation <https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#advanced-data-manipulation>`_ .\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of an IAM role with permission to run ``PreExtractionHookConfiguration`` and ``PostExtractionHookConfiguration`` for altering document metadata and content during the document ingestion process. For more information, see `an IAM roles for Amazon Kendra <https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-customdocumentenrichmentconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    custom_document_enrichment_configuration_property = kendra.CfnDataSource.CustomDocumentEnrichmentConfigurationProperty(\n        inline_configurations=[kendra.CfnDataSource.InlineCustomDocumentEnrichmentConfigurationProperty(\n            condition=kendra.CfnDataSource.DocumentAttributeConditionProperty(\n                condition_document_attribute_key="conditionDocumentAttributeKey",\n                operator="operator",\n\n                # the properties below are optional\n                condition_on_value=kendra.CfnDataSource.DocumentAttributeValueProperty(\n                    date_value="dateValue",\n                    long_value=123,\n                    string_list_value=["stringListValue"],\n                    string_value="stringValue"\n                )\n            ),\n            document_content_deletion=False,\n            target=kendra.CfnDataSource.DocumentAttributeTargetProperty(\n                target_document_attribute_key="targetDocumentAttributeKey",\n\n                # the properties below are optional\n                target_document_attribute_value=kendra.CfnDataSource.DocumentAttributeValueProperty(\n                    date_value="dateValue",\n                    long_value=123,\n                    string_list_value=["stringListValue"],\n                    string_value="stringValue"\n                ),\n                target_document_attribute_value_deletion=False\n            )\n        )],\n        post_extraction_hook_configuration=kendra.CfnDataSource.HookConfigurationProperty(\n            lambda_arn="lambdaArn",\n            s3_bucket="s3Bucket",\n\n            # the properties below are optional\n            invocation_condition=kendra.CfnDataSource.DocumentAttributeConditionProperty(\n                condition_document_attribute_key="conditionDocumentAttributeKey",\n                operator="operator",\n\n                # the properties below are optional\n                condition_on_value=kendra.CfnDataSource.DocumentAttributeValueProperty(\n                    date_value="dateValue",\n                    long_value=123,\n                    string_list_value=["stringListValue"],\n                    string_value="stringValue"\n                )\n            )\n        ),\n        pre_extraction_hook_configuration=kendra.CfnDataSource.HookConfigurationProperty(\n            lambda_arn="lambdaArn",\n            s3_bucket="s3Bucket",\n\n            # the properties below are optional\n            invocation_condition=kendra.CfnDataSource.DocumentAttributeConditionProperty(\n                condition_document_attribute_key="conditionDocumentAttributeKey",\n                operator="operator",\n\n                # the properties below are optional\n                condition_on_value=kendra.CfnDataSource.DocumentAttributeValueProperty(\n                    date_value="dateValue",\n                    long_value=123,\n                    string_list_value=["stringListValue"],\n                    string_value="stringValue"\n                )\n            )\n        ),\n        role_arn="roleArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['inline_configurations', 'post_extraction_hook_configuration', 'pre_extraction_hook_configuration', 'role_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.CustomDocumentEnrichmentConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.DatabaseConfigurationProperty
class CfnDataSource_DatabaseConfigurationPropertyDef(BaseStruct):
    column_configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_kendra.CfnDataSource_ColumnConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Information about where the index should get the document information from the database.\n')
    connection_configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_kendra.CfnDataSource_ConnectionConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description="Configuration information that's required to connect to a database.\n")
    database_engine_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of database engine that runs the database.\n')
    acl_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_AclConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the database column that provides information for user context filtering.\n')
    sql_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_SqlConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides information about how Amazon Kendra uses quote marks around SQL identifiers when querying a database data source.\n')
    vpc_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceVpcConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides information for connecting to an Amazon VPC.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-databaseconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    database_configuration_property = kendra.CfnDataSource.DatabaseConfigurationProperty(\n        column_configuration=kendra.CfnDataSource.ColumnConfigurationProperty(\n            change_detecting_columns=["changeDetectingColumns"],\n            document_data_column_name="documentDataColumnName",\n            document_id_column_name="documentIdColumnName",\n\n            # the properties below are optional\n            document_title_column_name="documentTitleColumnName",\n            field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                data_source_field_name="dataSourceFieldName",\n                index_field_name="indexFieldName",\n\n                # the properties below are optional\n                date_field_format="dateFieldFormat"\n            )]\n        ),\n        connection_configuration=kendra.CfnDataSource.ConnectionConfigurationProperty(\n            database_host="databaseHost",\n            database_name="databaseName",\n            database_port=123,\n            secret_arn="secretArn",\n            table_name="tableName"\n        ),\n        database_engine_type="databaseEngineType",\n\n        # the properties below are optional\n        acl_configuration=kendra.CfnDataSource.AclConfigurationProperty(\n            allowed_groups_column_name="allowedGroupsColumnName"\n        ),\n        sql_configuration=kendra.CfnDataSource.SqlConfigurationProperty(\n            query_identifiers_enclosing_option="queryIdentifiersEnclosingOption"\n        ),\n        vpc_configuration=kendra.CfnDataSource.DataSourceVpcConfigurationProperty(\n            security_group_ids=["securityGroupIds"],\n            subnet_ids=["subnetIds"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['column_configuration', 'connection_configuration', 'database_engine_type', 'acl_configuration', 'sql_configuration', 'vpc_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.DatabaseConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.DataSourceConfigurationProperty
class CfnDataSource_DataSourceConfigurationPropertyDef(BaseStruct):
    confluence_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ConfluenceConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides the configuration information to connect to Confluence as your data source.\n')
    database_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DatabaseConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides the configuration information to connect to a database as your data source.\n')
    google_drive_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_GoogleDriveConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides the configuration information to connect to Google Drive as your data source.\n')
    one_drive_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_OneDriveConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides the configuration information to connect to Microsoft OneDrive as your data source.\n')
    s3_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_S3DataSourceConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Provides the configuration information to connect to an Amazon S3 bucket as your data source. .. epigraph:: Amazon Kendra now supports an upgraded Amazon S3 connector. You must now use the `TemplateConfiguration <https://docs.aws.amazon.com/kendra/latest/APIReference/API_TemplateConfiguration.html>`_ object instead of the ``S3DataSourceConfiguration`` object to configure your connector. Connectors configured using the older console and API architecture will continue to function as configured. However, you won't be able to edit or update them. If you want to edit or update your connector configuration, you must create a new connector. We recommended migrating your connector workflow to the upgraded version. Support for connectors configured using the older architecture is scheduled to end by June 2024.\n")
    salesforce_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_SalesforceConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides the configuration information to connect to Salesforce as your data source.\n')
    service_now_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ServiceNowConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides the configuration information to connect to ServiceNow as your data source.\n')
    share_point_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_SharePointConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides the configuration information to connect to Microsoft SharePoint as your data source.\n')
    template_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_TemplateConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    web_crawler_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_WebCrawlerConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides the configuration information required for Amazon Kendra Web Crawler.\n')
    work_docs_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_WorkDocsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides the configuration information to connect to Amazon WorkDocs as your data source.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-datasourceconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    data_source_configuration_property = kendra.CfnDataSource.DataSourceConfigurationProperty(\n        confluence_configuration=kendra.CfnDataSource.ConfluenceConfigurationProperty(\n            secret_arn="secretArn",\n            server_url="serverUrl",\n            version="version",\n\n            # the properties below are optional\n            attachment_configuration=kendra.CfnDataSource.ConfluenceAttachmentConfigurationProperty(\n                attachment_field_mappings=[kendra.CfnDataSource.ConfluenceAttachmentToIndexFieldMappingProperty(\n                    data_source_field_name="dataSourceFieldName",\n                    index_field_name="indexFieldName",\n\n                    # the properties below are optional\n                    date_field_format="dateFieldFormat"\n                )],\n                crawl_attachments=False\n            ),\n            blog_configuration=kendra.CfnDataSource.ConfluenceBlogConfigurationProperty(\n                blog_field_mappings=[kendra.CfnDataSource.ConfluenceBlogToIndexFieldMappingProperty(\n                    data_source_field_name="dataSourceFieldName",\n                    index_field_name="indexFieldName",\n\n                    # the properties below are optional\n                    date_field_format="dateFieldFormat"\n                )]\n            ),\n            exclusion_patterns=["exclusionPatterns"],\n            inclusion_patterns=["inclusionPatterns"],\n            page_configuration=kendra.CfnDataSource.ConfluencePageConfigurationProperty(\n                page_field_mappings=[kendra.CfnDataSource.ConfluencePageToIndexFieldMappingProperty(\n                    data_source_field_name="dataSourceFieldName",\n                    index_field_name="indexFieldName",\n\n                    # the properties below are optional\n                    date_field_format="dateFieldFormat"\n                )]\n            ),\n            space_configuration=kendra.CfnDataSource.ConfluenceSpaceConfigurationProperty(\n                crawl_archived_spaces=False,\n                crawl_personal_spaces=False,\n                exclude_spaces=["excludeSpaces"],\n                include_spaces=["includeSpaces"],\n                space_field_mappings=[kendra.CfnDataSource.ConfluenceSpaceToIndexFieldMappingProperty(\n                    data_source_field_name="dataSourceFieldName",\n                    index_field_name="indexFieldName",\n\n                    # the properties below are optional\n                    date_field_format="dateFieldFormat"\n                )]\n            ),\n            vpc_configuration=kendra.CfnDataSource.DataSourceVpcConfigurationProperty(\n                security_group_ids=["securityGroupIds"],\n                subnet_ids=["subnetIds"]\n            )\n        ),\n        database_configuration=kendra.CfnDataSource.DatabaseConfigurationProperty(\n            column_configuration=kendra.CfnDataSource.ColumnConfigurationProperty(\n                change_detecting_columns=["changeDetectingColumns"],\n                document_data_column_name="documentDataColumnName",\n                document_id_column_name="documentIdColumnName",\n\n                # the properties below are optional\n                document_title_column_name="documentTitleColumnName",\n                field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                    data_source_field_name="dataSourceFieldName",\n                    index_field_name="indexFieldName",\n\n                    # the properties below are optional\n                    date_field_format="dateFieldFormat"\n                )]\n            ),\n            connection_configuration=kendra.CfnDataSource.ConnectionConfigurationProperty(\n                database_host="databaseHost",\n                database_name="databaseName",\n                database_port=123,\n                secret_arn="secretArn",\n                table_name="tableName"\n            ),\n            database_engine_type="databaseEngineType",\n\n            # the properties below are optional\n            acl_configuration=kendra.CfnDataSource.AclConfigurationProperty(\n                allowed_groups_column_name="allowedGroupsColumnName"\n            ),\n            sql_configuration=kendra.CfnDataSource.SqlConfigurationProperty(\n                query_identifiers_enclosing_option="queryIdentifiersEnclosingOption"\n            ),\n            vpc_configuration=kendra.CfnDataSource.DataSourceVpcConfigurationProperty(\n                security_group_ids=["securityGroupIds"],\n                subnet_ids=["subnetIds"]\n            )\n        ),\n        google_drive_configuration=kendra.CfnDataSource.GoogleDriveConfigurationProperty(\n            secret_arn="secretArn",\n\n            # the properties below are optional\n            exclude_mime_types=["excludeMimeTypes"],\n            exclude_shared_drives=["excludeSharedDrives"],\n            exclude_user_accounts=["excludeUserAccounts"],\n            exclusion_patterns=["exclusionPatterns"],\n            field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                data_source_field_name="dataSourceFieldName",\n                index_field_name="indexFieldName",\n\n                # the properties below are optional\n                date_field_format="dateFieldFormat"\n            )],\n            inclusion_patterns=["inclusionPatterns"]\n        ),\n        one_drive_configuration=kendra.CfnDataSource.OneDriveConfigurationProperty(\n            one_drive_users=kendra.CfnDataSource.OneDriveUsersProperty(\n                one_drive_user_list=["oneDriveUserList"],\n                one_drive_user_s3_path=kendra.CfnDataSource.S3PathProperty(\n                    bucket="bucket",\n                    key="key"\n                )\n            ),\n            secret_arn="secretArn",\n            tenant_domain="tenantDomain",\n\n            # the properties below are optional\n            disable_local_groups=False,\n            exclusion_patterns=["exclusionPatterns"],\n            field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                data_source_field_name="dataSourceFieldName",\n                index_field_name="indexFieldName",\n\n                # the properties below are optional\n                date_field_format="dateFieldFormat"\n            )],\n            inclusion_patterns=["inclusionPatterns"]\n        ),\n        s3_configuration=kendra.CfnDataSource.S3DataSourceConfigurationProperty(\n            bucket_name="bucketName",\n\n            # the properties below are optional\n            access_control_list_configuration=kendra.CfnDataSource.AccessControlListConfigurationProperty(\n                key_path="keyPath"\n            ),\n            documents_metadata_configuration=kendra.CfnDataSource.DocumentsMetadataConfigurationProperty(\n                s3_prefix="s3Prefix"\n            ),\n            exclusion_patterns=["exclusionPatterns"],\n            inclusion_patterns=["inclusionPatterns"],\n            inclusion_prefixes=["inclusionPrefixes"]\n        ),\n        salesforce_configuration=kendra.CfnDataSource.SalesforceConfigurationProperty(\n            secret_arn="secretArn",\n            server_url="serverUrl",\n\n            # the properties below are optional\n            chatter_feed_configuration=kendra.CfnDataSource.SalesforceChatterFeedConfigurationProperty(\n                document_data_field_name="documentDataFieldName",\n\n                # the properties below are optional\n                document_title_field_name="documentTitleFieldName",\n                field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                    data_source_field_name="dataSourceFieldName",\n                    index_field_name="indexFieldName",\n\n                    # the properties below are optional\n                    date_field_format="dateFieldFormat"\n                )],\n                include_filter_types=["includeFilterTypes"]\n            ),\n            crawl_attachments=False,\n            exclude_attachment_file_patterns=["excludeAttachmentFilePatterns"],\n            include_attachment_file_patterns=["includeAttachmentFilePatterns"],\n            knowledge_article_configuration=kendra.CfnDataSource.SalesforceKnowledgeArticleConfigurationProperty(\n                included_states=["includedStates"],\n\n                # the properties below are optional\n                custom_knowledge_article_type_configurations=[kendra.CfnDataSource.SalesforceCustomKnowledgeArticleTypeConfigurationProperty(\n                    document_data_field_name="documentDataFieldName",\n                    name="name",\n\n                    # the properties below are optional\n                    document_title_field_name="documentTitleFieldName",\n                    field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                        data_source_field_name="dataSourceFieldName",\n                        index_field_name="indexFieldName",\n\n                        # the properties below are optional\n                        date_field_format="dateFieldFormat"\n                    )]\n                )],\n                standard_knowledge_article_type_configuration=kendra.CfnDataSource.SalesforceStandardKnowledgeArticleTypeConfigurationProperty(\n                    document_data_field_name="documentDataFieldName",\n\n                    # the properties below are optional\n                    document_title_field_name="documentTitleFieldName",\n                    field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                        data_source_field_name="dataSourceFieldName",\n                        index_field_name="indexFieldName",\n\n                        # the properties below are optional\n                        date_field_format="dateFieldFormat"\n                    )]\n                )\n            ),\n            standard_object_attachment_configuration=kendra.CfnDataSource.SalesforceStandardObjectAttachmentConfigurationProperty(\n                document_title_field_name="documentTitleFieldName",\n                field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                    data_source_field_name="dataSourceFieldName",\n                    index_field_name="indexFieldName",\n\n                    # the properties below are optional\n                    date_field_format="dateFieldFormat"\n                )]\n            ),\n            standard_object_configurations=[kendra.CfnDataSource.SalesforceStandardObjectConfigurationProperty(\n                document_data_field_name="documentDataFieldName",\n                name="name",\n\n                # the properties below are optional\n                document_title_field_name="documentTitleFieldName",\n                field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                    data_source_field_name="dataSourceFieldName",\n                    index_field_name="indexFieldName",\n\n                    # the properties below are optional\n                    date_field_format="dateFieldFormat"\n                )]\n            )]\n        ),\n        service_now_configuration=kendra.CfnDataSource.ServiceNowConfigurationProperty(\n            host_url="hostUrl",\n            secret_arn="secretArn",\n            service_now_build_version="serviceNowBuildVersion",\n\n            # the properties below are optional\n            authentication_type="authenticationType",\n            knowledge_article_configuration=kendra.CfnDataSource.ServiceNowKnowledgeArticleConfigurationProperty(\n                document_data_field_name="documentDataFieldName",\n\n                # the properties below are optional\n                crawl_attachments=False,\n                document_title_field_name="documentTitleFieldName",\n                exclude_attachment_file_patterns=["excludeAttachmentFilePatterns"],\n                field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                    data_source_field_name="dataSourceFieldName",\n                    index_field_name="indexFieldName",\n\n                    # the properties below are optional\n                    date_field_format="dateFieldFormat"\n                )],\n                filter_query="filterQuery",\n                include_attachment_file_patterns=["includeAttachmentFilePatterns"]\n            ),\n            service_catalog_configuration=kendra.CfnDataSource.ServiceNowServiceCatalogConfigurationProperty(\n                document_data_field_name="documentDataFieldName",\n\n                # the properties below are optional\n                crawl_attachments=False,\n                document_title_field_name="documentTitleFieldName",\n                exclude_attachment_file_patterns=["excludeAttachmentFilePatterns"],\n                field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                    data_source_field_name="dataSourceFieldName",\n                    index_field_name="indexFieldName",\n\n                    # the properties below are optional\n                    date_field_format="dateFieldFormat"\n                )],\n                include_attachment_file_patterns=["includeAttachmentFilePatterns"]\n            )\n        ),\n        share_point_configuration=kendra.CfnDataSource.SharePointConfigurationProperty(\n            secret_arn="secretArn",\n            share_point_version="sharePointVersion",\n            urls=["urls"],\n\n            # the properties below are optional\n            crawl_attachments=False,\n            disable_local_groups=False,\n            document_title_field_name="documentTitleFieldName",\n            exclusion_patterns=["exclusionPatterns"],\n            field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                data_source_field_name="dataSourceFieldName",\n                index_field_name="indexFieldName",\n\n                # the properties below are optional\n                date_field_format="dateFieldFormat"\n            )],\n            inclusion_patterns=["inclusionPatterns"],\n            ssl_certificate_s3_path=kendra.CfnDataSource.S3PathProperty(\n                bucket="bucket",\n                key="key"\n            ),\n            use_change_log=False,\n            vpc_configuration=kendra.CfnDataSource.DataSourceVpcConfigurationProperty(\n                security_group_ids=["securityGroupIds"],\n                subnet_ids=["subnetIds"]\n            )\n        ),\n        template_configuration=kendra.CfnDataSource.TemplateConfigurationProperty(\n            template="template"\n        ),\n        web_crawler_configuration=kendra.CfnDataSource.WebCrawlerConfigurationProperty(\n            urls=kendra.CfnDataSource.WebCrawlerUrlsProperty(\n                seed_url_configuration=kendra.CfnDataSource.WebCrawlerSeedUrlConfigurationProperty(\n                    seed_urls=["seedUrls"],\n\n                    # the properties below are optional\n                    web_crawler_mode="webCrawlerMode"\n                ),\n                site_maps_configuration=kendra.CfnDataSource.WebCrawlerSiteMapsConfigurationProperty(\n                    site_maps=["siteMaps"]\n                )\n            ),\n\n            # the properties below are optional\n            authentication_configuration=kendra.CfnDataSource.WebCrawlerAuthenticationConfigurationProperty(\n                basic_authentication=[kendra.CfnDataSource.WebCrawlerBasicAuthenticationProperty(\n                    credentials="credentials",\n                    host="host",\n                    port=123\n                )]\n            ),\n            crawl_depth=123,\n            max_content_size_per_page_in_mega_bytes=123,\n            max_links_per_page=123,\n            max_urls_per_minute_crawl_rate=123,\n            proxy_configuration=kendra.CfnDataSource.ProxyConfigurationProperty(\n                host="host",\n                port=123,\n\n                # the properties below are optional\n                credentials="credentials"\n            ),\n            url_exclusion_patterns=["urlExclusionPatterns"],\n            url_inclusion_patterns=["urlInclusionPatterns"]\n        ),\n        work_docs_configuration=kendra.CfnDataSource.WorkDocsConfigurationProperty(\n            organization_id="organizationId",\n\n            # the properties below are optional\n            crawl_comments=False,\n            exclusion_patterns=["exclusionPatterns"],\n            field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                data_source_field_name="dataSourceFieldName",\n                index_field_name="indexFieldName",\n\n                # the properties below are optional\n                date_field_format="dateFieldFormat"\n            )],\n            inclusion_patterns=["inclusionPatterns"],\n            use_change_log=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['confluence_configuration', 'database_configuration', 'google_drive_configuration', 'one_drive_configuration', 's3_configuration', 'salesforce_configuration', 'service_now_configuration', 'share_point_configuration', 'template_configuration', 'web_crawler_configuration', 'work_docs_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.DataSourceConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty
class CfnDataSource_DataSourceToIndexFieldMappingPropertyDef(BaseStruct):
    data_source_field_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the field in the data source. You must first create the index field using the ``UpdateIndex`` API.\n')
    index_field_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the index field to map to the data source field. The index field type must match the data source field type.\n')
    date_field_format: typing.Optional[str] = pydantic.Field(None, description='The format for date fields in the data source. If the field specified in ``DataSourceFieldName`` is a date field, you must specify the date format. If the field is not a date field, an exception is thrown.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-datasourcetoindexfieldmapping.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    data_source_to_index_field_mapping_property = kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n        data_source_field_name="dataSourceFieldName",\n        index_field_name="indexFieldName",\n\n        # the properties below are optional\n        date_field_format="dateFieldFormat"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['data_source_field_name', 'index_field_name', 'date_field_format']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.DataSourceVpcConfigurationProperty
class CfnDataSource_DataSourceVpcConfigurationPropertyDef(BaseStruct):
    security_group_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of identifiers of security groups within your Amazon VPC. The security groups should enable Amazon Kendra to connect to the data source.\n')
    subnet_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of identifiers for subnets within your Amazon VPC. The subnets should be able to connect to each other in the VPC, and they should have outgoing access to the Internet through a NAT device.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-datasourcevpcconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    data_source_vpc_configuration_property = kendra.CfnDataSource.DataSourceVpcConfigurationProperty(\n        security_group_ids=["securityGroupIds"],\n        subnet_ids=["subnetIds"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['security_group_ids', 'subnet_ids']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.DataSourceVpcConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.DocumentAttributeConditionProperty
class CfnDataSource_DocumentAttributeConditionPropertyDef(BaseStruct):
    condition_document_attribute_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The identifier of the document attribute used for the condition. For example, 'Source_URI' could be an identifier for the attribute or metadata field that contains source URIs associated with the documents. Amazon Kendra currently does not support ``_document_body`` as an attribute key used for the condition.\n")
    operator: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The condition operator. For example, you can use 'Contains' to partially match a string.\n")
    condition_on_value: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DocumentAttributeValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The value used by the operator. For example, you can specify the value \'financial\' for strings in the \'Source_URI\' field that partially match or contain this value.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-documentattributecondition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    document_attribute_condition_property = kendra.CfnDataSource.DocumentAttributeConditionProperty(\n        condition_document_attribute_key="conditionDocumentAttributeKey",\n        operator="operator",\n\n        # the properties below are optional\n        condition_on_value=kendra.CfnDataSource.DocumentAttributeValueProperty(\n            date_value="dateValue",\n            long_value=123,\n            string_list_value=["stringListValue"],\n            string_value="stringValue"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['condition_document_attribute_key', 'operator', 'condition_on_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.DocumentAttributeConditionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.DocumentAttributeTargetProperty
class CfnDataSource_DocumentAttributeTargetPropertyDef(BaseStruct):
    target_document_attribute_key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The identifier of the target document attribute or metadata field. For example, 'Department' could be an identifier for the target attribute or metadata field that includes the department names associated with the documents.\n")
    target_document_attribute_value: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DocumentAttributeValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The target value you want to create for the target attribute. For example, 'Finance' could be the target value for the target attribute key 'Department'.\n")
    target_document_attribute_value_deletion: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='``TRUE`` to delete the existing target value for your specified target attribute key. You cannot create a target value and set this to ``TRUE`` . To create a target value ( ``TargetDocumentAttributeValue`` ), set this to ``FALSE`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-documentattributetarget.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    document_attribute_target_property = kendra.CfnDataSource.DocumentAttributeTargetProperty(\n        target_document_attribute_key="targetDocumentAttributeKey",\n\n        # the properties below are optional\n        target_document_attribute_value=kendra.CfnDataSource.DocumentAttributeValueProperty(\n            date_value="dateValue",\n            long_value=123,\n            string_list_value=["stringListValue"],\n            string_value="stringValue"\n        ),\n        target_document_attribute_value_deletion=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['target_document_attribute_key', 'target_document_attribute_value', 'target_document_attribute_value_deletion']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.DocumentAttributeTargetProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.DocumentAttributeValueProperty
class CfnDataSource_DocumentAttributeValuePropertyDef(BaseStruct):
    date_value: typing.Optional[str] = pydantic.Field(None, description='A date expressed as an ISO 8601 string. It is important for the time zone to be included in the ISO 8601 date-time format. For example, 2012-03-25T12:30:10+01:00 is the ISO 8601 date-time format for March 25th 2012 at 12:30PM (plus 10 seconds) in Central European Time.\n')
    long_value: typing.Union[int, float, None] = pydantic.Field(None, description='A long integer value.\n')
    string_list_value: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of strings. The default maximum length or number of strings is 10.\n')
    string_value: typing.Optional[str] = pydantic.Field(None, description='A string, such as "department".\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-documentattributevalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    document_attribute_value_property = kendra.CfnDataSource.DocumentAttributeValueProperty(\n        date_value="dateValue",\n        long_value=123,\n        string_list_value=["stringListValue"],\n        string_value="stringValue"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['date_value', 'long_value', 'string_list_value', 'string_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.DocumentAttributeValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.DocumentsMetadataConfigurationProperty
class CfnDataSource_DocumentsMetadataConfigurationPropertyDef(BaseStruct):
    s3_prefix: typing.Optional[str] = pydantic.Field(None, description='A prefix used to filter metadata configuration files in the AWS S3 bucket. The S3 bucket might contain multiple metadata files. Use ``S3Prefix`` to include only the desired metadata files.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-documentsmetadataconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    documents_metadata_configuration_property = kendra.CfnDataSource.DocumentsMetadataConfigurationProperty(\n        s3_prefix="s3Prefix"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_prefix']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.DocumentsMetadataConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.GoogleDriveConfigurationProperty
class CfnDataSource_GoogleDriveConfigurationPropertyDef(BaseStruct):
    secret_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of a AWS Secrets Manager secret that contains the credentials required to connect to Google Drive. For more information, see `Using a Google Workspace Drive data source <https://docs.aws.amazon.com/kendra/latest/dg/data-source-google-drive.html>`_ .\n')
    exclude_mime_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of MIME types to exclude from the index. All documents matching the specified MIME type are excluded. For a list of MIME types, see `Using a Google Workspace Drive data source <https://docs.aws.amazon.com/kendra/latest/dg/data-source-google-drive.html>`_ .\n')
    exclude_shared_drives: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of identifiers or shared drives to exclude from the index. All files and folders stored on the shared drive are excluded.\n')
    exclude_user_accounts: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of email addresses of the users. Documents owned by these users are excluded from the index. Documents shared with excluded users are indexed unless they are excluded in another way.\n')
    exclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="A list of regular expression patterns to exclude certain items in your Google Drive, including shared drives and users' My Drives. Items that match the patterns are excluded from the index. Items that don't match the patterns are included in the index. If an item matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the item isn't included in the index.\n")
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Maps Google Drive data source attributes or field names to Amazon Kendra index field names. To create custom fields, use the ``UpdateIndex`` API before you map to Google Drive fields. For more information, see `Mapping data source fields <https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html>`_ . The Google Drive data source field names must exist in your Google Drive custom metadata.\n')
    inclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of regular expression patterns to include certain items in your Google Drive, including shared drives and users\' My Drives. Items that match the patterns are included in the index. Items that don\'t match the patterns are excluded from the index. If an item matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the item isn\'t included in the index.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-googledriveconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    google_drive_configuration_property = kendra.CfnDataSource.GoogleDriveConfigurationProperty(\n        secret_arn="secretArn",\n\n        # the properties below are optional\n        exclude_mime_types=["excludeMimeTypes"],\n        exclude_shared_drives=["excludeSharedDrives"],\n        exclude_user_accounts=["excludeUserAccounts"],\n        exclusion_patterns=["exclusionPatterns"],\n        field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n            data_source_field_name="dataSourceFieldName",\n            index_field_name="indexFieldName",\n\n            # the properties below are optional\n            date_field_format="dateFieldFormat"\n        )],\n        inclusion_patterns=["inclusionPatterns"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['secret_arn', 'exclude_mime_types', 'exclude_shared_drives', 'exclude_user_accounts', 'exclusion_patterns', 'field_mappings', 'inclusion_patterns']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.GoogleDriveConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.HookConfigurationProperty
class CfnDataSource_HookConfigurationPropertyDef(BaseStruct):
    lambda_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of an IAM role with permission to run a Lambda function during ingestion. For more information, see `an IAM roles for Amazon Kendra <https://docs.aws.amazon.com/kendra/latest/dg/iam-roles.html>`_ .\n')
    s3_bucket: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Stores the original, raw documents or the structured, parsed documents before and after altering them. For more information, see `Data contracts for Lambda functions <https://docs.aws.amazon.com/kendra/latest/dg/custom-document-enrichment.html#cde-data-contracts-lambda>`_ .\n')
    invocation_condition: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DocumentAttributeConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The condition used for when a Lambda function should be invoked. For example, you can specify a condition that if there are empty date-time values, then Amazon Kendra should invoke a function that inserts the current date-time.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-hookconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    hook_configuration_property = kendra.CfnDataSource.HookConfigurationProperty(\n        lambda_arn="lambdaArn",\n        s3_bucket="s3Bucket",\n\n        # the properties below are optional\n        invocation_condition=kendra.CfnDataSource.DocumentAttributeConditionProperty(\n            condition_document_attribute_key="conditionDocumentAttributeKey",\n            operator="operator",\n\n            # the properties below are optional\n            condition_on_value=kendra.CfnDataSource.DocumentAttributeValueProperty(\n                date_value="dateValue",\n                long_value=123,\n                string_list_value=["stringListValue"],\n                string_value="stringValue"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['lambda_arn', 's3_bucket', 'invocation_condition']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.HookConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.InlineCustomDocumentEnrichmentConfigurationProperty
class CfnDataSource_InlineCustomDocumentEnrichmentConfigurationPropertyDef(BaseStruct):
    condition: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DocumentAttributeConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration of the condition used for the target document attribute or metadata field when ingesting documents into Amazon Kendra.\n')
    document_content_deletion: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='``TRUE`` to delete content if the condition used for the target attribute is met.\n')
    target: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DocumentAttributeTargetPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration of the target document attribute or metadata field when ingesting documents into Amazon Kendra. You can also include a value.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-inlinecustomdocumentenrichmentconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    inline_custom_document_enrichment_configuration_property = kendra.CfnDataSource.InlineCustomDocumentEnrichmentConfigurationProperty(\n        condition=kendra.CfnDataSource.DocumentAttributeConditionProperty(\n            condition_document_attribute_key="conditionDocumentAttributeKey",\n            operator="operator",\n\n            # the properties below are optional\n            condition_on_value=kendra.CfnDataSource.DocumentAttributeValueProperty(\n                date_value="dateValue",\n                long_value=123,\n                string_list_value=["stringListValue"],\n                string_value="stringValue"\n            )\n        ),\n        document_content_deletion=False,\n        target=kendra.CfnDataSource.DocumentAttributeTargetProperty(\n            target_document_attribute_key="targetDocumentAttributeKey",\n\n            # the properties below are optional\n            target_document_attribute_value=kendra.CfnDataSource.DocumentAttributeValueProperty(\n                date_value="dateValue",\n                long_value=123,\n                string_list_value=["stringListValue"],\n                string_value="stringValue"\n            ),\n            target_document_attribute_value_deletion=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['condition', 'document_content_deletion', 'target']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.InlineCustomDocumentEnrichmentConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.OneDriveConfigurationProperty
class CfnDataSource_OneDriveConfigurationPropertyDef(BaseStruct):
    one_drive_users: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_kendra.CfnDataSource_OneDriveUsersPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='A list of user accounts whose documents should be indexed.\n')
    secret_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of an AWS Secrets Manager secret that contains the user name and password to connect to OneDrive. The user name should be the application ID for the OneDrive application, and the password is the application key for the OneDrive application.\n')
    tenant_domain: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Azure Active Directory domain of the organization.\n')
    disable_local_groups: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='``TRUE`` to disable local groups information.\n')
    exclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="A list of regular expression patterns to exclude certain documents in your OneDrive. Documents that match the patterns are excluded from the index. Documents that don't match the patterns are included in the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index. The pattern is applied to the file name.\n")
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of ``DataSourceToIndexFieldMapping`` objects that map OneDrive data source attributes or field names to Amazon Kendra index field names. To create custom fields, use the ``UpdateIndex`` API before you map to OneDrive fields. For more information, see `Mapping data source fields <https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html>`_ . The OneDrive data source field names must exist in your OneDrive custom metadata.\n')
    inclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of regular expression patterns to include certain documents in your OneDrive. Documents that match the patterns are included in the index. Documents that don\'t match the patterns are excluded from the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn\'t included in the index. The pattern is applied to the file name.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-onedriveconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    one_drive_configuration_property = kendra.CfnDataSource.OneDriveConfigurationProperty(\n        one_drive_users=kendra.CfnDataSource.OneDriveUsersProperty(\n            one_drive_user_list=["oneDriveUserList"],\n            one_drive_user_s3_path=kendra.CfnDataSource.S3PathProperty(\n                bucket="bucket",\n                key="key"\n            )\n        ),\n        secret_arn="secretArn",\n        tenant_domain="tenantDomain",\n\n        # the properties below are optional\n        disable_local_groups=False,\n        exclusion_patterns=["exclusionPatterns"],\n        field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n            data_source_field_name="dataSourceFieldName",\n            index_field_name="indexFieldName",\n\n            # the properties below are optional\n            date_field_format="dateFieldFormat"\n        )],\n        inclusion_patterns=["inclusionPatterns"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['one_drive_users', 'secret_arn', 'tenant_domain', 'disable_local_groups', 'exclusion_patterns', 'field_mappings', 'inclusion_patterns']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.OneDriveConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.OneDriveUsersProperty
class CfnDataSource_OneDriveUsersPropertyDef(BaseStruct):
    one_drive_user_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of users whose documents should be indexed. Specify the user names in email format, for example, ``username@tenantdomain`` . If you need to index the documents of more than 10 users, use the ``OneDriveUserS3Path`` field to specify the location of a file containing a list of users.\n')
    one_drive_user_s3_path: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_S3PathPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The S3 bucket location of a file containing a list of users whose documents should be indexed.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-onedriveusers.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    one_drive_users_property = kendra.CfnDataSource.OneDriveUsersProperty(\n        one_drive_user_list=["oneDriveUserList"],\n        one_drive_user_s3_path=kendra.CfnDataSource.S3PathProperty(\n            bucket="bucket",\n            key="key"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['one_drive_user_list', 'one_drive_user_s3_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.OneDriveUsersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.ProxyConfigurationProperty
class CfnDataSource_ProxyConfigurationPropertyDef(BaseStruct):
    host: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the website host you want to connect to via a web proxy server. For example, the host name of https://a.example.com/page1.html is "a.example.com".\n')
    port: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The port number of the website host you want to connect to via a web proxy server. For example, the port for https://a.example.com/page1.html is 443, the standard port for HTTPS.\n')
    credentials: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of an AWS Secrets Manager secret. You create a secret to store your credentials in `AWS Secrets Manager <https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html>`_ The credentials are optional. You use a secret if web proxy credentials are required to connect to a website host. Amazon Kendra currently support basic authentication to connect to a web proxy server. The secret stores your credentials.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-proxyconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    proxy_configuration_property = kendra.CfnDataSource.ProxyConfigurationProperty(\n        host="host",\n        port=123,\n\n        # the properties below are optional\n        credentials="credentials"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['host', 'port', 'credentials']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.ProxyConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.S3DataSourceConfigurationProperty
class CfnDataSource_S3DataSourceConfigurationPropertyDef(BaseStruct):
    bucket_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the bucket that contains the documents.\n')
    access_control_list_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_AccessControlListConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides the path to the S3 bucket that contains the user context filtering files for the data source. For the format of the file, see `Access control for S3 data sources <https://docs.aws.amazon.com/kendra/latest/dg/s3-acl.html>`_ .\n')
    documents_metadata_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DocumentsMetadataConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies document metadata files that contain information such as the document access control information, source URI, document author, and custom attributes. Each metadata file contains metadata about a single document.\n')
    exclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="A list of glob patterns (patterns that can expand a wildcard pattern into a list of path names that match the given pattern) for certain file names and file types to exclude from your index. If a document matches both an inclusion and exclusion prefix or pattern, the exclusion prefix takes precendence and the document is not indexed. Examples of glob patterns include: - - /myapp/config/** —All files inside config directory. - *** /*.png* —All .png files in all directories. - *** /*.{png, ico, md}* —All .png, .ico or .md files in all directories. - - /myapp/src/** /*.ts* —All .ts files inside src directory (and all its subdirectories). - *** /!(*.module).ts* —All .ts files but not .module.ts - **.png , *.jpg* —All PNG and JPEG image files in a directory (files with the extensions .png and .jpg). - **internal** —All files in a directory that contain 'internal' in the file name, such as 'internal', 'internal_only', 'company_internal'. - *** /*internal** —All internal-related files in a directory and its subdirectories. For more examples, see `Use of Exclude and Include Filters <https://docs.aws.amazon.com/cli/latest/reference/s3/#use-of-exclude-and-include-filters>`_ in the AWS CLI Command Reference.\n")
    inclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="A list of glob patterns (patterns that can expand a wildcard pattern into a list of path names that match the given pattern) for certain file names and file types to include in your index. If a document matches both an inclusion and exclusion prefix or pattern, the exclusion prefix takes precendence and the document is not indexed. Examples of glob patterns include: - - /myapp/config/** —All files inside config directory. - *** /*.png* —All .png files in all directories. - *** /*.{png, ico, md}* —All .png, .ico or .md files in all directories. - - /myapp/src/** /*.ts* —All .ts files inside src directory (and all its subdirectories). - *** /!(*.module).ts* —All .ts files but not .module.ts - **.png , *.jpg* —All PNG and JPEG image files in a directory (files with the extensions .png and .jpg). - **internal** —All files in a directory that contain 'internal' in the file name, such as 'internal', 'internal_only', 'company_internal'. - *** /*internal** —All internal-related files in a directory and its subdirectories. For more examples, see `Use of Exclude and Include Filters <https://docs.aws.amazon.com/cli/latest/reference/s3/#use-of-exclude-and-include-filters>`_ in the AWS CLI Command Reference.\n")
    inclusion_prefixes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of S3 prefixes for the documents that should be included in the index.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-s3datasourceconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    s3_data_source_configuration_property = kendra.CfnDataSource.S3DataSourceConfigurationProperty(\n        bucket_name="bucketName",\n\n        # the properties below are optional\n        access_control_list_configuration=kendra.CfnDataSource.AccessControlListConfigurationProperty(\n            key_path="keyPath"\n        ),\n        documents_metadata_configuration=kendra.CfnDataSource.DocumentsMetadataConfigurationProperty(\n            s3_prefix="s3Prefix"\n        ),\n        exclusion_patterns=["exclusionPatterns"],\n        inclusion_patterns=["inclusionPatterns"],\n        inclusion_prefixes=["inclusionPrefixes"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket_name', 'access_control_list_configuration', 'documents_metadata_configuration', 'exclusion_patterns', 'inclusion_patterns', 'inclusion_prefixes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.S3DataSourceConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.S3PathProperty
class CfnDataSource_S3PathPropertyDef(BaseStruct):
    bucket: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the S3 bucket that contains the file.\n')
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the file.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-s3path.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    s3_path_property = kendra.CfnDataSource.S3PathProperty(\n        bucket="bucket",\n        key="key"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket', 'key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.S3PathProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.SalesforceChatterFeedConfigurationProperty
class CfnDataSource_SalesforceChatterFeedConfigurationPropertyDef(BaseStruct):
    document_data_field_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the column in the Salesforce FeedItem table that contains the content to index. Typically this is the ``Body`` column.\n')
    document_title_field_name: typing.Optional[str] = pydantic.Field(None, description='The name of the column in the Salesforce FeedItem table that contains the title of the document. This is typically the ``Title`` column.\n')
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Maps fields from a Salesforce chatter feed into Amazon Kendra index fields.\n')
    include_filter_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Filters the documents in the feed based on status of the user. When you specify ``ACTIVE_USERS`` only documents from users who have an active account are indexed. When you specify ``STANDARD_USER`` only documents for Salesforce standard users are documented. You can specify both.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-salesforcechatterfeedconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    salesforce_chatter_feed_configuration_property = kendra.CfnDataSource.SalesforceChatterFeedConfigurationProperty(\n        document_data_field_name="documentDataFieldName",\n\n        # the properties below are optional\n        document_title_field_name="documentTitleFieldName",\n        field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n            data_source_field_name="dataSourceFieldName",\n            index_field_name="indexFieldName",\n\n            # the properties below are optional\n            date_field_format="dateFieldFormat"\n        )],\n        include_filter_types=["includeFilterTypes"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['document_data_field_name', 'document_title_field_name', 'field_mappings', 'include_filter_types']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.SalesforceChatterFeedConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.SalesforceConfigurationProperty
class CfnDataSource_SalesforceConfigurationPropertyDef(BaseStruct):
    secret_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of an AWS Secrets Manager secret that contains the key/value pairs required to connect to your Salesforce instance. The secret must contain a JSON structure with the following keys: - authenticationUrl - The OAUTH endpoint that Amazon Kendra connects to get an OAUTH token. - consumerKey - The application public key generated when you created your Salesforce application. - consumerSecret - The application private key generated when you created your Salesforce application. - password - The password associated with the user logging in to the Salesforce instance. - securityToken - The token associated with the user logging in to the Salesforce instance. - username - The user name of the user logging in to the Salesforce instance.\n')
    server_url: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The instance URL for the Salesforce site that you want to index.\n')
    chatter_feed_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_SalesforceChatterFeedConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for Salesforce chatter feeds.\n')
    crawl_attachments: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates whether Amazon Kendra should index attachments to Salesforce objects.\n')
    exclude_attachment_file_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="A list of regular expression patterns to exclude certain documents in your Salesforce. Documents that match the patterns are excluded from the index. Documents that don't match the patterns are included in the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index. The pattern is applied to the name of the attached file.\n")
    include_attachment_file_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="A list of regular expression patterns to include certain documents in your Salesforce. Documents that match the patterns are included in the index. Documents that don't match the patterns are excluded from the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index. The pattern is applied to the name of the attached file.\n")
    knowledge_article_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_SalesforceKnowledgeArticleConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for the knowledge article types that Amazon Kendra indexes. Amazon Kendra indexes standard knowledge articles and the standard fields of knowledge articles, or the custom fields of custom knowledge articles, but not both.\n')
    standard_object_attachment_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_SalesforceStandardObjectAttachmentConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for processing attachments to Salesforce standard objects.\n')
    standard_object_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_SalesforceStandardObjectConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Configuration of the Salesforce standard objects that Amazon Kendra indexes.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-salesforceconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    salesforce_configuration_property = kendra.CfnDataSource.SalesforceConfigurationProperty(\n        secret_arn="secretArn",\n        server_url="serverUrl",\n\n        # the properties below are optional\n        chatter_feed_configuration=kendra.CfnDataSource.SalesforceChatterFeedConfigurationProperty(\n            document_data_field_name="documentDataFieldName",\n\n            # the properties below are optional\n            document_title_field_name="documentTitleFieldName",\n            field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                data_source_field_name="dataSourceFieldName",\n                index_field_name="indexFieldName",\n\n                # the properties below are optional\n                date_field_format="dateFieldFormat"\n            )],\n            include_filter_types=["includeFilterTypes"]\n        ),\n        crawl_attachments=False,\n        exclude_attachment_file_patterns=["excludeAttachmentFilePatterns"],\n        include_attachment_file_patterns=["includeAttachmentFilePatterns"],\n        knowledge_article_configuration=kendra.CfnDataSource.SalesforceKnowledgeArticleConfigurationProperty(\n            included_states=["includedStates"],\n\n            # the properties below are optional\n            custom_knowledge_article_type_configurations=[kendra.CfnDataSource.SalesforceCustomKnowledgeArticleTypeConfigurationProperty(\n                document_data_field_name="documentDataFieldName",\n                name="name",\n\n                # the properties below are optional\n                document_title_field_name="documentTitleFieldName",\n                field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                    data_source_field_name="dataSourceFieldName",\n                    index_field_name="indexFieldName",\n\n                    # the properties below are optional\n                    date_field_format="dateFieldFormat"\n                )]\n            )],\n            standard_knowledge_article_type_configuration=kendra.CfnDataSource.SalesforceStandardKnowledgeArticleTypeConfigurationProperty(\n                document_data_field_name="documentDataFieldName",\n\n                # the properties below are optional\n                document_title_field_name="documentTitleFieldName",\n                field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                    data_source_field_name="dataSourceFieldName",\n                    index_field_name="indexFieldName",\n\n                    # the properties below are optional\n                    date_field_format="dateFieldFormat"\n                )]\n            )\n        ),\n        standard_object_attachment_configuration=kendra.CfnDataSource.SalesforceStandardObjectAttachmentConfigurationProperty(\n            document_title_field_name="documentTitleFieldName",\n            field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                data_source_field_name="dataSourceFieldName",\n                index_field_name="indexFieldName",\n\n                # the properties below are optional\n                date_field_format="dateFieldFormat"\n            )]\n        ),\n        standard_object_configurations=[kendra.CfnDataSource.SalesforceStandardObjectConfigurationProperty(\n            document_data_field_name="documentDataFieldName",\n            name="name",\n\n            # the properties below are optional\n            document_title_field_name="documentTitleFieldName",\n            field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                data_source_field_name="dataSourceFieldName",\n                index_field_name="indexFieldName",\n\n                # the properties below are optional\n                date_field_format="dateFieldFormat"\n            )]\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['secret_arn', 'server_url', 'chatter_feed_configuration', 'crawl_attachments', 'exclude_attachment_file_patterns', 'include_attachment_file_patterns', 'knowledge_article_configuration', 'standard_object_attachment_configuration', 'standard_object_configurations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.SalesforceConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.SalesforceCustomKnowledgeArticleTypeConfigurationProperty
class CfnDataSource_SalesforceCustomKnowledgeArticleTypeConfigurationPropertyDef(BaseStruct):
    document_data_field_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the field in the custom knowledge article that contains the document data to index.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the configuration.\n')
    document_title_field_name: typing.Optional[str] = pydantic.Field(None, description='The name of the field in the custom knowledge article that contains the document title.\n')
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Maps attributes or field names of the custom knowledge article to Amazon Kendra index field names. To create custom fields, use the ``UpdateIndex`` API before you map to Salesforce fields. For more information, see `Mapping data source fields <https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html>`_ . The Salesforce data source field names must exist in your Salesforce custom metadata.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-salesforcecustomknowledgearticletypeconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    salesforce_custom_knowledge_article_type_configuration_property = kendra.CfnDataSource.SalesforceCustomKnowledgeArticleTypeConfigurationProperty(\n        document_data_field_name="documentDataFieldName",\n        name="name",\n\n        # the properties below are optional\n        document_title_field_name="documentTitleFieldName",\n        field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n            data_source_field_name="dataSourceFieldName",\n            index_field_name="indexFieldName",\n\n            # the properties below are optional\n            date_field_format="dateFieldFormat"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['document_data_field_name', 'name', 'document_title_field_name', 'field_mappings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.SalesforceCustomKnowledgeArticleTypeConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.SalesforceKnowledgeArticleConfigurationProperty
class CfnDataSource_SalesforceKnowledgeArticleConfigurationPropertyDef(BaseStruct):
    included_states: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the document states that should be included when Amazon Kendra indexes knowledge articles. You must specify at least one state.\n')
    custom_knowledge_article_type_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_SalesforceCustomKnowledgeArticleTypeConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Configuration information for custom Salesforce knowledge articles.\n')
    standard_knowledge_article_type_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_SalesforceStandardKnowledgeArticleTypeConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for standard Salesforce knowledge articles.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-salesforceknowledgearticleconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    salesforce_knowledge_article_configuration_property = kendra.CfnDataSource.SalesforceKnowledgeArticleConfigurationProperty(\n        included_states=["includedStates"],\n\n        # the properties below are optional\n        custom_knowledge_article_type_configurations=[kendra.CfnDataSource.SalesforceCustomKnowledgeArticleTypeConfigurationProperty(\n            document_data_field_name="documentDataFieldName",\n            name="name",\n\n            # the properties below are optional\n            document_title_field_name="documentTitleFieldName",\n            field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                data_source_field_name="dataSourceFieldName",\n                index_field_name="indexFieldName",\n\n                # the properties below are optional\n                date_field_format="dateFieldFormat"\n            )]\n        )],\n        standard_knowledge_article_type_configuration=kendra.CfnDataSource.SalesforceStandardKnowledgeArticleTypeConfigurationProperty(\n            document_data_field_name="documentDataFieldName",\n\n            # the properties below are optional\n            document_title_field_name="documentTitleFieldName",\n            field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                data_source_field_name="dataSourceFieldName",\n                index_field_name="indexFieldName",\n\n                # the properties below are optional\n                date_field_format="dateFieldFormat"\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['included_states', 'custom_knowledge_article_type_configurations', 'standard_knowledge_article_type_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.SalesforceKnowledgeArticleConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.SalesforceStandardKnowledgeArticleTypeConfigurationProperty
class CfnDataSource_SalesforceStandardKnowledgeArticleTypeConfigurationPropertyDef(BaseStruct):
    document_data_field_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the field that contains the document data to index.\n')
    document_title_field_name: typing.Optional[str] = pydantic.Field(None, description='The name of the field that contains the document title.\n')
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Maps attributes or field names of the knowledge article to Amazon Kendra index field names. To create custom fields, use the ``UpdateIndex`` API before you map to Salesforce fields. For more information, see `Mapping data source fields <https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html>`_ . The Salesforce data source field names must exist in your Salesforce custom metadata.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-salesforcestandardknowledgearticletypeconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    salesforce_standard_knowledge_article_type_configuration_property = kendra.CfnDataSource.SalesforceStandardKnowledgeArticleTypeConfigurationProperty(\n        document_data_field_name="documentDataFieldName",\n\n        # the properties below are optional\n        document_title_field_name="documentTitleFieldName",\n        field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n            data_source_field_name="dataSourceFieldName",\n            index_field_name="indexFieldName",\n\n            # the properties below are optional\n            date_field_format="dateFieldFormat"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['document_data_field_name', 'document_title_field_name', 'field_mappings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.SalesforceStandardKnowledgeArticleTypeConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.SalesforceStandardObjectAttachmentConfigurationProperty
class CfnDataSource_SalesforceStandardObjectAttachmentConfigurationPropertyDef(BaseStruct):
    document_title_field_name: typing.Optional[str] = pydantic.Field(None, description='The name of the field used for the document title.\n')
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='One or more objects that map fields in attachments to Amazon Kendra index fields.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-salesforcestandardobjectattachmentconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    salesforce_standard_object_attachment_configuration_property = kendra.CfnDataSource.SalesforceStandardObjectAttachmentConfigurationProperty(\n        document_title_field_name="documentTitleFieldName",\n        field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n            data_source_field_name="dataSourceFieldName",\n            index_field_name="indexFieldName",\n\n            # the properties below are optional\n            date_field_format="dateFieldFormat"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['document_title_field_name', 'field_mappings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.SalesforceStandardObjectAttachmentConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.SalesforceStandardObjectConfigurationProperty
class CfnDataSource_SalesforceStandardObjectConfigurationPropertyDef(BaseStruct):
    document_data_field_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the field in the standard object table that contains the document contents.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the standard object.\n')
    document_title_field_name: typing.Optional[str] = pydantic.Field(None, description='The name of the field in the standard object table that contains the document title.\n')
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Maps attributes or field names of the standard object to Amazon Kendra index field names. To create custom fields, use the ``UpdateIndex`` API before you map to Salesforce fields. For more information, see `Mapping data source fields <https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html>`_ . The Salesforce data source field names must exist in your Salesforce custom metadata.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-salesforcestandardobjectconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    salesforce_standard_object_configuration_property = kendra.CfnDataSource.SalesforceStandardObjectConfigurationProperty(\n        document_data_field_name="documentDataFieldName",\n        name="name",\n\n        # the properties below are optional\n        document_title_field_name="documentTitleFieldName",\n        field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n            data_source_field_name="dataSourceFieldName",\n            index_field_name="indexFieldName",\n\n            # the properties below are optional\n            date_field_format="dateFieldFormat"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['document_data_field_name', 'name', 'document_title_field_name', 'field_mappings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.SalesforceStandardObjectConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.ServiceNowConfigurationProperty
class CfnDataSource_ServiceNowConfigurationPropertyDef(BaseStruct):
    host_url: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ServiceNow instance that the data source connects to. The host endpoint should look like the following: *{instance}.service-now.com.*\n')
    secret_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the user name and password required to connect to the ServiceNow instance. You can also provide OAuth authentication credentials of user name, password, client ID, and client secret. For more information, see `Using a ServiceNow data source <https://docs.aws.amazon.com/kendra/latest/dg/data-source-servicenow.html>`_ .\n')
    service_now_build_version: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the release that the ServiceNow host is running. If the host is not running the ``LONDON`` release, use ``OTHERS`` .\n')
    authentication_type: typing.Optional[str] = pydantic.Field(None, description='The type of authentication used to connect to the ServiceNow instance. If you choose ``HTTP_BASIC`` , Amazon Kendra is authenticated using the user name and password provided in the AWS Secrets Manager secret in the ``SecretArn`` field. If you choose ``OAUTH2`` , Amazon Kendra is authenticated using the credentials of client ID, client secret, user name and password. When you use ``OAUTH2`` authentication, you must generate a token and a client secret using the ServiceNow console. For more information, see `Using a ServiceNow data source <https://docs.aws.amazon.com/kendra/latest/dg/data-source-servicenow.html>`_ .\n')
    knowledge_article_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ServiceNowKnowledgeArticleConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for crawling knowledge articles in the ServiceNow site.\n')
    service_catalog_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ServiceNowServiceCatalogConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for crawling service catalogs in the ServiceNow site.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-servicenowconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    service_now_configuration_property = kendra.CfnDataSource.ServiceNowConfigurationProperty(\n        host_url="hostUrl",\n        secret_arn="secretArn",\n        service_now_build_version="serviceNowBuildVersion",\n\n        # the properties below are optional\n        authentication_type="authenticationType",\n        knowledge_article_configuration=kendra.CfnDataSource.ServiceNowKnowledgeArticleConfigurationProperty(\n            document_data_field_name="documentDataFieldName",\n\n            # the properties below are optional\n            crawl_attachments=False,\n            document_title_field_name="documentTitleFieldName",\n            exclude_attachment_file_patterns=["excludeAttachmentFilePatterns"],\n            field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                data_source_field_name="dataSourceFieldName",\n                index_field_name="indexFieldName",\n\n                # the properties below are optional\n                date_field_format="dateFieldFormat"\n            )],\n            filter_query="filterQuery",\n            include_attachment_file_patterns=["includeAttachmentFilePatterns"]\n        ),\n        service_catalog_configuration=kendra.CfnDataSource.ServiceNowServiceCatalogConfigurationProperty(\n            document_data_field_name="documentDataFieldName",\n\n            # the properties below are optional\n            crawl_attachments=False,\n            document_title_field_name="documentTitleFieldName",\n            exclude_attachment_file_patterns=["excludeAttachmentFilePatterns"],\n            field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                data_source_field_name="dataSourceFieldName",\n                index_field_name="indexFieldName",\n\n                # the properties below are optional\n                date_field_format="dateFieldFormat"\n            )],\n            include_attachment_file_patterns=["includeAttachmentFilePatterns"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['host_url', 'secret_arn', 'service_now_build_version', 'authentication_type', 'knowledge_article_configuration', 'service_catalog_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.ServiceNowConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.ServiceNowKnowledgeArticleConfigurationProperty
class CfnDataSource_ServiceNowKnowledgeArticleConfigurationPropertyDef(BaseStruct):
    document_data_field_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the ServiceNow field that is mapped to the index document contents field in the Amazon Kendra index.\n')
    crawl_attachments: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='``TRUE`` to index attachments to knowledge articles.\n')
    document_title_field_name: typing.Optional[str] = pydantic.Field(None, description='The name of the ServiceNow field that is mapped to the index document title field.\n')
    exclude_attachment_file_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="A list of regular expression patterns applied to exclude certain knowledge article attachments. Attachments that match the patterns are excluded from the index. Items that don't match the patterns are included in the index. If an item matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the item isn't included in the index.\n")
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Maps attributes or field names of knoweldge articles to Amazon Kendra index field names. To create custom fields, use the ``UpdateIndex`` API before you map to ServiceNow fields. For more information, see `Mapping data source fields <https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html>`_ . The ServiceNow data source field names must exist in your ServiceNow custom metadata.\n')
    filter_query: typing.Optional[str] = pydantic.Field(None, description='A query that selects the knowledge articles to index. The query can return articles from multiple knowledge bases, and the knowledge bases can be public or private. The query string must be one generated by the ServiceNow console. For more information, see `Specifying documents to index with a query <https://docs.aws.amazon.com/kendra/latest/dg/servicenow-query.html>`_ .\n')
    include_attachment_file_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of regular expression patterns applied to include knowledge article attachments. Attachments that match the patterns are included in the index. Items that don\'t match the patterns are excluded from the index. If an item matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the item isn\'t included in the index.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-servicenowknowledgearticleconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    service_now_knowledge_article_configuration_property = kendra.CfnDataSource.ServiceNowKnowledgeArticleConfigurationProperty(\n        document_data_field_name="documentDataFieldName",\n\n        # the properties below are optional\n        crawl_attachments=False,\n        document_title_field_name="documentTitleFieldName",\n        exclude_attachment_file_patterns=["excludeAttachmentFilePatterns"],\n        field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n            data_source_field_name="dataSourceFieldName",\n            index_field_name="indexFieldName",\n\n            # the properties below are optional\n            date_field_format="dateFieldFormat"\n        )],\n        filter_query="filterQuery",\n        include_attachment_file_patterns=["includeAttachmentFilePatterns"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['document_data_field_name', 'crawl_attachments', 'document_title_field_name', 'exclude_attachment_file_patterns', 'field_mappings', 'filter_query', 'include_attachment_file_patterns']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.ServiceNowKnowledgeArticleConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.ServiceNowServiceCatalogConfigurationProperty
class CfnDataSource_ServiceNowServiceCatalogConfigurationPropertyDef(BaseStruct):
    document_data_field_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the ServiceNow field that is mapped to the index document contents field in the Amazon Kendra index.\n')
    crawl_attachments: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='``TRUE`` to index attachments to service catalog items.\n')
    document_title_field_name: typing.Optional[str] = pydantic.Field(None, description='The name of the ServiceNow field that is mapped to the index document title field.\n')
    exclude_attachment_file_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="A list of regular expression patterns to exclude certain attachments of catalogs in your ServiceNow. Item that match the patterns are excluded from the index. Items that don't match the patterns are included in the index. If an item matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the item isn't included in the index. The regex is applied to the file name of the attachment.\n")
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Maps attributes or field names of catalogs to Amazon Kendra index field names. To create custom fields, use the ``UpdateIndex`` API before you map to ServiceNow fields. For more information, see `Mapping data source fields <https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html>`_ . The ServiceNow data source field names must exist in your ServiceNow custom metadata.\n')
    include_attachment_file_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of regular expression patterns to include certain attachments of catalogs in your ServiceNow. Item that match the patterns are included in the index. Items that don\'t match the patterns are excluded from the index. If an item matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the item isn\'t included in the index. The regex is applied to the file name of the attachment.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-servicenowservicecatalogconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    service_now_service_catalog_configuration_property = kendra.CfnDataSource.ServiceNowServiceCatalogConfigurationProperty(\n        document_data_field_name="documentDataFieldName",\n\n        # the properties below are optional\n        crawl_attachments=False,\n        document_title_field_name="documentTitleFieldName",\n        exclude_attachment_file_patterns=["excludeAttachmentFilePatterns"],\n        field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n            data_source_field_name="dataSourceFieldName",\n            index_field_name="indexFieldName",\n\n            # the properties below are optional\n            date_field_format="dateFieldFormat"\n        )],\n        include_attachment_file_patterns=["includeAttachmentFilePatterns"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['document_data_field_name', 'crawl_attachments', 'document_title_field_name', 'exclude_attachment_file_patterns', 'field_mappings', 'include_attachment_file_patterns']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.ServiceNowServiceCatalogConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.SharePointConfigurationProperty
class CfnDataSource_SharePointConfigurationPropertyDef(BaseStruct):
    secret_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of an AWS Secrets Manager secret that contains the user name and password required to connect to the SharePoint instance. For more information, see `Microsoft SharePoint <https://docs.aws.amazon.com/kendra/latest/dg/data-source-sharepoint.html>`_ .\n')
    share_point_version: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The version of Microsoft SharePoint that you use.\n')
    urls: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Microsoft SharePoint site URLs for the documents you want to index.\n')
    crawl_attachments: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='``TRUE`` to index document attachments.\n')
    disable_local_groups: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='``TRUE`` to disable local groups information.\n')
    document_title_field_name: typing.Optional[str] = pydantic.Field(None, description='The Microsoft SharePoint attribute field that contains the title of the document.\n')
    exclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="A list of regular expression patterns. Documents that match the patterns are excluded from the index. Documents that don't match the patterns are included in the index. If a document matches both an exclusion pattern and an inclusion pattern, the document is not included in the index. The regex is applied to the display URL of the SharePoint document.\n")
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of ``DataSourceToIndexFieldMapping`` objects that map Microsoft SharePoint attributes or fields to Amazon Kendra index fields. You must first create the index fields using the `UpdateIndex <https://docs.aws.amazon.com/kendra/latest/dg/API_UpdateIndex.html>`_ operation before you map SharePoint attributes. For more information, see `Mapping Data Source Fields <https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html>`_ .\n')
    inclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="A list of regular expression patterns to include certain documents in your SharePoint. Documents that match the patterns are included in the index. Documents that don't match the patterns are excluded from the index. If a document matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the document isn't included in the index. The regex applies to the display URL of the SharePoint document.\n")
    ssl_certificate_s3_path: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_S3PathPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information required to find a specific file in an Amazon S3 bucket.\n')
    use_change_log: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="``TRUE`` to use the SharePoint change log to determine which documents require updating in the index. Depending on the change log's size, it may take longer for Amazon Kendra to use the change log than to scan all of your documents in SharePoint.\n")
    vpc_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceVpcConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides information for connecting to an Amazon VPC.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-sharepointconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    share_point_configuration_property = kendra.CfnDataSource.SharePointConfigurationProperty(\n        secret_arn="secretArn",\n        share_point_version="sharePointVersion",\n        urls=["urls"],\n\n        # the properties below are optional\n        crawl_attachments=False,\n        disable_local_groups=False,\n        document_title_field_name="documentTitleFieldName",\n        exclusion_patterns=["exclusionPatterns"],\n        field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n            data_source_field_name="dataSourceFieldName",\n            index_field_name="indexFieldName",\n\n            # the properties below are optional\n            date_field_format="dateFieldFormat"\n        )],\n        inclusion_patterns=["inclusionPatterns"],\n        ssl_certificate_s3_path=kendra.CfnDataSource.S3PathProperty(\n            bucket="bucket",\n            key="key"\n        ),\n        use_change_log=False,\n        vpc_configuration=kendra.CfnDataSource.DataSourceVpcConfigurationProperty(\n            security_group_ids=["securityGroupIds"],\n            subnet_ids=["subnetIds"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['secret_arn', 'share_point_version', 'urls', 'crawl_attachments', 'disable_local_groups', 'document_title_field_name', 'exclusion_patterns', 'field_mappings', 'inclusion_patterns', 'ssl_certificate_s3_path', 'use_change_log', 'vpc_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.SharePointConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.SqlConfigurationProperty
class CfnDataSource_SqlConfigurationPropertyDef(BaseStruct):
    query_identifiers_enclosing_option: typing.Optional[str] = pydantic.Field(None, description='Determines whether Amazon Kendra encloses SQL identifiers for tables and column names in double quotes (") when making a database query. You can set the value to ``DOUBLE_QUOTES`` or ``NONE`` . By default, Amazon Kendra passes SQL identifiers the way that they are entered into the data source configuration. It does not change the case of identifiers or enclose them in quotes. PostgreSQL internally converts uppercase characters to lower case characters in identifiers unless they are quoted. Choosing this option encloses identifiers in quotes so that PostgreSQL does not convert the character\'s case. For MySQL databases, you must enable the ansi_quotes option when you set this field to ``DOUBLE_QUOTES`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-sqlconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    sql_configuration_property = kendra.CfnDataSource.SqlConfigurationProperty(\n        query_identifiers_enclosing_option="queryIdentifiersEnclosingOption"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['query_identifiers_enclosing_option']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.SqlConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.TemplateConfigurationProperty
class CfnDataSource_TemplateConfigurationPropertyDef(BaseStruct):
    template: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['template']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.TemplateConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.WebCrawlerAuthenticationConfigurationProperty
class CfnDataSource_WebCrawlerAuthenticationConfigurationPropertyDef(BaseStruct):
    basic_authentication: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_WebCrawlerBasicAuthenticationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The list of configuration information that\'s required to connect to and crawl a website host using basic authentication credentials. The list includes the name and port number of the website host.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-webcrawlerauthenticationconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    web_crawler_authentication_configuration_property = kendra.CfnDataSource.WebCrawlerAuthenticationConfigurationProperty(\n        basic_authentication=[kendra.CfnDataSource.WebCrawlerBasicAuthenticationProperty(\n            credentials="credentials",\n            host="host",\n            port=123\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['basic_authentication']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.WebCrawlerAuthenticationConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.WebCrawlerBasicAuthenticationProperty
class CfnDataSource_WebCrawlerBasicAuthenticationPropertyDef(BaseStruct):
    credentials: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of an AWS Secrets Manager secret. You create a secret to store your credentials in `AWS Secrets Manager <https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html>`_ You use a secret if basic authentication credentials are required to connect to a website. The secret stores your credentials of user name and password.\n')
    host: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the website host you want to connect to using authentication credentials. For example, the host name of https://a.example.com/page1.html is "a.example.com".\n')
    port: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The port number of the website host you want to connect to using authentication credentials. For example, the port for https://a.example.com/page1.html is 443, the standard port for HTTPS.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-webcrawlerbasicauthentication.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    web_crawler_basic_authentication_property = kendra.CfnDataSource.WebCrawlerBasicAuthenticationProperty(\n        credentials="credentials",\n        host="host",\n        port=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['credentials', 'host', 'port']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.WebCrawlerBasicAuthenticationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.WebCrawlerConfigurationProperty
class CfnDataSource_WebCrawlerConfigurationPropertyDef(BaseStruct):
    urls: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_kendra.CfnDataSource_WebCrawlerUrlsPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the seed or starting point URLs of the websites or the sitemap URLs of the websites you want to crawl. You can include website subdomains. You can list up to 100 seed URLs and up to three sitemap URLs. You can only crawl websites that use the secure communication protocol, Hypertext Transfer Protocol Secure (HTTPS). If you receive an error when crawling a website, it could be that the website is blocked from crawling. *When selecting websites to index, you must adhere to the `Amazon Acceptable Use Policy <https://docs.aws.amazon.com/aup/>`_ and all other Amazon terms. Remember that you must only use Amazon Kendra Web Crawler to index your own webpages, or webpages that you have authorization to index.*\n')
    authentication_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_WebCrawlerAuthenticationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information required to connect to websites using authentication. You can connect to websites using basic authentication of user name and password. You use a secret in `AWS Secrets Manager <https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html>`_ to store your authentication credentials. You must provide the website host name and port number. For example, the host name of https://a.example.com/page1.html is "a.example.com" and the port is 443, the standard port for HTTPS.\n')
    crawl_depth: typing.Union[int, float, None] = pydantic.Field(None, description="The 'depth' or number of levels from the seed level to crawl. For example, the seed URL page is depth 1 and any hyperlinks on this page that are also crawled are depth 2.\n")
    max_content_size_per_page_in_mega_bytes: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum size (in MB) of a web page or attachment to crawl. Files larger than this size (in MB) are skipped/not crawled. The default maximum size of a web page or attachment is set to 50 MB.\n')
    max_links_per_page: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum number of URLs on a web page to include when crawling a website. This number is per web page. As a website’s web pages are crawled, any URLs the web pages link to are also crawled. URLs on a web page are crawled in order of appearance. The default maximum links per page is 100.\n')
    max_urls_per_minute_crawl_rate: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum number of URLs crawled per website host per minute. A minimum of one URL is required. The default maximum number of URLs crawled per website host per minute is 300.\n')
    proxy_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ProxyConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information required to connect to your internal websites via a web proxy. You must provide the website host name and port number. For example, the host name of https://a.example.com/page1.html is "a.example.com" and the port is 443, the standard port for HTTPS. Web proxy credentials are optional and you can use them to connect to a web proxy server that requires basic authentication. To store web proxy credentials, you use a secret in `AWS Secrets Manager <https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html>`_ .\n')
    url_exclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="A list of regular expression patterns to exclude certain URLs to crawl. URLs that match the patterns are excluded from the index. URLs that don't match the patterns are included in the index. If a URL matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the URL file isn't included in the index.\n")
    url_inclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of regular expression patterns to include certain URLs to crawl. URLs that match the patterns are included in the index. URLs that don\'t match the patterns are excluded from the index. If a URL matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the URL file isn\'t included in the index.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-webcrawlerconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    web_crawler_configuration_property = kendra.CfnDataSource.WebCrawlerConfigurationProperty(\n        urls=kendra.CfnDataSource.WebCrawlerUrlsProperty(\n            seed_url_configuration=kendra.CfnDataSource.WebCrawlerSeedUrlConfigurationProperty(\n                seed_urls=["seedUrls"],\n\n                # the properties below are optional\n                web_crawler_mode="webCrawlerMode"\n            ),\n            site_maps_configuration=kendra.CfnDataSource.WebCrawlerSiteMapsConfigurationProperty(\n                site_maps=["siteMaps"]\n            )\n        ),\n\n        # the properties below are optional\n        authentication_configuration=kendra.CfnDataSource.WebCrawlerAuthenticationConfigurationProperty(\n            basic_authentication=[kendra.CfnDataSource.WebCrawlerBasicAuthenticationProperty(\n                credentials="credentials",\n                host="host",\n                port=123\n            )]\n        ),\n        crawl_depth=123,\n        max_content_size_per_page_in_mega_bytes=123,\n        max_links_per_page=123,\n        max_urls_per_minute_crawl_rate=123,\n        proxy_configuration=kendra.CfnDataSource.ProxyConfigurationProperty(\n            host="host",\n            port=123,\n\n            # the properties below are optional\n            credentials="credentials"\n        ),\n        url_exclusion_patterns=["urlExclusionPatterns"],\n        url_inclusion_patterns=["urlInclusionPatterns"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['urls', 'authentication_configuration', 'crawl_depth', 'max_content_size_per_page_in_mega_bytes', 'max_links_per_page', 'max_urls_per_minute_crawl_rate', 'proxy_configuration', 'url_exclusion_patterns', 'url_inclusion_patterns']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.WebCrawlerConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.WebCrawlerSeedUrlConfigurationProperty
class CfnDataSource_WebCrawlerSeedUrlConfigurationPropertyDef(BaseStruct):
    seed_urls: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The list of seed or starting point URLs of the websites you want to crawl. The list can include a maximum of 100 seed URLs.\n')
    web_crawler_mode: typing.Optional[str] = pydantic.Field(None, description='You can choose one of the following modes:. - ``HOST_ONLY`` —crawl only the website host names. For example, if the seed URL is "abc.example.com", then only URLs with host name "abc.example.com" are crawled. - ``SUBDOMAINS`` —crawl the website host names with subdomains. For example, if the seed URL is "abc.example.com", then "a.abc.example.com" and "b.abc.example.com" are also crawled. - ``EVERYTHING`` —crawl the website host names with subdomains and other domains that the web pages link to. The default mode is set to ``HOST_ONLY`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-webcrawlerseedurlconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    web_crawler_seed_url_configuration_property = kendra.CfnDataSource.WebCrawlerSeedUrlConfigurationProperty(\n        seed_urls=["seedUrls"],\n\n        # the properties below are optional\n        web_crawler_mode="webCrawlerMode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['seed_urls', 'web_crawler_mode']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.WebCrawlerSeedUrlConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.WebCrawlerSiteMapsConfigurationProperty
class CfnDataSource_WebCrawlerSiteMapsConfigurationPropertyDef(BaseStruct):
    site_maps: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The list of sitemap URLs of the websites you want to crawl. The list can include a maximum of three sitemap URLs.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-webcrawlersitemapsconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    web_crawler_site_maps_configuration_property = kendra.CfnDataSource.WebCrawlerSiteMapsConfigurationProperty(\n        site_maps=["siteMaps"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['site_maps']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.WebCrawlerSiteMapsConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.WebCrawlerUrlsProperty
class CfnDataSource_WebCrawlerUrlsPropertyDef(BaseStruct):
    seed_url_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_WebCrawlerSeedUrlConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration of the seed or starting point URLs of the websites you want to crawl. You can choose to crawl only the website host names, or the website host names with subdomains, or the website host names with subdomains and other domains that the web pages link to. You can list up to 100 seed URLs.\n')
    site_maps_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_WebCrawlerSiteMapsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration of the sitemap URLs of the websites you want to crawl. Only URLs belonging to the same website host names are crawled. You can list up to three sitemap URLs.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-webcrawlerurls.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    web_crawler_urls_property = kendra.CfnDataSource.WebCrawlerUrlsProperty(\n        seed_url_configuration=kendra.CfnDataSource.WebCrawlerSeedUrlConfigurationProperty(\n            seed_urls=["seedUrls"],\n\n            # the properties below are optional\n            web_crawler_mode="webCrawlerMode"\n        ),\n        site_maps_configuration=kendra.CfnDataSource.WebCrawlerSiteMapsConfigurationProperty(\n            site_maps=["siteMaps"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['seed_url_configuration', 'site_maps_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.WebCrawlerUrlsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource.WorkDocsConfigurationProperty
class CfnDataSource_WorkDocsConfigurationPropertyDef(BaseStruct):
    organization_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the directory corresponding to your Amazon WorkDocs site repository. You can find the organization ID in the `AWS Directory Service <https://docs.aws.amazon.com/directoryservicev2/>`_ by going to *Active Directory* , then *Directories* . Your Amazon WorkDocs site directory has an ID, which is the organization ID. You can also set up a new Amazon WorkDocs directory in the AWS Directory Service console and enable a Amazon WorkDocs site for the directory in the Amazon WorkDocs console.\n')
    crawl_comments: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='``TRUE`` to include comments on documents in your index. Including comments in your index means each comment is a document that can be searched on. The default is set to ``FALSE`` .\n')
    exclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="A list of regular expression patterns to exclude certain files in your Amazon WorkDocs site repository. Files that match the patterns are excluded from the index. Files that don’t match the patterns are included in the index. If a file matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.\n")
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of ``DataSourceToIndexFieldMapping`` objects that map Amazon WorkDocs data source attributes or field names to Amazon Kendra index field names. To create custom fields, use the ``UpdateIndex`` API before you map to Amazon WorkDocs fields. For more information, see `Mapping data source fields <https://docs.aws.amazon.com/kendra/latest/dg/field-mapping.html>`_ . The Amazon WorkDocs data source field names must exist in your Amazon WorkDocs custom metadata.\n')
    inclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description="A list of regular expression patterns to include certain files in your Amazon WorkDocs site repository. Files that match the patterns are included in the index. Files that don't match the patterns are excluded from the index. If a file matches both an inclusion and exclusion pattern, the exclusion pattern takes precedence and the file isn't included in the index.\n")
    use_change_log: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='``TRUE`` to use the Amazon WorkDocs change log to determine which documents require updating in the index. Depending on the change log\'s size, it may take longer for Amazon Kendra to use the change log than to scan all of your documents in Amazon WorkDocs.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-datasource-workdocsconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    work_docs_configuration_property = kendra.CfnDataSource.WorkDocsConfigurationProperty(\n        organization_id="organizationId",\n\n        # the properties below are optional\n        crawl_comments=False,\n        exclusion_patterns=["exclusionPatterns"],\n        field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n            data_source_field_name="dataSourceFieldName",\n            index_field_name="indexFieldName",\n\n            # the properties below are optional\n            date_field_format="dateFieldFormat"\n        )],\n        inclusion_patterns=["inclusionPatterns"],\n        use_change_log=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['organization_id', 'crawl_comments', 'exclusion_patterns', 'field_mappings', 'inclusion_patterns', 'use_change_log']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource.WorkDocsConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnFaq.S3PathProperty
class CfnFaq_S3PathPropertyDef(BaseStruct):
    bucket: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the S3 bucket that contains the file.\n')
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the file.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-faq-s3path.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    s3_path_property = kendra.CfnFaq.S3PathProperty(\n        bucket="bucket",\n        key="key"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket', 'key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnFaq.S3PathProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnIndex.CapacityUnitsConfigurationProperty
class CfnIndex_CapacityUnitsConfigurationPropertyDef(BaseStruct):
    query_capacity_units: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The amount of extra query capacity for an index and `GetQuerySuggestions <https://docs.aws.amazon.com/kendra/latest/dg/API_GetQuerySuggestions.html>`_ capacity. A single extra capacity unit for an index provides 0.1 queries per second or approximately 8,000 queries per day. You can add up to 100 extra capacity units. ``GetQuerySuggestions`` capacity is five times the provisioned query capacity for an index, or the base capacity of 2.5 calls per second, whichever is higher. For example, the base capacity for an index is 0.1 queries per second, and ``GetQuerySuggestions`` capacity has a base of 2.5 calls per second. If you add another 0.1 queries per second to total 0.2 queries per second for an index, the ``GetQuerySuggestions`` capacity is 2.5 calls per second (higher than five times 0.2 queries per second).\n')
    storage_capacity_units: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='The amount of extra storage capacity for an index. A single capacity unit provides 30 GB of storage space or 100,000 documents, whichever is reached first. You can add up to 100 extra capacity units.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-index-capacityunitsconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    capacity_units_configuration_property = kendra.CfnIndex.CapacityUnitsConfigurationProperty(\n        query_capacity_units=123,\n        storage_capacity_units=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['query_capacity_units', 'storage_capacity_units']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnIndex.CapacityUnitsConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnIndex.DocumentMetadataConfigurationProperty
class CfnIndex_DocumentMetadataConfigurationPropertyDef(BaseStruct):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the index field.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The data type of the index field.\n')
    relevance: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnIndex_RelevancePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides tuning parameters to determine how the field affects the search results.\n')
    search: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnIndex_SearchPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Provides information about how the field is used during a search.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-index-documentmetadataconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    document_metadata_configuration_property = kendra.CfnIndex.DocumentMetadataConfigurationProperty(\n        name="name",\n        type="type",\n\n        # the properties below are optional\n        relevance=kendra.CfnIndex.RelevanceProperty(\n            duration="duration",\n            freshness=False,\n            importance=123,\n            rank_order="rankOrder",\n            value_importance_items=[kendra.CfnIndex.ValueImportanceItemProperty(\n                key="key",\n                value=123\n            )]\n        ),\n        search=kendra.CfnIndex.SearchProperty(\n            displayable=False,\n            facetable=False,\n            searchable=False,\n            sortable=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'type', 'relevance', 'search']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnIndex.DocumentMetadataConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnIndex.JsonTokenTypeConfigurationProperty
class CfnIndex_JsonTokenTypeConfigurationPropertyDef(BaseStruct):
    group_attribute_field: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The group attribute field.\n')
    user_name_attribute_field: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The user name attribute field.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-index-jsontokentypeconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    json_token_type_configuration_property = kendra.CfnIndex.JsonTokenTypeConfigurationProperty(\n        group_attribute_field="groupAttributeField",\n        user_name_attribute_field="userNameAttributeField"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['group_attribute_field', 'user_name_attribute_field']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnIndex.JsonTokenTypeConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnIndex.JwtTokenTypeConfigurationProperty
class CfnIndex_JwtTokenTypeConfigurationPropertyDef(BaseStruct):
    key_location: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The location of the key.\n')
    claim_regex: typing.Optional[str] = pydantic.Field(None, description='The regular expression that identifies the claim.\n')
    group_attribute_field: typing.Optional[str] = pydantic.Field(None, description='The group attribute field.\n')
    issuer: typing.Optional[str] = pydantic.Field(None, description='The issuer of the token.\n')
    secret_manager_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (arn) of the secret.\n')
    url: typing.Optional[str] = pydantic.Field(None, description='The signing key URL.\n')
    user_name_attribute_field: typing.Optional[str] = pydantic.Field(None, description='The user name attribute field.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-index-jwttokentypeconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    jwt_token_type_configuration_property = kendra.CfnIndex.JwtTokenTypeConfigurationProperty(\n        key_location="keyLocation",\n\n        # the properties below are optional\n        claim_regex="claimRegex",\n        group_attribute_field="groupAttributeField",\n        issuer="issuer",\n        secret_manager_arn="secretManagerArn",\n        url="url",\n        user_name_attribute_field="userNameAttributeField"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key_location', 'claim_regex', 'group_attribute_field', 'issuer', 'secret_manager_arn', 'url', 'user_name_attribute_field']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnIndex.JwtTokenTypeConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnIndex.RelevanceProperty
class CfnIndex_RelevancePropertyDef(BaseStruct):
    duration: typing.Optional[str] = pydantic.Field(None, description='Specifies the time period that the boost applies to. For example, to make the boost apply to documents with the field value within the last month, you would use "2628000s". Once the field value is beyond the specified range, the effect of the boost drops off. The higher the importance, the faster the effect drops off. If you don\'t specify a value, the default is 3 months. The value of the field is a numeric string followed by the character "s", for example "86400s" for one day, or "604800s" for one week. Only applies to ``DATE`` fields.\n')
    freshness: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates that this field determines how "fresh" a document is. For example, if document 1 was created on November 5, and document 2 was created on October 31, document 1 is "fresher" than document 2. Only applies to ``DATE`` fields.\n')
    importance: typing.Union[int, float, None] = pydantic.Field(None, description='The relative importance of the field in the search. Larger numbers provide more of a boost than smaller numbers.\n')
    rank_order: typing.Optional[str] = pydantic.Field(None, description='Determines how values should be interpreted. When the ``RankOrder`` field is ``ASCENDING`` , higher numbers are better. For example, a document with a rating score of 10 is higher ranking than a document with a rating score of 1. When the ``RankOrder`` field is ``DESCENDING`` , lower numbers are better. For example, in a task tracking application, a priority 1 task is more important than a priority 5 task. Only applies to ``LONG`` fields.\n')
    value_importance_items: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnIndex_ValueImportanceItemPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An array of key-value pairs for different boosts when they appear in the search result list. For example, if you want to boost query terms that match the "department" field in the result, query terms that match this field are boosted in the result. You can add entries from the department field to boost documents with those values higher. For example, you can add entries to the map with names of departments. If you add "HR", 5 and "Legal",3 those departments are given special attention when they appear in the metadata of a document.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-index-relevance.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    relevance_property = kendra.CfnIndex.RelevanceProperty(\n        duration="duration",\n        freshness=False,\n        importance=123,\n        rank_order="rankOrder",\n        value_importance_items=[kendra.CfnIndex.ValueImportanceItemProperty(\n            key="key",\n            value=123\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['duration', 'freshness', 'importance', 'rank_order', 'value_importance_items']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnIndex.RelevanceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnIndex.SearchProperty
class CfnIndex_SearchPropertyDef(BaseStruct):
    displayable: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Determines whether the field is returned in the query response. The default is ``true`` .\n')
    facetable: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates that the field can be used to create search facets, a count of results for each value in the field. The default is ``false`` .\n')
    searchable: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Determines whether the field is used in the search. If the ``Searchable`` field is ``true`` , you can use relevance tuning to manually tune how Amazon Kendra weights the field in the search. The default is ``true`` for string fields and ``false`` for number and date fields.\n')
    sortable: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Determines whether the field can be used to sort the results of a query. The default is ``false`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-index-search.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    search_property = kendra.CfnIndex.SearchProperty(\n        displayable=False,\n        facetable=False,\n        searchable=False,\n        sortable=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['displayable', 'facetable', 'searchable', 'sortable']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnIndex.SearchProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnIndex.ServerSideEncryptionConfigurationProperty
class CfnIndex_ServerSideEncryptionConfigurationPropertyDef(BaseStruct):
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The identifier of the AWS KMS key . Amazon Kendra doesn\'t support asymmetric keys.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-index-serversideencryptionconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    server_side_encryption_configuration_property = kendra.CfnIndex.ServerSideEncryptionConfigurationProperty(\n        kms_key_id="kmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnIndex.ServerSideEncryptionConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnIndex.UserTokenConfigurationProperty
class CfnIndex_UserTokenConfigurationPropertyDef(BaseStruct):
    json_token_type_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnIndex_JsonTokenTypeConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the JSON token type configuration.\n')
    jwt_token_type_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnIndex_JwtTokenTypeConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the JWT token type configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-index-usertokenconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    user_token_configuration_property = kendra.CfnIndex.UserTokenConfigurationProperty(\n        json_token_type_configuration=kendra.CfnIndex.JsonTokenTypeConfigurationProperty(\n            group_attribute_field="groupAttributeField",\n            user_name_attribute_field="userNameAttributeField"\n        ),\n        jwt_token_type_configuration=kendra.CfnIndex.JwtTokenTypeConfigurationProperty(\n            key_location="keyLocation",\n\n            # the properties below are optional\n            claim_regex="claimRegex",\n            group_attribute_field="groupAttributeField",\n            issuer="issuer",\n            secret_manager_arn="secretManagerArn",\n            url="url",\n            user_name_attribute_field="userNameAttributeField"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['json_token_type_configuration', 'jwt_token_type_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnIndex.UserTokenConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnIndex.ValueImportanceItemProperty
class CfnIndex_ValueImportanceItemPropertyDef(BaseStruct):
    key: typing.Optional[str] = pydantic.Field(None, description='The document metadata value used for the search boost.\n')
    value: typing.Union[int, float, None] = pydantic.Field(None, description='The boost value for a document when the key is part of the metadata of a document.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-kendra-index-valueimportanceitem.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    value_importance_item_property = kendra.CfnIndex.ValueImportanceItemProperty(\n        key="key",\n        value=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnIndex.ValueImportanceItemProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnDataSource
class CfnDataSourceDef(BaseCfnResource):
    index_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the index you want to use with the data source connector.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the data source.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of the data source.\n')
    custom_document_enrichment_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_CustomDocumentEnrichmentConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for altering document metadata and content during the document ingestion process.\n')
    data_source_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Configuration information for an Amazon Kendra data source. The contents of the configuration depend on the type of data source. You can only specify one type of data source in the configuration. You can't specify the ``Configuration`` parameter when the ``Type`` parameter is set to ``CUSTOM`` . The ``Configuration`` parameter is required for all other data sources.\n")
    description: typing.Optional[str] = pydantic.Field(None, description='A description for the data source connector.\n')
    language_code: typing.Optional[str] = pydantic.Field(None, description='The code for a language. This shows a supported language for all documents in the data source. English is supported by default. For more information on supported languages, including their codes, see `Adding documents in languages other than English <https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html>`_ .\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description="The Amazon Resource Name (ARN) of a role with permission to access the data source. You can't specify the ``RoleArn`` parameter when the ``Type`` parameter is set to ``CUSTOM`` . The ``RoleArn`` parameter is required for all other data sources.\n")
    schedule: typing.Optional[str] = pydantic.Field(None, description="Sets the frequency that Amazon Kendra checks the documents in your data source and updates the index. If you don't set a schedule, Amazon Kendra doesn't periodically update the index.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['index_id', 'name', 'type', 'custom_document_enrichment_configuration', 'data_source_configuration', 'description', 'language_code', 'role_arn', 'schedule', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AccessControlListConfigurationProperty', 'AclConfigurationProperty', 'ColumnConfigurationProperty', 'ConfluenceAttachmentConfigurationProperty', 'ConfluenceAttachmentToIndexFieldMappingProperty', 'ConfluenceBlogConfigurationProperty', 'ConfluenceBlogToIndexFieldMappingProperty', 'ConfluenceConfigurationProperty', 'ConfluencePageConfigurationProperty', 'ConfluencePageToIndexFieldMappingProperty', 'ConfluenceSpaceConfigurationProperty', 'ConfluenceSpaceToIndexFieldMappingProperty', 'ConnectionConfigurationProperty', 'CustomDocumentEnrichmentConfigurationProperty', 'DataSourceConfigurationProperty', 'DataSourceToIndexFieldMappingProperty', 'DataSourceVpcConfigurationProperty', 'DatabaseConfigurationProperty', 'DocumentAttributeConditionProperty', 'DocumentAttributeTargetProperty', 'DocumentAttributeValueProperty', 'DocumentsMetadataConfigurationProperty', 'GoogleDriveConfigurationProperty', 'HookConfigurationProperty', 'InlineCustomDocumentEnrichmentConfigurationProperty', 'OneDriveConfigurationProperty', 'OneDriveUsersProperty', 'ProxyConfigurationProperty', 'S3DataSourceConfigurationProperty', 'S3PathProperty', 'SalesforceChatterFeedConfigurationProperty', 'SalesforceConfigurationProperty', 'SalesforceCustomKnowledgeArticleTypeConfigurationProperty', 'SalesforceKnowledgeArticleConfigurationProperty', 'SalesforceStandardKnowledgeArticleTypeConfigurationProperty', 'SalesforceStandardObjectAttachmentConfigurationProperty', 'SalesforceStandardObjectConfigurationProperty', 'ServiceNowConfigurationProperty', 'ServiceNowKnowledgeArticleConfigurationProperty', 'ServiceNowServiceCatalogConfigurationProperty', 'SharePointConfigurationProperty', 'SqlConfigurationProperty', 'TemplateConfigurationProperty', 'WebCrawlerAuthenticationConfigurationProperty', 'WebCrawlerBasicAuthenticationProperty', 'WebCrawlerConfigurationProperty', 'WebCrawlerSeedUrlConfigurationProperty', 'WebCrawlerSiteMapsConfigurationProperty', 'WebCrawlerUrlsProperty', 'WorkDocsConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSource'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_kendra.CfnDataSourceDefConfig] = pydantic.Field(None)


class CfnDataSourceDefConfig(pydantic.BaseModel):
    AccessControlListConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefAccesscontrollistconfigurationpropertyParams]] = pydantic.Field(None, description='')
    AclConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefAclconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ColumnConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefColumnconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ConfluenceAttachmentConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefConfluenceattachmentconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ConfluenceAttachmentToIndexFieldMappingProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefConfluenceattachmenttoindexfieldmappingpropertyParams]] = pydantic.Field(None, description='')
    ConfluenceBlogConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefConfluenceblogconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ConfluenceBlogToIndexFieldMappingProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefConfluenceblogtoindexfieldmappingpropertyParams]] = pydantic.Field(None, description='')
    ConfluenceConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefConfluenceconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ConfluencePageConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefConfluencepageconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ConfluencePageToIndexFieldMappingProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefConfluencepagetoindexfieldmappingpropertyParams]] = pydantic.Field(None, description='')
    ConfluenceSpaceConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefConfluencespaceconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ConfluenceSpaceToIndexFieldMappingProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefConfluencespacetoindexfieldmappingpropertyParams]] = pydantic.Field(None, description='')
    ConnectionConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefConnectionconfigurationpropertyParams]] = pydantic.Field(None, description='')
    CustomDocumentEnrichmentConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefCustomdocumentenrichmentconfigurationpropertyParams]] = pydantic.Field(None, description='')
    DataSourceConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefDatasourceconfigurationpropertyParams]] = pydantic.Field(None, description='')
    DataSourceToIndexFieldMappingProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefDatasourcetoindexfieldmappingpropertyParams]] = pydantic.Field(None, description='')
    DataSourceVpcConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefDatasourcevpcconfigurationpropertyParams]] = pydantic.Field(None, description='')
    DatabaseConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefDatabaseconfigurationpropertyParams]] = pydantic.Field(None, description='')
    DocumentAttributeConditionProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefDocumentattributeconditionpropertyParams]] = pydantic.Field(None, description='')
    DocumentAttributeTargetProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefDocumentattributetargetpropertyParams]] = pydantic.Field(None, description='')
    DocumentAttributeValueProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefDocumentattributevaluepropertyParams]] = pydantic.Field(None, description='')
    DocumentsMetadataConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefDocumentsmetadataconfigurationpropertyParams]] = pydantic.Field(None, description='')
    GoogleDriveConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefGoogledriveconfigurationpropertyParams]] = pydantic.Field(None, description='')
    HookConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefHookconfigurationpropertyParams]] = pydantic.Field(None, description='')
    InlineCustomDocumentEnrichmentConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefInlinecustomdocumentenrichmentconfigurationpropertyParams]] = pydantic.Field(None, description='')
    OneDriveConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefOnedriveconfigurationpropertyParams]] = pydantic.Field(None, description='')
    OneDriveUsersProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefOnedriveuserspropertyParams]] = pydantic.Field(None, description='')
    ProxyConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefProxyconfigurationpropertyParams]] = pydantic.Field(None, description='')
    S3DataSourceConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefS3DatasourceconfigurationpropertyParams]] = pydantic.Field(None, description='')
    S3PathProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefS3PathpropertyParams]] = pydantic.Field(None, description='')
    SalesforceChatterFeedConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefSalesforcechatterfeedconfigurationpropertyParams]] = pydantic.Field(None, description='')
    SalesforceConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefSalesforceconfigurationpropertyParams]] = pydantic.Field(None, description='')
    SalesforceCustomKnowledgeArticleTypeConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefSalesforcecustomknowledgearticletypeconfigurationpropertyParams]] = pydantic.Field(None, description='')
    SalesforceKnowledgeArticleConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefSalesforceknowledgearticleconfigurationpropertyParams]] = pydantic.Field(None, description='')
    SalesforceStandardKnowledgeArticleTypeConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefSalesforcestandardknowledgearticletypeconfigurationpropertyParams]] = pydantic.Field(None, description='')
    SalesforceStandardObjectAttachmentConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefSalesforcestandardobjectattachmentconfigurationpropertyParams]] = pydantic.Field(None, description='')
    SalesforceStandardObjectConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefSalesforcestandardobjectconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ServiceNowConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefServicenowconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ServiceNowKnowledgeArticleConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefServicenowknowledgearticleconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ServiceNowServiceCatalogConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefServicenowservicecatalogconfigurationpropertyParams]] = pydantic.Field(None, description='')
    SharePointConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefSharepointconfigurationpropertyParams]] = pydantic.Field(None, description='')
    SqlConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefSqlconfigurationpropertyParams]] = pydantic.Field(None, description='')
    TemplateConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefTemplateconfigurationpropertyParams]] = pydantic.Field(None, description='')
    WebCrawlerAuthenticationConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefWebcrawlerauthenticationconfigurationpropertyParams]] = pydantic.Field(None, description='')
    WebCrawlerBasicAuthenticationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefWebcrawlerbasicauthenticationpropertyParams]] = pydantic.Field(None, description='')
    WebCrawlerConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefWebcrawlerconfigurationpropertyParams]] = pydantic.Field(None, description='')
    WebCrawlerSeedUrlConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefWebcrawlerseedurlconfigurationpropertyParams]] = pydantic.Field(None, description='')
    WebCrawlerSiteMapsConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefWebcrawlersitemapsconfigurationpropertyParams]] = pydantic.Field(None, description='')
    WebCrawlerUrlsProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefWebcrawlerurlspropertyParams]] = pydantic.Field(None, description='')
    WorkDocsConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnDataSourceDefWorkdocsconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_kendra.CfnDataSourceDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_kendra.CfnDataSourceDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_kendra.CfnDataSourceDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_kendra.CfnDataSourceDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_kendra.CfnDataSourceDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_kendra.CfnDataSourceDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_kendra.CfnDataSourceDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_kendra.CfnDataSourceDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_kendra.CfnDataSourceDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_kendra.CfnDataSourceDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_kendra.CfnDataSourceDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_kendra.CfnDataSourceDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_kendra.CfnDataSourceDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnDataSourceDefAccesscontrollistconfigurationpropertyParams(pydantic.BaseModel):
    key_path: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefAclconfigurationpropertyParams(pydantic.BaseModel):
    allowed_groups_column_name: str = pydantic.Field(..., description='')
    ...

class CfnDataSourceDefColumnconfigurationpropertyParams(pydantic.BaseModel):
    change_detecting_columns: typing.Sequence[str] = pydantic.Field(..., description='')
    document_data_column_name: str = pydantic.Field(..., description='')
    document_id_column_name: str = pydantic.Field(..., description='')
    document_title_column_name: typing.Optional[str] = pydantic.Field(None, description='')
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefConfluenceattachmentconfigurationpropertyParams(pydantic.BaseModel):
    attachment_field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ConfluenceAttachmentToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    crawl_attachments: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefConfluenceattachmenttoindexfieldmappingpropertyParams(pydantic.BaseModel):
    data_source_field_name: str = pydantic.Field(..., description='')
    index_field_name: str = pydantic.Field(..., description='')
    date_field_format: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefConfluenceblogconfigurationpropertyParams(pydantic.BaseModel):
    blog_field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ConfluenceBlogToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefConfluenceblogtoindexfieldmappingpropertyParams(pydantic.BaseModel):
    data_source_field_name: str = pydantic.Field(..., description='')
    index_field_name: str = pydantic.Field(..., description='')
    date_field_format: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefConfluenceconfigurationpropertyParams(pydantic.BaseModel):
    secret_arn: str = pydantic.Field(..., description='')
    server_url: str = pydantic.Field(..., description='')
    version: str = pydantic.Field(..., description='')
    attachment_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ConfluenceAttachmentConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    blog_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ConfluenceBlogConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    exclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    inclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    page_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ConfluencePageConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    space_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ConfluenceSpaceConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    vpc_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceVpcConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefConfluencepageconfigurationpropertyParams(pydantic.BaseModel):
    page_field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ConfluencePageToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefConfluencepagetoindexfieldmappingpropertyParams(pydantic.BaseModel):
    data_source_field_name: str = pydantic.Field(..., description='')
    index_field_name: str = pydantic.Field(..., description='')
    date_field_format: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefConfluencespaceconfigurationpropertyParams(pydantic.BaseModel):
    crawl_archived_spaces: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    crawl_personal_spaces: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    exclude_spaces: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    include_spaces: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    space_field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ConfluenceSpaceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefConfluencespacetoindexfieldmappingpropertyParams(pydantic.BaseModel):
    data_source_field_name: str = pydantic.Field(..., description='')
    index_field_name: str = pydantic.Field(..., description='')
    date_field_format: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefConnectionconfigurationpropertyParams(pydantic.BaseModel):
    database_host: str = pydantic.Field(..., description='')
    database_name: str = pydantic.Field(..., description='')
    database_port: typing.Union[int, float] = pydantic.Field(..., description='')
    secret_arn: str = pydantic.Field(..., description='')
    table_name: str = pydantic.Field(..., description='')
    ...

class CfnDataSourceDefCustomdocumentenrichmentconfigurationpropertyParams(pydantic.BaseModel):
    inline_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_InlineCustomDocumentEnrichmentConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    post_extraction_hook_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_HookConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    pre_extraction_hook_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_HookConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefDatasourceconfigurationpropertyParams(pydantic.BaseModel):
    confluence_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ConfluenceConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    database_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DatabaseConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    google_drive_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_GoogleDriveConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    one_drive_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_OneDriveConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    s3_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_S3DataSourceConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    salesforce_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_SalesforceConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    service_now_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ServiceNowConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    share_point_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_SharePointConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    template_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_TemplateConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    web_crawler_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_WebCrawlerConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    work_docs_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_WorkDocsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefDatasourcetoindexfieldmappingpropertyParams(pydantic.BaseModel):
    data_source_field_name: str = pydantic.Field(..., description='')
    index_field_name: str = pydantic.Field(..., description='')
    date_field_format: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefDatasourcevpcconfigurationpropertyParams(pydantic.BaseModel):
    security_group_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    subnet_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnDataSourceDefDatabaseconfigurationpropertyParams(pydantic.BaseModel):
    column_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ColumnConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    connection_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ConnectionConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    database_engine_type: str = pydantic.Field(..., description='')
    acl_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_AclConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sql_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_SqlConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    vpc_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceVpcConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefDocumentattributeconditionpropertyParams(pydantic.BaseModel):
    condition_document_attribute_key: str = pydantic.Field(..., description='')
    operator: str = pydantic.Field(..., description='')
    condition_on_value: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DocumentAttributeValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefDocumentattributetargetpropertyParams(pydantic.BaseModel):
    target_document_attribute_key: str = pydantic.Field(..., description='')
    target_document_attribute_value: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DocumentAttributeValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    target_document_attribute_value_deletion: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefDocumentattributevaluepropertyParams(pydantic.BaseModel):
    date_value: typing.Optional[str] = pydantic.Field(None, description='')
    long_value: typing.Union[int, float, None] = pydantic.Field(None, description='')
    string_list_value: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    string_value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefDocumentsmetadataconfigurationpropertyParams(pydantic.BaseModel):
    s3_prefix: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefGoogledriveconfigurationpropertyParams(pydantic.BaseModel):
    secret_arn: str = pydantic.Field(..., description='')
    exclude_mime_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    exclude_shared_drives: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    exclude_user_accounts: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    exclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    inclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefHookconfigurationpropertyParams(pydantic.BaseModel):
    lambda_arn: str = pydantic.Field(..., description='')
    s3_bucket: str = pydantic.Field(..., description='')
    invocation_condition: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DocumentAttributeConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefInlinecustomdocumentenrichmentconfigurationpropertyParams(pydantic.BaseModel):
    condition: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DocumentAttributeConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    document_content_deletion: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    target: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DocumentAttributeTargetPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefOnedriveconfigurationpropertyParams(pydantic.BaseModel):
    one_drive_users: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_OneDriveUsersPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    secret_arn: str = pydantic.Field(..., description='')
    tenant_domain: str = pydantic.Field(..., description='')
    disable_local_groups: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    exclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    inclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefOnedriveuserspropertyParams(pydantic.BaseModel):
    one_drive_user_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    one_drive_user_s3_path: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_S3PathPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefProxyconfigurationpropertyParams(pydantic.BaseModel):
    host: str = pydantic.Field(..., description='')
    port: typing.Union[int, float] = pydantic.Field(..., description='')
    credentials: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefS3DatasourceconfigurationpropertyParams(pydantic.BaseModel):
    bucket_name: str = pydantic.Field(..., description='')
    access_control_list_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_AccessControlListConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    documents_metadata_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DocumentsMetadataConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    exclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    inclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    inclusion_prefixes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefS3PathpropertyParams(pydantic.BaseModel):
    bucket: str = pydantic.Field(..., description='')
    key: str = pydantic.Field(..., description='')
    ...

class CfnDataSourceDefSalesforcechatterfeedconfigurationpropertyParams(pydantic.BaseModel):
    document_data_field_name: str = pydantic.Field(..., description='')
    document_title_field_name: typing.Optional[str] = pydantic.Field(None, description='')
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    include_filter_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefSalesforceconfigurationpropertyParams(pydantic.BaseModel):
    secret_arn: str = pydantic.Field(..., description='')
    server_url: str = pydantic.Field(..., description='')
    chatter_feed_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_SalesforceChatterFeedConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    crawl_attachments: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    exclude_attachment_file_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    include_attachment_file_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    knowledge_article_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_SalesforceKnowledgeArticleConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    standard_object_attachment_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_SalesforceStandardObjectAttachmentConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    standard_object_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_SalesforceStandardObjectConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefSalesforcecustomknowledgearticletypeconfigurationpropertyParams(pydantic.BaseModel):
    document_data_field_name: str = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    document_title_field_name: typing.Optional[str] = pydantic.Field(None, description='')
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefSalesforceknowledgearticleconfigurationpropertyParams(pydantic.BaseModel):
    included_states: typing.Sequence[str] = pydantic.Field(..., description='')
    custom_knowledge_article_type_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_SalesforceCustomKnowledgeArticleTypeConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    standard_knowledge_article_type_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_SalesforceStandardKnowledgeArticleTypeConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefSalesforcestandardknowledgearticletypeconfigurationpropertyParams(pydantic.BaseModel):
    document_data_field_name: str = pydantic.Field(..., description='')
    document_title_field_name: typing.Optional[str] = pydantic.Field(None, description='')
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefSalesforcestandardobjectattachmentconfigurationpropertyParams(pydantic.BaseModel):
    document_title_field_name: typing.Optional[str] = pydantic.Field(None, description='')
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefSalesforcestandardobjectconfigurationpropertyParams(pydantic.BaseModel):
    document_data_field_name: str = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    document_title_field_name: typing.Optional[str] = pydantic.Field(None, description='')
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefServicenowconfigurationpropertyParams(pydantic.BaseModel):
    host_url: str = pydantic.Field(..., description='')
    secret_arn: str = pydantic.Field(..., description='')
    service_now_build_version: str = pydantic.Field(..., description='')
    authentication_type: typing.Optional[str] = pydantic.Field(None, description='')
    knowledge_article_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ServiceNowKnowledgeArticleConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    service_catalog_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ServiceNowServiceCatalogConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefServicenowknowledgearticleconfigurationpropertyParams(pydantic.BaseModel):
    document_data_field_name: str = pydantic.Field(..., description='')
    crawl_attachments: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    document_title_field_name: typing.Optional[str] = pydantic.Field(None, description='')
    exclude_attachment_file_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    filter_query: typing.Optional[str] = pydantic.Field(None, description='')
    include_attachment_file_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefServicenowservicecatalogconfigurationpropertyParams(pydantic.BaseModel):
    document_data_field_name: str = pydantic.Field(..., description='')
    crawl_attachments: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    document_title_field_name: typing.Optional[str] = pydantic.Field(None, description='')
    exclude_attachment_file_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    include_attachment_file_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefSharepointconfigurationpropertyParams(pydantic.BaseModel):
    secret_arn: str = pydantic.Field(..., description='')
    share_point_version: str = pydantic.Field(..., description='')
    urls: typing.Sequence[str] = pydantic.Field(..., description='')
    crawl_attachments: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    disable_local_groups: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    document_title_field_name: typing.Optional[str] = pydantic.Field(None, description='')
    exclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    inclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ssl_certificate_s3_path: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_S3PathPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    use_change_log: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    vpc_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceVpcConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefSqlconfigurationpropertyParams(pydantic.BaseModel):
    query_identifiers_enclosing_option: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefTemplateconfigurationpropertyParams(pydantic.BaseModel):
    template: str = pydantic.Field(..., description='')
    ...

class CfnDataSourceDefWebcrawlerauthenticationconfigurationpropertyParams(pydantic.BaseModel):
    basic_authentication: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_WebCrawlerBasicAuthenticationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefWebcrawlerbasicauthenticationpropertyParams(pydantic.BaseModel):
    credentials: str = pydantic.Field(..., description='')
    host: str = pydantic.Field(..., description='')
    port: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnDataSourceDefWebcrawlerconfigurationpropertyParams(pydantic.BaseModel):
    urls: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_WebCrawlerUrlsPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    authentication_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_WebCrawlerAuthenticationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    crawl_depth: typing.Union[int, float, None] = pydantic.Field(None, description='')
    max_content_size_per_page_in_mega_bytes: typing.Union[int, float, None] = pydantic.Field(None, description='')
    max_links_per_page: typing.Union[int, float, None] = pydantic.Field(None, description='')
    max_urls_per_minute_crawl_rate: typing.Union[int, float, None] = pydantic.Field(None, description='')
    proxy_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_ProxyConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    url_exclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    url_inclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefWebcrawlerseedurlconfigurationpropertyParams(pydantic.BaseModel):
    seed_urls: typing.Sequence[str] = pydantic.Field(..., description='')
    web_crawler_mode: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefWebcrawlersitemapsconfigurationpropertyParams(pydantic.BaseModel):
    site_maps: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnDataSourceDefWebcrawlerurlspropertyParams(pydantic.BaseModel):
    seed_url_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_WebCrawlerSeedUrlConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    site_maps_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_WebCrawlerSiteMapsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefWorkdocsconfigurationpropertyParams(pydantic.BaseModel):
    organization_id: str = pydantic.Field(..., description='')
    crawl_comments: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    exclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    field_mappings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    inclusion_patterns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    use_change_log: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnDataSourceDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDataSourceDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDataSourceDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDataSourceDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDataSourceDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDataSourceDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDataSourceDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDataSourceDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDataSourceDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDataSourceDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDataSourceDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnDataSourceDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDataSourceDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDataSourceDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_kendra.CfnFaq
class CfnFaqDef(BaseCfnResource):
    index_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the index that contains the FAQ.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name that you assigned the FAQ when you created or updated the FAQ.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of a role with permission to access the S3 bucket that contains the FAQ.\n')
    s3_path: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_kendra.CfnFaq_S3PathPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Simple Storage Service (Amazon S3) location of the FAQ input data.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description for the FAQ.\n')
    file_format: typing.Optional[str] = pydantic.Field(None, description='The format of the input file. You can choose between a basic CSV format, a CSV format that includes customs attributes in a header, and a JSON format that includes custom attributes. The format must match the format of the file stored in the S3 bucket identified in the S3Path parameter. Valid values are: - ``CSV`` - ``CSV_WITH_HEADER`` - ``JSON``\n')
    language_code: typing.Optional[str] = pydantic.Field(None, description='The code for a language. This shows a supported language for the FAQ document as part of the summary information for FAQs. English is supported by default. For more information on supported languages, including their codes, see `Adding documents in languages other than English <https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html>`_ .\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['index_id', 'name', 'role_arn', 's3_path', 'description', 'file_format', 'language_code', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['S3PathProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnFaq'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_kendra.CfnFaqDefConfig] = pydantic.Field(None)


class CfnFaqDefConfig(pydantic.BaseModel):
    S3PathProperty: typing.Optional[list[models.aws_kendra.CfnFaqDefS3PathpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_kendra.CfnFaqDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_kendra.CfnFaqDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_kendra.CfnFaqDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_kendra.CfnFaqDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_kendra.CfnFaqDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_kendra.CfnFaqDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_kendra.CfnFaqDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_kendra.CfnFaqDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_kendra.CfnFaqDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_kendra.CfnFaqDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_kendra.CfnFaqDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_kendra.CfnFaqDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_kendra.CfnFaqDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnFaqDefS3PathpropertyParams(pydantic.BaseModel):
    bucket: str = pydantic.Field(..., description='')
    key: str = pydantic.Field(..., description='')
    ...

class CfnFaqDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnFaqDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFaqDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnFaqDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFaqDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnFaqDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnFaqDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnFaqDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnFaqDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnFaqDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFaqDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnFaqDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnFaqDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFaqDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_kendra.CfnIndex
class CfnIndexDef(BaseCfnResource):
    edition: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Indicates whether the index is a Enterprise Edition index or a Developer Edition index. Valid values are ``DEVELOPER_EDITION`` and ``ENTERPRISE_EDITION`` .\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the index.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='An IAM role that gives Amazon Kendra permissions to access your Amazon CloudWatch logs and metrics. This is also the role used when you use the `BatchPutDocument <https://docs.aws.amazon.com/kendra/latest/dg/BatchPutDocument.html>`_ operation to index documents from an Amazon S3 bucket.\n')
    capacity_units: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnIndex_CapacityUnitsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies additional capacity units configured for your Enterprise Edition index. You can add and remove capacity units to fit your usage requirements.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description for the index.\n')
    document_metadata_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnIndex_DocumentMetadataConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="Specifies the properties of an index field. You can add either a custom or a built-in field. You can add and remove built-in fields at any time. When a built-in field is removed it's configuration reverts to the default for the field. Custom fields can't be removed from an index after they are added.\n")
    server_side_encryption_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnIndex_ServerSideEncryptionConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The identifier of the AWS KMS customer managed key (CMK) to use to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric CMKs.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n')
    user_context_policy: typing.Optional[str] = pydantic.Field(None, description='The user context policy. ATTRIBUTE_FILTER - All indexed content is searchable and displayable for all users. If you want to filter search results on user context, you can use the attribute filters of ``_user_id`` and ``_group_ids`` or you can provide user and group information in ``UserContext`` . USER_TOKEN - Enables token-based user access control to filter search results on user context. All documents with no access control and all documents accessible to the user will be searchable and displayable.\n')
    user_token_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnIndex_UserTokenConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Defines the type of user token used for the index.')
    _init_params: typing.ClassVar[list[str]] = ['edition', 'name', 'role_arn', 'capacity_units', 'description', 'document_metadata_configurations', 'server_side_encryption_configuration', 'tags', 'user_context_policy', 'user_token_configurations']
    _method_names: typing.ClassVar[list[str]] = ['CapacityUnitsConfigurationProperty', 'DocumentMetadataConfigurationProperty', 'JsonTokenTypeConfigurationProperty', 'JwtTokenTypeConfigurationProperty', 'RelevanceProperty', 'SearchProperty', 'ServerSideEncryptionConfigurationProperty', 'UserTokenConfigurationProperty', 'ValueImportanceItemProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnIndex'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_kendra.CfnIndexDefConfig] = pydantic.Field(None)


class CfnIndexDefConfig(pydantic.BaseModel):
    CapacityUnitsConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnIndexDefCapacityunitsconfigurationpropertyParams]] = pydantic.Field(None, description='')
    DocumentMetadataConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnIndexDefDocumentmetadataconfigurationpropertyParams]] = pydantic.Field(None, description='')
    JsonTokenTypeConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnIndexDefJsontokentypeconfigurationpropertyParams]] = pydantic.Field(None, description='')
    JwtTokenTypeConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnIndexDefJwttokentypeconfigurationpropertyParams]] = pydantic.Field(None, description='')
    RelevanceProperty: typing.Optional[list[models.aws_kendra.CfnIndexDefRelevancepropertyParams]] = pydantic.Field(None, description='')
    SearchProperty: typing.Optional[list[models.aws_kendra.CfnIndexDefSearchpropertyParams]] = pydantic.Field(None, description='')
    ServerSideEncryptionConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnIndexDefServersideencryptionconfigurationpropertyParams]] = pydantic.Field(None, description='')
    UserTokenConfigurationProperty: typing.Optional[list[models.aws_kendra.CfnIndexDefUsertokenconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ValueImportanceItemProperty: typing.Optional[list[models.aws_kendra.CfnIndexDefValueimportanceitempropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_kendra.CfnIndexDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_kendra.CfnIndexDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_kendra.CfnIndexDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_kendra.CfnIndexDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_kendra.CfnIndexDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_kendra.CfnIndexDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_kendra.CfnIndexDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_kendra.CfnIndexDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_kendra.CfnIndexDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_kendra.CfnIndexDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_kendra.CfnIndexDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_kendra.CfnIndexDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_kendra.CfnIndexDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnIndexDefCapacityunitsconfigurationpropertyParams(pydantic.BaseModel):
    query_capacity_units: typing.Union[int, float] = pydantic.Field(..., description='')
    storage_capacity_units: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnIndexDefDocumentmetadataconfigurationpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    type: str = pydantic.Field(..., description='')
    relevance: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnIndex_RelevancePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    search: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnIndex_SearchPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnIndexDefJsontokentypeconfigurationpropertyParams(pydantic.BaseModel):
    group_attribute_field: str = pydantic.Field(..., description='')
    user_name_attribute_field: str = pydantic.Field(..., description='')
    ...

class CfnIndexDefJwttokentypeconfigurationpropertyParams(pydantic.BaseModel):
    key_location: str = pydantic.Field(..., description='')
    claim_regex: typing.Optional[str] = pydantic.Field(None, description='')
    group_attribute_field: typing.Optional[str] = pydantic.Field(None, description='')
    issuer: typing.Optional[str] = pydantic.Field(None, description='')
    secret_manager_arn: typing.Optional[str] = pydantic.Field(None, description='')
    url: typing.Optional[str] = pydantic.Field(None, description='')
    user_name_attribute_field: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnIndexDefRelevancepropertyParams(pydantic.BaseModel):
    duration: typing.Optional[str] = pydantic.Field(None, description='')
    freshness: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    importance: typing.Union[int, float, None] = pydantic.Field(None, description='')
    rank_order: typing.Optional[str] = pydantic.Field(None, description='')
    value_importance_items: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnIndex_ValueImportanceItemPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnIndexDefSearchpropertyParams(pydantic.BaseModel):
    displayable: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    facetable: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    searchable: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    sortable: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnIndexDefServersideencryptionconfigurationpropertyParams(pydantic.BaseModel):
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnIndexDefUsertokenconfigurationpropertyParams(pydantic.BaseModel):
    json_token_type_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnIndex_JsonTokenTypeConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    jwt_token_type_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnIndex_JwtTokenTypeConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnIndexDefValueimportanceitempropertyParams(pydantic.BaseModel):
    key: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnIndexDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnIndexDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnIndexDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnIndexDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnIndexDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnIndexDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnIndexDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnIndexDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnIndexDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnIndexDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnIndexDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnIndexDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnIndexDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnIndexDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_kendra.CfnDataSourceProps
class CfnDataSourcePropsDef(BaseCfnProperty):
    index_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the index you want to use with the data source connector.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the data source.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of the data source.\n')
    custom_document_enrichment_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_CustomDocumentEnrichmentConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration information for altering document metadata and content during the document ingestion process.\n')
    data_source_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnDataSource_DataSourceConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Configuration information for an Amazon Kendra data source. The contents of the configuration depend on the type of data source. You can only specify one type of data source in the configuration. You can't specify the ``Configuration`` parameter when the ``Type`` parameter is set to ``CUSTOM`` . The ``Configuration`` parameter is required for all other data sources.\n")
    description: typing.Optional[str] = pydantic.Field(None, description='A description for the data source connector.\n')
    language_code: typing.Optional[str] = pydantic.Field(None, description='The code for a language. This shows a supported language for all documents in the data source. English is supported by default. For more information on supported languages, including their codes, see `Adding documents in languages other than English <https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html>`_ .\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description="The Amazon Resource Name (ARN) of a role with permission to access the data source. You can't specify the ``RoleArn`` parameter when the ``Type`` parameter is set to ``CUSTOM`` . The ``RoleArn`` parameter is required for all other data sources.\n")
    schedule: typing.Optional[str] = pydantic.Field(None, description="Sets the frequency that Amazon Kendra checks the documents in your data source and updates the index. If you don't set a schedule, Amazon Kendra doesn't periodically update the index.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kendra-datasource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    cfn_data_source_props = kendra.CfnDataSourceProps(\n        index_id="indexId",\n        name="name",\n        type="type",\n\n        # the properties below are optional\n        custom_document_enrichment_configuration=kendra.CfnDataSource.CustomDocumentEnrichmentConfigurationProperty(\n            inline_configurations=[kendra.CfnDataSource.InlineCustomDocumentEnrichmentConfigurationProperty(\n                condition=kendra.CfnDataSource.DocumentAttributeConditionProperty(\n                    condition_document_attribute_key="conditionDocumentAttributeKey",\n                    operator="operator",\n\n                    # the properties below are optional\n                    condition_on_value=kendra.CfnDataSource.DocumentAttributeValueProperty(\n                        date_value="dateValue",\n                        long_value=123,\n                        string_list_value=["stringListValue"],\n                        string_value="stringValue"\n                    )\n                ),\n                document_content_deletion=False,\n                target=kendra.CfnDataSource.DocumentAttributeTargetProperty(\n                    target_document_attribute_key="targetDocumentAttributeKey",\n\n                    # the properties below are optional\n                    target_document_attribute_value=kendra.CfnDataSource.DocumentAttributeValueProperty(\n                        date_value="dateValue",\n                        long_value=123,\n                        string_list_value=["stringListValue"],\n                        string_value="stringValue"\n                    ),\n                    target_document_attribute_value_deletion=False\n                )\n            )],\n            post_extraction_hook_configuration=kendra.CfnDataSource.HookConfigurationProperty(\n                lambda_arn="lambdaArn",\n                s3_bucket="s3Bucket",\n\n                # the properties below are optional\n                invocation_condition=kendra.CfnDataSource.DocumentAttributeConditionProperty(\n                    condition_document_attribute_key="conditionDocumentAttributeKey",\n                    operator="operator",\n\n                    # the properties below are optional\n                    condition_on_value=kendra.CfnDataSource.DocumentAttributeValueProperty(\n                        date_value="dateValue",\n                        long_value=123,\n                        string_list_value=["stringListValue"],\n                        string_value="stringValue"\n                    )\n                )\n            ),\n            pre_extraction_hook_configuration=kendra.CfnDataSource.HookConfigurationProperty(\n                lambda_arn="lambdaArn",\n                s3_bucket="s3Bucket",\n\n                # the properties below are optional\n                invocation_condition=kendra.CfnDataSource.DocumentAttributeConditionProperty(\n                    condition_document_attribute_key="conditionDocumentAttributeKey",\n                    operator="operator",\n\n                    # the properties below are optional\n                    condition_on_value=kendra.CfnDataSource.DocumentAttributeValueProperty(\n                        date_value="dateValue",\n                        long_value=123,\n                        string_list_value=["stringListValue"],\n                        string_value="stringValue"\n                    )\n                )\n            ),\n            role_arn="roleArn"\n        ),\n        data_source_configuration=kendra.CfnDataSource.DataSourceConfigurationProperty(\n            confluence_configuration=kendra.CfnDataSource.ConfluenceConfigurationProperty(\n                secret_arn="secretArn",\n                server_url="serverUrl",\n                version="version",\n\n                # the properties below are optional\n                attachment_configuration=kendra.CfnDataSource.ConfluenceAttachmentConfigurationProperty(\n                    attachment_field_mappings=[kendra.CfnDataSource.ConfluenceAttachmentToIndexFieldMappingProperty(\n                        data_source_field_name="dataSourceFieldName",\n                        index_field_name="indexFieldName",\n\n                        # the properties below are optional\n                        date_field_format="dateFieldFormat"\n                    )],\n                    crawl_attachments=False\n                ),\n                blog_configuration=kendra.CfnDataSource.ConfluenceBlogConfigurationProperty(\n                    blog_field_mappings=[kendra.CfnDataSource.ConfluenceBlogToIndexFieldMappingProperty(\n                        data_source_field_name="dataSourceFieldName",\n                        index_field_name="indexFieldName",\n\n                        # the properties below are optional\n                        date_field_format="dateFieldFormat"\n                    )]\n                ),\n                exclusion_patterns=["exclusionPatterns"],\n                inclusion_patterns=["inclusionPatterns"],\n                page_configuration=kendra.CfnDataSource.ConfluencePageConfigurationProperty(\n                    page_field_mappings=[kendra.CfnDataSource.ConfluencePageToIndexFieldMappingProperty(\n                        data_source_field_name="dataSourceFieldName",\n                        index_field_name="indexFieldName",\n\n                        # the properties below are optional\n                        date_field_format="dateFieldFormat"\n                    )]\n                ),\n                space_configuration=kendra.CfnDataSource.ConfluenceSpaceConfigurationProperty(\n                    crawl_archived_spaces=False,\n                    crawl_personal_spaces=False,\n                    exclude_spaces=["excludeSpaces"],\n                    include_spaces=["includeSpaces"],\n                    space_field_mappings=[kendra.CfnDataSource.ConfluenceSpaceToIndexFieldMappingProperty(\n                        data_source_field_name="dataSourceFieldName",\n                        index_field_name="indexFieldName",\n\n                        # the properties below are optional\n                        date_field_format="dateFieldFormat"\n                    )]\n                ),\n                vpc_configuration=kendra.CfnDataSource.DataSourceVpcConfigurationProperty(\n                    security_group_ids=["securityGroupIds"],\n                    subnet_ids=["subnetIds"]\n                )\n            ),\n            database_configuration=kendra.CfnDataSource.DatabaseConfigurationProperty(\n                column_configuration=kendra.CfnDataSource.ColumnConfigurationProperty(\n                    change_detecting_columns=["changeDetectingColumns"],\n                    document_data_column_name="documentDataColumnName",\n                    document_id_column_name="documentIdColumnName",\n\n                    # the properties below are optional\n                    document_title_column_name="documentTitleColumnName",\n                    field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                        data_source_field_name="dataSourceFieldName",\n                        index_field_name="indexFieldName",\n\n                        # the properties below are optional\n                        date_field_format="dateFieldFormat"\n                    )]\n                ),\n                connection_configuration=kendra.CfnDataSource.ConnectionConfigurationProperty(\n                    database_host="databaseHost",\n                    database_name="databaseName",\n                    database_port=123,\n                    secret_arn="secretArn",\n                    table_name="tableName"\n                ),\n                database_engine_type="databaseEngineType",\n\n                # the properties below are optional\n                acl_configuration=kendra.CfnDataSource.AclConfigurationProperty(\n                    allowed_groups_column_name="allowedGroupsColumnName"\n                ),\n                sql_configuration=kendra.CfnDataSource.SqlConfigurationProperty(\n                    query_identifiers_enclosing_option="queryIdentifiersEnclosingOption"\n                ),\n                vpc_configuration=kendra.CfnDataSource.DataSourceVpcConfigurationProperty(\n                    security_group_ids=["securityGroupIds"],\n                    subnet_ids=["subnetIds"]\n                )\n            ),\n            google_drive_configuration=kendra.CfnDataSource.GoogleDriveConfigurationProperty(\n                secret_arn="secretArn",\n\n                # the properties below are optional\n                exclude_mime_types=["excludeMimeTypes"],\n                exclude_shared_drives=["excludeSharedDrives"],\n                exclude_user_accounts=["excludeUserAccounts"],\n                exclusion_patterns=["exclusionPatterns"],\n                field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                    data_source_field_name="dataSourceFieldName",\n                    index_field_name="indexFieldName",\n\n                    # the properties below are optional\n                    date_field_format="dateFieldFormat"\n                )],\n                inclusion_patterns=["inclusionPatterns"]\n            ),\n            one_drive_configuration=kendra.CfnDataSource.OneDriveConfigurationProperty(\n                one_drive_users=kendra.CfnDataSource.OneDriveUsersProperty(\n                    one_drive_user_list=["oneDriveUserList"],\n                    one_drive_user_s3_path=kendra.CfnDataSource.S3PathProperty(\n                        bucket="bucket",\n                        key="key"\n                    )\n                ),\n                secret_arn="secretArn",\n                tenant_domain="tenantDomain",\n\n                # the properties below are optional\n                disable_local_groups=False,\n                exclusion_patterns=["exclusionPatterns"],\n                field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                    data_source_field_name="dataSourceFieldName",\n                    index_field_name="indexFieldName",\n\n                    # the properties below are optional\n                    date_field_format="dateFieldFormat"\n                )],\n                inclusion_patterns=["inclusionPatterns"]\n            ),\n            s3_configuration=kendra.CfnDataSource.S3DataSourceConfigurationProperty(\n                bucket_name="bucketName",\n\n                # the properties below are optional\n                access_control_list_configuration=kendra.CfnDataSource.AccessControlListConfigurationProperty(\n                    key_path="keyPath"\n                ),\n                documents_metadata_configuration=kendra.CfnDataSource.DocumentsMetadataConfigurationProperty(\n                    s3_prefix="s3Prefix"\n                ),\n                exclusion_patterns=["exclusionPatterns"],\n                inclusion_patterns=["inclusionPatterns"],\n                inclusion_prefixes=["inclusionPrefixes"]\n            ),\n            salesforce_configuration=kendra.CfnDataSource.SalesforceConfigurationProperty(\n                secret_arn="secretArn",\n                server_url="serverUrl",\n\n                # the properties below are optional\n                chatter_feed_configuration=kendra.CfnDataSource.SalesforceChatterFeedConfigurationProperty(\n                    document_data_field_name="documentDataFieldName",\n\n                    # the properties below are optional\n                    document_title_field_name="documentTitleFieldName",\n                    field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                        data_source_field_name="dataSourceFieldName",\n                        index_field_name="indexFieldName",\n\n                        # the properties below are optional\n                        date_field_format="dateFieldFormat"\n                    )],\n                    include_filter_types=["includeFilterTypes"]\n                ),\n                crawl_attachments=False,\n                exclude_attachment_file_patterns=["excludeAttachmentFilePatterns"],\n                include_attachment_file_patterns=["includeAttachmentFilePatterns"],\n                knowledge_article_configuration=kendra.CfnDataSource.SalesforceKnowledgeArticleConfigurationProperty(\n                    included_states=["includedStates"],\n\n                    # the properties below are optional\n                    custom_knowledge_article_type_configurations=[kendra.CfnDataSource.SalesforceCustomKnowledgeArticleTypeConfigurationProperty(\n                        document_data_field_name="documentDataFieldName",\n                        name="name",\n\n                        # the properties below are optional\n                        document_title_field_name="documentTitleFieldName",\n                        field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                            data_source_field_name="dataSourceFieldName",\n                            index_field_name="indexFieldName",\n\n                            # the properties below are optional\n                            date_field_format="dateFieldFormat"\n                        )]\n                    )],\n                    standard_knowledge_article_type_configuration=kendra.CfnDataSource.SalesforceStandardKnowledgeArticleTypeConfigurationProperty(\n                        document_data_field_name="documentDataFieldName",\n\n                        # the properties below are optional\n                        document_title_field_name="documentTitleFieldName",\n                        field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                            data_source_field_name="dataSourceFieldName",\n                            index_field_name="indexFieldName",\n\n                            # the properties below are optional\n                            date_field_format="dateFieldFormat"\n                        )]\n                    )\n                ),\n                standard_object_attachment_configuration=kendra.CfnDataSource.SalesforceStandardObjectAttachmentConfigurationProperty(\n                    document_title_field_name="documentTitleFieldName",\n                    field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                        data_source_field_name="dataSourceFieldName",\n                        index_field_name="indexFieldName",\n\n                        # the properties below are optional\n                        date_field_format="dateFieldFormat"\n                    )]\n                ),\n                standard_object_configurations=[kendra.CfnDataSource.SalesforceStandardObjectConfigurationProperty(\n                    document_data_field_name="documentDataFieldName",\n                    name="name",\n\n                    # the properties below are optional\n                    document_title_field_name="documentTitleFieldName",\n                    field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                        data_source_field_name="dataSourceFieldName",\n                        index_field_name="indexFieldName",\n\n                        # the properties below are optional\n                        date_field_format="dateFieldFormat"\n                    )]\n                )]\n            ),\n            service_now_configuration=kendra.CfnDataSource.ServiceNowConfigurationProperty(\n                host_url="hostUrl",\n                secret_arn="secretArn",\n                service_now_build_version="serviceNowBuildVersion",\n\n                # the properties below are optional\n                authentication_type="authenticationType",\n                knowledge_article_configuration=kendra.CfnDataSource.ServiceNowKnowledgeArticleConfigurationProperty(\n                    document_data_field_name="documentDataFieldName",\n\n                    # the properties below are optional\n                    crawl_attachments=False,\n                    document_title_field_name="documentTitleFieldName",\n                    exclude_attachment_file_patterns=["excludeAttachmentFilePatterns"],\n                    field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                        data_source_field_name="dataSourceFieldName",\n                        index_field_name="indexFieldName",\n\n                        # the properties below are optional\n                        date_field_format="dateFieldFormat"\n                    )],\n                    filter_query="filterQuery",\n                    include_attachment_file_patterns=["includeAttachmentFilePatterns"]\n                ),\n                service_catalog_configuration=kendra.CfnDataSource.ServiceNowServiceCatalogConfigurationProperty(\n                    document_data_field_name="documentDataFieldName",\n\n                    # the properties below are optional\n                    crawl_attachments=False,\n                    document_title_field_name="documentTitleFieldName",\n                    exclude_attachment_file_patterns=["excludeAttachmentFilePatterns"],\n                    field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                        data_source_field_name="dataSourceFieldName",\n                        index_field_name="indexFieldName",\n\n                        # the properties below are optional\n                        date_field_format="dateFieldFormat"\n                    )],\n                    include_attachment_file_patterns=["includeAttachmentFilePatterns"]\n                )\n            ),\n            share_point_configuration=kendra.CfnDataSource.SharePointConfigurationProperty(\n                secret_arn="secretArn",\n                share_point_version="sharePointVersion",\n                urls=["urls"],\n\n                # the properties below are optional\n                crawl_attachments=False,\n                disable_local_groups=False,\n                document_title_field_name="documentTitleFieldName",\n                exclusion_patterns=["exclusionPatterns"],\n                field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                    data_source_field_name="dataSourceFieldName",\n                    index_field_name="indexFieldName",\n\n                    # the properties below are optional\n                    date_field_format="dateFieldFormat"\n                )],\n                inclusion_patterns=["inclusionPatterns"],\n                ssl_certificate_s3_path=kendra.CfnDataSource.S3PathProperty(\n                    bucket="bucket",\n                    key="key"\n                ),\n                use_change_log=False,\n                vpc_configuration=kendra.CfnDataSource.DataSourceVpcConfigurationProperty(\n                    security_group_ids=["securityGroupIds"],\n                    subnet_ids=["subnetIds"]\n                )\n            ),\n            template_configuration=kendra.CfnDataSource.TemplateConfigurationProperty(\n                template="template"\n            ),\n            web_crawler_configuration=kendra.CfnDataSource.WebCrawlerConfigurationProperty(\n                urls=kendra.CfnDataSource.WebCrawlerUrlsProperty(\n                    seed_url_configuration=kendra.CfnDataSource.WebCrawlerSeedUrlConfigurationProperty(\n                        seed_urls=["seedUrls"],\n\n                        # the properties below are optional\n                        web_crawler_mode="webCrawlerMode"\n                    ),\n                    site_maps_configuration=kendra.CfnDataSource.WebCrawlerSiteMapsConfigurationProperty(\n                        site_maps=["siteMaps"]\n                    )\n                ),\n\n                # the properties below are optional\n                authentication_configuration=kendra.CfnDataSource.WebCrawlerAuthenticationConfigurationProperty(\n                    basic_authentication=[kendra.CfnDataSource.WebCrawlerBasicAuthenticationProperty(\n                        credentials="credentials",\n                        host="host",\n                        port=123\n                    )]\n                ),\n                crawl_depth=123,\n                max_content_size_per_page_in_mega_bytes=123,\n                max_links_per_page=123,\n                max_urls_per_minute_crawl_rate=123,\n                proxy_configuration=kendra.CfnDataSource.ProxyConfigurationProperty(\n                    host="host",\n                    port=123,\n\n                    # the properties below are optional\n                    credentials="credentials"\n                ),\n                url_exclusion_patterns=["urlExclusionPatterns"],\n                url_inclusion_patterns=["urlInclusionPatterns"]\n            ),\n            work_docs_configuration=kendra.CfnDataSource.WorkDocsConfigurationProperty(\n                organization_id="organizationId",\n\n                # the properties below are optional\n                crawl_comments=False,\n                exclusion_patterns=["exclusionPatterns"],\n                field_mappings=[kendra.CfnDataSource.DataSourceToIndexFieldMappingProperty(\n                    data_source_field_name="dataSourceFieldName",\n                    index_field_name="indexFieldName",\n\n                    # the properties below are optional\n                    date_field_format="dateFieldFormat"\n                )],\n                inclusion_patterns=["inclusionPatterns"],\n                use_change_log=False\n            )\n        ),\n        description="description",\n        language_code="languageCode",\n        role_arn="roleArn",\n        schedule="schedule",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['index_id', 'name', 'type', 'custom_document_enrichment_configuration', 'data_source_configuration', 'description', 'language_code', 'role_arn', 'schedule', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnDataSourceProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnFaqProps
class CfnFaqPropsDef(BaseCfnProperty):
    index_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the index that contains the FAQ.\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name that you assigned the FAQ when you created or updated the FAQ.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of a role with permission to access the S3 bucket that contains the FAQ.\n')
    s3_path: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_kendra.CfnFaq_S3PathPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Simple Storage Service (Amazon S3) location of the FAQ input data.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description for the FAQ.\n')
    file_format: typing.Optional[str] = pydantic.Field(None, description='The format of the input file. You can choose between a basic CSV format, a CSV format that includes customs attributes in a header, and a JSON format that includes custom attributes. The format must match the format of the file stored in the S3 bucket identified in the S3Path parameter. Valid values are: - ``CSV`` - ``CSV_WITH_HEADER`` - ``JSON``\n')
    language_code: typing.Optional[str] = pydantic.Field(None, description='The code for a language. This shows a supported language for the FAQ document as part of the summary information for FAQs. English is supported by default. For more information on supported languages, including their codes, see `Adding documents in languages other than English <https://docs.aws.amazon.com/kendra/latest/dg/in-adding-languages.html>`_ .\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kendra-faq.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    cfn_faq_props = kendra.CfnFaqProps(\n        index_id="indexId",\n        name="name",\n        role_arn="roleArn",\n        s3_path=kendra.CfnFaq.S3PathProperty(\n            bucket="bucket",\n            key="key"\n        ),\n\n        # the properties below are optional\n        description="description",\n        file_format="fileFormat",\n        language_code="languageCode",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['index_id', 'name', 'role_arn', 's3_path', 'description', 'file_format', 'language_code', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnFaqProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_kendra.CfnIndexProps
class CfnIndexPropsDef(BaseCfnProperty):
    edition: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Indicates whether the index is a Enterprise Edition index or a Developer Edition index. Valid values are ``DEVELOPER_EDITION`` and ``ENTERPRISE_EDITION`` .\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the index.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='An IAM role that gives Amazon Kendra permissions to access your Amazon CloudWatch logs and metrics. This is also the role used when you use the `BatchPutDocument <https://docs.aws.amazon.com/kendra/latest/dg/BatchPutDocument.html>`_ operation to index documents from an Amazon S3 bucket.\n')
    capacity_units: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnIndex_CapacityUnitsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies additional capacity units configured for your Enterprise Edition index. You can add and remove capacity units to fit your usage requirements.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description for the index.\n')
    document_metadata_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnIndex_DocumentMetadataConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="Specifies the properties of an index field. You can add either a custom or a built-in field. You can add and remove built-in fields at any time. When a built-in field is removed it's configuration reverts to the default for the field. Custom fields can't be removed from an index after they are added.\n")
    server_side_encryption_configuration: typing.Union[models.UnsupportedResource, models.aws_kendra.CfnIndex_ServerSideEncryptionConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The identifier of the AWS KMS customer managed key (CMK) to use to encrypt data indexed by Amazon Kendra. Amazon Kendra doesn't support asymmetric CMKs.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n')
    user_context_policy: typing.Optional[str] = pydantic.Field(None, description='The user context policy. ATTRIBUTE_FILTER - All indexed content is searchable and displayable for all users. If you want to filter search results on user context, you can use the attribute filters of ``_user_id`` and ``_group_ids`` or you can provide user and group information in ``UserContext`` . USER_TOKEN - Enables token-based user access control to filter search results on user context. All documents with no access control and all documents accessible to the user will be searchable and displayable.\n')
    user_token_configurations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_kendra.CfnIndex_UserTokenConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Defines the type of user token used for the index.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-kendra-index.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_kendra as kendra\n\n    cfn_index_props = kendra.CfnIndexProps(\n        edition="edition",\n        name="name",\n        role_arn="roleArn",\n\n        # the properties below are optional\n        capacity_units=kendra.CfnIndex.CapacityUnitsConfigurationProperty(\n            query_capacity_units=123,\n            storage_capacity_units=123\n        ),\n        description="description",\n        document_metadata_configurations=[kendra.CfnIndex.DocumentMetadataConfigurationProperty(\n            name="name",\n            type="type",\n\n            # the properties below are optional\n            relevance=kendra.CfnIndex.RelevanceProperty(\n                duration="duration",\n                freshness=False,\n                importance=123,\n                rank_order="rankOrder",\n                value_importance_items=[kendra.CfnIndex.ValueImportanceItemProperty(\n                    key="key",\n                    value=123\n                )]\n            ),\n            search=kendra.CfnIndex.SearchProperty(\n                displayable=False,\n                facetable=False,\n                searchable=False,\n                sortable=False\n            )\n        )],\n        server_side_encryption_configuration=kendra.CfnIndex.ServerSideEncryptionConfigurationProperty(\n            kms_key_id="kmsKeyId"\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        user_context_policy="userContextPolicy",\n        user_token_configurations=[kendra.CfnIndex.UserTokenConfigurationProperty(\n            json_token_type_configuration=kendra.CfnIndex.JsonTokenTypeConfigurationProperty(\n                group_attribute_field="groupAttributeField",\n                user_name_attribute_field="userNameAttributeField"\n            ),\n            jwt_token_type_configuration=kendra.CfnIndex.JwtTokenTypeConfigurationProperty(\n                key_location="keyLocation",\n\n                # the properties below are optional\n                claim_regex="claimRegex",\n                group_attribute_field="groupAttributeField",\n                issuer="issuer",\n                secret_manager_arn="secretManagerArn",\n                url="url",\n                user_name_attribute_field="userNameAttributeField"\n            )\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['edition', 'name', 'role_arn', 'capacity_units', 'description', 'document_metadata_configurations', 'server_side_encryption_configuration', 'tags', 'user_context_policy', 'user_token_configurations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_kendra.CfnIndexProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnDataSource_AccessControlListConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_AccessControlListConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_AclConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_AclConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_ColumnConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_ColumnConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_ConfluenceAttachmentConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_ConfluenceAttachmentConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_ConfluenceAttachmentToIndexFieldMappingProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_ConfluenceAttachmentToIndexFieldMappingPropertyDef]] = pydantic.Field(None)
    CfnDataSource_ConfluenceBlogConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_ConfluenceBlogConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_ConfluenceBlogToIndexFieldMappingProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_ConfluenceBlogToIndexFieldMappingPropertyDef]] = pydantic.Field(None)
    CfnDataSource_ConfluenceConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_ConfluenceConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_ConfluencePageConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_ConfluencePageConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_ConfluencePageToIndexFieldMappingProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_ConfluencePageToIndexFieldMappingPropertyDef]] = pydantic.Field(None)
    CfnDataSource_ConfluenceSpaceConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_ConfluenceSpaceConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_ConfluenceSpaceToIndexFieldMappingProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_ConfluenceSpaceToIndexFieldMappingPropertyDef]] = pydantic.Field(None)
    CfnDataSource_ConnectionConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_ConnectionConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_CustomDocumentEnrichmentConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_CustomDocumentEnrichmentConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_DatabaseConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_DatabaseConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_DataSourceConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_DataSourceConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_DataSourceToIndexFieldMappingProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_DataSourceToIndexFieldMappingPropertyDef]] = pydantic.Field(None)
    CfnDataSource_DataSourceVpcConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_DataSourceVpcConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_DocumentAttributeConditionProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_DocumentAttributeConditionPropertyDef]] = pydantic.Field(None)
    CfnDataSource_DocumentAttributeTargetProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_DocumentAttributeTargetPropertyDef]] = pydantic.Field(None)
    CfnDataSource_DocumentAttributeValueProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_DocumentAttributeValuePropertyDef]] = pydantic.Field(None)
    CfnDataSource_DocumentsMetadataConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_DocumentsMetadataConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_GoogleDriveConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_GoogleDriveConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_HookConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_HookConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_InlineCustomDocumentEnrichmentConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_InlineCustomDocumentEnrichmentConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_OneDriveConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_OneDriveConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_OneDriveUsersProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_OneDriveUsersPropertyDef]] = pydantic.Field(None)
    CfnDataSource_ProxyConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_ProxyConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_S3DataSourceConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_S3DataSourceConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_S3PathProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_S3PathPropertyDef]] = pydantic.Field(None)
    CfnDataSource_SalesforceChatterFeedConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_SalesforceChatterFeedConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_SalesforceConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_SalesforceConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_SalesforceCustomKnowledgeArticleTypeConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_SalesforceCustomKnowledgeArticleTypeConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_SalesforceKnowledgeArticleConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_SalesforceKnowledgeArticleConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_SalesforceStandardKnowledgeArticleTypeConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_SalesforceStandardKnowledgeArticleTypeConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_SalesforceStandardObjectAttachmentConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_SalesforceStandardObjectAttachmentConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_SalesforceStandardObjectConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_SalesforceStandardObjectConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_ServiceNowConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_ServiceNowConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_ServiceNowKnowledgeArticleConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_ServiceNowKnowledgeArticleConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_ServiceNowServiceCatalogConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_ServiceNowServiceCatalogConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_SharePointConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_SharePointConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_SqlConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_SqlConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_TemplateConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_TemplateConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_WebCrawlerAuthenticationConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_WebCrawlerAuthenticationConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_WebCrawlerBasicAuthenticationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_WebCrawlerBasicAuthenticationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_WebCrawlerConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_WebCrawlerConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_WebCrawlerSeedUrlConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_WebCrawlerSeedUrlConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_WebCrawlerSiteMapsConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_WebCrawlerSiteMapsConfigurationPropertyDef]] = pydantic.Field(None)
    CfnDataSource_WebCrawlerUrlsProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_WebCrawlerUrlsPropertyDef]] = pydantic.Field(None)
    CfnDataSource_WorkDocsConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnDataSource_WorkDocsConfigurationPropertyDef]] = pydantic.Field(None)
    CfnFaq_S3PathProperty: typing.Optional[dict[str, models.aws_kendra.CfnFaq_S3PathPropertyDef]] = pydantic.Field(None)
    CfnIndex_CapacityUnitsConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnIndex_CapacityUnitsConfigurationPropertyDef]] = pydantic.Field(None)
    CfnIndex_DocumentMetadataConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnIndex_DocumentMetadataConfigurationPropertyDef]] = pydantic.Field(None)
    CfnIndex_JsonTokenTypeConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnIndex_JsonTokenTypeConfigurationPropertyDef]] = pydantic.Field(None)
    CfnIndex_JwtTokenTypeConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnIndex_JwtTokenTypeConfigurationPropertyDef]] = pydantic.Field(None)
    CfnIndex_RelevanceProperty: typing.Optional[dict[str, models.aws_kendra.CfnIndex_RelevancePropertyDef]] = pydantic.Field(None)
    CfnIndex_SearchProperty: typing.Optional[dict[str, models.aws_kendra.CfnIndex_SearchPropertyDef]] = pydantic.Field(None)
    CfnIndex_ServerSideEncryptionConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnIndex_ServerSideEncryptionConfigurationPropertyDef]] = pydantic.Field(None)
    CfnIndex_UserTokenConfigurationProperty: typing.Optional[dict[str, models.aws_kendra.CfnIndex_UserTokenConfigurationPropertyDef]] = pydantic.Field(None)
    CfnIndex_ValueImportanceItemProperty: typing.Optional[dict[str, models.aws_kendra.CfnIndex_ValueImportanceItemPropertyDef]] = pydantic.Field(None)
    CfnDataSource: typing.Optional[dict[str, models.aws_kendra.CfnDataSourceDef]] = pydantic.Field(None)
    CfnFaq: typing.Optional[dict[str, models.aws_kendra.CfnFaqDef]] = pydantic.Field(None)
    CfnIndex: typing.Optional[dict[str, models.aws_kendra.CfnIndexDef]] = pydantic.Field(None)
    CfnDataSourceProps: typing.Optional[dict[str, models.aws_kendra.CfnDataSourcePropsDef]] = pydantic.Field(None)
    CfnFaqProps: typing.Optional[dict[str, models.aws_kendra.CfnFaqPropsDef]] = pydantic.Field(None)
    CfnIndexProps: typing.Optional[dict[str, models.aws_kendra.CfnIndexPropsDef]] = pydantic.Field(None)
    ...

import models
