from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_nimblestudio.CfnLaunchProfile.StreamConfigurationProperty
class CfnLaunchProfile_StreamConfigurationPropertyDef(BaseStruct):
    clipboard_mode: str = pydantic.Field(..., description='Allows or deactivates the use of the system clipboard to copy and paste between the streaming session and streaming client.\n')
    ec2_instance_types: typing.Sequence[str] = pydantic.Field(..., description='The EC2 instance types that users can select from when launching a streaming session with this launch profile.\n')
    streaming_image_ids: typing.Sequence[str] = pydantic.Field(..., description='The streaming images that users can select from when launching a streaming session with this launch profile.\n')
    automatic_termination_mode: typing.Optional[str] = pydantic.Field(None, description='``CfnLaunchProfile.StreamConfigurationProperty.AutomaticTerminationMode``.\n')
    max_session_length_in_minutes: typing.Union[int, float, None] = pydantic.Field(None, description='The length of time, in minutes, that a streaming session can be active before it is stopped or terminated. After this point, Nimble Studio automatically terminates or stops the session. The default length of time is 690 minutes, and the maximum length of time is 30 days.\n')
    max_stopped_session_length_in_minutes: typing.Union[int, float, None] = pydantic.Field(None, description='Integer that determines if you can start and stop your sessions and how long a session can stay in the ``STOPPED`` state. The default value is 0. The maximum value is 5760. This field is allowed only when ``sessionPersistenceMode`` is ``ACTIVATED`` and ``automaticTerminationMode`` is ``ACTIVATED`` . If the value is set to 0, your sessions canâ€™t be ``STOPPED`` . If you then call ``StopStreamingSession`` , the session fails. If the time that a session stays in the ``READY`` state exceeds the ``maxSessionLengthInMinutes`` value, the session will automatically be terminated (instead of ``STOPPED`` ). If the value is set to a positive number, the session can be stopped. You can call ``StopStreamingSession`` to stop sessions in the ``READY`` state. If the time that a session stays in the ``READY`` state exceeds the ``maxSessionLengthInMinutes`` value, the session will automatically be stopped (instead of terminated).\n')
    session_backup: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnLaunchProfile_StreamConfigurationSessionBackupPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnLaunchProfile.StreamConfigurationProperty.SessionBackup``.\n')
    session_persistence_mode: typing.Optional[str] = pydantic.Field(None, description='``CfnLaunchProfile.StreamConfigurationProperty.SessionPersistenceMode``.\n')
    session_storage: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnLaunchProfile_StreamConfigurationSessionStoragePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The upload storage for a streaming session.\n')
    volume_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnLaunchProfile_VolumeConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnLaunchProfile.StreamConfigurationProperty.VolumeConfiguration``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-nimblestudio-launchprofile-streamconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_nimblestudio as nimblestudio\n\n    stream_configuration_property = nimblestudio.CfnLaunchProfile.StreamConfigurationProperty(\n        clipboard_mode="clipboardMode",\n        ec2_instance_types=["ec2InstanceTypes"],\n        streaming_image_ids=["streamingImageIds"],\n\n        # the properties below are optional\n        automatic_termination_mode="automaticTerminationMode",\n        max_session_length_in_minutes=123,\n        max_stopped_session_length_in_minutes=123,\n        session_backup=nimblestudio.CfnLaunchProfile.StreamConfigurationSessionBackupProperty(\n            max_backups_to_retain=123,\n            mode="mode"\n        ),\n        session_persistence_mode="sessionPersistenceMode",\n        session_storage=nimblestudio.CfnLaunchProfile.StreamConfigurationSessionStorageProperty(\n            mode=["mode"],\n\n            # the properties below are optional\n            root=nimblestudio.CfnLaunchProfile.StreamingSessionStorageRootProperty(\n                linux="linux",\n                windows="windows"\n            )\n        ),\n        volume_configuration=nimblestudio.CfnLaunchProfile.VolumeConfigurationProperty(\n            iops=123,\n            size=123,\n            throughput=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['clipboard_mode', 'ec2_instance_types', 'streaming_image_ids', 'automatic_termination_mode', 'max_session_length_in_minutes', 'max_stopped_session_length_in_minutes', 'session_backup', 'session_persistence_mode', 'session_storage', 'volume_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnLaunchProfile.StreamConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_nimblestudio.CfnLaunchProfile.StreamConfigurationSessionBackupProperty
class CfnLaunchProfile_StreamConfigurationSessionBackupPropertyDef(BaseStruct):
    max_backups_to_retain: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnLaunchProfile.StreamConfigurationSessionBackupProperty.MaxBackupsToRetain``.')
    mode: typing.Optional[str] = pydantic.Field(None, description='``CfnLaunchProfile.StreamConfigurationSessionBackupProperty.Mode``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-nimblestudio-launchprofile-streamconfigurationsessionbackup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_nimblestudio as nimblestudio\n\n    stream_configuration_session_backup_property = nimblestudio.CfnLaunchProfile.StreamConfigurationSessionBackupProperty(\n        max_backups_to_retain=123,\n        mode="mode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_backups_to_retain', 'mode']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnLaunchProfile.StreamConfigurationSessionBackupProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_nimblestudio.CfnLaunchProfile.StreamConfigurationSessionStorageProperty
class CfnLaunchProfile_StreamConfigurationSessionStoragePropertyDef(BaseStruct):
    mode: typing.Sequence[str] = pydantic.Field(..., description='Allows artists to upload files to their workstations. The only valid option is ``UPLOAD`` .\n')
    root: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnLaunchProfile_StreamingSessionStorageRootPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for the upload storage root of the streaming session.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-nimblestudio-launchprofile-streamconfigurationsessionstorage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_nimblestudio as nimblestudio\n\n    stream_configuration_session_storage_property = nimblestudio.CfnLaunchProfile.StreamConfigurationSessionStorageProperty(\n        mode=["mode"],\n\n        # the properties below are optional\n        root=nimblestudio.CfnLaunchProfile.StreamingSessionStorageRootProperty(\n            linux="linux",\n            windows="windows"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['mode', 'root']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnLaunchProfile.StreamConfigurationSessionStorageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_nimblestudio.CfnLaunchProfile.StreamingSessionStorageRootProperty
class CfnLaunchProfile_StreamingSessionStorageRootPropertyDef(BaseStruct):
    linux: typing.Optional[str] = pydantic.Field(None, description='The folder path in Linux workstations where files are uploaded.\n')
    windows: typing.Optional[str] = pydantic.Field(None, description='The folder path in Windows workstations where files are uploaded.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-nimblestudio-launchprofile-streamingsessionstorageroot.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_nimblestudio as nimblestudio\n\n    streaming_session_storage_root_property = nimblestudio.CfnLaunchProfile.StreamingSessionStorageRootProperty(\n        linux="linux",\n        windows="windows"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['linux', 'windows']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnLaunchProfile.StreamingSessionStorageRootProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_nimblestudio.CfnLaunchProfile.VolumeConfigurationProperty
class CfnLaunchProfile_VolumeConfigurationPropertyDef(BaseStruct):
    iops: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnLaunchProfile.VolumeConfigurationProperty.Iops``.')
    size: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnLaunchProfile.VolumeConfigurationProperty.Size``.\n')
    throughput: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnLaunchProfile.VolumeConfigurationProperty.Throughput``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-nimblestudio-launchprofile-volumeconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_nimblestudio as nimblestudio\n\n    volume_configuration_property = nimblestudio.CfnLaunchProfile.VolumeConfigurationProperty(\n        iops=123,\n        size=123,\n        throughput=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['iops', 'size', 'throughput']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnLaunchProfile.VolumeConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_nimblestudio.CfnStreamingImage.StreamingImageEncryptionConfigurationProperty
class CfnStreamingImage_StreamingImageEncryptionConfigurationPropertyDef(BaseStruct):
    key_type: str = pydantic.Field(..., description='``CfnStreamingImage.StreamingImageEncryptionConfigurationProperty.KeyType``.')
    key_arn: typing.Optional[str] = pydantic.Field(None, description='``CfnStreamingImage.StreamingImageEncryptionConfigurationProperty.KeyArn``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-nimblestudio-streamingimage-streamingimageencryptionconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_nimblestudio as nimblestudio\n\n    streaming_image_encryption_configuration_property = nimblestudio.CfnStreamingImage.StreamingImageEncryptionConfigurationProperty(\n        key_type="keyType",\n\n        # the properties below are optional\n        key_arn="keyArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key_type', 'key_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnStreamingImage.StreamingImageEncryptionConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_nimblestudio.CfnStudio.StudioEncryptionConfigurationProperty
class CfnStudio_StudioEncryptionConfigurationPropertyDef(BaseStruct):
    key_type: str = pydantic.Field(..., description='The type of KMS key that is used to encrypt studio data.\n')
    key_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN for a KMS key that is used to encrypt studio data.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-nimblestudio-studio-studioencryptionconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_nimblestudio as nimblestudio\n\n    studio_encryption_configuration_property = nimblestudio.CfnStudio.StudioEncryptionConfigurationProperty(\n        key_type="keyType",\n\n        # the properties below are optional\n        key_arn="keyArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key_type', 'key_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnStudio.StudioEncryptionConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_nimblestudio.CfnStudioComponent.ActiveDirectoryComputerAttributeProperty
class CfnStudioComponent_ActiveDirectoryComputerAttributePropertyDef(BaseStruct):
    name: typing.Optional[str] = pydantic.Field(None, description='The name for the LDAP attribute.\n')
    value: typing.Optional[str] = pydantic.Field(None, description='The value for the LDAP attribute.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-nimblestudio-studiocomponent-activedirectorycomputerattribute.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_nimblestudio as nimblestudio\n\n    active_directory_computer_attribute_property = nimblestudio.CfnStudioComponent.ActiveDirectoryComputerAttributeProperty(\n        name="name",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnStudioComponent.ActiveDirectoryComputerAttributeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_nimblestudio.CfnStudioComponent.ActiveDirectoryConfigurationProperty
class CfnStudioComponent_ActiveDirectoryConfigurationPropertyDef(BaseStruct):
    computer_attributes: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnStudioComponent_ActiveDirectoryComputerAttributePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A collection of custom attributes for an Active Directory computer.\n')
    directory_id: typing.Optional[str] = pydantic.Field(None, description='The directory ID of the AWS Directory Service for Microsoft Active Directory to access using this studio component.\n')
    organizational_unit_distinguished_name: typing.Optional[str] = pydantic.Field(None, description='The distinguished name (DN) and organizational unit (OU) of an Active Directory computer.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-nimblestudio-studiocomponent-activedirectoryconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_nimblestudio as nimblestudio\n\n    active_directory_configuration_property = nimblestudio.CfnStudioComponent.ActiveDirectoryConfigurationProperty(\n        computer_attributes=[nimblestudio.CfnStudioComponent.ActiveDirectoryComputerAttributeProperty(\n            name="name",\n            value="value"\n        )],\n        directory_id="directoryId",\n        organizational_unit_distinguished_name="organizationalUnitDistinguishedName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['computer_attributes', 'directory_id', 'organizational_unit_distinguished_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnStudioComponent.ActiveDirectoryConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_nimblestudio.CfnStudioComponent.ComputeFarmConfigurationProperty
class CfnStudioComponent_ComputeFarmConfigurationPropertyDef(BaseStruct):
    active_directory_user: typing.Optional[str] = pydantic.Field(None, description='The name of an Active Directory user that is used on ComputeFarm worker instances.\n')
    endpoint: typing.Optional[str] = pydantic.Field(None, description='The endpoint of the ComputeFarm that is accessed by the studio component resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-nimblestudio-studiocomponent-computefarmconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_nimblestudio as nimblestudio\n\n    compute_farm_configuration_property = nimblestudio.CfnStudioComponent.ComputeFarmConfigurationProperty(\n        active_directory_user="activeDirectoryUser",\n        endpoint="endpoint"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['active_directory_user', 'endpoint']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnStudioComponent.ComputeFarmConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_nimblestudio.CfnStudioComponent.LicenseServiceConfigurationProperty
class CfnStudioComponent_LicenseServiceConfigurationPropertyDef(BaseStruct):
    endpoint: typing.Optional[str] = pydantic.Field(None, description='The endpoint of the license service that is accessed by the studio component resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-nimblestudio-studiocomponent-licenseserviceconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_nimblestudio as nimblestudio\n\n    license_service_configuration_property = nimblestudio.CfnStudioComponent.LicenseServiceConfigurationProperty(\n        endpoint="endpoint"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['endpoint']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnStudioComponent.LicenseServiceConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_nimblestudio.CfnStudioComponent.ScriptParameterKeyValueProperty
class CfnStudioComponent_ScriptParameterKeyValuePropertyDef(BaseStruct):
    key: typing.Optional[str] = pydantic.Field(None, description='A script parameter key.\n')
    value: typing.Optional[str] = pydantic.Field(None, description='A script parameter value.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-nimblestudio-studiocomponent-scriptparameterkeyvalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_nimblestudio as nimblestudio\n\n    script_parameter_key_value_property = nimblestudio.CfnStudioComponent.ScriptParameterKeyValueProperty(\n        key="key",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnStudioComponent.ScriptParameterKeyValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_nimblestudio.CfnStudioComponent.SharedFileSystemConfigurationProperty
class CfnStudioComponent_SharedFileSystemConfigurationPropertyDef(BaseStruct):
    endpoint: typing.Optional[str] = pydantic.Field(None, description='The endpoint of the shared file system that is accessed by the studio component resource.\n')
    file_system_id: typing.Optional[str] = pydantic.Field(None, description='The unique identifier for a file system.\n')
    linux_mount_point: typing.Optional[str] = pydantic.Field(None, description='The mount location for a shared file system on a Linux virtual workstation.\n')
    share_name: typing.Optional[str] = pydantic.Field(None, description='The name of the file share.\n')
    windows_mount_drive: typing.Optional[str] = pydantic.Field(None, description='The mount location for a shared file system on a Windows virtual workstation.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-nimblestudio-studiocomponent-sharedfilesystemconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_nimblestudio as nimblestudio\n\n    shared_file_system_configuration_property = nimblestudio.CfnStudioComponent.SharedFileSystemConfigurationProperty(\n        endpoint="endpoint",\n        file_system_id="fileSystemId",\n        linux_mount_point="linuxMountPoint",\n        share_name="shareName",\n        windows_mount_drive="windowsMountDrive"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['endpoint', 'file_system_id', 'linux_mount_point', 'share_name', 'windows_mount_drive']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnStudioComponent.SharedFileSystemConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_nimblestudio.CfnStudioComponent.StudioComponentConfigurationProperty
class CfnStudioComponent_StudioComponentConfigurationPropertyDef(BaseStruct):
    active_directory_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnStudioComponent_ActiveDirectoryConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for a AWS Directory Service for Microsoft Active Directory studio resource.\n')
    compute_farm_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnStudioComponent_ComputeFarmConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for a render farm that is associated with a studio resource.\n')
    license_service_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnStudioComponent_LicenseServiceConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for a license service that is associated with a studio resource.\n')
    shared_file_system_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnStudioComponent_SharedFileSystemConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for a shared file storage system that is associated with a studio resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-nimblestudio-studiocomponent-studiocomponentconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_nimblestudio as nimblestudio\n\n    studio_component_configuration_property = nimblestudio.CfnStudioComponent.StudioComponentConfigurationProperty(\n        active_directory_configuration=nimblestudio.CfnStudioComponent.ActiveDirectoryConfigurationProperty(\n            computer_attributes=[nimblestudio.CfnStudioComponent.ActiveDirectoryComputerAttributeProperty(\n                name="name",\n                value="value"\n            )],\n            directory_id="directoryId",\n            organizational_unit_distinguished_name="organizationalUnitDistinguishedName"\n        ),\n        compute_farm_configuration=nimblestudio.CfnStudioComponent.ComputeFarmConfigurationProperty(\n            active_directory_user="activeDirectoryUser",\n            endpoint="endpoint"\n        ),\n        license_service_configuration=nimblestudio.CfnStudioComponent.LicenseServiceConfigurationProperty(\n            endpoint="endpoint"\n        ),\n        shared_file_system_configuration=nimblestudio.CfnStudioComponent.SharedFileSystemConfigurationProperty(\n            endpoint="endpoint",\n            file_system_id="fileSystemId",\n            linux_mount_point="linuxMountPoint",\n            share_name="shareName",\n            windows_mount_drive="windowsMountDrive"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['active_directory_configuration', 'compute_farm_configuration', 'license_service_configuration', 'shared_file_system_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnStudioComponent.StudioComponentConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_nimblestudio.CfnStudioComponent.StudioComponentInitializationScriptProperty
class CfnStudioComponent_StudioComponentInitializationScriptPropertyDef(BaseStruct):
    launch_profile_protocol_version: typing.Optional[str] = pydantic.Field(None, description='The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".\n')
    platform: typing.Optional[str] = pydantic.Field(None, description='The platform of the initialization script, either Windows or Linux.\n')
    run_context: typing.Optional[str] = pydantic.Field(None, description='The method to use when running the initialization script.\n')
    script: typing.Optional[str] = pydantic.Field(None, description='The initialization script.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-nimblestudio-studiocomponent-studiocomponentinitializationscript.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_nimblestudio as nimblestudio\n\n    studio_component_initialization_script_property = nimblestudio.CfnStudioComponent.StudioComponentInitializationScriptProperty(\n        launch_profile_protocol_version="launchProfileProtocolVersion",\n        platform="platform",\n        run_context="runContext",\n        script="script"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['launch_profile_protocol_version', 'platform', 'run_context', 'script']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnStudioComponent.StudioComponentInitializationScriptProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_nimblestudio.CfnLaunchProfile
class CfnLaunchProfileDef(BaseCfnResource):
    ec2_subnet_ids: typing.Sequence[str] = pydantic.Field(..., description='Unique identifiers for a collection of EC2 subnets.\n')
    launch_profile_protocol_versions: typing.Sequence[str] = pydantic.Field(..., description='The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".\n')
    name: str = pydantic.Field(..., description='A friendly name for the launch profile.\n')
    stream_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnLaunchProfile_StreamConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A configuration for a streaming session.\n')
    studio_component_ids: typing.Sequence[str] = pydantic.Field(..., description='Unique identifiers for a collection of studio components that can be used with this launch profile.\n')
    studio_id: str = pydantic.Field(..., description='The unique identifier for a studio resource. In Nimble Studio , all other resources are contained in a studio resource.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A human-readable description of the launch profile.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['ec2_subnet_ids', 'launch_profile_protocol_versions', 'name', 'stream_configuration', 'studio_component_ids', 'studio_id', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['StreamConfigurationProperty', 'StreamConfigurationSessionBackupProperty', 'StreamConfigurationSessionStorageProperty', 'StreamingSessionStorageRootProperty', 'VolumeConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnLaunchProfile'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnLaunchProfileDefConfig] = pydantic.Field(None)


class CfnLaunchProfileDefConfig(pydantic.BaseModel):
    StreamConfigurationProperty: typing.Optional[list[CfnLaunchProfileDefStreamconfigurationpropertyParams]] = pydantic.Field(None, description='')
    StreamConfigurationSessionBackupProperty: typing.Optional[list[CfnLaunchProfileDefStreamconfigurationsessionbackuppropertyParams]] = pydantic.Field(None, description='')
    StreamConfigurationSessionStorageProperty: typing.Optional[list[CfnLaunchProfileDefStreamconfigurationsessionstoragepropertyParams]] = pydantic.Field(None, description='')
    StreamingSessionStorageRootProperty: typing.Optional[list[CfnLaunchProfileDefStreamingsessionstoragerootpropertyParams]] = pydantic.Field(None, description='')
    VolumeConfigurationProperty: typing.Optional[list[CfnLaunchProfileDefVolumeconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnLaunchProfileDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnLaunchProfileDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnLaunchProfileDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnLaunchProfileDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnLaunchProfileDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnLaunchProfileDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnLaunchProfileDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnLaunchProfileDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnLaunchProfileDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnLaunchProfileDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnLaunchProfileDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnLaunchProfileDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnLaunchProfileDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnLaunchProfileDefStreamconfigurationpropertyParams(pydantic.BaseModel):
    clipboard_mode: str = pydantic.Field(..., description='')
    ec2_instance_types: typing.Sequence[str] = pydantic.Field(..., description='')
    streaming_image_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    automatic_termination_mode: typing.Optional[str] = pydantic.Field(None, description='')
    max_session_length_in_minutes: typing.Union[int, float, None] = pydantic.Field(None, description='')
    max_stopped_session_length_in_minutes: typing.Union[int, float, None] = pydantic.Field(None, description='')
    session_backup: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnLaunchProfile_StreamConfigurationSessionBackupPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    session_persistence_mode: typing.Optional[str] = pydantic.Field(None, description='')
    session_storage: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnLaunchProfile_StreamConfigurationSessionStoragePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    volume_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnLaunchProfile_VolumeConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnLaunchProfileDefStreamconfigurationsessionbackuppropertyParams(pydantic.BaseModel):
    max_backups_to_retain: typing.Union[int, float, None] = pydantic.Field(None, description='')
    mode: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnLaunchProfileDefStreamconfigurationsessionstoragepropertyParams(pydantic.BaseModel):
    mode: typing.Sequence[str] = pydantic.Field(..., description='')
    root: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnLaunchProfile_StreamingSessionStorageRootPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnLaunchProfileDefStreamingsessionstoragerootpropertyParams(pydantic.BaseModel):
    linux: typing.Optional[str] = pydantic.Field(None, description='')
    windows: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnLaunchProfileDefVolumeconfigurationpropertyParams(pydantic.BaseModel):
    iops: typing.Union[int, float, None] = pydantic.Field(None, description='')
    size: typing.Union[int, float, None] = pydantic.Field(None, description='')
    throughput: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnLaunchProfileDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnLaunchProfileDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnLaunchProfileDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnLaunchProfileDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnLaunchProfileDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnLaunchProfileDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnLaunchProfileDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnLaunchProfileDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnLaunchProfileDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnLaunchProfileDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnLaunchProfileDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnLaunchProfileDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnLaunchProfileDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnLaunchProfileDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_nimblestudio.CfnStreamingImage
class CfnStreamingImageDef(BaseCfnResource):
    ec2_image_id: str = pydantic.Field(..., description='The ID of an EC2 machine image with which to create the streaming image.\n')
    name: str = pydantic.Field(..., description='A friendly name for a streaming image resource.\n')
    studio_id: str = pydantic.Field(..., description='The unique identifier for a studio resource. In Nimble Studio , all other resources are contained in a studio resource.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A human-readable description of the streaming image.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['ec2_image_id', 'name', 'studio_id', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['StreamingImageEncryptionConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnStreamingImage'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnStreamingImageDefConfig] = pydantic.Field(None)


class CfnStreamingImageDefConfig(pydantic.BaseModel):
    StreamingImageEncryptionConfigurationProperty: typing.Optional[list[CfnStreamingImageDefStreamingimageencryptionconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnStreamingImageDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnStreamingImageDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnStreamingImageDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnStreamingImageDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnStreamingImageDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnStreamingImageDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnStreamingImageDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnStreamingImageDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnStreamingImageDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnStreamingImageDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnStreamingImageDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnStreamingImageDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnStreamingImageDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnStreamingImageDefStreamingimageencryptionconfigurationpropertyParams(pydantic.BaseModel):
    key_type: str = pydantic.Field(..., description='')
    key_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnStreamingImageDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnStreamingImageDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStreamingImageDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnStreamingImageDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStreamingImageDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnStreamingImageDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnStreamingImageDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnStreamingImageDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnStreamingImageDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnStreamingImageDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStreamingImageDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnStreamingImageDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnStreamingImageDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStreamingImageDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_nimblestudio.CfnStudio
class CfnStudioDef(BaseCfnResource):
    admin_role_arn: str = pydantic.Field(..., description='The IAM role that studio admins assume when logging in to the Nimble Studio portal.\n')
    display_name: str = pydantic.Field(..., description='A friendly name for the studio.\n')
    studio_name: str = pydantic.Field(..., description='The name of the studio, as included in the URL when accessing it in the Nimble Studio portal.\n')
    user_role_arn: str = pydantic.Field(..., description='The IAM role that studio users assume when logging in to the Nimble Studio portal.\n')
    studio_encryption_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnStudio_StudioEncryptionConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration of the encryption method that is used for the studio.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['admin_role_arn', 'display_name', 'studio_name', 'user_role_arn', 'studio_encryption_configuration', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['StudioEncryptionConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnStudio'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnStudioDefConfig] = pydantic.Field(None)


class CfnStudioDefConfig(pydantic.BaseModel):
    StudioEncryptionConfigurationProperty: typing.Optional[list[CfnStudioDefStudioencryptionconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnStudioDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnStudioDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnStudioDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnStudioDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnStudioDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnStudioDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnStudioDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnStudioDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnStudioDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnStudioDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnStudioDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnStudioDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnStudioDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnStudioDefStudioencryptionconfigurationpropertyParams(pydantic.BaseModel):
    key_type: str = pydantic.Field(..., description='')
    key_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnStudioDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnStudioDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStudioDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnStudioDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStudioDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnStudioDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnStudioDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnStudioDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnStudioDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnStudioDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStudioDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnStudioDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnStudioDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStudioDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_nimblestudio.CfnStudioComponent
class CfnStudioComponentDef(BaseCfnResource):
    name: str = pydantic.Field(..., description='A friendly name for the studio component resource.\n')
    studio_id: str = pydantic.Field(..., description='The unique identifier for a studio resource. In Nimble Studio , all other resources are contained in a studio resource.\n')
    type: str = pydantic.Field(..., description='The type of the studio component.\n')
    configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnStudioComponent_StudioComponentConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration of the studio component, based on component type.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A human-readable description for the studio component resource.\n')
    ec2_security_group_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The EC2 security groups that control access to the studio component.\n')
    initialization_scripts: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnStudioComponent_StudioComponentInitializationScriptPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Initialization scripts for studio components.\n')
    script_parameters: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnStudioComponent_ScriptParameterKeyValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Parameters for the studio component scripts.\n')
    subtype: typing.Optional[str] = pydantic.Field(None, description='The specific subtype of a studio component.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['name', 'studio_id', 'type', 'configuration', 'description', 'ec2_security_group_ids', 'initialization_scripts', 'script_parameters', 'subtype', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ActiveDirectoryComputerAttributeProperty', 'ActiveDirectoryConfigurationProperty', 'ComputeFarmConfigurationProperty', 'LicenseServiceConfigurationProperty', 'ScriptParameterKeyValueProperty', 'SharedFileSystemConfigurationProperty', 'StudioComponentConfigurationProperty', 'StudioComponentInitializationScriptProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnStudioComponent'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnStudioComponentDefConfig] = pydantic.Field(None)


class CfnStudioComponentDefConfig(pydantic.BaseModel):
    ActiveDirectoryComputerAttributeProperty: typing.Optional[list[CfnStudioComponentDefActivedirectorycomputerattributepropertyParams]] = pydantic.Field(None, description='')
    ActiveDirectoryConfigurationProperty: typing.Optional[list[CfnStudioComponentDefActivedirectoryconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ComputeFarmConfigurationProperty: typing.Optional[list[CfnStudioComponentDefComputefarmconfigurationpropertyParams]] = pydantic.Field(None, description='')
    LicenseServiceConfigurationProperty: typing.Optional[list[CfnStudioComponentDefLicenseserviceconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ScriptParameterKeyValueProperty: typing.Optional[list[CfnStudioComponentDefScriptparameterkeyvaluepropertyParams]] = pydantic.Field(None, description='')
    SharedFileSystemConfigurationProperty: typing.Optional[list[CfnStudioComponentDefSharedfilesystemconfigurationpropertyParams]] = pydantic.Field(None, description='')
    StudioComponentConfigurationProperty: typing.Optional[list[CfnStudioComponentDefStudiocomponentconfigurationpropertyParams]] = pydantic.Field(None, description='')
    StudioComponentInitializationScriptProperty: typing.Optional[list[CfnStudioComponentDefStudiocomponentinitializationscriptpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnStudioComponentDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnStudioComponentDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnStudioComponentDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnStudioComponentDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnStudioComponentDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnStudioComponentDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnStudioComponentDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnStudioComponentDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnStudioComponentDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnStudioComponentDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnStudioComponentDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnStudioComponentDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnStudioComponentDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnStudioComponentDefActivedirectorycomputerattributepropertyParams(pydantic.BaseModel):
    name: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnStudioComponentDefActivedirectoryconfigurationpropertyParams(pydantic.BaseModel):
    computer_attributes: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnStudioComponent_ActiveDirectoryComputerAttributePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    directory_id: typing.Optional[str] = pydantic.Field(None, description='')
    organizational_unit_distinguished_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnStudioComponentDefComputefarmconfigurationpropertyParams(pydantic.BaseModel):
    active_directory_user: typing.Optional[str] = pydantic.Field(None, description='')
    endpoint: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnStudioComponentDefLicenseserviceconfigurationpropertyParams(pydantic.BaseModel):
    endpoint: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnStudioComponentDefScriptparameterkeyvaluepropertyParams(pydantic.BaseModel):
    key: typing.Optional[str] = pydantic.Field(None, description='')
    value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnStudioComponentDefSharedfilesystemconfigurationpropertyParams(pydantic.BaseModel):
    endpoint: typing.Optional[str] = pydantic.Field(None, description='')
    file_system_id: typing.Optional[str] = pydantic.Field(None, description='')
    linux_mount_point: typing.Optional[str] = pydantic.Field(None, description='')
    share_name: typing.Optional[str] = pydantic.Field(None, description='')
    windows_mount_drive: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnStudioComponentDefStudiocomponentconfigurationpropertyParams(pydantic.BaseModel):
    active_directory_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnStudioComponent_ActiveDirectoryConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    compute_farm_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnStudioComponent_ComputeFarmConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    license_service_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnStudioComponent_LicenseServiceConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    shared_file_system_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnStudioComponent_SharedFileSystemConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnStudioComponentDefStudiocomponentinitializationscriptpropertyParams(pydantic.BaseModel):
    launch_profile_protocol_version: typing.Optional[str] = pydantic.Field(None, description='')
    platform: typing.Optional[str] = pydantic.Field(None, description='')
    run_context: typing.Optional[str] = pydantic.Field(None, description='')
    script: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnStudioComponentDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnStudioComponentDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStudioComponentDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnStudioComponentDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStudioComponentDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnStudioComponentDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnStudioComponentDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnStudioComponentDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnStudioComponentDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnStudioComponentDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStudioComponentDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnStudioComponentDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnStudioComponentDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStudioComponentDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_nimblestudio.CfnLaunchProfileProps
class CfnLaunchProfilePropsDef(BaseCfnProperty):
    ec2_subnet_ids: typing.Sequence[str] = pydantic.Field(..., description='Unique identifiers for a collection of EC2 subnets.\n')
    launch_profile_protocol_versions: typing.Sequence[str] = pydantic.Field(..., description='The version number of the protocol that is used by the launch profile. The only valid version is "2021-03-31".\n')
    name: str = pydantic.Field(..., description='A friendly name for the launch profile.\n')
    stream_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnLaunchProfile_StreamConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A configuration for a streaming session.\n')
    studio_component_ids: typing.Sequence[str] = pydantic.Field(..., description='Unique identifiers for a collection of studio components that can be used with this launch profile.\n')
    studio_id: str = pydantic.Field(..., description='The unique identifier for a studio resource. In Nimble Studio , all other resources are contained in a studio resource.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A human-readable description of the launch profile.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-nimblestudio-launchprofile.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_nimblestudio as nimblestudio\n\n    cfn_launch_profile_props = nimblestudio.CfnLaunchProfileProps(\n        ec2_subnet_ids=["ec2SubnetIds"],\n        launch_profile_protocol_versions=["launchProfileProtocolVersions"],\n        name="name",\n        stream_configuration=nimblestudio.CfnLaunchProfile.StreamConfigurationProperty(\n            clipboard_mode="clipboardMode",\n            ec2_instance_types=["ec2InstanceTypes"],\n            streaming_image_ids=["streamingImageIds"],\n\n            # the properties below are optional\n            automatic_termination_mode="automaticTerminationMode",\n            max_session_length_in_minutes=123,\n            max_stopped_session_length_in_minutes=123,\n            session_backup=nimblestudio.CfnLaunchProfile.StreamConfigurationSessionBackupProperty(\n                max_backups_to_retain=123,\n                mode="mode"\n            ),\n            session_persistence_mode="sessionPersistenceMode",\n            session_storage=nimblestudio.CfnLaunchProfile.StreamConfigurationSessionStorageProperty(\n                mode=["mode"],\n\n                # the properties below are optional\n                root=nimblestudio.CfnLaunchProfile.StreamingSessionStorageRootProperty(\n                    linux="linux",\n                    windows="windows"\n                )\n            ),\n            volume_configuration=nimblestudio.CfnLaunchProfile.VolumeConfigurationProperty(\n                iops=123,\n                size=123,\n                throughput=123\n            )\n        ),\n        studio_component_ids=["studioComponentIds"],\n        studio_id="studioId",\n\n        # the properties below are optional\n        description="description",\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ec2_subnet_ids', 'launch_profile_protocol_versions', 'name', 'stream_configuration', 'studio_component_ids', 'studio_id', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnLaunchProfileProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_nimblestudio.CfnStreamingImageProps
class CfnStreamingImagePropsDef(BaseCfnProperty):
    ec2_image_id: str = pydantic.Field(..., description='The ID of an EC2 machine image with which to create the streaming image.\n')
    name: str = pydantic.Field(..., description='A friendly name for a streaming image resource.\n')
    studio_id: str = pydantic.Field(..., description='The unique identifier for a studio resource. In Nimble Studio , all other resources are contained in a studio resource.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A human-readable description of the streaming image.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-nimblestudio-streamingimage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_nimblestudio as nimblestudio\n\n    cfn_streaming_image_props = nimblestudio.CfnStreamingImageProps(\n        ec2_image_id="ec2ImageId",\n        name="name",\n        studio_id="studioId",\n\n        # the properties below are optional\n        description="description",\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ec2_image_id', 'name', 'studio_id', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnStreamingImageProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_nimblestudio.CfnStudioComponentProps
class CfnStudioComponentPropsDef(BaseCfnProperty):
    name: str = pydantic.Field(..., description='A friendly name for the studio component resource.\n')
    studio_id: str = pydantic.Field(..., description='The unique identifier for a studio resource. In Nimble Studio , all other resources are contained in a studio resource.\n')
    type: str = pydantic.Field(..., description='The type of the studio component.\n')
    configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnStudioComponent_StudioComponentConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration of the studio component, based on component type.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A human-readable description for the studio component resource.\n')
    ec2_security_group_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The EC2 security groups that control access to the studio component.\n')
    initialization_scripts: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnStudioComponent_StudioComponentInitializationScriptPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Initialization scripts for studio components.\n')
    script_parameters: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnStudioComponent_ScriptParameterKeyValuePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Parameters for the studio component scripts.\n')
    subtype: typing.Optional[str] = pydantic.Field(None, description='The specific subtype of a studio component.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-nimblestudio-studiocomponent.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_nimblestudio as nimblestudio\n\n    cfn_studio_component_props = nimblestudio.CfnStudioComponentProps(\n        name="name",\n        studio_id="studioId",\n        type="type",\n\n        # the properties below are optional\n        configuration=nimblestudio.CfnStudioComponent.StudioComponentConfigurationProperty(\n            active_directory_configuration=nimblestudio.CfnStudioComponent.ActiveDirectoryConfigurationProperty(\n                computer_attributes=[nimblestudio.CfnStudioComponent.ActiveDirectoryComputerAttributeProperty(\n                    name="name",\n                    value="value"\n                )],\n                directory_id="directoryId",\n                organizational_unit_distinguished_name="organizationalUnitDistinguishedName"\n            ),\n            compute_farm_configuration=nimblestudio.CfnStudioComponent.ComputeFarmConfigurationProperty(\n                active_directory_user="activeDirectoryUser",\n                endpoint="endpoint"\n            ),\n            license_service_configuration=nimblestudio.CfnStudioComponent.LicenseServiceConfigurationProperty(\n                endpoint="endpoint"\n            ),\n            shared_file_system_configuration=nimblestudio.CfnStudioComponent.SharedFileSystemConfigurationProperty(\n                endpoint="endpoint",\n                file_system_id="fileSystemId",\n                linux_mount_point="linuxMountPoint",\n                share_name="shareName",\n                windows_mount_drive="windowsMountDrive"\n            )\n        ),\n        description="description",\n        ec2_security_group_ids=["ec2SecurityGroupIds"],\n        initialization_scripts=[nimblestudio.CfnStudioComponent.StudioComponentInitializationScriptProperty(\n            launch_profile_protocol_version="launchProfileProtocolVersion",\n            platform="platform",\n            run_context="runContext",\n            script="script"\n        )],\n        script_parameters=[nimblestudio.CfnStudioComponent.ScriptParameterKeyValueProperty(\n            key="key",\n            value="value"\n        )],\n        subtype="subtype",\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'studio_id', 'type', 'configuration', 'description', 'ec2_security_group_ids', 'initialization_scripts', 'script_parameters', 'subtype', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnStudioComponentProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_nimblestudio.CfnStudioProps
class CfnStudioPropsDef(BaseCfnProperty):
    admin_role_arn: str = pydantic.Field(..., description='The IAM role that studio admins assume when logging in to the Nimble Studio portal.\n')
    display_name: str = pydantic.Field(..., description='A friendly name for the studio.\n')
    studio_name: str = pydantic.Field(..., description='The name of the studio, as included in the URL when accessing it in the Nimble Studio portal.\n')
    user_role_arn: str = pydantic.Field(..., description='The IAM role that studio users assume when logging in to the Nimble Studio portal.\n')
    studio_encryption_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_nimblestudio.CfnStudio_StudioEncryptionConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration of the encryption method that is used for the studio.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-nimblestudio-studio.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_nimblestudio as nimblestudio\n\n    cfn_studio_props = nimblestudio.CfnStudioProps(\n        admin_role_arn="adminRoleArn",\n        display_name="displayName",\n        studio_name="studioName",\n        user_role_arn="userRoleArn",\n\n        # the properties below are optional\n        studio_encryption_configuration=nimblestudio.CfnStudio.StudioEncryptionConfigurationProperty(\n            key_type="keyType",\n\n            # the properties below are optional\n            key_arn="keyArn"\n        ),\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['admin_role_arn', 'display_name', 'studio_name', 'user_role_arn', 'studio_encryption_configuration', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_nimblestudio.CfnStudioProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnLaunchProfile_StreamConfigurationProperty: typing.Optional[dict[str, CfnLaunchProfile_StreamConfigurationPropertyDef]] = pydantic.Field(None)
    CfnLaunchProfile_StreamConfigurationSessionBackupProperty: typing.Optional[dict[str, CfnLaunchProfile_StreamConfigurationSessionBackupPropertyDef]] = pydantic.Field(None)
    CfnLaunchProfile_StreamConfigurationSessionStorageProperty: typing.Optional[dict[str, CfnLaunchProfile_StreamConfigurationSessionStoragePropertyDef]] = pydantic.Field(None)
    CfnLaunchProfile_StreamingSessionStorageRootProperty: typing.Optional[dict[str, CfnLaunchProfile_StreamingSessionStorageRootPropertyDef]] = pydantic.Field(None)
    CfnLaunchProfile_VolumeConfigurationProperty: typing.Optional[dict[str, CfnLaunchProfile_VolumeConfigurationPropertyDef]] = pydantic.Field(None)
    CfnStreamingImage_StreamingImageEncryptionConfigurationProperty: typing.Optional[dict[str, CfnStreamingImage_StreamingImageEncryptionConfigurationPropertyDef]] = pydantic.Field(None)
    CfnStudio_StudioEncryptionConfigurationProperty: typing.Optional[dict[str, CfnStudio_StudioEncryptionConfigurationPropertyDef]] = pydantic.Field(None)
    CfnStudioComponent_ActiveDirectoryComputerAttributeProperty: typing.Optional[dict[str, CfnStudioComponent_ActiveDirectoryComputerAttributePropertyDef]] = pydantic.Field(None)
    CfnStudioComponent_ActiveDirectoryConfigurationProperty: typing.Optional[dict[str, CfnStudioComponent_ActiveDirectoryConfigurationPropertyDef]] = pydantic.Field(None)
    CfnStudioComponent_ComputeFarmConfigurationProperty: typing.Optional[dict[str, CfnStudioComponent_ComputeFarmConfigurationPropertyDef]] = pydantic.Field(None)
    CfnStudioComponent_LicenseServiceConfigurationProperty: typing.Optional[dict[str, CfnStudioComponent_LicenseServiceConfigurationPropertyDef]] = pydantic.Field(None)
    CfnStudioComponent_ScriptParameterKeyValueProperty: typing.Optional[dict[str, CfnStudioComponent_ScriptParameterKeyValuePropertyDef]] = pydantic.Field(None)
    CfnStudioComponent_SharedFileSystemConfigurationProperty: typing.Optional[dict[str, CfnStudioComponent_SharedFileSystemConfigurationPropertyDef]] = pydantic.Field(None)
    CfnStudioComponent_StudioComponentConfigurationProperty: typing.Optional[dict[str, CfnStudioComponent_StudioComponentConfigurationPropertyDef]] = pydantic.Field(None)
    CfnStudioComponent_StudioComponentInitializationScriptProperty: typing.Optional[dict[str, CfnStudioComponent_StudioComponentInitializationScriptPropertyDef]] = pydantic.Field(None)
    CfnLaunchProfile: typing.Optional[dict[str, CfnLaunchProfileDef]] = pydantic.Field(None)
    CfnStreamingImage: typing.Optional[dict[str, CfnStreamingImageDef]] = pydantic.Field(None)
    CfnStudio: typing.Optional[dict[str, CfnStudioDef]] = pydantic.Field(None)
    CfnStudioComponent: typing.Optional[dict[str, CfnStudioComponentDef]] = pydantic.Field(None)
    CfnLaunchProfileProps: typing.Optional[dict[str, CfnLaunchProfilePropsDef]] = pydantic.Field(None)
    CfnStreamingImageProps: typing.Optional[dict[str, CfnStreamingImagePropsDef]] = pydantic.Field(None)
    CfnStudioComponentProps: typing.Optional[dict[str, CfnStudioComponentPropsDef]] = pydantic.Field(None)
    CfnStudioProps: typing.Optional[dict[str, CfnStudioPropsDef]] = pydantic.Field(None)
    ...
