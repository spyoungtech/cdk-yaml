from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_cloudfront_origins.FunctionUrlOrigin
class FunctionUrlOriginDef(BaseClass):
    lambda_function_url: typing.Union[_REQUIRED_INIT_PARAM, models.aws_lambda.FunctionUrlDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='-')
    keepalive_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Specifies how long, in seconds, CloudFront persists its connection to the origin. The valid range is from 1 to 180 seconds, inclusive. Note that values over 60 seconds are possible only after a limit increase request for the origin response timeout quota has been approved in the target account; otherwise, values over 60 seconds will produce an error at deploy time. Default: Duration.seconds(5)\n')
    read_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Specifies how long, in seconds, CloudFront waits for a response from the origin. The valid range is from 1 to 180 seconds, inclusive. Note that values over 60 seconds are possible only after a limit increase request for the origin response timeout quota has been approved in the target account; otherwise, values over 60 seconds will produce an error at deploy time. Default: Duration.seconds(30)\n')
    origin_path: typing.Optional[str] = pydantic.Field(None, description="An optional path that CloudFront appends to the origin domain name when CloudFront requests content from the origin. Must begin, but not end, with '/' (e.g., '/production/images'). Default: '/'\n")
    connection_attempts: typing.Union[int, float, None] = pydantic.Field(None, description='The number of times that CloudFront attempts to connect to the origin; valid values are 1, 2, or 3 attempts. Default: 3\n')
    connection_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The number of seconds that CloudFront waits when trying to establish a connection to the origin. Valid values are 1-10 seconds, inclusive. Default: Duration.seconds(10)\n')
    custom_headers: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='A list of HTTP header names and values that CloudFront adds to requests it sends to the origin. Default: {}\n')
    origin_id: typing.Optional[str] = pydantic.Field(None, description='A unique identifier for the origin. This value must be unique within the distribution. Default: - an originid will be generated for you\n')
    origin_shield_enabled: typing.Optional[bool] = pydantic.Field(None, description='Origin Shield is enabled by setting originShieldRegion to a valid region, after this to disable Origin Shield again you must set this flag to false. Default: - true\n')
    origin_shield_region: typing.Optional[str] = pydantic.Field(None, description='When you enable Origin Shield in the AWS Region that has the lowest latency to your origin, you can get better network performance. Default: - origin shield not enabled')
    _init_params: typing.ClassVar[list[str]] = ['lambda_function_url', 'keepalive_timeout', 'read_timeout', 'origin_path', 'connection_attempts', 'connection_timeout', 'custom_headers', 'origin_id', 'origin_shield_enabled', 'origin_shield_region']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront_origins.FunctionUrlOrigin'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cloudfront_origins.FunctionUrlOriginDefConfig] = pydantic.Field(None)


class FunctionUrlOriginDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_cloudfront_origins.FunctionUrlOriginDefBindParams]] = pydantic.Field(None, description='Binds the origin to the associated Distribution.\nCan be used to grant permissions, create dependent resources, etc.')

class FunctionUrlOriginDefBindParams(pydantic.BaseModel):
    origin_id: str = pydantic.Field(..., description='The identifier of this Origin, as assigned by the Distribution this Origin has been used added to.')
    ...


#  autogenerated from aws_cdk.aws_cloudfront_origins.HttpOrigin
class HttpOriginDef(BaseClass):
    domain_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='-')
    http_port: typing.Union[int, float, None] = pydantic.Field(None, description='The HTTP port that CloudFront uses to connect to the origin. Default: 80\n')
    https_port: typing.Union[int, float, None] = pydantic.Field(None, description='The HTTPS port that CloudFront uses to connect to the origin. Default: 443\n')
    keepalive_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Specifies how long, in seconds, CloudFront persists its connection to the origin. The valid range is from 1 to 180 seconds, inclusive. Note that values over 60 seconds are possible only after a limit increase request for the origin response timeout quota has been approved in the target account; otherwise, values over 60 seconds will produce an error at deploy time. Default: Duration.seconds(5)\n')
    origin_ssl_protocols: typing.Optional[typing.Sequence[aws_cdk.aws_cloudfront.OriginSslPolicy]] = pydantic.Field(None, description='The SSL versions to use when interacting with the origin. Default: OriginSslPolicy.TLS_V1_2\n')
    protocol_policy: typing.Optional[aws_cdk.aws_cloudfront.OriginProtocolPolicy] = pydantic.Field(None, description='Specifies the protocol (HTTP or HTTPS) that CloudFront uses to connect to the origin. Default: OriginProtocolPolicy.HTTPS_ONLY\n')
    read_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Specifies how long, in seconds, CloudFront waits for a response from the origin, also known as the origin response timeout. The valid range is from 1 to 180 seconds, inclusive. Note that values over 60 seconds are possible only after a limit increase request for the origin response timeout quota has been approved in the target account; otherwise, values over 60 seconds will produce an error at deploy time. Default: Duration.seconds(30)\n')
    origin_path: typing.Optional[str] = pydantic.Field(None, description="An optional path that CloudFront appends to the origin domain name when CloudFront requests content from the origin. Must begin, but not end, with '/' (e.g., '/production/images'). Default: '/'\n")
    connection_attempts: typing.Union[int, float, None] = pydantic.Field(None, description='The number of times that CloudFront attempts to connect to the origin; valid values are 1, 2, or 3 attempts. Default: 3\n')
    connection_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The number of seconds that CloudFront waits when trying to establish a connection to the origin. Valid values are 1-10 seconds, inclusive. Default: Duration.seconds(10)\n')
    custom_headers: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='A list of HTTP header names and values that CloudFront adds to requests it sends to the origin. Default: {}\n')
    origin_id: typing.Optional[str] = pydantic.Field(None, description='A unique identifier for the origin. This value must be unique within the distribution. Default: - an originid will be generated for you\n')
    origin_shield_enabled: typing.Optional[bool] = pydantic.Field(None, description='Origin Shield is enabled by setting originShieldRegion to a valid region, after this to disable Origin Shield again you must set this flag to false. Default: - true\n')
    origin_shield_region: typing.Optional[str] = pydantic.Field(None, description='When you enable Origin Shield in the AWS Region that has the lowest latency to your origin, you can get better network performance. Default: - origin shield not enabled')
    _init_params: typing.ClassVar[list[str]] = ['domain_name', 'http_port', 'https_port', 'keepalive_timeout', 'origin_ssl_protocols', 'protocol_policy', 'read_timeout', 'origin_path', 'connection_attempts', 'connection_timeout', 'custom_headers', 'origin_id', 'origin_shield_enabled', 'origin_shield_region']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront_origins.HttpOrigin'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cloudfront_origins.HttpOriginDefConfig] = pydantic.Field(None)


class HttpOriginDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_cloudfront_origins.HttpOriginDefBindParams]] = pydantic.Field(None, description='Binds the origin to the associated Distribution.\nCan be used to grant permissions, create dependent resources, etc.')

class HttpOriginDefBindParams(pydantic.BaseModel):
    origin_id: str = pydantic.Field(..., description='The identifier of this Origin, as assigned by the Distribution this Origin has been used added to.')
    ...


#  autogenerated from aws_cdk.aws_cloudfront_origins.LoadBalancerV2Origin
class LoadBalancerV2OriginDef(BaseClass):
    load_balancer: typing.Union[models.UnsupportedResource, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='-')
    http_port: typing.Union[int, float, None] = pydantic.Field(None, description='The HTTP port that CloudFront uses to connect to the origin. Default: 80\n')
    https_port: typing.Union[int, float, None] = pydantic.Field(None, description='The HTTPS port that CloudFront uses to connect to the origin. Default: 443\n')
    keepalive_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Specifies how long, in seconds, CloudFront persists its connection to the origin. The valid range is from 1 to 180 seconds, inclusive. Note that values over 60 seconds are possible only after a limit increase request for the origin response timeout quota has been approved in the target account; otherwise, values over 60 seconds will produce an error at deploy time. Default: Duration.seconds(5)\n')
    origin_ssl_protocols: typing.Optional[typing.Sequence[aws_cdk.aws_cloudfront.OriginSslPolicy]] = pydantic.Field(None, description='The SSL versions to use when interacting with the origin. Default: OriginSslPolicy.TLS_V1_2\n')
    protocol_policy: typing.Optional[aws_cdk.aws_cloudfront.OriginProtocolPolicy] = pydantic.Field(None, description='Specifies the protocol (HTTP or HTTPS) that CloudFront uses to connect to the origin. Default: OriginProtocolPolicy.HTTPS_ONLY\n')
    read_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Specifies how long, in seconds, CloudFront waits for a response from the origin, also known as the origin response timeout. The valid range is from 1 to 180 seconds, inclusive. Note that values over 60 seconds are possible only after a limit increase request for the origin response timeout quota has been approved in the target account; otherwise, values over 60 seconds will produce an error at deploy time. Default: Duration.seconds(30)\n')
    origin_path: typing.Optional[str] = pydantic.Field(None, description="An optional path that CloudFront appends to the origin domain name when CloudFront requests content from the origin. Must begin, but not end, with '/' (e.g., '/production/images'). Default: '/'\n")
    connection_attempts: typing.Union[int, float, None] = pydantic.Field(None, description='The number of times that CloudFront attempts to connect to the origin; valid values are 1, 2, or 3 attempts. Default: 3\n')
    connection_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The number of seconds that CloudFront waits when trying to establish a connection to the origin. Valid values are 1-10 seconds, inclusive. Default: Duration.seconds(10)\n')
    custom_headers: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='A list of HTTP header names and values that CloudFront adds to requests it sends to the origin. Default: {}\n')
    origin_id: typing.Optional[str] = pydantic.Field(None, description='A unique identifier for the origin. This value must be unique within the distribution. Default: - an originid will be generated for you\n')
    origin_shield_enabled: typing.Optional[bool] = pydantic.Field(None, description='Origin Shield is enabled by setting originShieldRegion to a valid region, after this to disable Origin Shield again you must set this flag to false. Default: - true\n')
    origin_shield_region: typing.Optional[str] = pydantic.Field(None, description='When you enable Origin Shield in the AWS Region that has the lowest latency to your origin, you can get better network performance. Default: - origin shield not enabled')
    _init_params: typing.ClassVar[list[str]] = ['load_balancer', 'http_port', 'https_port', 'keepalive_timeout', 'origin_ssl_protocols', 'protocol_policy', 'read_timeout', 'origin_path', 'connection_attempts', 'connection_timeout', 'custom_headers', 'origin_id', 'origin_shield_enabled', 'origin_shield_region']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront_origins.LoadBalancerV2Origin'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cloudfront_origins.LoadBalancerV2OriginDefConfig] = pydantic.Field(None)


class LoadBalancerV2OriginDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_cloudfront_origins.LoadBalancerV2OriginDefBindParams]] = pydantic.Field(None, description='Binds the origin to the associated Distribution.\nCan be used to grant permissions, create dependent resources, etc.')

class LoadBalancerV2OriginDefBindParams(pydantic.BaseModel):
    origin_id: str = pydantic.Field(..., description='The identifier of this Origin, as assigned by the Distribution this Origin has been used added to.')
    ...


#  autogenerated from aws_cdk.aws_cloudfront_origins.OriginGroup
class OriginGroupDef(BaseClass):
    fallback_origin: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cloudfront.OriginBaseDef, models.aws_cloudfront_origins.FunctionUrlOriginDef, models.aws_cloudfront_origins.HttpOriginDef, models.aws_cloudfront_origins.LoadBalancerV2OriginDef, models.aws_cloudfront_origins.OriginGroupDef, models.aws_cloudfront_origins.RestApiOriginDef, models.aws_cloudfront_origins.S3OriginDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The fallback origin that should serve requests when the primary fails.')
    primary_origin: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cloudfront.OriginBaseDef, models.aws_cloudfront_origins.FunctionUrlOriginDef, models.aws_cloudfront_origins.HttpOriginDef, models.aws_cloudfront_origins.LoadBalancerV2OriginDef, models.aws_cloudfront_origins.OriginGroupDef, models.aws_cloudfront_origins.RestApiOriginDef, models.aws_cloudfront_origins.S3OriginDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The primary origin that should serve requests for this group.\n')
    fallback_status_codes: typing.Optional[typing.Sequence[typing.Union[int, float]]] = pydantic.Field(None, description='The list of HTTP status codes that, when returned from the primary origin, would cause querying the fallback origin. Default: - 500, 502, 503 and 504')
    _init_params: typing.ClassVar[list[str]] = ['fallback_origin', 'primary_origin', 'fallback_status_codes']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront_origins.OriginGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cloudfront_origins.OriginGroupDefConfig] = pydantic.Field(None)


class OriginGroupDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_cloudfront_origins.OriginGroupDefBindParams]] = pydantic.Field(None, description='The method called when a given Origin is added (for the first time) to a Distribution.')

class OriginGroupDefBindParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    origin_id: str = pydantic.Field(..., description='The identifier of this Origin, as assigned by the Distribution this Origin has been used added to.')
    ...


#  autogenerated from aws_cdk.aws_cloudfront_origins.RestApiOrigin
class RestApiOriginDef(BaseClass):
    rest_api: typing.Union[models.aws_apigateway.RestApiBaseDef, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='-')
    keepalive_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Specifies how long, in seconds, CloudFront persists its connection to the origin. The valid range is from 1 to 180 seconds, inclusive. Note that values over 60 seconds are possible only after a limit increase request for the origin response timeout quota has been approved in the target account; otherwise, values over 60 seconds will produce an error at deploy time. Default: Duration.seconds(5)\n')
    read_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Specifies how long, in seconds, CloudFront waits for a response from the origin, also known as the origin response timeout. The valid range is from 1 to 180 seconds, inclusive. Note that values over 60 seconds are possible only after a limit increase request for the origin response timeout quota has been approved in the target account; otherwise, values over 60 seconds will produce an error at deploy time. Default: Duration.seconds(30)\n')
    origin_path: typing.Optional[str] = pydantic.Field(None, description="An optional path that CloudFront appends to the origin domain name when CloudFront requests content from the origin. Must begin, but not end, with '/' (e.g., '/production/images'). Default: '/'\n")
    connection_attempts: typing.Union[int, float, None] = pydantic.Field(None, description='The number of times that CloudFront attempts to connect to the origin; valid values are 1, 2, or 3 attempts. Default: 3\n')
    connection_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The number of seconds that CloudFront waits when trying to establish a connection to the origin. Valid values are 1-10 seconds, inclusive. Default: Duration.seconds(10)\n')
    custom_headers: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='A list of HTTP header names and values that CloudFront adds to requests it sends to the origin. Default: {}\n')
    origin_id: typing.Optional[str] = pydantic.Field(None, description='A unique identifier for the origin. This value must be unique within the distribution. Default: - an originid will be generated for you\n')
    origin_shield_enabled: typing.Optional[bool] = pydantic.Field(None, description='Origin Shield is enabled by setting originShieldRegion to a valid region, after this to disable Origin Shield again you must set this flag to false. Default: - true\n')
    origin_shield_region: typing.Optional[str] = pydantic.Field(None, description='When you enable Origin Shield in the AWS Region that has the lowest latency to your origin, you can get better network performance. Default: - origin shield not enabled')
    _init_params: typing.ClassVar[list[str]] = ['rest_api', 'keepalive_timeout', 'read_timeout', 'origin_path', 'connection_attempts', 'connection_timeout', 'custom_headers', 'origin_id', 'origin_shield_enabled', 'origin_shield_region']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront_origins.RestApiOrigin'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cloudfront_origins.RestApiOriginDefConfig] = pydantic.Field(None)


class RestApiOriginDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_cloudfront_origins.RestApiOriginDefBindParams]] = pydantic.Field(None, description='Binds the origin to the associated Distribution.\nCan be used to grant permissions, create dependent resources, etc.')

class RestApiOriginDefBindParams(pydantic.BaseModel):
    origin_id: str = pydantic.Field(..., description='The identifier of this Origin, as assigned by the Distribution this Origin has been used added to.')
    ...


#  autogenerated from aws_cdk.aws_cloudfront_origins.S3Origin
class S3OriginDef(BaseClass):
    bucket: typing.Union[_REQUIRED_INIT_PARAM, models.aws_s3.BucketBaseDef, models.aws_s3.BucketDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='-')
    origin_access_identity: typing.Optional[typing.Union[models.aws_cloudfront.OriginAccessIdentityDef]] = pydantic.Field(None, description='An optional Origin Access Identity of the origin identity cloudfront will use when calling your s3 bucket. Default: - An Origin Access Identity will be created.\n')
    origin_path: typing.Optional[str] = pydantic.Field(None, description="An optional path that CloudFront appends to the origin domain name when CloudFront requests content from the origin. Must begin, but not end, with '/' (e.g., '/production/images'). Default: '/'\n")
    connection_attempts: typing.Union[int, float, None] = pydantic.Field(None, description='The number of times that CloudFront attempts to connect to the origin; valid values are 1, 2, or 3 attempts. Default: 3\n')
    connection_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The number of seconds that CloudFront waits when trying to establish a connection to the origin. Valid values are 1-10 seconds, inclusive. Default: Duration.seconds(10)\n')
    custom_headers: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='A list of HTTP header names and values that CloudFront adds to requests it sends to the origin. Default: {}\n')
    origin_id: typing.Optional[str] = pydantic.Field(None, description='A unique identifier for the origin. This value must be unique within the distribution. Default: - an originid will be generated for you\n')
    origin_shield_enabled: typing.Optional[bool] = pydantic.Field(None, description='Origin Shield is enabled by setting originShieldRegion to a valid region, after this to disable Origin Shield again you must set this flag to false. Default: - true\n')
    origin_shield_region: typing.Optional[str] = pydantic.Field(None, description='When you enable Origin Shield in the AWS Region that has the lowest latency to your origin, you can get better network performance. Default: - origin shield not enabled')
    _init_params: typing.ClassVar[list[str]] = ['bucket', 'origin_access_identity', 'origin_path', 'connection_attempts', 'connection_timeout', 'custom_headers', 'origin_id', 'origin_shield_enabled', 'origin_shield_region']
    _method_names: typing.ClassVar[list[str]] = ['bind']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront_origins.S3Origin'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cloudfront_origins.S3OriginDefConfig] = pydantic.Field(None)


class S3OriginDefConfig(pydantic.BaseModel):
    bind: typing.Optional[list[models.aws_cloudfront_origins.S3OriginDefBindParams]] = pydantic.Field(None, description='The method called when a given Origin is added (for the first time) to a Distribution.')

class S3OriginDefBindParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    origin_id: str = pydantic.Field(..., description='The identifier of this Origin, as assigned by the Distribution this Origin has been used added to.')
    ...


#  autogenerated from aws_cdk.aws_cloudfront_origins.FunctionUrlOriginProps
class FunctionUrlOriginPropsDef(BaseStruct):
    connection_attempts: typing.Union[int, float, None] = pydantic.Field(None, description='The number of times that CloudFront attempts to connect to the origin; valid values are 1, 2, or 3 attempts. Default: 3\n')
    connection_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The number of seconds that CloudFront waits when trying to establish a connection to the origin. Valid values are 1-10 seconds, inclusive. Default: Duration.seconds(10)\n')
    custom_headers: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='A list of HTTP header names and values that CloudFront adds to requests it sends to the origin. Default: {}\n')
    origin_id: typing.Optional[str] = pydantic.Field(None, description='A unique identifier for the origin. This value must be unique within the distribution. Default: - an originid will be generated for you\n')
    origin_shield_enabled: typing.Optional[bool] = pydantic.Field(None, description='Origin Shield is enabled by setting originShieldRegion to a valid region, after this to disable Origin Shield again you must set this flag to false. Default: - true\n')
    origin_shield_region: typing.Optional[str] = pydantic.Field(None, description='When you enable Origin Shield in the AWS Region that has the lowest latency to your origin, you can get better network performance. Default: - origin shield not enabled\n')
    origin_path: typing.Optional[str] = pydantic.Field(None, description="An optional path that CloudFront appends to the origin domain name when CloudFront requests content from the origin. Must begin, but not end, with '/' (e.g., '/production/images'). Default: '/'\n")
    keepalive_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Specifies how long, in seconds, CloudFront persists its connection to the origin. The valid range is from 1 to 180 seconds, inclusive. Note that values over 60 seconds are possible only after a limit increase request for the origin response timeout quota has been approved in the target account; otherwise, values over 60 seconds will produce an error at deploy time. Default: Duration.seconds(5)\n')
    read_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Specifies how long, in seconds, CloudFront waits for a response from the origin. The valid range is from 1 to 180 seconds, inclusive. Note that values over 60 seconds are possible only after a limit increase request for the origin response timeout quota has been approved in the target account; otherwise, values over 60 seconds will produce an error at deploy time. Default: Duration.seconds(30)\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_cloudfront_origins as cloudfront_origins\n\n    function_url_origin_props = cloudfront_origins.FunctionUrlOriginProps(\n        connection_attempts=123,\n        connection_timeout=cdk.Duration.minutes(30),\n        custom_headers={\n            "custom_headers_key": "customHeaders"\n        },\n        keepalive_timeout=cdk.Duration.minutes(30),\n        origin_id="originId",\n        origin_path="originPath",\n        origin_shield_enabled=False,\n        origin_shield_region="originShieldRegion",\n        read_timeout=cdk.Duration.minutes(30)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['connection_attempts', 'connection_timeout', 'custom_headers', 'origin_id', 'origin_shield_enabled', 'origin_shield_region', 'origin_path', 'keepalive_timeout', 'read_timeout']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront_origins.FunctionUrlOriginProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront_origins.HttpOriginProps
class HttpOriginPropsDef(BaseStruct):
    connection_attempts: typing.Union[int, float, None] = pydantic.Field(None, description='The number of times that CloudFront attempts to connect to the origin; valid values are 1, 2, or 3 attempts. Default: 3\n')
    connection_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The number of seconds that CloudFront waits when trying to establish a connection to the origin. Valid values are 1-10 seconds, inclusive. Default: Duration.seconds(10)\n')
    custom_headers: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='A list of HTTP header names and values that CloudFront adds to requests it sends to the origin. Default: {}\n')
    origin_id: typing.Optional[str] = pydantic.Field(None, description='A unique identifier for the origin. This value must be unique within the distribution. Default: - an originid will be generated for you\n')
    origin_shield_enabled: typing.Optional[bool] = pydantic.Field(None, description='Origin Shield is enabled by setting originShieldRegion to a valid region, after this to disable Origin Shield again you must set this flag to false. Default: - true\n')
    origin_shield_region: typing.Optional[str] = pydantic.Field(None, description='When you enable Origin Shield in the AWS Region that has the lowest latency to your origin, you can get better network performance. Default: - origin shield not enabled\n')
    origin_path: typing.Optional[str] = pydantic.Field(None, description="An optional path that CloudFront appends to the origin domain name when CloudFront requests content from the origin. Must begin, but not end, with '/' (e.g., '/production/images'). Default: '/'\n")
    http_port: typing.Union[int, float, None] = pydantic.Field(None, description='The HTTP port that CloudFront uses to connect to the origin. Default: 80\n')
    https_port: typing.Union[int, float, None] = pydantic.Field(None, description='The HTTPS port that CloudFront uses to connect to the origin. Default: 443\n')
    keepalive_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Specifies how long, in seconds, CloudFront persists its connection to the origin. The valid range is from 1 to 180 seconds, inclusive. Note that values over 60 seconds are possible only after a limit increase request for the origin response timeout quota has been approved in the target account; otherwise, values over 60 seconds will produce an error at deploy time. Default: Duration.seconds(5)\n')
    origin_ssl_protocols: typing.Optional[typing.Sequence[aws_cdk.aws_cloudfront.OriginSslPolicy]] = pydantic.Field(None, description='The SSL versions to use when interacting with the origin. Default: OriginSslPolicy.TLS_V1_2\n')
    protocol_policy: typing.Optional[aws_cdk.aws_cloudfront.OriginProtocolPolicy] = pydantic.Field(None, description='Specifies the protocol (HTTP or HTTPS) that CloudFront uses to connect to the origin. Default: OriginProtocolPolicy.HTTPS_ONLY\n')
    read_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Specifies how long, in seconds, CloudFront waits for a response from the origin, also known as the origin response timeout. The valid range is from 1 to 180 seconds, inclusive. Note that values over 60 seconds are possible only after a limit increase request for the origin response timeout quota has been approved in the target account; otherwise, values over 60 seconds will produce an error at deploy time. Default: Duration.seconds(30)\n\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    import aws_cdk as cdk\n    from aws_cdk import aws_cloudfront as cloudfront\n    from aws_cdk import aws_cloudfront_origins as cloudfront_origins\n\n    http_origin_props = cloudfront_origins.HttpOriginProps(\n        connection_attempts=123,\n        connection_timeout=cdk.Duration.minutes(30),\n        custom_headers={\n            "custom_headers_key": "customHeaders"\n        },\n        http_port=123,\n        https_port=123,\n        keepalive_timeout=cdk.Duration.minutes(30),\n        origin_id="originId",\n        origin_path="originPath",\n        origin_shield_enabled=False,\n        origin_shield_region="originShieldRegion",\n        origin_ssl_protocols=[cloudfront.OriginSslPolicy.SSL_V3],\n        protocol_policy=cloudfront.OriginProtocolPolicy.HTTP_ONLY,\n        read_timeout=cdk.Duration.minutes(30)\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['connection_attempts', 'connection_timeout', 'custom_headers', 'origin_id', 'origin_shield_enabled', 'origin_shield_region', 'origin_path', 'http_port', 'https_port', 'keepalive_timeout', 'origin_ssl_protocols', 'protocol_policy', 'read_timeout']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront_origins.HttpOriginProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront_origins.LoadBalancerV2OriginProps
class LoadBalancerV2OriginPropsDef(BaseStruct):
    connection_attempts: typing.Union[int, float, None] = pydantic.Field(None, description='The number of times that CloudFront attempts to connect to the origin; valid values are 1, 2, or 3 attempts. Default: 3\n')
    connection_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The number of seconds that CloudFront waits when trying to establish a connection to the origin. Valid values are 1-10 seconds, inclusive. Default: Duration.seconds(10)\n')
    custom_headers: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='A list of HTTP header names and values that CloudFront adds to requests it sends to the origin. Default: {}\n')
    origin_id: typing.Optional[str] = pydantic.Field(None, description='A unique identifier for the origin. This value must be unique within the distribution. Default: - an originid will be generated for you\n')
    origin_shield_enabled: typing.Optional[bool] = pydantic.Field(None, description='Origin Shield is enabled by setting originShieldRegion to a valid region, after this to disable Origin Shield again you must set this flag to false. Default: - true\n')
    origin_shield_region: typing.Optional[str] = pydantic.Field(None, description='When you enable Origin Shield in the AWS Region that has the lowest latency to your origin, you can get better network performance. Default: - origin shield not enabled\n')
    origin_path: typing.Optional[str] = pydantic.Field(None, description="An optional path that CloudFront appends to the origin domain name when CloudFront requests content from the origin. Must begin, but not end, with '/' (e.g., '/production/images'). Default: '/'\n")
    http_port: typing.Union[int, float, None] = pydantic.Field(None, description='The HTTP port that CloudFront uses to connect to the origin. Default: 80\n')
    https_port: typing.Union[int, float, None] = pydantic.Field(None, description='The HTTPS port that CloudFront uses to connect to the origin. Default: 443\n')
    keepalive_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Specifies how long, in seconds, CloudFront persists its connection to the origin. The valid range is from 1 to 180 seconds, inclusive. Note that values over 60 seconds are possible only after a limit increase request for the origin response timeout quota has been approved in the target account; otherwise, values over 60 seconds will produce an error at deploy time. Default: Duration.seconds(5)\n')
    origin_ssl_protocols: typing.Optional[typing.Sequence[aws_cdk.aws_cloudfront.OriginSslPolicy]] = pydantic.Field(None, description='The SSL versions to use when interacting with the origin. Default: OriginSslPolicy.TLS_V1_2\n')
    protocol_policy: typing.Optional[aws_cdk.aws_cloudfront.OriginProtocolPolicy] = pydantic.Field(None, description='Specifies the protocol (HTTP or HTTPS) that CloudFront uses to connect to the origin. Default: OriginProtocolPolicy.HTTPS_ONLY\n')
    read_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Specifies how long, in seconds, CloudFront waits for a response from the origin, also known as the origin response timeout. The valid range is from 1 to 180 seconds, inclusive. Note that values over 60 seconds are possible only after a limit increase request for the origin response timeout quota has been approved in the target account; otherwise, values over 60 seconds will produce an error at deploy time. Default: Duration.seconds(30)\n\n:exampleMetadata: infused\n\nExample::\n\n    import aws_cdk.aws_elasticloadbalancingv2 as elbv2\n\n    # load_balancer: elbv2.ApplicationLoadBalancer\n\n    origin = origins.LoadBalancerV2Origin(load_balancer,\n        connection_attempts=3,\n        connection_timeout=Duration.seconds(5),\n        read_timeout=Duration.seconds(45),\n        keepalive_timeout=Duration.seconds(45),\n        protocol_policy=cloudfront.OriginProtocolPolicy.MATCH_VIEWER\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['connection_attempts', 'connection_timeout', 'custom_headers', 'origin_id', 'origin_shield_enabled', 'origin_shield_region', 'origin_path', 'http_port', 'https_port', 'keepalive_timeout', 'origin_ssl_protocols', 'protocol_policy', 'read_timeout']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront_origins.LoadBalancerV2OriginProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront_origins.OriginGroupProps
class OriginGroupPropsDef(BaseStruct):
    fallback_origin: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cloudfront.OriginBaseDef, models.aws_cloudfront_origins.FunctionUrlOriginDef, models.aws_cloudfront_origins.HttpOriginDef, models.aws_cloudfront_origins.LoadBalancerV2OriginDef, models.aws_cloudfront_origins.OriginGroupDef, models.aws_cloudfront_origins.RestApiOriginDef, models.aws_cloudfront_origins.S3OriginDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The fallback origin that should serve requests when the primary fails.\n')
    primary_origin: typing.Union[_REQUIRED_INIT_PARAM, models.aws_cloudfront.OriginBaseDef, models.aws_cloudfront_origins.FunctionUrlOriginDef, models.aws_cloudfront_origins.HttpOriginDef, models.aws_cloudfront_origins.LoadBalancerV2OriginDef, models.aws_cloudfront_origins.OriginGroupDef, models.aws_cloudfront_origins.RestApiOriginDef, models.aws_cloudfront_origins.S3OriginDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='The primary origin that should serve requests for this group.\n')
    fallback_status_codes: typing.Optional[typing.Sequence[typing.Union[int, float]]] = pydantic.Field(None, description='The list of HTTP status codes that, when returned from the primary origin, would cause querying the fallback origin. Default: - 500, 502, 503 and 504\n\n:exampleMetadata: infused\n\nExample::\n\n    my_bucket = s3.Bucket(self, "myBucket")\n    cloudfront.Distribution(self, "myDist",\n        default_behavior=cloudfront.BehaviorOptions(\n            origin=origins.OriginGroup(\n                primary_origin=origins.S3Origin(my_bucket),\n                fallback_origin=origins.HttpOrigin("www.example.com"),\n                # optional, defaults to: 500, 502, 503 and 504\n                fallback_status_codes=[404]\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['fallback_origin', 'primary_origin', 'fallback_status_codes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront_origins.OriginGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_cloudfront_origins.OriginGroupPropsDefConfig] = pydantic.Field(None)


class OriginGroupPropsDefConfig(pydantic.BaseModel):
    fallback_origin_config: typing.Optional[models._interface_methods.AwsCloudfrontIOriginDefConfig] = pydantic.Field(None)
    primary_origin_config: typing.Optional[models._interface_methods.AwsCloudfrontIOriginDefConfig] = pydantic.Field(None)


#  autogenerated from aws_cdk.aws_cloudfront_origins.RestApiOriginProps
class RestApiOriginPropsDef(BaseStruct):
    connection_attempts: typing.Union[int, float, None] = pydantic.Field(None, description='The number of times that CloudFront attempts to connect to the origin; valid values are 1, 2, or 3 attempts. Default: 3\n')
    connection_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The number of seconds that CloudFront waits when trying to establish a connection to the origin. Valid values are 1-10 seconds, inclusive. Default: Duration.seconds(10)\n')
    custom_headers: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='A list of HTTP header names and values that CloudFront adds to requests it sends to the origin. Default: {}\n')
    origin_id: typing.Optional[str] = pydantic.Field(None, description='A unique identifier for the origin. This value must be unique within the distribution. Default: - an originid will be generated for you\n')
    origin_shield_enabled: typing.Optional[bool] = pydantic.Field(None, description='Origin Shield is enabled by setting originShieldRegion to a valid region, after this to disable Origin Shield again you must set this flag to false. Default: - true\n')
    origin_shield_region: typing.Optional[str] = pydantic.Field(None, description='When you enable Origin Shield in the AWS Region that has the lowest latency to your origin, you can get better network performance. Default: - origin shield not enabled\n')
    origin_path: typing.Optional[str] = pydantic.Field(None, description="An optional path that CloudFront appends to the origin domain name when CloudFront requests content from the origin. Must begin, but not end, with '/' (e.g., '/production/images'). Default: '/'\n")
    keepalive_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Specifies how long, in seconds, CloudFront persists its connection to the origin. The valid range is from 1 to 180 seconds, inclusive. Note that values over 60 seconds are possible only after a limit increase request for the origin response timeout quota has been approved in the target account; otherwise, values over 60 seconds will produce an error at deploy time. Default: Duration.seconds(5)\n')
    read_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='Specifies how long, in seconds, CloudFront waits for a response from the origin, also known as the origin response timeout. The valid range is from 1 to 180 seconds, inclusive. Note that values over 60 seconds are possible only after a limit increase request for the origin response timeout quota has been approved in the target account; otherwise, values over 60 seconds will produce an error at deploy time. Default: Duration.seconds(30)\n\n:exampleMetadata: infused\n\nExample::\n\n    # api: apigateway.RestApi\n\n    cloudfront.Distribution(self, "Distribution",\n        default_behavior=cloudfront.BehaviorOptions(origin=origins.RestApiOrigin(api, origin_path="/custom-origin-path"))\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['connection_attempts', 'connection_timeout', 'custom_headers', 'origin_id', 'origin_shield_enabled', 'origin_shield_region', 'origin_path', 'keepalive_timeout', 'read_timeout']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront_origins.RestApiOriginProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_cloudfront_origins.S3OriginProps
class S3OriginPropsDef(BaseStruct):
    connection_attempts: typing.Union[int, float, None] = pydantic.Field(None, description='The number of times that CloudFront attempts to connect to the origin; valid values are 1, 2, or 3 attempts. Default: 3\n')
    connection_timeout: typing.Optional[models.DurationDef] = pydantic.Field(None, description='The number of seconds that CloudFront waits when trying to establish a connection to the origin. Valid values are 1-10 seconds, inclusive. Default: Duration.seconds(10)\n')
    custom_headers: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='A list of HTTP header names and values that CloudFront adds to requests it sends to the origin. Default: {}\n')
    origin_id: typing.Optional[str] = pydantic.Field(None, description='A unique identifier for the origin. This value must be unique within the distribution. Default: - an originid will be generated for you\n')
    origin_shield_enabled: typing.Optional[bool] = pydantic.Field(None, description='Origin Shield is enabled by setting originShieldRegion to a valid region, after this to disable Origin Shield again you must set this flag to false. Default: - true\n')
    origin_shield_region: typing.Optional[str] = pydantic.Field(None, description='When you enable Origin Shield in the AWS Region that has the lowest latency to your origin, you can get better network performance. Default: - origin shield not enabled\n')
    origin_path: typing.Optional[str] = pydantic.Field(None, description="An optional path that CloudFront appends to the origin domain name when CloudFront requests content from the origin. Must begin, but not end, with '/' (e.g., '/production/images'). Default: '/'\n")
    origin_access_identity: typing.Optional[typing.Union[models.aws_cloudfront.OriginAccessIdentityDef]] = pydantic.Field(None, description='An optional Origin Access Identity of the origin identity cloudfront will use when calling your s3 bucket. Default: - An Origin Access Identity will be created.\n\n:exampleMetadata: infused\n\nExample::\n\n    my_bucket = s3.Bucket(self, "myBucket")\n    cloudfront.Distribution(self, "myDist",\n        default_behavior=cloudfront.BehaviorOptions(origin=origins.S3Origin(my_bucket,\n            custom_headers={\n                "Foo": "bar"\n            }\n        ))\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['connection_attempts', 'connection_timeout', 'custom_headers', 'origin_id', 'origin_shield_enabled', 'origin_shield_region', 'origin_path', 'origin_access_identity']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_cloudfront_origins.S3OriginProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    FunctionUrlOrigin: typing.Optional[dict[str, models.aws_cloudfront_origins.FunctionUrlOriginDef]] = pydantic.Field(None)
    HttpOrigin: typing.Optional[dict[str, models.aws_cloudfront_origins.HttpOriginDef]] = pydantic.Field(None)
    LoadBalancerV2Origin: typing.Optional[dict[str, models.aws_cloudfront_origins.LoadBalancerV2OriginDef]] = pydantic.Field(None)
    OriginGroup: typing.Optional[dict[str, models.aws_cloudfront_origins.OriginGroupDef]] = pydantic.Field(None)
    RestApiOrigin: typing.Optional[dict[str, models.aws_cloudfront_origins.RestApiOriginDef]] = pydantic.Field(None)
    S3Origin: typing.Optional[dict[str, models.aws_cloudfront_origins.S3OriginDef]] = pydantic.Field(None)
    FunctionUrlOriginProps: typing.Optional[dict[str, models.aws_cloudfront_origins.FunctionUrlOriginPropsDef]] = pydantic.Field(None)
    HttpOriginProps: typing.Optional[dict[str, models.aws_cloudfront_origins.HttpOriginPropsDef]] = pydantic.Field(None)
    LoadBalancerV2OriginProps: typing.Optional[dict[str, models.aws_cloudfront_origins.LoadBalancerV2OriginPropsDef]] = pydantic.Field(None)
    OriginGroupProps: typing.Optional[dict[str, models.aws_cloudfront_origins.OriginGroupPropsDef]] = pydantic.Field(None)
    RestApiOriginProps: typing.Optional[dict[str, models.aws_cloudfront_origins.RestApiOriginPropsDef]] = pydantic.Field(None)
    S3OriginProps: typing.Optional[dict[str, models.aws_cloudfront_origins.S3OriginPropsDef]] = pydantic.Field(None)
    ...

import models
