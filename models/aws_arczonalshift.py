from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_arczonalshift.CfnZonalAutoshiftConfiguration.ControlConditionProperty
class CfnZonalAutoshiftConfiguration_ControlConditionPropertyDef(BaseStruct):
    alarm_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) for an Amazon CloudWatch alarm that you specify as a control condition for a practice run.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of alarm specified for a practice run. You can only specify Amazon CloudWatch alarms for practice runs, so the only valid value is ``CLOUDWATCH`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-arczonalshift-zonalautoshiftconfiguration-controlcondition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_arczonalshift as arczonalshift\n\n    control_condition_property = arczonalshift.CfnZonalAutoshiftConfiguration.ControlConditionProperty(\n        alarm_identifier="alarmIdentifier",\n        type="type"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['alarm_identifier', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_arczonalshift.CfnZonalAutoshiftConfiguration.ControlConditionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_arczonalshift.CfnZonalAutoshiftConfiguration.PracticeRunConfigurationProperty
class CfnZonalAutoshiftConfiguration_PracticeRunConfigurationPropertyDef(BaseStruct):
    outcome_alarms: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_arczonalshift.CfnZonalAutoshiftConfiguration_ControlConditionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The alarm that you specify to monitor the health of your application during practice runs. When the outcome alarm goes into an ``ALARM`` state, the practice run is ended and the outcome is set to ``FAILED`` .\n')
    blocked_dates: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='An array of one or more dates that you can specify when AWS does not start practice runs for a resource. Dates are in UTC. Specify blocked dates in the format ``YYYY-MM-DD`` , separated by spaces.\n')
    blocked_windows: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='An array of one or more days and times that you can specify when Route 53 ARC does not start practice runs for a resource. Days and times are in UTC. Specify blocked windows in the format ``DAY:HH:MM-DAY:HH:MM`` , separated by spaces. For example, ``MON:18:30-MON:19:30 TUE:18:30-TUE:19:30`` .\n')
    blocking_alarms: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_arczonalshift.CfnZonalAutoshiftConfiguration_ControlConditionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An optional alarm that you can specify that blocks practice runs when the alarm is in an ``ALARM`` state. When a blocking alarm goes into an ``ALARM`` state, it prevents practice runs from being started, and ends practice runs that are in progress.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-arczonalshift-zonalautoshiftconfiguration-practicerunconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_arczonalshift as arczonalshift\n\n    practice_run_configuration_property = arczonalshift.CfnZonalAutoshiftConfiguration.PracticeRunConfigurationProperty(\n        outcome_alarms=[arczonalshift.CfnZonalAutoshiftConfiguration.ControlConditionProperty(\n            alarm_identifier="alarmIdentifier",\n            type="type"\n        )],\n\n        # the properties below are optional\n        blocked_dates=["blockedDates"],\n        blocked_windows=["blockedWindows"],\n        blocking_alarms=[arczonalshift.CfnZonalAutoshiftConfiguration.ControlConditionProperty(\n            alarm_identifier="alarmIdentifier",\n            type="type"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['outcome_alarms', 'blocked_dates', 'blocked_windows', 'blocking_alarms']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_arczonalshift.CfnZonalAutoshiftConfiguration.PracticeRunConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_arczonalshift.CfnZonalAutoshiftConfiguration
class CfnZonalAutoshiftConfigurationDef(BaseCfnResource):
    resource_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier for the resource that AWS shifts traffic for. The identifier is the Amazon Resource Name (ARN) for the resource. At this time, supported resources are Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.\n')
    practice_run_configuration: typing.Union[models.UnsupportedResource, models.aws_arczonalshift.CfnZonalAutoshiftConfiguration_PracticeRunConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="A practice run configuration for a resource includes the Amazon CloudWatch alarms that you've specified for a practice run, as well as any blocked dates or blocked windows for the practice run. When a resource has a practice run configuration, Route 53 ARC shifts traffic for the resource weekly for practice runs. Practice runs are required for zonal autoshift. The zonal shifts that Route 53 ARC starts for practice runs help you to ensure that shifting away traffic from an Availability Zone during an autoshift is safe for your application. You can update or delete a practice run configuration. Before you delete a practice run configuration, you must disable zonal autoshift for the resource. A practice run configuration is required when zonal autoshift is enabled.\n")
    zonal_autoshift_status: typing.Optional[str] = pydantic.Field(None, description='When zonal autoshift is ``ENABLED`` , you authorize AWS to shift away resource traffic for an application from an Availability Zone during events, on your behalf, to help reduce time to recovery. Traffic is also shifted away for the required weekly practice runs.')
    _init_params: typing.ClassVar[list[str]] = ['resource_identifier', 'practice_run_configuration', 'zonal_autoshift_status']
    _method_names: typing.ClassVar[list[str]] = ['ControlConditionProperty', 'PracticeRunConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_arczonalshift.CfnZonalAutoshiftConfiguration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_arczonalshift.CfnZonalAutoshiftConfigurationDefConfig] = pydantic.Field(None)


class CfnZonalAutoshiftConfigurationDefConfig(pydantic.BaseModel):
    ControlConditionProperty: typing.Optional[list[models.aws_arczonalshift.CfnZonalAutoshiftConfigurationDefControlconditionpropertyParams]] = pydantic.Field(None, description='')
    PracticeRunConfigurationProperty: typing.Optional[list[models.aws_arczonalshift.CfnZonalAutoshiftConfigurationDefPracticerunconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_arczonalshift.CfnZonalAutoshiftConfigurationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_arczonalshift.CfnZonalAutoshiftConfigurationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_arczonalshift.CfnZonalAutoshiftConfigurationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_arczonalshift.CfnZonalAutoshiftConfigurationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_arczonalshift.CfnZonalAutoshiftConfigurationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_arczonalshift.CfnZonalAutoshiftConfigurationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_arczonalshift.CfnZonalAutoshiftConfigurationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_arczonalshift.CfnZonalAutoshiftConfigurationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_arczonalshift.CfnZonalAutoshiftConfigurationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_arczonalshift.CfnZonalAutoshiftConfigurationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_arczonalshift.CfnZonalAutoshiftConfigurationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_arczonalshift.CfnZonalAutoshiftConfigurationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_arczonalshift.CfnZonalAutoshiftConfigurationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnZonalAutoshiftConfigurationDefControlconditionpropertyParams(pydantic.BaseModel):
    alarm_identifier: str = pydantic.Field(..., description='')
    type: str = pydantic.Field(..., description='')
    ...

class CfnZonalAutoshiftConfigurationDefPracticerunconfigurationpropertyParams(pydantic.BaseModel):
    outcome_alarms: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_arczonalshift.CfnZonalAutoshiftConfiguration_ControlConditionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    blocked_dates: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    blocked_windows: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    blocking_alarms: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_arczonalshift.CfnZonalAutoshiftConfiguration_ControlConditionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnZonalAutoshiftConfigurationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnZonalAutoshiftConfigurationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnZonalAutoshiftConfigurationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnZonalAutoshiftConfigurationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnZonalAutoshiftConfigurationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnZonalAutoshiftConfigurationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnZonalAutoshiftConfigurationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnZonalAutoshiftConfigurationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnZonalAutoshiftConfigurationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnZonalAutoshiftConfigurationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnZonalAutoshiftConfigurationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnZonalAutoshiftConfigurationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnZonalAutoshiftConfigurationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnZonalAutoshiftConfigurationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_arczonalshift.CfnZonalAutoshiftConfigurationProps
class CfnZonalAutoshiftConfigurationPropsDef(BaseCfnProperty):
    resource_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier for the resource that AWS shifts traffic for. The identifier is the Amazon Resource Name (ARN) for the resource. At this time, supported resources are Network Load Balancers and Application Load Balancers with cross-zone load balancing turned off.\n')
    practice_run_configuration: typing.Union[models.UnsupportedResource, models.aws_arczonalshift.CfnZonalAutoshiftConfiguration_PracticeRunConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="A practice run configuration for a resource includes the Amazon CloudWatch alarms that you've specified for a practice run, as well as any blocked dates or blocked windows for the practice run. When a resource has a practice run configuration, Route 53 ARC shifts traffic for the resource weekly for practice runs. Practice runs are required for zonal autoshift. The zonal shifts that Route 53 ARC starts for practice runs help you to ensure that shifting away traffic from an Availability Zone during an autoshift is safe for your application. You can update or delete a practice run configuration. Before you delete a practice run configuration, you must disable zonal autoshift for the resource. A practice run configuration is required when zonal autoshift is enabled.\n")
    zonal_autoshift_status: typing.Optional[str] = pydantic.Field(None, description='When zonal autoshift is ``ENABLED`` , you authorize AWS to shift away resource traffic for an application from an Availability Zone during events, on your behalf, to help reduce time to recovery. Traffic is also shifted away for the required weekly practice runs.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-arczonalshift-zonalautoshiftconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_arczonalshift as arczonalshift\n\n    cfn_zonal_autoshift_configuration_props = arczonalshift.CfnZonalAutoshiftConfigurationProps(\n        resource_identifier="resourceIdentifier",\n\n        # the properties below are optional\n        practice_run_configuration=arczonalshift.CfnZonalAutoshiftConfiguration.PracticeRunConfigurationProperty(\n            outcome_alarms=[arczonalshift.CfnZonalAutoshiftConfiguration.ControlConditionProperty(\n                alarm_identifier="alarmIdentifier",\n                type="type"\n            )],\n\n            # the properties below are optional\n            blocked_dates=["blockedDates"],\n            blocked_windows=["blockedWindows"],\n            blocking_alarms=[arczonalshift.CfnZonalAutoshiftConfiguration.ControlConditionProperty(\n                alarm_identifier="alarmIdentifier",\n                type="type"\n            )]\n        ),\n        zonal_autoshift_status="zonalAutoshiftStatus"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['resource_identifier', 'practice_run_configuration', 'zonal_autoshift_status']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_arczonalshift.CfnZonalAutoshiftConfigurationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnZonalAutoshiftConfiguration_ControlConditionProperty: typing.Optional[dict[str, models.aws_arczonalshift.CfnZonalAutoshiftConfiguration_ControlConditionPropertyDef]] = pydantic.Field(None)
    CfnZonalAutoshiftConfiguration_PracticeRunConfigurationProperty: typing.Optional[dict[str, models.aws_arczonalshift.CfnZonalAutoshiftConfiguration_PracticeRunConfigurationPropertyDef]] = pydantic.Field(None)
    CfnZonalAutoshiftConfiguration: typing.Optional[dict[str, models.aws_arczonalshift.CfnZonalAutoshiftConfigurationDef]] = pydantic.Field(None)
    CfnZonalAutoshiftConfigurationProps: typing.Optional[dict[str, models.aws_arczonalshift.CfnZonalAutoshiftConfigurationPropsDef]] = pydantic.Field(None)
    ...

import models
