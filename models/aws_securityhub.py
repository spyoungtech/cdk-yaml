from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.AutomationRulesActionProperty
class CfnAutomationRule_AutomationRulesActionPropertyDef(BaseStruct):
    finding_fields_update: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_AutomationRulesFindingFieldsUpdatePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies that the automation rule action is an update to a finding field.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies that the rule action should update the ``Types`` finding field. The ``Types`` finding field classifies findings in the format of namespace/category/classifier. For more information, see `Types taxonomy for ASFF <https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format-type-taxonomy.html>`_ in the *AWS Security Hub User Guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-automationrulesaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    # id: Any\n    # updated_by: Any\n\n    automation_rules_action_property = securityhub.CfnAutomationRule.AutomationRulesActionProperty(\n        finding_fields_update=securityhub.CfnAutomationRule.AutomationRulesFindingFieldsUpdateProperty(\n            confidence=123,\n            criticality=123,\n            note=securityhub.CfnAutomationRule.NoteUpdateProperty(\n                text="text",\n                updated_by=updated_by\n            ),\n            related_findings=[securityhub.CfnAutomationRule.RelatedFindingProperty(\n                id=id,\n                product_arn="productArn"\n            )],\n            severity=securityhub.CfnAutomationRule.SeverityUpdateProperty(\n                label="label",\n                normalized=123,\n                product=123\n            ),\n            types=["types"],\n            user_defined_fields={\n                "user_defined_fields_key": "userDefinedFields"\n            },\n            verification_state="verificationState",\n            workflow=securityhub.CfnAutomationRule.WorkflowUpdateProperty(\n                status="status"\n            )\n        ),\n        type="type"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['finding_fields_update', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.AutomationRulesActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.AutomationRulesFindingFieldsUpdateProperty
class CfnAutomationRule_AutomationRulesFindingFieldsUpdatePropertyDef(BaseStruct):
    confidence: typing.Union[int, float, None] = pydantic.Field(None, description='The rule action updates the ``Confidence`` field of a finding.\n')
    criticality: typing.Union[int, float, None] = pydantic.Field(None, description='The rule action updates the ``Criticality`` field of a finding.\n')
    note: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_NoteUpdatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The rule action will update the ``Note`` field of a finding.\n')
    related_findings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_RelatedFindingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The rule action will update the ``RelatedFindings`` field of a finding.\n')
    severity: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_SeverityUpdatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The rule action will update the ``Severity`` field of a finding.\n')
    types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The rule action updates the ``Types`` field of a finding.\n')
    user_defined_fields: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='The rule action updates the ``UserDefinedFields`` field of a finding.\n')
    verification_state: typing.Optional[str] = pydantic.Field(None, description='The rule action updates the ``VerificationState`` field of a finding.\n')
    workflow: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_WorkflowUpdatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The rule action will update the ``Workflow`` field of a finding.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-automationrulesfindingfieldsupdate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    # id: Any\n    # updated_by: Any\n\n    automation_rules_finding_fields_update_property = securityhub.CfnAutomationRule.AutomationRulesFindingFieldsUpdateProperty(\n        confidence=123,\n        criticality=123,\n        note=securityhub.CfnAutomationRule.NoteUpdateProperty(\n            text="text",\n            updated_by=updated_by\n        ),\n        related_findings=[securityhub.CfnAutomationRule.RelatedFindingProperty(\n            id=id,\n            product_arn="productArn"\n        )],\n        severity=securityhub.CfnAutomationRule.SeverityUpdateProperty(\n            label="label",\n            normalized=123,\n            product=123\n        ),\n        types=["types"],\n        user_defined_fields={\n            "user_defined_fields_key": "userDefinedFields"\n        },\n        verification_state="verificationState",\n        workflow=securityhub.CfnAutomationRule.WorkflowUpdateProperty(\n            status="status"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['confidence', 'criticality', 'note', 'related_findings', 'severity', 'types', 'user_defined_fields', 'verification_state', 'workflow']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.AutomationRulesFindingFieldsUpdateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.AutomationRulesFindingFiltersProperty
class CfnAutomationRule_AutomationRulesFindingFiltersPropertyDef(BaseStruct):
    aws_account_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The AWS account ID in which a finding was generated. Array Members: Minimum number of 1 item. Maximum number of 100 items.\n')
    company_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The name of the company for the product that generated the finding. For control-based findings, the company is AWS . Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    compliance_associated_standards_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The unique identifier of a standard in which a control is enabled. This field consists of the resource portion of the Amazon Resource Name (ARN) returned for a standard in the `DescribeStandards <https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_DescribeStandards.html>`_ API response. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    compliance_security_control_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The security control ID for which a finding was generated. Security control IDs are the same across standards. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    compliance_status: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The result of a security check. This field is only used for findings generated from controls. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    confidence: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="The likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. ``Confidence`` is scored on a 0–100 basis using a ratio scale. A value of ``0`` means 0 percent confidence, and a value of ``100`` means 100 percent confidence. For example, a data exfiltration detection based on a statistical deviation of network traffic has low confidence because an actual exfiltration hasn't been verified. For more information, see `Confidence <https://docs.aws.amazon.com/securityhub/latest/userguide/asff-top-level-attributes.html#asff-confidence>`_ in the *AWS Security Hub User Guide* . Array Members: Minimum number of 1 item. Maximum number of 20 items.\n")
    created_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A timestamp that indicates when this finding record was created. This field accepts only the specified formats. Timestamps can end with ``Z`` or ``("+" / "-") time-hour [":" time-minute]`` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples: - ``YYYY-MM-DDTHH:MM:SSZ`` (for example, ``2019-01-31T23:00:00Z`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ`` (for example, ``2019-01-31T23:00:00.123456789Z`` ) - ``YYYY-MM-DDTHH:MM:SS+HH:MM`` (for example, ``2024-01-04T15:25:10+17:59`` ) - ``YYYY-MM-DDTHH:MM:SS-HHMM`` (for example, ``2024-01-04T15:25:10-1759`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM`` (for example, ``2024-01-04T15:25:10.123456789+17:59`` ) Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    criticality: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The level of importance that is assigned to the resources that are associated with a finding. ``Criticality`` is scored on a 0–100 basis, using a ratio scale that supports only full integers. A score of ``0`` means that the underlying resources have no criticality, and a score of ``100`` is reserved for the most critical resources. For more information, see `Criticality <https://docs.aws.amazon.com/securityhub/latest/userguide/asff-top-level-attributes.html#asff-criticality>`_ in the *AWS Security Hub User Guide* . Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    description: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="A finding's description. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n")
    first_observed_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A timestamp that indicates when the potential security issue captured by a finding was first observed by the security findings product. This field accepts only the specified formats. Timestamps can end with ``Z`` or ``("+" / "-") time-hour [":" time-minute]`` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples: - ``YYYY-MM-DDTHH:MM:SSZ`` (for example, ``2019-01-31T23:00:00Z`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ`` (for example, ``2019-01-31T23:00:00.123456789Z`` ) - ``YYYY-MM-DDTHH:MM:SS+HH:MM`` (for example, ``2024-01-04T15:25:10+17:59`` ) - ``YYYY-MM-DDTHH:MM:SS-HHMM`` (for example, ``2024-01-04T15:25:10-1759`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM`` (for example, ``2024-01-04T15:25:10.123456789+17:59`` ) Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    generator_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The identifier for the solution-specific component that generated a finding. Array Members: Minimum number of 1 item. Maximum number of 100 items.\n')
    last_observed_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A timestamp that indicates when the potential security issue captured by a finding was most recently observed by the security findings product. This field accepts only the specified formats. Timestamps can end with ``Z`` or ``("+" / "-") time-hour [":" time-minute]`` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples: - ``YYYY-MM-DDTHH:MM:SSZ`` (for example, ``2019-01-31T23:00:00Z`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ`` (for example, ``2019-01-31T23:00:00.123456789Z`` ) - ``YYYY-MM-DDTHH:MM:SS+HH:MM`` (for example, ``2024-01-04T15:25:10+17:59`` ) - ``YYYY-MM-DDTHH:MM:SS-HHMM`` (for example, ``2024-01-04T15:25:10-1759`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM`` (for example, ``2024-01-04T15:25:10.123456789+17:59`` ) Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    note_text: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="The text of a user-defined note that's added to a finding. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n")
    note_updated_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The timestamp of when the note was updated. This field accepts only the specified formats. Timestamps can end with ``Z`` or ``("+" / "-") time-hour [":" time-minute]`` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples: - ``YYYY-MM-DDTHH:MM:SSZ`` (for example, ``2019-01-31T23:00:00Z`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ`` (for example, ``2019-01-31T23:00:00.123456789Z`` ) - ``YYYY-MM-DDTHH:MM:SS+HH:MM`` (for example, ``2024-01-04T15:25:10+17:59`` ) - ``YYYY-MM-DDTHH:MM:SS-HHMM`` (for example, ``2024-01-04T15:25:10-1759`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM`` (for example, ``2024-01-04T15:25:10.123456789+17:59`` ) Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    note_updated_by: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The principal that created a note. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    product_arn: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The Amazon Resource Name (ARN) for a third-party product that generated a finding in Security Hub. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    product_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Provides the name of the product that generated the finding. For control-based findings, the product name is Security Hub. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    record_state: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Provides the current state of a finding. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    related_findings_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The product-generated identifier for a related finding. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    related_findings_product_arn: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The ARN for the product that generated a related finding. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    resource_details_other: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Custom fields and values about the resource that a finding pertains to. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    resource_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The identifier for the given resource type. For AWS resources that are identified by Amazon Resource Names (ARNs), this is the ARN. For AWS resources that lack ARNs, this is the identifier as defined by the AWS service that created the resource. For non- AWS resources, this is a unique identifier that is associated with the resource. Array Members: Minimum number of 1 item. Maximum number of 100 items.\n')
    resource_partition: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The partition in which the resource that the finding pertains to is located. A partition is a group of AWS Regions . Each AWS account is scoped to one partition. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    resource_region: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The AWS Region where the resource that a finding pertains to is located. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    resource_tags: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of AWS tags associated with a resource at the time the finding was processed. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    resource_type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="A finding's title. Array Members: Minimum number of 1 item. Maximum number of 100 items.\n")
    severity_label: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The severity value of the finding. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    source_url: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Provides a URL that links to a page about the current finding in the finding product. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    title: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="A finding's title. Array Members: Minimum number of 1 item. Maximum number of 100 items.\n")
    type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='One or more finding types in the format of namespace/category/classifier that classify a finding. For a list of namespaces, classifiers, and categories, see `Types taxonomy for ASFF <https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format-type-taxonomy.html>`_ in the *AWS Security Hub User Guide* . Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    updated_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A timestamp that indicates when the finding record was most recently updated. This field accepts only the specified formats. Timestamps can end with ``Z`` or ``("+" / "-") time-hour [":" time-minute]`` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples: - ``YYYY-MM-DDTHH:MM:SSZ`` (for example, ``2019-01-31T23:00:00Z`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ`` (for example, ``2019-01-31T23:00:00.123456789Z`` ) - ``YYYY-MM-DDTHH:MM:SS+HH:MM`` (for example, ``2024-01-04T15:25:10+17:59`` ) - ``YYYY-MM-DDTHH:MM:SS-HHMM`` (for example, ``2024-01-04T15:25:10-1759`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM`` (for example, ``2024-01-04T15:25:10.123456789+17:59`` ) Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    user_defined_fields: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of user-defined name and value string pairs added to a finding. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    verification_state: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Provides the veracity of a finding. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    workflow_status: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Provides information about the status of the investigation into a finding. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-automationrulesfindingfilters.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    automation_rules_finding_filters_property = securityhub.CfnAutomationRule.AutomationRulesFindingFiltersProperty(\n        aws_account_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        company_name=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        compliance_associated_standards_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        compliance_security_control_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        compliance_status=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        confidence=[securityhub.CfnAutomationRule.NumberFilterProperty(\n            eq=123,\n            gte=123,\n            lte=123\n        )],\n        created_at=[securityhub.CfnAutomationRule.DateFilterProperty(\n            date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n                unit="unit",\n                value=123\n            ),\n            end="end",\n            start="start"\n        )],\n        criticality=[securityhub.CfnAutomationRule.NumberFilterProperty(\n            eq=123,\n            gte=123,\n            lte=123\n        )],\n        description=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        first_observed_at=[securityhub.CfnAutomationRule.DateFilterProperty(\n            date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n                unit="unit",\n                value=123\n            ),\n            end="end",\n            start="start"\n        )],\n        generator_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        id=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        last_observed_at=[securityhub.CfnAutomationRule.DateFilterProperty(\n            date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n                unit="unit",\n                value=123\n            ),\n            end="end",\n            start="start"\n        )],\n        note_text=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        note_updated_at=[securityhub.CfnAutomationRule.DateFilterProperty(\n            date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n                unit="unit",\n                value=123\n            ),\n            end="end",\n            start="start"\n        )],\n        note_updated_by=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        product_arn=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        product_name=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        record_state=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        related_findings_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        related_findings_product_arn=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_details_other=[securityhub.CfnAutomationRule.MapFilterProperty(\n            comparison="comparison",\n            key="key",\n            value="value"\n        )],\n        resource_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_partition=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_region=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_tags=[securityhub.CfnAutomationRule.MapFilterProperty(\n            comparison="comparison",\n            key="key",\n            value="value"\n        )],\n        resource_type=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        severity_label=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        source_url=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        title=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        type=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        updated_at=[securityhub.CfnAutomationRule.DateFilterProperty(\n            date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n                unit="unit",\n                value=123\n            ),\n            end="end",\n            start="start"\n        )],\n        user_defined_fields=[securityhub.CfnAutomationRule.MapFilterProperty(\n            comparison="comparison",\n            key="key",\n            value="value"\n        )],\n        verification_state=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        workflow_status=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['aws_account_id', 'company_name', 'compliance_associated_standards_id', 'compliance_security_control_id', 'compliance_status', 'confidence', 'created_at', 'criticality', 'description', 'first_observed_at', 'generator_id', 'last_observed_at', 'note_text', 'note_updated_at', 'note_updated_by', 'product_arn', 'product_name', 'record_state', 'related_findings_id', 'related_findings_product_arn', 'resource_details_other', 'resource_id', 'resource_partition', 'resource_region', 'resource_tags', 'resource_type', 'severity_label', 'source_url', 'title', 'type', 'updated_at', 'user_defined_fields', 'verification_state', 'workflow_status']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.AutomationRulesFindingFiltersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.DateFilterProperty
class CfnAutomationRule_DateFilterPropertyDef(BaseStruct):
    date_range: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateRangePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A date range for the date filter.\n')
    end: typing.Optional[str] = pydantic.Field(None, description='A timestamp that provides the end date for the date filter. This field accepts only the specified formats. Timestamps can end with ``Z`` or ``("+" / "-") time-hour [":" time-minute]`` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples: - ``YYYY-MM-DDTHH:MM:SSZ`` (for example, ``2019-01-31T23:00:00Z`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ`` (for example, ``2019-01-31T23:00:00.123456789Z`` ) - ``YYYY-MM-DDTHH:MM:SS+HH:MM`` (for example, ``2024-01-04T15:25:10+17:59`` ) - ``YYYY-MM-DDTHH:MM:SS-HHMM`` (for example, ``2024-01-04T15:25:10-1759`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM`` (for example, ``2024-01-04T15:25:10.123456789+17:59`` )\n')
    start: typing.Optional[str] = pydantic.Field(None, description='A timestamp that provides the start date for the date filter. This field accepts only the specified formats. Timestamps can end with ``Z`` or ``("+" / "-") time-hour [":" time-minute]`` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples: - ``YYYY-MM-DDTHH:MM:SSZ`` (for example, ``2019-01-31T23:00:00Z`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ`` (for example, ``2019-01-31T23:00:00.123456789Z`` ) - ``YYYY-MM-DDTHH:MM:SS+HH:MM`` (for example, ``2024-01-04T15:25:10+17:59`` ) - ``YYYY-MM-DDTHH:MM:SS-HHMM`` (for example, ``2024-01-04T15:25:10-1759`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM`` (for example, ``2024-01-04T15:25:10.123456789+17:59`` )\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-datefilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    date_filter_property = securityhub.CfnAutomationRule.DateFilterProperty(\n        date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n            unit="unit",\n            value=123\n        ),\n        end="end",\n        start="start"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['date_range', 'end', 'start']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.DateFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.DateRangeProperty
class CfnAutomationRule_DateRangePropertyDef(BaseStruct):
    unit: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A date range unit for the date filter.\n')
    value: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='A date range value for the date filter.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-daterange.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    date_range_property = securityhub.CfnAutomationRule.DateRangeProperty(\n        unit="unit",\n        value=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['unit', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.DateRangeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.MapFilterProperty
class CfnAutomationRule_MapFilterPropertyDef(BaseStruct):
    comparison: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The condition to apply to the key value when filtering Security Hub findings with a map filter. To search for values that have the filter value, use one of the following comparison operators: - To search for values that include the filter value, use ``CONTAINS`` . For example, for the ``ResourceTags`` field, the filter ``Department CONTAINS Security`` matches findings that include the value ``Security`` for the ``Department`` tag. In the same example, a finding with a value of ``Security team`` for the ``Department`` tag is a match. - To search for values that exactly match the filter value, use ``EQUALS`` . For example, for the ``ResourceTags`` field, the filter ``Department EQUALS Security`` matches findings that have the value ``Security`` for the ``Department`` tag. ``CONTAINS`` and ``EQUALS`` filters on the same field are joined by ``OR`` . A finding matches if it matches any one of those filters. For example, the filters ``Department CONTAINS Security OR Department CONTAINS Finance`` match a finding that includes either ``Security`` , ``Finance`` , or both values. To search for values that don't have the filter value, use one of the following comparison operators: - To search for values that exclude the filter value, use ``NOT_CONTAINS`` . For example, for the ``ResourceTags`` field, the filter ``Department NOT_CONTAINS Finance`` matches findings that exclude the value ``Finance`` for the ``Department`` tag. - To search for values other than the filter value, use ``NOT_EQUALS`` . For example, for the ``ResourceTags`` field, the filter ``Department NOT_EQUALS Finance`` matches findings that don’t have the value ``Finance`` for the ``Department`` tag. ``NOT_CONTAINS`` and ``NOT_EQUALS`` filters on the same field are joined by ``AND`` . A finding matches only if it matches all of those filters. For example, the filters ``Department NOT_CONTAINS Security AND Department NOT_CONTAINS Finance`` match a finding that excludes both the ``Security`` and ``Finance`` values. ``CONTAINS`` filters can only be used with other ``CONTAINS`` filters. ``NOT_CONTAINS`` filters can only be used with other ``NOT_CONTAINS`` filters. You can’t have both a ``CONTAINS`` filter and a ``NOT_CONTAINS`` filter on the same field. Similarly, you can’t have both an ``EQUALS`` filter and a ``NOT_EQUALS`` filter on the same field. Combining filters in this way returns an error. ``CONTAINS`` and ``NOT_CONTAINS`` operators can be used only with automation rules. For more information, see `Automation rules <https://docs.aws.amazon.com/securityhub/latest/userguide/automation-rules.html>`_ in the *AWS Security Hub User Guide* .\n")
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The key of the map filter. For example, for ``ResourceTags`` , ``Key`` identifies the name of the tag. For ``UserDefinedFields`` , ``Key`` is the name of the field.\n')
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value for the key in the map filter. Filter values are case sensitive. For example, one of the values for a tag called ``Department`` might be ``Security`` . If you provide ``security`` as the filter value, then there\'s no match.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-mapfilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    map_filter_property = securityhub.CfnAutomationRule.MapFilterProperty(\n        comparison="comparison",\n        key="key",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comparison', 'key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.MapFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.NoteUpdateProperty
class CfnAutomationRule_NoteUpdatePropertyDef(BaseStruct):
    text: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The updated note text.\n')
    updated_by: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The principal that updated the note.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-noteupdate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    # updated_by: Any\n\n    note_update_property = securityhub.CfnAutomationRule.NoteUpdateProperty(\n        text="text",\n        updated_by=updated_by\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['text', 'updated_by']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.NoteUpdateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.NumberFilterProperty
class CfnAutomationRule_NumberFilterPropertyDef(BaseStruct):
    eq: typing.Union[int, float, None] = pydantic.Field(None, description='The equal-to condition to be applied to a single field when querying for findings.\n')
    gte: typing.Union[int, float, None] = pydantic.Field(None, description='The greater-than-equal condition to be applied to a single field when querying for findings.\n')
    lte: typing.Union[int, float, None] = pydantic.Field(None, description='The less-than-equal condition to be applied to a single field when querying for findings.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-numberfilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    number_filter_property = securityhub.CfnAutomationRule.NumberFilterProperty(\n        eq=123,\n        gte=123,\n        lte=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['eq', 'gte', 'lte']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.NumberFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.RelatedFindingProperty
class CfnAutomationRule_RelatedFindingPropertyDef(BaseStruct):
    product_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) for the product that generated a related finding.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-relatedfinding.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    # id: Any\n\n    related_finding_property = securityhub.CfnAutomationRule.RelatedFindingProperty(\n        id=id,\n        product_arn="productArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['product_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.RelatedFindingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.SeverityUpdateProperty
class CfnAutomationRule_SeverityUpdatePropertyDef(BaseStruct):
    label: typing.Optional[str] = pydantic.Field(None, description='The severity value of the finding. The allowed values are the following. - ``INFORMATIONAL`` - No issue was found. - ``LOW`` - The issue does not require action on its own. - ``MEDIUM`` - The issue must be addressed but not urgently. - ``HIGH`` - The issue must be addressed as a priority. - ``CRITICAL`` - The issue must be remediated immediately to avoid it escalating.\n')
    normalized: typing.Union[int, float, None] = pydantic.Field(None, description='The normalized severity for the finding. This attribute is to be deprecated in favor of ``Label`` . If you provide ``Normalized`` and do not provide ``Label`` , ``Label`` is set automatically as follows. - 0 - ``INFORMATIONAL`` - 1–39 - ``LOW`` - 40–69 - ``MEDIUM`` - 70–89 - ``HIGH`` - 90–100 - ``CRITICAL``\n')
    product: typing.Union[int, float, None] = pydantic.Field(None, description='The native severity as defined by the AWS service or integrated partner product that generated the finding.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-severityupdate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    severity_update_property = securityhub.CfnAutomationRule.SeverityUpdateProperty(\n        label="label",\n        normalized=123,\n        product=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['label', 'normalized', 'product']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.SeverityUpdateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.StringFilterProperty
class CfnAutomationRule_StringFilterPropertyDef(BaseStruct):
    comparison: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The condition to apply to a string value when filtering Security Hub findings. To search for values that have the filter value, use one of the following comparison operators: - To search for values that include the filter value, use ``CONTAINS`` . For example, the filter ``Title CONTAINS CloudFront`` matches findings that have a ``Title`` that includes the string CloudFront. - To search for values that exactly match the filter value, use ``EQUALS`` . For example, the filter ``AwsAccountId EQUALS 123456789012`` only matches findings that have an account ID of ``123456789012`` . - To search for values that start with the filter value, use ``PREFIX`` . For example, the filter ``ResourceRegion PREFIX us`` matches findings that have a ``ResourceRegion`` that starts with ``us`` . A ``ResourceRegion`` that starts with a different value, such as ``af`` , ``ap`` , or ``ca`` , doesn't match. ``CONTAINS`` , ``EQUALS`` , and ``PREFIX`` filters on the same field are joined by ``OR`` . A finding matches if it matches any one of those filters. For example, the filters ``Title CONTAINS CloudFront OR Title CONTAINS CloudWatch`` match a finding that includes either ``CloudFront`` , ``CloudWatch`` , or both strings in the title. To search for values that don’t have the filter value, use one of the following comparison operators: - To search for values that exclude the filter value, use ``NOT_CONTAINS`` . For example, the filter ``Title NOT_CONTAINS CloudFront`` matches findings that have a ``Title`` that excludes the string CloudFront. - To search for values other than the filter value, use ``NOT_EQUALS`` . For example, the filter ``AwsAccountId NOT_EQUALS 123456789012`` only matches findings that have an account ID other than ``123456789012`` . - To search for values that don't start with the filter value, use ``PREFIX_NOT_EQUALS`` . For example, the filter ``ResourceRegion PREFIX_NOT_EQUALS us`` matches findings with a ``ResourceRegion`` that starts with a value other than ``us`` . ``NOT_CONTAINS`` , ``NOT_EQUALS`` , and ``PREFIX_NOT_EQUALS`` filters on the same field are joined by ``AND`` . A finding matches only if it matches all of those filters. For example, the filters ``Title NOT_CONTAINS CloudFront AND Title NOT_CONTAINS CloudWatch`` match a finding that excludes both ``CloudFront`` and ``CloudWatch`` in the title. You can’t have both a ``CONTAINS`` filter and a ``NOT_CONTAINS`` filter on the same field. Similarly, you can't provide both an ``EQUALS`` filter and a ``NOT_EQUALS`` or ``PREFIX_NOT_EQUALS`` filter on the same field. Combining filters in this way returns an error. ``CONTAINS`` filters can only be used with other ``CONTAINS`` filters. ``NOT_CONTAINS`` filters can only be used with other ``NOT_CONTAINS`` filters. You can combine ``PREFIX`` filters with ``NOT_EQUALS`` or ``PREFIX_NOT_EQUALS`` filters for the same field. Security Hub first processes the ``PREFIX`` filters, and then the ``NOT_EQUALS`` or ``PREFIX_NOT_EQUALS`` filters. For example, for the following filters, Security Hub first identifies findings that have resource types that start with either ``AwsIam`` or ``AwsEc2`` . It then excludes findings that have a resource type of ``AwsIamPolicy`` and findings that have a resource type of ``AwsEc2NetworkInterface`` . - ``ResourceType PREFIX AwsIam`` - ``ResourceType PREFIX AwsEc2`` - ``ResourceType NOT_EQUALS AwsIamPolicy`` - ``ResourceType NOT_EQUALS AwsEc2NetworkInterface`` ``CONTAINS`` and ``NOT_CONTAINS`` operators can be used only with automation rules. For more information, see `Automation rules <https://docs.aws.amazon.com/securityhub/latest/userguide/automation-rules.html>`_ in the *AWS Security Hub User Guide* .\n")
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The string filter value. Filter values are case sensitive. For example, the product name for control-based findings is ``Security Hub`` . If you provide ``security hub`` as the filter value, there\'s no match.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-stringfilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    string_filter_property = securityhub.CfnAutomationRule.StringFilterProperty(\n        comparison="comparison",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comparison', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.StringFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.WorkflowUpdateProperty
class CfnAutomationRule_WorkflowUpdatePropertyDef(BaseStruct):
    status: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The status of the investigation into the finding. The workflow status is specific to an individual finding. It does not affect the generation of new findings. For example, setting the workflow status to ``SUPPRESSED`` or ``RESOLVED`` does not prevent a new finding for the same issue. The allowed values are the following. - ``NEW`` - The initial state of a finding, before it is reviewed. Security Hub also resets ``WorkFlowStatus`` from ``NOTIFIED`` or ``RESOLVED`` to ``NEW`` in the following cases: - The record state changes from ``ARCHIVED`` to ``ACTIVE`` . - The compliance status changes from ``PASSED`` to either ``WARNING`` , ``FAILED`` , or ``NOT_AVAILABLE`` . - ``NOTIFIED`` - Indicates that you notified the resource owner about the security issue. Used when the initial reviewer is not the resource owner, and needs intervention from the resource owner. - ``RESOLVED`` - The finding was reviewed and remediated and is now considered resolved. - ``SUPPRESSED`` - Indicates that you reviewed the finding and do not believe that any action is needed. The finding is no longer updated.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-workflowupdate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    workflow_update_property = securityhub.CfnAutomationRule.WorkflowUpdateProperty(\n        status="status"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['status']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.WorkflowUpdateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnConfigurationPolicy.ParameterConfigurationProperty
class CfnConfigurationPolicy_ParameterConfigurationPropertyDef(BaseStruct):
    value_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="Identifies whether a control parameter uses a custom user-defined value or subscribes to the default AWS Security Hub behavior. When ``ValueType`` is set equal to ``DEFAULT`` , the default behavior can be a specific Security Hub default value, or the default behavior can be to ignore a specific parameter. When ``ValueType`` is set equal to ``DEFAULT`` , Security Hub ignores user-provided input for the ``Value`` field. When ``ValueType`` is set equal to ``CUSTOM`` , the ``Value`` field can't be empty.\n")
    value: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnConfigurationPolicy_ParameterValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The current value of a control parameter.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-configurationpolicy-parameterconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    parameter_configuration_property = securityhub.CfnConfigurationPolicy.ParameterConfigurationProperty(\n        value_type="valueType",\n\n        # the properties below are optional\n        value=securityhub.CfnConfigurationPolicy.ParameterValueProperty(\n            boolean=False,\n            double=123,\n            enum="enum",\n            enum_list=["enumList"],\n            integer=123,\n            integer_list=[123],\n            string="string",\n            string_list=["stringList"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['value_type', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnConfigurationPolicy.ParameterConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnConfigurationPolicy.ParameterValueProperty
class CfnConfigurationPolicy_ParameterValuePropertyDef(BaseStruct):
    boolean: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='A control parameter that is a boolean.\n')
    double: typing.Union[int, float, None] = pydantic.Field(None, description='A control parameter that is a double.\n')
    enum: typing.Optional[str] = pydantic.Field(None, description='A control parameter that is an enum.\n')
    enum_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A control parameter that is a list of enums.\n')
    integer: typing.Union[int, float, None] = pydantic.Field(None, description='A control parameter that is an integer.\n')
    integer_list: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[int, float]], None] = pydantic.Field(None, description='A control parameter that is a list of integers.\n')
    string: typing.Optional[str] = pydantic.Field(None, description='A control parameter that is a string.\n')
    string_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A control parameter that is a list of strings.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-configurationpolicy-parametervalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    parameter_value_property = securityhub.CfnConfigurationPolicy.ParameterValueProperty(\n        boolean=False,\n        double=123,\n        enum="enum",\n        enum_list=["enumList"],\n        integer=123,\n        integer_list=[123],\n        string="string",\n        string_list=["stringList"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['boolean', 'double', 'enum', 'enum_list', 'integer', 'integer_list', 'string', 'string_list']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnConfigurationPolicy.ParameterValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnConfigurationPolicy.PolicyProperty
class CfnConfigurationPolicy_PolicyPropertyDef(BaseStruct):
    security_hub: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnConfigurationPolicy_SecurityHubPolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The AWS service that the configuration policy applies to.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-configurationpolicy-policy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    policy_property = securityhub.CfnConfigurationPolicy.PolicyProperty(\n        security_hub=securityhub.CfnConfigurationPolicy.SecurityHubPolicyProperty(\n            enabled_standard_identifiers=["enabledStandardIdentifiers"],\n            security_controls_configuration=securityhub.CfnConfigurationPolicy.SecurityControlsConfigurationProperty(\n                disabled_security_control_identifiers=["disabledSecurityControlIdentifiers"],\n                enabled_security_control_identifiers=["enabledSecurityControlIdentifiers"],\n                security_control_custom_parameters=[securityhub.CfnConfigurationPolicy.SecurityControlCustomParameterProperty(\n                    parameters={\n                        "parameters_key": securityhub.CfnConfigurationPolicy.ParameterConfigurationProperty(\n                            value_type="valueType",\n\n                            # the properties below are optional\n                            value=securityhub.CfnConfigurationPolicy.ParameterValueProperty(\n                                boolean=False,\n                                double=123,\n                                enum="enum",\n                                enum_list=["enumList"],\n                                integer=123,\n                                integer_list=[123],\n                                string="string",\n                                string_list=["stringList"]\n                            )\n                        )\n                    },\n                    security_control_id="securityControlId"\n                )]\n            ),\n            service_enabled=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['security_hub']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnConfigurationPolicy.PolicyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnConfigurationPolicy.SecurityControlCustomParameterProperty
class CfnConfigurationPolicy_SecurityControlCustomParameterPropertyDef(BaseStruct):
    parameters: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnConfigurationPolicy_ParameterConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An object that specifies parameter values for a control in a configuration policy.\n')
    security_control_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the security control.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-configurationpolicy-securitycontrolcustomparameter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    security_control_custom_parameter_property = securityhub.CfnConfigurationPolicy.SecurityControlCustomParameterProperty(\n        parameters={\n            "parameters_key": securityhub.CfnConfigurationPolicy.ParameterConfigurationProperty(\n                value_type="valueType",\n\n                # the properties below are optional\n                value=securityhub.CfnConfigurationPolicy.ParameterValueProperty(\n                    boolean=False,\n                    double=123,\n                    enum="enum",\n                    enum_list=["enumList"],\n                    integer=123,\n                    integer_list=[123],\n                    string="string",\n                    string_list=["stringList"]\n                )\n            )\n        },\n        security_control_id="securityControlId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['parameters', 'security_control_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnConfigurationPolicy.SecurityControlCustomParameterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnConfigurationPolicy.SecurityControlsConfigurationProperty
class CfnConfigurationPolicy_SecurityControlsConfigurationPropertyDef(BaseStruct):
    disabled_security_control_identifiers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of security controls that are disabled in the configuration policy. Security Hub enables all other controls (including newly released controls) other than the listed controls.\n')
    enabled_security_control_identifiers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of security controls that are enabled in the configuration policy. Security Hub disables all other controls (including newly released controls) other than the listed controls.\n')
    security_control_custom_parameters: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnConfigurationPolicy_SecurityControlCustomParameterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of security controls and control parameter values that are included in a configuration policy.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-configurationpolicy-securitycontrolsconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    security_controls_configuration_property = securityhub.CfnConfigurationPolicy.SecurityControlsConfigurationProperty(\n        disabled_security_control_identifiers=["disabledSecurityControlIdentifiers"],\n        enabled_security_control_identifiers=["enabledSecurityControlIdentifiers"],\n        security_control_custom_parameters=[securityhub.CfnConfigurationPolicy.SecurityControlCustomParameterProperty(\n            parameters={\n                "parameters_key": securityhub.CfnConfigurationPolicy.ParameterConfigurationProperty(\n                    value_type="valueType",\n\n                    # the properties below are optional\n                    value=securityhub.CfnConfigurationPolicy.ParameterValueProperty(\n                        boolean=False,\n                        double=123,\n                        enum="enum",\n                        enum_list=["enumList"],\n                        integer=123,\n                        integer_list=[123],\n                        string="string",\n                        string_list=["stringList"]\n                    )\n                )\n            },\n            security_control_id="securityControlId"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['disabled_security_control_identifiers', 'enabled_security_control_identifiers', 'security_control_custom_parameters']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnConfigurationPolicy.SecurityControlsConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnConfigurationPolicy.SecurityHubPolicyProperty
class CfnConfigurationPolicy_SecurityHubPolicyPropertyDef(BaseStruct):
    enabled_standard_identifiers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list that defines which security standards are enabled in the configuration policy.\n')
    security_controls_configuration: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnConfigurationPolicy_SecurityControlsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An object that defines which security controls are enabled in the configuration policy. The enablement status of a control is aligned across all of the enabled standards in an account.\n')
    service_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Indicates whether Security Hub is enabled in the policy.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-configurationpolicy-securityhubpolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    security_hub_policy_property = securityhub.CfnConfigurationPolicy.SecurityHubPolicyProperty(\n        enabled_standard_identifiers=["enabledStandardIdentifiers"],\n        security_controls_configuration=securityhub.CfnConfigurationPolicy.SecurityControlsConfigurationProperty(\n            disabled_security_control_identifiers=["disabledSecurityControlIdentifiers"],\n            enabled_security_control_identifiers=["enabledSecurityControlIdentifiers"],\n            security_control_custom_parameters=[securityhub.CfnConfigurationPolicy.SecurityControlCustomParameterProperty(\n                parameters={\n                    "parameters_key": securityhub.CfnConfigurationPolicy.ParameterConfigurationProperty(\n                        value_type="valueType",\n\n                        # the properties below are optional\n                        value=securityhub.CfnConfigurationPolicy.ParameterValueProperty(\n                            boolean=False,\n                            double=123,\n                            enum="enum",\n                            enum_list=["enumList"],\n                            integer=123,\n                            integer_list=[123],\n                            string="string",\n                            string_list=["stringList"]\n                        )\n                    )\n                },\n                security_control_id="securityControlId"\n            )]\n        ),\n        service_enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled_standard_identifiers', 'security_controls_configuration', 'service_enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnConfigurationPolicy.SecurityHubPolicyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnInsight.AwsSecurityFindingFiltersProperty
class CfnInsight_AwsSecurityFindingFiltersPropertyDef(BaseStruct):
    aws_account_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The AWS account ID in which a finding is generated.\n')
    aws_account_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The name of the AWS account in which a finding is generated.\n')
    company_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The name of the findings provider (company) that owns the solution (product) that generates findings.\n')
    compliance_associated_standards_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The unique identifier of a standard in which a control is enabled. This field consists of the resource portion of the Amazon Resource Name (ARN) returned for a standard in the `DescribeStandards <https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_DescribeStandards.html>`_ API response.\n')
    compliance_security_control_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The unique identifier of a control across standards. Values for this field typically consist of an AWS service and a number, such as APIGateway.5.\n')
    compliance_security_control_parameters_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The name of a security control parameter.\n')
    compliance_security_control_parameters_value: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The current value of a security control parameter.\n')
    compliance_status: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard, such as CIS AWS Foundations. Contains security standard-related finding details.\n')
    confidence: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.\n")
    created_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A timestamp that indicates when the security findings provider created the potential security issue that a finding reflects. This field accepts only the specified formats. Timestamps can end with ``Z`` or ``("+" / "-") time-hour [":" time-minute]`` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples: - ``YYYY-MM-DDTHH:MM:SSZ`` (for example, ``2019-01-31T23:00:00Z`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ`` (for example, ``2019-01-31T23:00:00.123456789Z`` ) - ``YYYY-MM-DDTHH:MM:SS+HH:MM`` (for example, ``2024-01-04T15:25:10+17:59`` ) - ``YYYY-MM-DDTHH:MM:SS-HHMM`` (for example, ``2024-01-04T15:25:10-1759`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM`` (for example, ``2024-01-04T15:25:10.123456789+17:59`` )\n')
    criticality: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The level of importance assigned to the resources associated with the finding. A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources.\n')
    description: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="A finding's description.\n")
    finding_provider_fields_confidence: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The finding provider value for the finding confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent confidence and 100 means 100 percent confidence.\n')
    finding_provider_fields_criticality: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The finding provider value for the level of importance assigned to the resources associated with the findings. A score of 0 means that the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources.\n')
    finding_provider_fields_related_findings_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The finding identifier of a related finding that is identified by the finding provider.\n')
    finding_provider_fields_related_findings_product_arn: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The ARN of the solution that generated a related finding that is identified by the finding provider.\n')
    finding_provider_fields_severity_label: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The finding provider value for the severity label.\n')
    finding_provider_fields_severity_original: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="The finding provider's original value for the severity.\n")
    finding_provider_fields_types: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='One or more finding types that the finding provider assigned to the finding. Uses the format of ``namespace/category/classifier`` that classify a finding. Valid namespace values are: Software and Configuration Checks | TTPs | Effects | Unusual Behaviors | Sensitive Data Identifications\n')
    first_observed_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A timestamp that indicates when the security findings provider first observed the potential security issue that a finding captured. This field accepts only the specified formats. Timestamps can end with ``Z`` or ``("+" / "-") time-hour [":" time-minute]`` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples: - ``YYYY-MM-DDTHH:MM:SSZ`` (for example, ``2019-01-31T23:00:00Z`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ`` (for example, ``2019-01-31T23:00:00.123456789Z`` ) - ``YYYY-MM-DDTHH:MM:SS+HH:MM`` (for example, ``2024-01-04T15:25:10+17:59`` ) - ``YYYY-MM-DDTHH:MM:SS-HHMM`` (for example, ``2024-01-04T15:25:10-1759`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM`` (for example, ``2024-01-04T15:25:10.123456789+17:59`` )\n')
    generator_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="The identifier for the solution-specific component (a discrete unit of logic) that generated a finding. In various security findings providers' solutions, this generator can be called a rule, a check, a detector, a plugin, etc.\n")
    keyword: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_KeywordFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='This field is deprecated. A keyword for a finding.\n')
    last_observed_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A timestamp that indicates when the security findings provider most recently observed the potential security issue that a finding captured. This field accepts only the specified formats. Timestamps can end with ``Z`` or ``("+" / "-") time-hour [":" time-minute]`` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples: - ``YYYY-MM-DDTHH:MM:SSZ`` (for example, ``2019-01-31T23:00:00Z`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ`` (for example, ``2019-01-31T23:00:00.123456789Z`` ) - ``YYYY-MM-DDTHH:MM:SS+HH:MM`` (for example, ``2024-01-04T15:25:10+17:59`` ) - ``YYYY-MM-DDTHH:MM:SS-HHMM`` (for example, ``2024-01-04T15:25:10-1759`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM`` (for example, ``2024-01-04T15:25:10.123456789+17:59`` )\n')
    malware_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The name of the malware that was observed.\n')
    malware_path: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The filesystem path of the malware that was observed.\n')
    malware_state: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The state of the malware that was observed.\n')
    malware_type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The type of the malware that was observed.\n')
    network_destination_domain: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The destination domain of network-related information about a finding.\n')
    network_destination_ip_v4: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_IpFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The destination IPv4 address of network-related information about a finding.\n')
    network_destination_ip_v6: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_IpFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The destination IPv6 address of network-related information about a finding.\n')
    network_destination_port: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The destination port of network-related information about a finding.\n')
    network_direction: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Indicates the direction of network traffic associated with a finding.\n')
    network_protocol: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The protocol of network-related information about a finding.\n')
    network_source_domain: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The source domain of network-related information about a finding.\n')
    network_source_ip_v4: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_IpFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The source IPv4 address of network-related information about a finding.\n')
    network_source_ip_v6: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_IpFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The source IPv6 address of network-related information about a finding.\n')
    network_source_mac: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The source media access control (MAC) address of network-related information about a finding.\n')
    network_source_port: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The source port of network-related information about a finding.\n')
    note_text: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The text of a note.\n')
    note_updated_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The timestamp of when the note was updated.\n')
    note_updated_by: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The principal that created a note.\n')
    process_launched_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A timestamp that identifies when the process was launched. This field accepts only the specified formats. Timestamps can end with ``Z`` or ``("+" / "-") time-hour [":" time-minute]`` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples: - ``YYYY-MM-DDTHH:MM:SSZ`` (for example, ``2019-01-31T23:00:00Z`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ`` (for example, ``2019-01-31T23:00:00.123456789Z`` ) - ``YYYY-MM-DDTHH:MM:SS+HH:MM`` (for example, ``2024-01-04T15:25:10+17:59`` ) - ``YYYY-MM-DDTHH:MM:SS-HHMM`` (for example, ``2024-01-04T15:25:10-1759`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM`` (for example, ``2024-01-04T15:25:10.123456789+17:59`` )\n')
    process_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The name of the process.\n')
    process_parent_pid: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The parent process ID. This field accepts positive integers between ``O`` and ``2147483647`` .\n')
    process_path: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The path to the process executable.\n')
    process_pid: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The process ID.\n')
    process_terminated_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A timestamp that identifies when the process was terminated. This field accepts only the specified formats. Timestamps can end with ``Z`` or ``("+" / "-") time-hour [":" time-minute]`` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples: - ``YYYY-MM-DDTHH:MM:SSZ`` (for example, ``2019-01-31T23:00:00Z`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ`` (for example, ``2019-01-31T23:00:00.123456789Z`` ) - ``YYYY-MM-DDTHH:MM:SS+HH:MM`` (for example, ``2024-01-04T15:25:10+17:59`` ) - ``YYYY-MM-DDTHH:MM:SS-HHMM`` (for example, ``2024-01-04T15:25:10-1759`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM`` (for example, ``2024-01-04T15:25:10.123456789+17:59`` )\n')
    product_arn: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) after this provider's product (solution that generates findings) is registered with Security Hub.\n")
    product_fields: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="A data type where security findings providers can include additional solution-specific details that aren't part of the defined ``AwsSecurityFinding`` format.\n")
    product_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The name of the solution (product) that generates findings.\n')
    recommendation_text: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The recommendation of what to do about the issue described in a finding.\n')
    record_state: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The updated record state for the finding.\n')
    region: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The Region from which the finding was generated.\n')
    related_findings_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The solution-generated identifier for a related finding.\n')
    related_findings_product_arn: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The ARN of the solution that generated a related finding.\n')
    resource_application_arn: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The ARN of the application that is related to a finding.\n')
    resource_application_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The name of the application that is related to a finding.\n')
    resource_aws_ec2_instance_iam_instance_profile_arn: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The IAM profile ARN of the instance.\n')
    resource_aws_ec2_instance_image_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The Amazon Machine Image (AMI) ID of the instance.\n')
    resource_aws_ec2_instance_ip_v4_addresses: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_IpFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The IPv4 addresses associated with the instance.\n')
    resource_aws_ec2_instance_ip_v6_addresses: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_IpFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The IPv6 addresses associated with the instance.\n')
    resource_aws_ec2_instance_key_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The key name associated with the instance.\n')
    resource_aws_ec2_instance_launched_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The date and time the instance was launched.\n')
    resource_aws_ec2_instance_subnet_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The identifier of the subnet that the instance was launched in.\n')
    resource_aws_ec2_instance_type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The instance type of the instance.\n')
    resource_aws_ec2_instance_vpc_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The identifier of the VPC that the instance was launched in.\n')
    resource_aws_iam_access_key_created_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The creation date/time of the IAM access key related to a finding.\n')
    resource_aws_iam_access_key_principal_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The name of the principal that is associated with an IAM access key.\n')
    resource_aws_iam_access_key_status: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The status of the IAM access key related to a finding.\n')
    resource_aws_iam_access_key_user_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='This field is deprecated. The username associated with the IAM access key related to a finding.\n')
    resource_aws_iam_user_user_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The name of an IAM user.\n')
    resource_aws_s3_bucket_owner_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The canonical user ID of the owner of the S3 bucket.\n')
    resource_aws_s3_bucket_owner_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The display name of the owner of the S3 bucket.\n')
    resource_container_image_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The identifier of the image related to a finding.\n')
    resource_container_image_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The name of the image related to a finding.\n')
    resource_container_launched_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A timestamp that identifies when the container was started. This field accepts only the specified formats. Timestamps can end with ``Z`` or ``("+" / "-") time-hour [":" time-minute]`` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples: - ``YYYY-MM-DDTHH:MM:SSZ`` (for example, ``2019-01-31T23:00:00Z`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ`` (for example, ``2019-01-31T23:00:00.123456789Z`` ) - ``YYYY-MM-DDTHH:MM:SS+HH:MM`` (for example, ``2024-01-04T15:25:10+17:59`` ) - ``YYYY-MM-DDTHH:MM:SS-HHMM`` (for example, ``2024-01-04T15:25:10-1759`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM`` (for example, ``2024-01-04T15:25:10.123456789+17:59`` )\n')
    resource_container_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The name of the container related to a finding.\n')
    resource_details_other: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="The details of a resource that doesn't have a specific subfield for the resource type defined.\n")
    resource_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The canonical identifier for the given resource type.\n')
    resource_partition: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The canonical AWS partition name that the Region is assigned to.\n')
    resource_region: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The canonical AWS external Region name where this resource is located.\n')
    resource_tags: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of AWS tags associated with a resource at the time the finding was processed.\n')
    resource_type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Specifies the type of the resource that details are provided for.\n')
    sample: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_BooleanFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Indicates whether or not sample findings are included in the filter results.\n')
    severity_label: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="The label of a finding's severity.\n")
    severity_normalized: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Deprecated. The normalized severity of a finding. Instead of providing ``Normalized`` , provide ``Label`` . The value of ``Normalized`` can be an integer between ``0`` and ``100`` . If you provide ``Label`` and do not provide ``Normalized`` , then ``Normalized`` is set automatically as follows. - ``INFORMATIONAL`` - 0 - ``LOW`` - 1 - ``MEDIUM`` - 40 - ``HIGH`` - 70 - ``CRITICAL`` - 90\n')
    severity_product: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="Deprecated. This attribute isn't included in findings. Instead of providing ``Product`` , provide ``Original`` . The native severity as defined by the AWS service or integrated partner product that generated the finding.\n")
    source_url: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="A URL that links to a page about the current finding in the security findings provider's solution.\n")
    threat_intel_indicator_category: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The category of a threat intelligence indicator.\n')
    threat_intel_indicator_last_observed_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A timestamp that identifies the last observation of a threat intelligence indicator.\n')
    threat_intel_indicator_source: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The source of the threat intelligence.\n')
    threat_intel_indicator_source_url: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The URL for more details from the source of the threat intelligence.\n')
    threat_intel_indicator_type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The type of a threat intelligence indicator.\n')
    threat_intel_indicator_value: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The value of a threat intelligence indicator.\n')
    title: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="A finding's title.\n")
    type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A finding type in the format of ``namespace/category/classifier`` that classifies a finding.\n')
    updated_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A timestamp that indicates when the security findings provider last updated the finding record. This field accepts only the specified formats. Timestamps can end with ``Z`` or ``("+" / "-") time-hour [":" time-minute]`` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples: - ``YYYY-MM-DDTHH:MM:SSZ`` (for example, ``2019-01-31T23:00:00Z`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ`` (for example, ``2019-01-31T23:00:00.123456789Z`` ) - ``YYYY-MM-DDTHH:MM:SS+HH:MM`` (for example, ``2024-01-04T15:25:10+17:59`` ) - ``YYYY-MM-DDTHH:MM:SS-HHMM`` (for example, ``2024-01-04T15:25:10-1759`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM`` (for example, ``2024-01-04T15:25:10.123456789+17:59`` )\n')
    user_defined_fields: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding.\n')
    verification_state: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The veracity of a finding.\n')
    vulnerabilities_exploit_available: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Indicates whether a software vulnerability in your environment has a known exploit. You can filter findings by this field only if you use Security Hub and Amazon Inspector.\n')
    vulnerabilities_fix_available: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Indicates whether a vulnerability is fixed in a newer version of the affected software packages. You can filter findings by this field only if you use Security Hub and Amazon Inspector.\n')
    workflow_state: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The workflow state of a finding. Note that this field is deprecated. To search for a finding based on its workflow status, use ``WorkflowStatus`` .\n')
    workflow_status: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The status of the investigation into a finding. Allowed values are the following. - ``NEW`` - The initial state of a finding, before it is reviewed. Security Hub also resets the workflow status from ``NOTIFIED`` or ``RESOLVED`` to ``NEW`` in the following cases: - ``RecordState`` changes from ``ARCHIVED`` to ``ACTIVE`` . - ``Compliance.Status`` changes from ``PASSED`` to either ``WARNING`` , ``FAILED`` , or ``NOT_AVAILABLE`` . - ``NOTIFIED`` - Indicates that the resource owner has been notified about the security issue. Used when the initial reviewer is not the resource owner, and needs intervention from the resource owner. If one of the following occurs, the workflow status is changed automatically from ``NOTIFIED`` to ``NEW`` : - ``RecordState`` changes from ``ARCHIVED`` to ``ACTIVE`` . - ``Compliance.Status`` changes from ``PASSED`` to ``FAILED`` , ``WARNING`` , or ``NOT_AVAILABLE`` . - ``SUPPRESSED`` - Indicates that you reviewed the finding and do not believe that any action is needed. The workflow status of a ``SUPPRESSED`` finding does not change if ``RecordState`` changes from ``ARCHIVED`` to ``ACTIVE`` . - ``RESOLVED`` - The finding was reviewed and remediated and is now considered resolved. The finding remains ``RESOLVED`` unless one of the following occurs: - ``RecordState`` changes from ``ARCHIVED`` to ``ACTIVE`` . - ``Compliance.Status`` changes from ``PASSED`` to ``FAILED`` , ``WARNING`` , or ``NOT_AVAILABLE`` . In those cases, the workflow status is automatically reset to ``NEW`` . For findings from controls, if ``Compliance.Status`` is ``PASSED`` , then Security Hub automatically sets the workflow status to ``RESOLVED`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-insight-awssecurityfindingfilters.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    aws_security_finding_filters_property = securityhub.CfnInsight.AwsSecurityFindingFiltersProperty(\n        aws_account_id=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        aws_account_name=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        company_name=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        compliance_associated_standards_id=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        compliance_security_control_id=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        compliance_security_control_parameters_name=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        compliance_security_control_parameters_value=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        compliance_status=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        confidence=[securityhub.CfnInsight.NumberFilterProperty(\n            eq=123,\n            gte=123,\n            lte=123\n        )],\n        created_at=[securityhub.CfnInsight.DateFilterProperty(\n            date_range=securityhub.CfnInsight.DateRangeProperty(\n                unit="unit",\n                value=123\n            ),\n            end="end",\n            start="start"\n        )],\n        criticality=[securityhub.CfnInsight.NumberFilterProperty(\n            eq=123,\n            gte=123,\n            lte=123\n        )],\n        description=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        finding_provider_fields_confidence=[securityhub.CfnInsight.NumberFilterProperty(\n            eq=123,\n            gte=123,\n            lte=123\n        )],\n        finding_provider_fields_criticality=[securityhub.CfnInsight.NumberFilterProperty(\n            eq=123,\n            gte=123,\n            lte=123\n        )],\n        finding_provider_fields_related_findings_id=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        finding_provider_fields_related_findings_product_arn=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        finding_provider_fields_severity_label=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        finding_provider_fields_severity_original=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        finding_provider_fields_types=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        first_observed_at=[securityhub.CfnInsight.DateFilterProperty(\n            date_range=securityhub.CfnInsight.DateRangeProperty(\n                unit="unit",\n                value=123\n            ),\n            end="end",\n            start="start"\n        )],\n        generator_id=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        id=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        keyword=[securityhub.CfnInsight.KeywordFilterProperty(\n            value="value"\n        )],\n        last_observed_at=[securityhub.CfnInsight.DateFilterProperty(\n            date_range=securityhub.CfnInsight.DateRangeProperty(\n                unit="unit",\n                value=123\n            ),\n            end="end",\n            start="start"\n        )],\n        malware_name=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        malware_path=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        malware_state=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        malware_type=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        network_destination_domain=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        network_destination_ip_v4=[securityhub.CfnInsight.IpFilterProperty(\n            cidr="cidr"\n        )],\n        network_destination_ip_v6=[securityhub.CfnInsight.IpFilterProperty(\n            cidr="cidr"\n        )],\n        network_destination_port=[securityhub.CfnInsight.NumberFilterProperty(\n            eq=123,\n            gte=123,\n            lte=123\n        )],\n        network_direction=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        network_protocol=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        network_source_domain=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        network_source_ip_v4=[securityhub.CfnInsight.IpFilterProperty(\n            cidr="cidr"\n        )],\n        network_source_ip_v6=[securityhub.CfnInsight.IpFilterProperty(\n            cidr="cidr"\n        )],\n        network_source_mac=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        network_source_port=[securityhub.CfnInsight.NumberFilterProperty(\n            eq=123,\n            gte=123,\n            lte=123\n        )],\n        note_text=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        note_updated_at=[securityhub.CfnInsight.DateFilterProperty(\n            date_range=securityhub.CfnInsight.DateRangeProperty(\n                unit="unit",\n                value=123\n            ),\n            end="end",\n            start="start"\n        )],\n        note_updated_by=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        process_launched_at=[securityhub.CfnInsight.DateFilterProperty(\n            date_range=securityhub.CfnInsight.DateRangeProperty(\n                unit="unit",\n                value=123\n            ),\n            end="end",\n            start="start"\n        )],\n        process_name=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        process_parent_pid=[securityhub.CfnInsight.NumberFilterProperty(\n            eq=123,\n            gte=123,\n            lte=123\n        )],\n        process_path=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        process_pid=[securityhub.CfnInsight.NumberFilterProperty(\n            eq=123,\n            gte=123,\n            lte=123\n        )],\n        process_terminated_at=[securityhub.CfnInsight.DateFilterProperty(\n            date_range=securityhub.CfnInsight.DateRangeProperty(\n                unit="unit",\n                value=123\n            ),\n            end="end",\n            start="start"\n        )],\n        product_arn=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        product_fields=[securityhub.CfnInsight.MapFilterProperty(\n            comparison="comparison",\n            key="key",\n            value="value"\n        )],\n        product_name=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        recommendation_text=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        record_state=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        region=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        related_findings_id=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        related_findings_product_arn=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_application_arn=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_application_name=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_aws_ec2_instance_iam_instance_profile_arn=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_aws_ec2_instance_image_id=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_aws_ec2_instance_ip_v4_addresses=[securityhub.CfnInsight.IpFilterProperty(\n            cidr="cidr"\n        )],\n        resource_aws_ec2_instance_ip_v6_addresses=[securityhub.CfnInsight.IpFilterProperty(\n            cidr="cidr"\n        )],\n        resource_aws_ec2_instance_key_name=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_aws_ec2_instance_launched_at=[securityhub.CfnInsight.DateFilterProperty(\n            date_range=securityhub.CfnInsight.DateRangeProperty(\n                unit="unit",\n                value=123\n            ),\n            end="end",\n            start="start"\n        )],\n        resource_aws_ec2_instance_subnet_id=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_aws_ec2_instance_type=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_aws_ec2_instance_vpc_id=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_aws_iam_access_key_created_at=[securityhub.CfnInsight.DateFilterProperty(\n            date_range=securityhub.CfnInsight.DateRangeProperty(\n                unit="unit",\n                value=123\n            ),\n            end="end",\n            start="start"\n        )],\n        resource_aws_iam_access_key_principal_name=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_aws_iam_access_key_status=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_aws_iam_access_key_user_name=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_aws_iam_user_user_name=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_aws_s3_bucket_owner_id=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_aws_s3_bucket_owner_name=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_container_image_id=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_container_image_name=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_container_launched_at=[securityhub.CfnInsight.DateFilterProperty(\n            date_range=securityhub.CfnInsight.DateRangeProperty(\n                unit="unit",\n                value=123\n            ),\n            end="end",\n            start="start"\n        )],\n        resource_container_name=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_details_other=[securityhub.CfnInsight.MapFilterProperty(\n            comparison="comparison",\n            key="key",\n            value="value"\n        )],\n        resource_id=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_partition=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_region=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_tags=[securityhub.CfnInsight.MapFilterProperty(\n            comparison="comparison",\n            key="key",\n            value="value"\n        )],\n        resource_type=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        sample=[securityhub.CfnInsight.BooleanFilterProperty(\n            value=False\n        )],\n        severity_label=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        severity_normalized=[securityhub.CfnInsight.NumberFilterProperty(\n            eq=123,\n            gte=123,\n            lte=123\n        )],\n        severity_product=[securityhub.CfnInsight.NumberFilterProperty(\n            eq=123,\n            gte=123,\n            lte=123\n        )],\n        source_url=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        threat_intel_indicator_category=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        threat_intel_indicator_last_observed_at=[securityhub.CfnInsight.DateFilterProperty(\n            date_range=securityhub.CfnInsight.DateRangeProperty(\n                unit="unit",\n                value=123\n            ),\n            end="end",\n            start="start"\n        )],\n        threat_intel_indicator_source=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        threat_intel_indicator_source_url=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        threat_intel_indicator_type=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        threat_intel_indicator_value=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        title=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        type=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        updated_at=[securityhub.CfnInsight.DateFilterProperty(\n            date_range=securityhub.CfnInsight.DateRangeProperty(\n                unit="unit",\n                value=123\n            ),\n            end="end",\n            start="start"\n        )],\n        user_defined_fields=[securityhub.CfnInsight.MapFilterProperty(\n            comparison="comparison",\n            key="key",\n            value="value"\n        )],\n        verification_state=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        vulnerabilities_exploit_available=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        vulnerabilities_fix_available=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        workflow_state=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        workflow_status=[securityhub.CfnInsight.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['aws_account_id', 'aws_account_name', 'company_name', 'compliance_associated_standards_id', 'compliance_security_control_id', 'compliance_security_control_parameters_name', 'compliance_security_control_parameters_value', 'compliance_status', 'confidence', 'created_at', 'criticality', 'description', 'finding_provider_fields_confidence', 'finding_provider_fields_criticality', 'finding_provider_fields_related_findings_id', 'finding_provider_fields_related_findings_product_arn', 'finding_provider_fields_severity_label', 'finding_provider_fields_severity_original', 'finding_provider_fields_types', 'first_observed_at', 'generator_id', 'keyword', 'last_observed_at', 'malware_name', 'malware_path', 'malware_state', 'malware_type', 'network_destination_domain', 'network_destination_ip_v4', 'network_destination_ip_v6', 'network_destination_port', 'network_direction', 'network_protocol', 'network_source_domain', 'network_source_ip_v4', 'network_source_ip_v6', 'network_source_mac', 'network_source_port', 'note_text', 'note_updated_at', 'note_updated_by', 'process_launched_at', 'process_name', 'process_parent_pid', 'process_path', 'process_pid', 'process_terminated_at', 'product_arn', 'product_fields', 'product_name', 'recommendation_text', 'record_state', 'region', 'related_findings_id', 'related_findings_product_arn', 'resource_application_arn', 'resource_application_name', 'resource_aws_ec2_instance_iam_instance_profile_arn', 'resource_aws_ec2_instance_image_id', 'resource_aws_ec2_instance_ip_v4_addresses', 'resource_aws_ec2_instance_ip_v6_addresses', 'resource_aws_ec2_instance_key_name', 'resource_aws_ec2_instance_launched_at', 'resource_aws_ec2_instance_subnet_id', 'resource_aws_ec2_instance_type', 'resource_aws_ec2_instance_vpc_id', 'resource_aws_iam_access_key_created_at', 'resource_aws_iam_access_key_principal_name', 'resource_aws_iam_access_key_status', 'resource_aws_iam_access_key_user_name', 'resource_aws_iam_user_user_name', 'resource_aws_s3_bucket_owner_id', 'resource_aws_s3_bucket_owner_name', 'resource_container_image_id', 'resource_container_image_name', 'resource_container_launched_at', 'resource_container_name', 'resource_details_other', 'resource_id', 'resource_partition', 'resource_region', 'resource_tags', 'resource_type', 'sample', 'severity_label', 'severity_normalized', 'severity_product', 'source_url', 'threat_intel_indicator_category', 'threat_intel_indicator_last_observed_at', 'threat_intel_indicator_source', 'threat_intel_indicator_source_url', 'threat_intel_indicator_type', 'threat_intel_indicator_value', 'title', 'type', 'updated_at', 'user_defined_fields', 'verification_state', 'vulnerabilities_exploit_available', 'vulnerabilities_fix_available', 'workflow_state', 'workflow_status']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnInsight.AwsSecurityFindingFiltersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnInsight.BooleanFilterProperty
class CfnInsight_BooleanFilterPropertyDef(BaseStruct):
    value: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value of the boolean.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-insight-booleanfilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    boolean_filter_property = securityhub.CfnInsight.BooleanFilterProperty(\n        value=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnInsight.BooleanFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnInsight.DateFilterProperty
class CfnInsight_DateFilterPropertyDef(BaseStruct):
    date_range: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateRangePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A date range for the date filter.\n')
    end: typing.Optional[str] = pydantic.Field(None, description='A timestamp that provides the end date for the date filter. This field accepts only the specified formats. Timestamps can end with ``Z`` or ``("+" / "-") time-hour [":" time-minute]`` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples: - ``YYYY-MM-DDTHH:MM:SSZ`` (for example, ``2019-01-31T23:00:00Z`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ`` (for example, ``2019-01-31T23:00:00.123456789Z`` ) - ``YYYY-MM-DDTHH:MM:SS+HH:MM`` (for example, ``2024-01-04T15:25:10+17:59`` ) - ``YYYY-MM-DDTHH:MM:SS-HHMM`` (for example, ``2024-01-04T15:25:10-1759`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM`` (for example, ``2024-01-04T15:25:10.123456789+17:59`` )\n')
    start: typing.Optional[str] = pydantic.Field(None, description='A timestamp that provides the start date for the date filter. This field accepts only the specified formats. Timestamps can end with ``Z`` or ``("+" / "-") time-hour [":" time-minute]`` . The time-secfrac after seconds is limited to a maximum of 9 digits. The offset is bounded by +/-18:00. Here are valid timestamp formats with examples: - ``YYYY-MM-DDTHH:MM:SSZ`` (for example, ``2019-01-31T23:00:00Z`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmmZ`` (for example, ``2019-01-31T23:00:00.123456789Z`` ) - ``YYYY-MM-DDTHH:MM:SS+HH:MM`` (for example, ``2024-01-04T15:25:10+17:59`` ) - ``YYYY-MM-DDTHH:MM:SS-HHMM`` (for example, ``2024-01-04T15:25:10-1759`` ) - ``YYYY-MM-DDTHH:MM:SS.mmmmmmmmm+HH:MM`` (for example, ``2024-01-04T15:25:10.123456789+17:59`` )\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-insight-datefilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    date_filter_property = securityhub.CfnInsight.DateFilterProperty(\n        date_range=securityhub.CfnInsight.DateRangeProperty(\n            unit="unit",\n            value=123\n        ),\n        end="end",\n        start="start"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['date_range', 'end', 'start']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnInsight.DateFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnInsight.DateRangeProperty
class CfnInsight_DateRangePropertyDef(BaseStruct):
    unit: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A date range unit for the date filter.\n')
    value: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='A date range value for the date filter.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-insight-daterange.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    date_range_property = securityhub.CfnInsight.DateRangeProperty(\n        unit="unit",\n        value=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['unit', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnInsight.DateRangeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnInsight.IpFilterProperty
class CfnInsight_IpFilterPropertyDef(BaseStruct):
    cidr: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A finding\'s CIDR value.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-insight-ipfilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    ip_filter_property = securityhub.CfnInsight.IpFilterProperty(\n        cidr="cidr"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cidr']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnInsight.IpFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnInsight.KeywordFilterProperty
class CfnInsight_KeywordFilterPropertyDef(BaseStruct):
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A value for the keyword.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-insight-keywordfilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    keyword_filter_property = securityhub.CfnInsight.KeywordFilterProperty(\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnInsight.KeywordFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnInsight.MapFilterProperty
class CfnInsight_MapFilterPropertyDef(BaseStruct):
    comparison: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The condition to apply to the key value when filtering Security Hub findings with a map filter. To search for values that have the filter value, use one of the following comparison operators: - To search for values that include the filter value, use ``CONTAINS`` . For example, for the ``ResourceTags`` field, the filter ``Department CONTAINS Security`` matches findings that include the value ``Security`` for the ``Department`` tag. In the same example, a finding with a value of ``Security team`` for the ``Department`` tag is a match. - To search for values that exactly match the filter value, use ``EQUALS`` . For example, for the ``ResourceTags`` field, the filter ``Department EQUALS Security`` matches findings that have the value ``Security`` for the ``Department`` tag. ``CONTAINS`` and ``EQUALS`` filters on the same field are joined by ``OR`` . A finding matches if it matches any one of those filters. For example, the filters ``Department CONTAINS Security OR Department CONTAINS Finance`` match a finding that includes either ``Security`` , ``Finance`` , or both values. To search for values that don't have the filter value, use one of the following comparison operators: - To search for values that exclude the filter value, use ``NOT_CONTAINS`` . For example, for the ``ResourceTags`` field, the filter ``Department NOT_CONTAINS Finance`` matches findings that exclude the value ``Finance`` for the ``Department`` tag. - To search for values other than the filter value, use ``NOT_EQUALS`` . For example, for the ``ResourceTags`` field, the filter ``Department NOT_EQUALS Finance`` matches findings that don’t have the value ``Finance`` for the ``Department`` tag. ``NOT_CONTAINS`` and ``NOT_EQUALS`` filters on the same field are joined by ``AND`` . A finding matches only if it matches all of those filters. For example, the filters ``Department NOT_CONTAINS Security AND Department NOT_CONTAINS Finance`` match a finding that excludes both the ``Security`` and ``Finance`` values. ``CONTAINS`` filters can only be used with other ``CONTAINS`` filters. ``NOT_CONTAINS`` filters can only be used with other ``NOT_CONTAINS`` filters. You can’t have both a ``CONTAINS`` filter and a ``NOT_CONTAINS`` filter on the same field. Similarly, you can’t have both an ``EQUALS`` filter and a ``NOT_EQUALS`` filter on the same field. Combining filters in this way returns an error. ``CONTAINS`` and ``NOT_CONTAINS`` operators can be used only with automation rules. For more information, see `Automation rules <https://docs.aws.amazon.com/securityhub/latest/userguide/automation-rules.html>`_ in the *AWS Security Hub User Guide* .\n")
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The key of the map filter. For example, for ``ResourceTags`` , ``Key`` identifies the name of the tag. For ``UserDefinedFields`` , ``Key`` is the name of the field.\n')
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value for the key in the map filter. Filter values are case sensitive. For example, one of the values for a tag called ``Department`` might be ``Security`` . If you provide ``security`` as the filter value, then there\'s no match.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-insight-mapfilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    map_filter_property = securityhub.CfnInsight.MapFilterProperty(\n        comparison="comparison",\n        key="key",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comparison', 'key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnInsight.MapFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnInsight.NumberFilterProperty
class CfnInsight_NumberFilterPropertyDef(BaseStruct):
    eq: typing.Union[int, float, None] = pydantic.Field(None, description='The equal-to condition to be applied to a single field when querying for findings.\n')
    gte: typing.Union[int, float, None] = pydantic.Field(None, description='The greater-than-equal condition to be applied to a single field when querying for findings.\n')
    lte: typing.Union[int, float, None] = pydantic.Field(None, description='The less-than-equal condition to be applied to a single field when querying for findings.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-insight-numberfilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    number_filter_property = securityhub.CfnInsight.NumberFilterProperty(\n        eq=123,\n        gte=123,\n        lte=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['eq', 'gte', 'lte']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnInsight.NumberFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnInsight.StringFilterProperty
class CfnInsight_StringFilterPropertyDef(BaseStruct):
    comparison: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The condition to apply to a string value when filtering Security Hub findings. To search for values that have the filter value, use one of the following comparison operators: - To search for values that include the filter value, use ``CONTAINS`` . For example, the filter ``Title CONTAINS CloudFront`` matches findings that have a ``Title`` that includes the string CloudFront. - To search for values that exactly match the filter value, use ``EQUALS`` . For example, the filter ``AwsAccountId EQUALS 123456789012`` only matches findings that have an account ID of ``123456789012`` . - To search for values that start with the filter value, use ``PREFIX`` . For example, the filter ``ResourceRegion PREFIX us`` matches findings that have a ``ResourceRegion`` that starts with ``us`` . A ``ResourceRegion`` that starts with a different value, such as ``af`` , ``ap`` , or ``ca`` , doesn't match. ``CONTAINS`` , ``EQUALS`` , and ``PREFIX`` filters on the same field are joined by ``OR`` . A finding matches if it matches any one of those filters. For example, the filters ``Title CONTAINS CloudFront OR Title CONTAINS CloudWatch`` match a finding that includes either ``CloudFront`` , ``CloudWatch`` , or both strings in the title. To search for values that don’t have the filter value, use one of the following comparison operators: - To search for values that exclude the filter value, use ``NOT_CONTAINS`` . For example, the filter ``Title NOT_CONTAINS CloudFront`` matches findings that have a ``Title`` that excludes the string CloudFront. - To search for values other than the filter value, use ``NOT_EQUALS`` . For example, the filter ``AwsAccountId NOT_EQUALS 123456789012`` only matches findings that have an account ID other than ``123456789012`` . - To search for values that don't start with the filter value, use ``PREFIX_NOT_EQUALS`` . For example, the filter ``ResourceRegion PREFIX_NOT_EQUALS us`` matches findings with a ``ResourceRegion`` that starts with a value other than ``us`` . ``NOT_CONTAINS`` , ``NOT_EQUALS`` , and ``PREFIX_NOT_EQUALS`` filters on the same field are joined by ``AND`` . A finding matches only if it matches all of those filters. For example, the filters ``Title NOT_CONTAINS CloudFront AND Title NOT_CONTAINS CloudWatch`` match a finding that excludes both ``CloudFront`` and ``CloudWatch`` in the title. You can’t have both a ``CONTAINS`` filter and a ``NOT_CONTAINS`` filter on the same field. Similarly, you can't provide both an ``EQUALS`` filter and a ``NOT_EQUALS`` or ``PREFIX_NOT_EQUALS`` filter on the same field. Combining filters in this way returns an error. ``CONTAINS`` filters can only be used with other ``CONTAINS`` filters. ``NOT_CONTAINS`` filters can only be used with other ``NOT_CONTAINS`` filters. You can combine ``PREFIX`` filters with ``NOT_EQUALS`` or ``PREFIX_NOT_EQUALS`` filters for the same field. Security Hub first processes the ``PREFIX`` filters, and then the ``NOT_EQUALS`` or ``PREFIX_NOT_EQUALS`` filters. For example, for the following filters, Security Hub first identifies findings that have resource types that start with either ``AwsIam`` or ``AwsEc2`` . It then excludes findings that have a resource type of ``AwsIamPolicy`` and findings that have a resource type of ``AwsEc2NetworkInterface`` . - ``ResourceType PREFIX AwsIam`` - ``ResourceType PREFIX AwsEc2`` - ``ResourceType NOT_EQUALS AwsIamPolicy`` - ``ResourceType NOT_EQUALS AwsEc2NetworkInterface`` ``CONTAINS`` and ``NOT_CONTAINS`` operators can be used only with automation rules. For more information, see `Automation rules <https://docs.aws.amazon.com/securityhub/latest/userguide/automation-rules.html>`_ in the *AWS Security Hub User Guide* .\n")
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The string filter value. Filter values are case sensitive. For example, the product name for control-based findings is ``Security Hub`` . If you provide ``security hub`` as the filter value, there\'s no match.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-insight-stringfilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    string_filter_property = securityhub.CfnInsight.StringFilterProperty(\n        comparison="comparison",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comparison', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnInsight.StringFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnSecurityControl.ParameterConfigurationProperty
class CfnSecurityControl_ParameterConfigurationPropertyDef(BaseStruct):
    value_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Identifies whether a control parameter uses a custom user-defined value or subscribes to the default AWS Security Hub behavior. When ``ValueType`` is set equal to ``DEFAULT`` , the default behavior can be a specific Security Hub default value, or the default behavior can be to ignore a specific parameter. When ``ValueType`` is set equal to ``DEFAULT`` , Security Hub ignores user-provided input for the ``Value`` field. When ``ValueType`` is set equal to ``CUSTOM`` , the ``Value`` field can\'t be empty.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-securitycontrol-parameterconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    parameter_configuration_property = securityhub.CfnSecurityControl.ParameterConfigurationProperty(\n        value_type="valueType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['value_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnSecurityControl.ParameterConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnStandard.StandardsControlProperty
class CfnStandard_StandardsControlPropertyDef(BaseStruct):
    standards_control_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the control.\n')
    reason: typing.Optional[str] = pydantic.Field(None, description='A user-defined reason for changing a control\'s enablement status in a specified standard. If you are disabling a control, then this property is required.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-standard-standardscontrol.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    standards_control_property = securityhub.CfnStandard.StandardsControlProperty(\n        standards_control_arn="standardsControlArn",\n\n        # the properties below are optional\n        reason="reason"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['standards_control_arn', 'reason']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnStandard.StandardsControlProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule
class CfnAutomationRuleDef(BaseCfnResource):
    actions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_AutomationRulesActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='One or more actions to update finding fields if a finding matches the conditions specified in ``Criteria`` .\n')
    criteria: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_AutomationRulesFindingFiltersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A set of `AWS Security Finding Format (ASFF) <https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format.html>`_ finding field attributes and corresponding expected values that Security Hub uses to filter findings. If a rule is enabled and a finding matches the criteria specified in this parameter, Security Hub applies the rule action to the finding.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the rule.\n')
    is_terminal: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Specifies whether a rule is the last to be applied with respect to a finding that matches the rule criteria. This is useful when a finding matches the criteria for multiple rules, and each rule has different actions. If a rule is terminal, Security Hub applies the rule action to a finding that matches the rule criteria and doesn't evaluate other rules for the finding. By default, a rule isn't terminal.\n")
    rule_name: typing.Optional[str] = pydantic.Field(None, description='The name of the rule.\n')
    rule_order: typing.Union[int, float, None] = pydantic.Field(None, description='An integer ranging from 1 to 1000 that represents the order in which the rule action is applied to findings. Security Hub applies rules with lower values for this parameter first.\n')
    rule_status: typing.Optional[str] = pydantic.Field(None, description='Whether the rule is active after it is created. If this parameter is equal to ``ENABLED`` , Security Hub applies the rule to findings and finding updates after the rule is created.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='User-defined tags associated with an automation rule.')
    _init_params: typing.ClassVar[list[str]] = ['actions', 'criteria', 'description', 'is_terminal', 'rule_name', 'rule_order', 'rule_status', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AutomationRulesActionProperty', 'AutomationRulesFindingFieldsUpdateProperty', 'AutomationRulesFindingFiltersProperty', 'DateFilterProperty', 'DateRangeProperty', 'MapFilterProperty', 'NoteUpdateProperty', 'NumberFilterProperty', 'RelatedFindingProperty', 'SeverityUpdateProperty', 'StringFilterProperty', 'WorkflowUpdateProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_securityhub.CfnAutomationRuleDefConfig] = pydantic.Field(None)


class CfnAutomationRuleDefConfig(pydantic.BaseModel):
    AutomationRulesActionProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefAutomationrulesactionpropertyParams]] = pydantic.Field(None, description='')
    AutomationRulesFindingFieldsUpdateProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefAutomationrulesfindingfieldsupdatepropertyParams]] = pydantic.Field(None, description='')
    AutomationRulesFindingFiltersProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefAutomationrulesfindingfilterspropertyParams]] = pydantic.Field(None, description='')
    DateFilterProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefDatefilterpropertyParams]] = pydantic.Field(None, description='')
    DateRangeProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefDaterangepropertyParams]] = pydantic.Field(None, description='')
    MapFilterProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefMapfilterpropertyParams]] = pydantic.Field(None, description='')
    NoteUpdateProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefNoteupdatepropertyParams]] = pydantic.Field(None, description='')
    NumberFilterProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefNumberfilterpropertyParams]] = pydantic.Field(None, description='')
    RelatedFindingProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefRelatedfindingpropertyParams]] = pydantic.Field(None, description='')
    SeverityUpdateProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefSeverityupdatepropertyParams]] = pydantic.Field(None, description='')
    StringFilterProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefStringfilterpropertyParams]] = pydantic.Field(None, description='')
    WorkflowUpdateProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefWorkflowupdatepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnAutomationRuleDefAutomationrulesactionpropertyParams(pydantic.BaseModel):
    finding_fields_update: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_AutomationRulesFindingFieldsUpdatePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    type: str = pydantic.Field(..., description='')
    ...

class CfnAutomationRuleDefAutomationrulesfindingfieldsupdatepropertyParams(pydantic.BaseModel):
    confidence: typing.Union[int, float, None] = pydantic.Field(None, description='')
    criticality: typing.Union[int, float, None] = pydantic.Field(None, description='')
    note: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_NoteUpdatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    related_findings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_RelatedFindingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    severity: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_SeverityUpdatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    user_defined_fields: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    verification_state: typing.Optional[str] = pydantic.Field(None, description='')
    workflow: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_WorkflowUpdatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnAutomationRuleDefAutomationrulesfindingfilterspropertyParams(pydantic.BaseModel):
    aws_account_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    company_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    compliance_associated_standards_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    compliance_security_control_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    compliance_status: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    confidence: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    created_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    criticality: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    description: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    first_observed_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    generator_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    last_observed_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    note_text: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    note_updated_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    note_updated_by: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    product_arn: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    product_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    record_state: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    related_findings_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    related_findings_product_arn: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_details_other: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_partition: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_region: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_tags: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    severity_label: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    source_url: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    title: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    updated_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    user_defined_fields: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    verification_state: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    workflow_status: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnAutomationRuleDefDatefilterpropertyParams(pydantic.BaseModel):
    date_range: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateRangePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    end: typing.Optional[str] = pydantic.Field(None, description='')
    start: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAutomationRuleDefDaterangepropertyParams(pydantic.BaseModel):
    unit: str = pydantic.Field(..., description='')
    value: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnAutomationRuleDefMapfilterpropertyParams(pydantic.BaseModel):
    comparison: str = pydantic.Field(..., description='')
    key: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnAutomationRuleDefNoteupdatepropertyParams(pydantic.BaseModel):
    text: str = pydantic.Field(..., description='')
    updated_by: typing.Any = pydantic.Field(..., description='')
    ...

class CfnAutomationRuleDefNumberfilterpropertyParams(pydantic.BaseModel):
    eq: typing.Union[int, float, None] = pydantic.Field(None, description='')
    gte: typing.Union[int, float, None] = pydantic.Field(None, description='')
    lte: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnAutomationRuleDefRelatedfindingpropertyParams(pydantic.BaseModel):
    id: typing.Any = pydantic.Field(..., description='')
    product_arn: str = pydantic.Field(..., description='')
    ...

class CfnAutomationRuleDefSeverityupdatepropertyParams(pydantic.BaseModel):
    label: typing.Optional[str] = pydantic.Field(None, description='')
    normalized: typing.Union[int, float, None] = pydantic.Field(None, description='')
    product: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnAutomationRuleDefStringfilterpropertyParams(pydantic.BaseModel):
    comparison: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnAutomationRuleDefWorkflowupdatepropertyParams(pydantic.BaseModel):
    status: str = pydantic.Field(..., description='')
    ...

class CfnAutomationRuleDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnAutomationRuleDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAutomationRuleDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnAutomationRuleDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAutomationRuleDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnAutomationRuleDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnAutomationRuleDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnAutomationRuleDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnAutomationRuleDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnAutomationRuleDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAutomationRuleDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnAutomationRuleDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnAutomationRuleDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAutomationRuleDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_securityhub.CfnConfigurationPolicy
class CfnConfigurationPolicyDef(BaseCfnResource):
    configuration_policy: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_securityhub.CfnConfigurationPolicy_PolicyPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='An object that defines how AWS Security Hub is configured. It includes whether Security Hub is enabled or disabled, a list of enabled security standards, a list of enabled or disabled security controls, and a list of custom parameter values for specified controls. If you provide a list of security controls that are enabled in the configuration policy, Security Hub disables all other controls (including newly released controls). If you provide a list of security controls that are disabled in the configuration policy, Security Hub enables all other controls (including newly released controls).\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the configuration policy. Alphanumeric characters and the following ASCII characters are permitted: ``-, ., !, *, /`` .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the configuration policy.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='User-defined tags associated with a configuration policy. For more information, see `Tagging AWS Security Hub resources <https://docs.aws.amazon.com/securityhub/latest/userguide/tagging-resources.html>`_ in the *Security Hub user guide* .')
    _init_params: typing.ClassVar[list[str]] = ['configuration_policy', 'name', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ParameterConfigurationProperty', 'ParameterValueProperty', 'PolicyProperty', 'SecurityControlCustomParameterProperty', 'SecurityControlsConfigurationProperty', 'SecurityHubPolicyProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnConfigurationPolicy'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_securityhub.CfnConfigurationPolicyDefConfig] = pydantic.Field(None)


class CfnConfigurationPolicyDefConfig(pydantic.BaseModel):
    ParameterConfigurationProperty: typing.Optional[list[models.aws_securityhub.CfnConfigurationPolicyDefParameterconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ParameterValueProperty: typing.Optional[list[models.aws_securityhub.CfnConfigurationPolicyDefParametervaluepropertyParams]] = pydantic.Field(None, description='')
    PolicyProperty: typing.Optional[list[models.aws_securityhub.CfnConfigurationPolicyDefPolicypropertyParams]] = pydantic.Field(None, description='')
    SecurityControlCustomParameterProperty: typing.Optional[list[models.aws_securityhub.CfnConfigurationPolicyDefSecuritycontrolcustomparameterpropertyParams]] = pydantic.Field(None, description='')
    SecurityControlsConfigurationProperty: typing.Optional[list[models.aws_securityhub.CfnConfigurationPolicyDefSecuritycontrolsconfigurationpropertyParams]] = pydantic.Field(None, description='')
    SecurityHubPolicyProperty: typing.Optional[list[models.aws_securityhub.CfnConfigurationPolicyDefSecurityhubpolicypropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_securityhub.CfnConfigurationPolicyDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_securityhub.CfnConfigurationPolicyDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_securityhub.CfnConfigurationPolicyDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_securityhub.CfnConfigurationPolicyDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_securityhub.CfnConfigurationPolicyDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_securityhub.CfnConfigurationPolicyDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_securityhub.CfnConfigurationPolicyDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_securityhub.CfnConfigurationPolicyDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_securityhub.CfnConfigurationPolicyDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_securityhub.CfnConfigurationPolicyDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_securityhub.CfnConfigurationPolicyDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_securityhub.CfnConfigurationPolicyDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_securityhub.CfnConfigurationPolicyDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    attr_service_enabled_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnConfigurationPolicyDefParameterconfigurationpropertyParams(pydantic.BaseModel):
    value_type: str = pydantic.Field(..., description='')
    value: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnConfigurationPolicy_ParameterValuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnConfigurationPolicyDefParametervaluepropertyParams(pydantic.BaseModel):
    boolean: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    double: typing.Union[int, float, None] = pydantic.Field(None, description='')
    enum: typing.Optional[str] = pydantic.Field(None, description='')
    enum_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    integer: typing.Union[int, float, None] = pydantic.Field(None, description='')
    integer_list: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[int, float]], None] = pydantic.Field(None, description='')
    string: typing.Optional[str] = pydantic.Field(None, description='')
    string_list: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnConfigurationPolicyDefPolicypropertyParams(pydantic.BaseModel):
    security_hub: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnConfigurationPolicy_SecurityHubPolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnConfigurationPolicyDefSecuritycontrolcustomparameterpropertyParams(pydantic.BaseModel):
    parameters: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnConfigurationPolicy_ParameterConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    security_control_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConfigurationPolicyDefSecuritycontrolsconfigurationpropertyParams(pydantic.BaseModel):
    disabled_security_control_identifiers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    enabled_security_control_identifiers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    security_control_custom_parameters: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnConfigurationPolicy_SecurityControlCustomParameterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnConfigurationPolicyDefSecurityhubpolicypropertyParams(pydantic.BaseModel):
    enabled_standard_identifiers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    security_controls_configuration: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnConfigurationPolicy_SecurityControlsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    service_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnConfigurationPolicyDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnConfigurationPolicyDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnConfigurationPolicyDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnConfigurationPolicyDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnConfigurationPolicyDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnConfigurationPolicyDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnConfigurationPolicyDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnConfigurationPolicyDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnConfigurationPolicyDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnConfigurationPolicyDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnConfigurationPolicyDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnConfigurationPolicyDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnConfigurationPolicyDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnConfigurationPolicyDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_securityhub.CfnDelegatedAdmin
class CfnDelegatedAdminDef(BaseCfnResource):
    admin_account_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The AWS account identifier of the account to designate as the Security Hub administrator account.')
    _init_params: typing.ClassVar[list[str]] = ['admin_account_id']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnDelegatedAdmin'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_securityhub.CfnDelegatedAdminDefConfig] = pydantic.Field(None)


class CfnDelegatedAdminDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_securityhub.CfnDelegatedAdminDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_securityhub.CfnDelegatedAdminDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_securityhub.CfnDelegatedAdminDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_securityhub.CfnDelegatedAdminDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_securityhub.CfnDelegatedAdminDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_securityhub.CfnDelegatedAdminDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_securityhub.CfnDelegatedAdminDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_securityhub.CfnDelegatedAdminDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_securityhub.CfnDelegatedAdminDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_securityhub.CfnDelegatedAdminDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_securityhub.CfnDelegatedAdminDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_securityhub.CfnDelegatedAdminDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_securityhub.CfnDelegatedAdminDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnDelegatedAdminDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDelegatedAdminDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDelegatedAdminDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDelegatedAdminDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDelegatedAdminDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDelegatedAdminDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDelegatedAdminDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDelegatedAdminDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDelegatedAdminDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDelegatedAdminDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDelegatedAdminDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnDelegatedAdminDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDelegatedAdminDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDelegatedAdminDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_securityhub.CfnFindingAggregator
class CfnFindingAggregatorDef(BaseCfnResource):
    region_linking_mode: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Indicates whether to aggregate findings from all of the available Regions in the current partition. Also determines whether to automatically aggregate findings from new Regions as Security Hub supports them and you opt into them. The selected option also determines how to use the Regions provided in the Regions list. The options are as follows: - ``ALL_REGIONS`` - Indicates to aggregate findings from all of the Regions where Security Hub is enabled. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them. - ``ALL_REGIONS_EXCEPT_SPECIFIED`` - Indicates to aggregate findings from all of the Regions where Security Hub is enabled, except for the Regions listed in the ``Regions`` parameter. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them. - ``SPECIFIED_REGIONS`` - Indicates to aggregate findings only from the Regions listed in the ``Regions`` parameter. Security Hub does not automatically aggregate findings from new Regions.\n')
    regions: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='If ``RegionLinkingMode`` is ``ALL_REGIONS_EXCEPT_SPECIFIED`` , then this is a space-separated list of Regions that do not aggregate findings to the aggregation Region. If ``RegionLinkingMode`` is ``SPECIFIED_REGIONS`` , then this is a space-separated list of Regions that do aggregate findings to the aggregation Region.')
    _init_params: typing.ClassVar[list[str]] = ['region_linking_mode', 'regions']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnFindingAggregator'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_securityhub.CfnFindingAggregatorDefConfig] = pydantic.Field(None)


class CfnFindingAggregatorDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_securityhub.CfnFindingAggregatorDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_securityhub.CfnFindingAggregatorDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_securityhub.CfnFindingAggregatorDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_securityhub.CfnFindingAggregatorDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_securityhub.CfnFindingAggregatorDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_securityhub.CfnFindingAggregatorDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_securityhub.CfnFindingAggregatorDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_securityhub.CfnFindingAggregatorDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_securityhub.CfnFindingAggregatorDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_securityhub.CfnFindingAggregatorDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_securityhub.CfnFindingAggregatorDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_securityhub.CfnFindingAggregatorDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_securityhub.CfnFindingAggregatorDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnFindingAggregatorDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnFindingAggregatorDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFindingAggregatorDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnFindingAggregatorDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFindingAggregatorDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnFindingAggregatorDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnFindingAggregatorDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnFindingAggregatorDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnFindingAggregatorDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnFindingAggregatorDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFindingAggregatorDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnFindingAggregatorDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnFindingAggregatorDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFindingAggregatorDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_securityhub.CfnHub
class CfnHubDef(BaseCfnResource):
    auto_enable_controls: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Whether to automatically enable new controls when they are added to standards that are enabled. By default, this is set to ``true`` , and new controls are enabled automatically. To not automatically enable new controls, set this to ``false`` .\n')
    control_finding_generator: typing.Optional[str] = pydantic.Field(None, description="Specifies whether an account has consolidated control findings turned on or off. If the value for this field is set to ``SECURITY_CONTROL`` , Security Hub generates a single finding for a control check even when the check applies to multiple enabled standards. If the value for this field is set to ``STANDARD_CONTROL`` , Security Hub generates separate findings for a control check when the check applies to multiple enabled standards. The value for this field in a member account matches the value in the administrator account. For accounts that aren't part of an organization, the default value of this field is ``SECURITY_CONTROL`` if you enabled Security Hub on or after February 23, 2023.\n")
    enable_default_standards: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Whether to enable the security standards that Security Hub has designated as automatically enabled. If you don't provide a value for ``EnableDefaultStandards`` , it is set to ``true`` , and the designated standards are automatically enabled in each AWS Region where you enable Security Hub . If you don't want to enable the designated standards, set ``EnableDefaultStandards`` to ``false`` . Currently, the automatically enabled standards are the Center for Internet Security (CIS) AWS Foundations Benchmark v1.2.0 and AWS Foundational Security Best Practices (FSBP).\n")
    tags: typing.Any = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['auto_enable_controls', 'control_finding_generator', 'enable_default_standards', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnHub'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_securityhub.CfnHubDefConfig] = pydantic.Field(None)


class CfnHubDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_securityhub.CfnHubDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_securityhub.CfnHubDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_securityhub.CfnHubDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_securityhub.CfnHubDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_securityhub.CfnHubDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_securityhub.CfnHubDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_securityhub.CfnHubDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_securityhub.CfnHubDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_securityhub.CfnHubDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_securityhub.CfnHubDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_securityhub.CfnHubDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_securityhub.CfnHubDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_securityhub.CfnHubDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnHubDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnHubDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnHubDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnHubDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnHubDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnHubDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnHubDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnHubDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnHubDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnHubDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnHubDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnHubDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnHubDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnHubDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_securityhub.CfnInsight
class CfnInsightDef(BaseCfnResource):
    filters: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_securityhub.CfnInsight_AwsSecurityFindingFiltersPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='One or more attributes used to filter the findings included in the insight. The insight only includes findings that match the criteria defined in the filters. You can filter by up to ten finding attributes. For each attribute, you can provide up to 20 filter values.\n')
    group_by_attribute: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The grouping attribute for the insight's findings. Indicates how to group the matching findings, and identifies the type of item that the insight applies to. For example, if an insight is grouped by resource identifier, then the insight produces a list of resource identifiers.\n")
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of a Security Hub insight.')
    _init_params: typing.ClassVar[list[str]] = ['filters', 'group_by_attribute', 'name']
    _method_names: typing.ClassVar[list[str]] = ['AwsSecurityFindingFiltersProperty', 'BooleanFilterProperty', 'DateFilterProperty', 'DateRangeProperty', 'IpFilterProperty', 'KeywordFilterProperty', 'MapFilterProperty', 'NumberFilterProperty', 'StringFilterProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnInsight'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_securityhub.CfnInsightDefConfig] = pydantic.Field(None)


class CfnInsightDefConfig(pydantic.BaseModel):
    AwsSecurityFindingFiltersProperty: typing.Optional[list[models.aws_securityhub.CfnInsightDefAwssecurityfindingfilterspropertyParams]] = pydantic.Field(None, description='')
    BooleanFilterProperty: typing.Optional[list[models.aws_securityhub.CfnInsightDefBooleanfilterpropertyParams]] = pydantic.Field(None, description='')
    DateFilterProperty: typing.Optional[list[models.aws_securityhub.CfnInsightDefDatefilterpropertyParams]] = pydantic.Field(None, description='')
    DateRangeProperty: typing.Optional[list[models.aws_securityhub.CfnInsightDefDaterangepropertyParams]] = pydantic.Field(None, description='')
    IpFilterProperty: typing.Optional[list[models.aws_securityhub.CfnInsightDefIpfilterpropertyParams]] = pydantic.Field(None, description='')
    KeywordFilterProperty: typing.Optional[list[models.aws_securityhub.CfnInsightDefKeywordfilterpropertyParams]] = pydantic.Field(None, description='')
    MapFilterProperty: typing.Optional[list[models.aws_securityhub.CfnInsightDefMapfilterpropertyParams]] = pydantic.Field(None, description='')
    NumberFilterProperty: typing.Optional[list[models.aws_securityhub.CfnInsightDefNumberfilterpropertyParams]] = pydantic.Field(None, description='')
    StringFilterProperty: typing.Optional[list[models.aws_securityhub.CfnInsightDefStringfilterpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_securityhub.CfnInsightDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_securityhub.CfnInsightDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_securityhub.CfnInsightDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_securityhub.CfnInsightDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_securityhub.CfnInsightDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_securityhub.CfnInsightDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_securityhub.CfnInsightDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_securityhub.CfnInsightDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_securityhub.CfnInsightDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_securityhub.CfnInsightDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_securityhub.CfnInsightDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_securityhub.CfnInsightDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_securityhub.CfnInsightDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnInsightDefAwssecurityfindingfilterspropertyParams(pydantic.BaseModel):
    aws_account_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    aws_account_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    company_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    compliance_associated_standards_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    compliance_security_control_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    compliance_security_control_parameters_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    compliance_security_control_parameters_value: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    compliance_status: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    confidence: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    created_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    criticality: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    description: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    finding_provider_fields_confidence: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    finding_provider_fields_criticality: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    finding_provider_fields_related_findings_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    finding_provider_fields_related_findings_product_arn: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    finding_provider_fields_severity_label: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    finding_provider_fields_severity_original: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    finding_provider_fields_types: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    first_observed_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    generator_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    keyword: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_KeywordFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    last_observed_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    malware_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    malware_path: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    malware_state: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    malware_type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    network_destination_domain: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    network_destination_ip_v4: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_IpFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    network_destination_ip_v6: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_IpFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    network_destination_port: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    network_direction: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    network_protocol: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    network_source_domain: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    network_source_ip_v4: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_IpFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    network_source_ip_v6: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_IpFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    network_source_mac: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    network_source_port: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    note_text: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    note_updated_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    note_updated_by: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    process_launched_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    process_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    process_parent_pid: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    process_path: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    process_pid: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    process_terminated_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    product_arn: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    product_fields: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    product_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    recommendation_text: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    record_state: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    region: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    related_findings_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    related_findings_product_arn: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_application_arn: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_application_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_aws_ec2_instance_iam_instance_profile_arn: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_aws_ec2_instance_image_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_aws_ec2_instance_ip_v4_addresses: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_IpFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_aws_ec2_instance_ip_v6_addresses: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_IpFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_aws_ec2_instance_key_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_aws_ec2_instance_launched_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_aws_ec2_instance_subnet_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_aws_ec2_instance_type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_aws_ec2_instance_vpc_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_aws_iam_access_key_created_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_aws_iam_access_key_principal_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_aws_iam_access_key_status: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_aws_iam_access_key_user_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_aws_iam_user_user_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_aws_s3_bucket_owner_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_aws_s3_bucket_owner_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_container_image_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_container_image_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_container_launched_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_container_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_details_other: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_partition: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_region: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_tags: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    sample: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_BooleanFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    severity_label: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    severity_normalized: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    severity_product: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    source_url: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    threat_intel_indicator_category: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    threat_intel_indicator_last_observed_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    threat_intel_indicator_source: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    threat_intel_indicator_source_url: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    threat_intel_indicator_type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    threat_intel_indicator_value: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    title: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    updated_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    user_defined_fields: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    verification_state: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    vulnerabilities_exploit_available: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    vulnerabilities_fix_available: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    workflow_state: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    workflow_status: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnInsightDefBooleanfilterpropertyParams(pydantic.BaseModel):
    value: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    ...

class CfnInsightDefDatefilterpropertyParams(pydantic.BaseModel):
    date_range: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnInsight_DateRangePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    end: typing.Optional[str] = pydantic.Field(None, description='')
    start: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnInsightDefDaterangepropertyParams(pydantic.BaseModel):
    unit: str = pydantic.Field(..., description='')
    value: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnInsightDefIpfilterpropertyParams(pydantic.BaseModel):
    cidr: str = pydantic.Field(..., description='')
    ...

class CfnInsightDefKeywordfilterpropertyParams(pydantic.BaseModel):
    value: str = pydantic.Field(..., description='')
    ...

class CfnInsightDefMapfilterpropertyParams(pydantic.BaseModel):
    comparison: str = pydantic.Field(..., description='')
    key: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnInsightDefNumberfilterpropertyParams(pydantic.BaseModel):
    eq: typing.Union[int, float, None] = pydantic.Field(None, description='')
    gte: typing.Union[int, float, None] = pydantic.Field(None, description='')
    lte: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnInsightDefStringfilterpropertyParams(pydantic.BaseModel):
    comparison: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnInsightDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnInsightDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnInsightDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnInsightDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnInsightDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnInsightDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnInsightDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnInsightDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnInsightDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnInsightDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnInsightDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnInsightDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnInsightDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnInsightDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_securityhub.CfnOrganizationConfiguration
class CfnOrganizationConfigurationDef(BaseCfnResource):
    auto_enable: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description="Whether to automatically enable Security Hub in new member accounts when they join the organization. If set to ``true`` , then Security Hub is automatically enabled in new accounts. If set to ``false`` , then Security Hub isn't enabled in new accounts automatically. The default value is ``false`` . If the ``ConfigurationType`` of your organization is set to ``CENTRAL`` , then this field is set to ``false`` and can't be changed in the home Region and linked Regions. However, in that case, the delegated administrator can create a configuration policy in which Security Hub is enabled and associate the policy with new organization accounts.\n")
    auto_enable_standards: typing.Optional[str] = pydantic.Field(None, description="Whether to automatically enable Security Hub `default standards <https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-enable-disable.html>`_ in new member accounts when they join the organization. The default value of this parameter is equal to ``DEFAULT`` . If equal to ``DEFAULT`` , then Security Hub default standards are automatically enabled for new member accounts. If equal to ``NONE`` , then default standards are not automatically enabled for new member accounts. If the ``ConfigurationType`` of your organization is set to ``CENTRAL`` , then this field is set to ``NONE`` and can't be changed in the home Region and linked Regions. However, in that case, the delegated administrator can create a configuration policy in which specific security standards are enabled and associate the policy with new organization accounts.\n")
    configuration_type: typing.Optional[str] = pydantic.Field(None, description='Indicates whether the organization uses local or central configuration. If you use local configuration, the Security Hub delegated administrator can set ``AutoEnable`` to ``true`` and ``AutoEnableStandards`` to ``DEFAULT`` . This automatically enables Security Hub and default security standards in new organization accounts. These new account settings must be set separately in each AWS Region , and settings may be different in each Region. If you use central configuration, the delegated administrator can create configuration policies. Configuration policies can be used to configure Security Hub, security standards, and security controls in multiple accounts and Regions. If you want new organization accounts to use a specific configuration, you can create a configuration policy and associate it with the root or specific organizational units (OUs). New accounts will inherit the policy from the root or their assigned OU.')
    _init_params: typing.ClassVar[list[str]] = ['auto_enable', 'auto_enable_standards', 'configuration_type']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnOrganizationConfiguration'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_securityhub.CfnOrganizationConfigurationDefConfig] = pydantic.Field(None)


class CfnOrganizationConfigurationDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_securityhub.CfnOrganizationConfigurationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_securityhub.CfnOrganizationConfigurationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_securityhub.CfnOrganizationConfigurationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_securityhub.CfnOrganizationConfigurationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_securityhub.CfnOrganizationConfigurationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_securityhub.CfnOrganizationConfigurationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_securityhub.CfnOrganizationConfigurationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_securityhub.CfnOrganizationConfigurationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_securityhub.CfnOrganizationConfigurationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_securityhub.CfnOrganizationConfigurationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_securityhub.CfnOrganizationConfigurationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_securityhub.CfnOrganizationConfigurationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_securityhub.CfnOrganizationConfigurationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    attr_member_account_limit_reached_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)

class CfnOrganizationConfigurationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnOrganizationConfigurationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnOrganizationConfigurationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnOrganizationConfigurationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnOrganizationConfigurationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnOrganizationConfigurationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnOrganizationConfigurationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnOrganizationConfigurationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnOrganizationConfigurationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnOrganizationConfigurationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnOrganizationConfigurationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnOrganizationConfigurationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnOrganizationConfigurationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnOrganizationConfigurationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_securityhub.CfnPolicyAssociation
class CfnPolicyAssociationDef(BaseCfnResource):
    configuration_policy_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The universally unique identifier (UUID) of the configuration policy. A self-managed configuration has no UUID. The identifier of a self-managed configuration is ``SELF_MANAGED_SECURITY_HUB`` .\n')
    target_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the target account, organizational unit, or the root.\n')
    target_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies whether the target is an AWS account , organizational unit, or the root.')
    _init_params: typing.ClassVar[list[str]] = ['configuration_policy_id', 'target_id', 'target_type']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnPolicyAssociation'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_securityhub.CfnPolicyAssociationDefConfig] = pydantic.Field(None)


class CfnPolicyAssociationDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_securityhub.CfnPolicyAssociationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_securityhub.CfnPolicyAssociationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_securityhub.CfnPolicyAssociationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_securityhub.CfnPolicyAssociationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_securityhub.CfnPolicyAssociationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_securityhub.CfnPolicyAssociationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_securityhub.CfnPolicyAssociationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_securityhub.CfnPolicyAssociationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_securityhub.CfnPolicyAssociationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_securityhub.CfnPolicyAssociationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_securityhub.CfnPolicyAssociationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_securityhub.CfnPolicyAssociationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_securityhub.CfnPolicyAssociationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnPolicyAssociationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnPolicyAssociationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPolicyAssociationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnPolicyAssociationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPolicyAssociationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnPolicyAssociationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnPolicyAssociationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnPolicyAssociationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnPolicyAssociationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnPolicyAssociationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPolicyAssociationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnPolicyAssociationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnPolicyAssociationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPolicyAssociationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_securityhub.CfnProductSubscription
class CfnProductSubscriptionDef(BaseCfnResource):
    product_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the product to enable the integration for.')
    _init_params: typing.ClassVar[list[str]] = ['product_arn']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnProductSubscription'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_securityhub.CfnProductSubscriptionDefConfig] = pydantic.Field(None)


class CfnProductSubscriptionDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_securityhub.CfnProductSubscriptionDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_securityhub.CfnProductSubscriptionDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_securityhub.CfnProductSubscriptionDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_securityhub.CfnProductSubscriptionDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_securityhub.CfnProductSubscriptionDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_securityhub.CfnProductSubscriptionDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_securityhub.CfnProductSubscriptionDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_securityhub.CfnProductSubscriptionDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_securityhub.CfnProductSubscriptionDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_securityhub.CfnProductSubscriptionDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_securityhub.CfnProductSubscriptionDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_securityhub.CfnProductSubscriptionDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_securityhub.CfnProductSubscriptionDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnProductSubscriptionDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnProductSubscriptionDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnProductSubscriptionDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnProductSubscriptionDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnProductSubscriptionDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnProductSubscriptionDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnProductSubscriptionDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnProductSubscriptionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnProductSubscriptionDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnProductSubscriptionDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnProductSubscriptionDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnProductSubscriptionDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnProductSubscriptionDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnProductSubscriptionDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_securityhub.CfnSecurityControl
class CfnSecurityControlDef(BaseCfnResource):
    parameters: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnSecurityControl_ParameterConfigurationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='An object that identifies the name of a control parameter, its current value, and whether it has been customized.\n')
    last_update_reason: typing.Optional[str] = pydantic.Field(None, description='The most recent reason for updating the customizable properties of a security control. This differs from the ``UpdateReason`` field of the ```BatchUpdateStandardsControlAssociations`` <https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchUpdateStandardsControlAssociations.html>`_ API, which tracks the reason for updating the enablement status of a control. This field accepts alphanumeric characters in addition to white spaces, dashes, and underscores.\n')
    security_control_arn: typing.Optional[str] = pydantic.Field(None, description="The Amazon Resource Name (ARN) for a security control across standards, such as ``arn:aws:securityhub:eu-central-1:123456789012:security-control/S3.1`` . This parameter doesn't mention a specific standard.\n")
    security_control_id: typing.Optional[str] = pydantic.Field(None, description='The unique identifier of a security control across standards. Values for this field typically consist of an AWS service name and a number, such as APIGateway.3.')
    _init_params: typing.ClassVar[list[str]] = ['parameters', 'last_update_reason', 'security_control_arn', 'security_control_id']
    _method_names: typing.ClassVar[list[str]] = ['ParameterConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnSecurityControl'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_securityhub.CfnSecurityControlDefConfig] = pydantic.Field(None)


class CfnSecurityControlDefConfig(pydantic.BaseModel):
    ParameterConfigurationProperty: typing.Optional[list[models.aws_securityhub.CfnSecurityControlDefParameterconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_securityhub.CfnSecurityControlDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_securityhub.CfnSecurityControlDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_securityhub.CfnSecurityControlDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_securityhub.CfnSecurityControlDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_securityhub.CfnSecurityControlDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_securityhub.CfnSecurityControlDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_securityhub.CfnSecurityControlDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_securityhub.CfnSecurityControlDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_securityhub.CfnSecurityControlDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_securityhub.CfnSecurityControlDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_securityhub.CfnSecurityControlDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_securityhub.CfnSecurityControlDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_securityhub.CfnSecurityControlDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnSecurityControlDefParameterconfigurationpropertyParams(pydantic.BaseModel):
    value_type: str = pydantic.Field(..., description='')
    ...

class CfnSecurityControlDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnSecurityControlDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSecurityControlDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnSecurityControlDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSecurityControlDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnSecurityControlDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnSecurityControlDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnSecurityControlDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnSecurityControlDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnSecurityControlDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSecurityControlDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnSecurityControlDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnSecurityControlDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSecurityControlDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_securityhub.CfnStandard
class CfnStandardDef(BaseCfnResource):
    standards_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the standard that you want to enable. To view a list of available Security Hub standards and their ARNs, use the ```DescribeStandards`` <https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_DescribeStandards.html>`_ API operation.\n')
    disabled_standards_controls: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnStandard_StandardsControlPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Specifies which controls are to be disabled in a standard. *Maximum* : ``100``')
    _init_params: typing.ClassVar[list[str]] = ['standards_arn', 'disabled_standards_controls']
    _method_names: typing.ClassVar[list[str]] = ['StandardsControlProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnStandard'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_securityhub.CfnStandardDefConfig] = pydantic.Field(None)


class CfnStandardDefConfig(pydantic.BaseModel):
    StandardsControlProperty: typing.Optional[list[models.aws_securityhub.CfnStandardDefStandardscontrolpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_securityhub.CfnStandardDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_securityhub.CfnStandardDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_securityhub.CfnStandardDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_securityhub.CfnStandardDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_securityhub.CfnStandardDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_securityhub.CfnStandardDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_securityhub.CfnStandardDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_securityhub.CfnStandardDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_securityhub.CfnStandardDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_securityhub.CfnStandardDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_securityhub.CfnStandardDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_securityhub.CfnStandardDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_securityhub.CfnStandardDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnStandardDefStandardscontrolpropertyParams(pydantic.BaseModel):
    standards_control_arn: str = pydantic.Field(..., description='')
    reason: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnStandardDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnStandardDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStandardDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnStandardDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStandardDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnStandardDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnStandardDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnStandardDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnStandardDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnStandardDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStandardDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnStandardDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnStandardDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStandardDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRuleProps
class CfnAutomationRulePropsDef(BaseCfnProperty):
    actions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_AutomationRulesActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='One or more actions to update finding fields if a finding matches the conditions specified in ``Criteria`` .\n')
    criteria: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_AutomationRulesFindingFiltersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A set of `AWS Security Finding Format (ASFF) <https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format.html>`_ finding field attributes and corresponding expected values that Security Hub uses to filter findings. If a rule is enabled and a finding matches the criteria specified in this parameter, Security Hub applies the rule action to the finding.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the rule.\n')
    is_terminal: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Specifies whether a rule is the last to be applied with respect to a finding that matches the rule criteria. This is useful when a finding matches the criteria for multiple rules, and each rule has different actions. If a rule is terminal, Security Hub applies the rule action to a finding that matches the rule criteria and doesn't evaluate other rules for the finding. By default, a rule isn't terminal.\n")
    rule_name: typing.Optional[str] = pydantic.Field(None, description='The name of the rule.\n')
    rule_order: typing.Union[int, float, None] = pydantic.Field(None, description='An integer ranging from 1 to 1000 that represents the order in which the rule action is applied to findings. Security Hub applies rules with lower values for this parameter first.\n')
    rule_status: typing.Optional[str] = pydantic.Field(None, description='Whether the rule is active after it is created. If this parameter is equal to ``ENABLED`` , Security Hub applies the rule to findings and finding updates after the rule is created.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='User-defined tags associated with an automation rule.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-securityhub-automationrule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    # id: Any\n    # updated_by: Any\n\n    cfn_automation_rule_props = securityhub.CfnAutomationRuleProps(\n        actions=[securityhub.CfnAutomationRule.AutomationRulesActionProperty(\n            finding_fields_update=securityhub.CfnAutomationRule.AutomationRulesFindingFieldsUpdateProperty(\n                confidence=123,\n                criticality=123,\n                note=securityhub.CfnAutomationRule.NoteUpdateProperty(\n                    text="text",\n                    updated_by=updated_by\n                ),\n                related_findings=[securityhub.CfnAutomationRule.RelatedFindingProperty(\n                    id=id,\n                    product_arn="productArn"\n                )],\n                severity=securityhub.CfnAutomationRule.SeverityUpdateProperty(\n                    label="label",\n                    normalized=123,\n                    product=123\n                ),\n                types=["types"],\n                user_defined_fields={\n                    "user_defined_fields_key": "userDefinedFields"\n                },\n                verification_state="verificationState",\n                workflow=securityhub.CfnAutomationRule.WorkflowUpdateProperty(\n                    status="status"\n                )\n            ),\n            type="type"\n        )],\n        criteria=securityhub.CfnAutomationRule.AutomationRulesFindingFiltersProperty(\n            aws_account_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            company_name=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            compliance_associated_standards_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            compliance_security_control_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            compliance_status=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            confidence=[securityhub.CfnAutomationRule.NumberFilterProperty(\n                eq=123,\n                gte=123,\n                lte=123\n            )],\n            created_at=[securityhub.CfnAutomationRule.DateFilterProperty(\n                date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n                    unit="unit",\n                    value=123\n                ),\n                end="end",\n                start="start"\n            )],\n            criticality=[securityhub.CfnAutomationRule.NumberFilterProperty(\n                eq=123,\n                gte=123,\n                lte=123\n            )],\n            description=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            first_observed_at=[securityhub.CfnAutomationRule.DateFilterProperty(\n                date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n                    unit="unit",\n                    value=123\n                ),\n                end="end",\n                start="start"\n            )],\n            generator_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            id=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            last_observed_at=[securityhub.CfnAutomationRule.DateFilterProperty(\n                date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n                    unit="unit",\n                    value=123\n                ),\n                end="end",\n                start="start"\n            )],\n            note_text=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            note_updated_at=[securityhub.CfnAutomationRule.DateFilterProperty(\n                date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n                    unit="unit",\n                    value=123\n                ),\n                end="end",\n                start="start"\n            )],\n            note_updated_by=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            product_arn=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            product_name=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            record_state=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            related_findings_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            related_findings_product_arn=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_details_other=[securityhub.CfnAutomationRule.MapFilterProperty(\n                comparison="comparison",\n                key="key",\n                value="value"\n            )],\n            resource_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_partition=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_region=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_tags=[securityhub.CfnAutomationRule.MapFilterProperty(\n                comparison="comparison",\n                key="key",\n                value="value"\n            )],\n            resource_type=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            severity_label=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            source_url=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            title=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            type=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            updated_at=[securityhub.CfnAutomationRule.DateFilterProperty(\n                date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n                    unit="unit",\n                    value=123\n                ),\n                end="end",\n                start="start"\n            )],\n            user_defined_fields=[securityhub.CfnAutomationRule.MapFilterProperty(\n                comparison="comparison",\n                key="key",\n                value="value"\n            )],\n            verification_state=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            workflow_status=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )]\n        ),\n        description="description",\n        is_terminal=False,\n        rule_name="ruleName",\n        rule_order=123,\n        rule_status="ruleStatus",\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['actions', 'criteria', 'description', 'is_terminal', 'rule_name', 'rule_order', 'rule_status', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRuleProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnConfigurationPolicyProps
class CfnConfigurationPolicyPropsDef(BaseCfnProperty):
    configuration_policy: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_securityhub.CfnConfigurationPolicy_PolicyPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='An object that defines how AWS Security Hub is configured. It includes whether Security Hub is enabled or disabled, a list of enabled security standards, a list of enabled or disabled security controls, and a list of custom parameter values for specified controls. If you provide a list of security controls that are enabled in the configuration policy, Security Hub disables all other controls (including newly released controls). If you provide a list of security controls that are disabled in the configuration policy, Security Hub enables all other controls (including newly released controls).\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the configuration policy. Alphanumeric characters and the following ASCII characters are permitted: ``-, ., !, *, /`` .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the configuration policy.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='User-defined tags associated with a configuration policy. For more information, see `Tagging AWS Security Hub resources <https://docs.aws.amazon.com/securityhub/latest/userguide/tagging-resources.html>`_ in the *Security Hub user guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-securityhub-configurationpolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    cfn_configuration_policy_props = securityhub.CfnConfigurationPolicyProps(\n        configuration_policy=securityhub.CfnConfigurationPolicy.PolicyProperty(\n            security_hub=securityhub.CfnConfigurationPolicy.SecurityHubPolicyProperty(\n                enabled_standard_identifiers=["enabledStandardIdentifiers"],\n                security_controls_configuration=securityhub.CfnConfigurationPolicy.SecurityControlsConfigurationProperty(\n                    disabled_security_control_identifiers=["disabledSecurityControlIdentifiers"],\n                    enabled_security_control_identifiers=["enabledSecurityControlIdentifiers"],\n                    security_control_custom_parameters=[securityhub.CfnConfigurationPolicy.SecurityControlCustomParameterProperty(\n                        parameters={\n                            "parameters_key": securityhub.CfnConfigurationPolicy.ParameterConfigurationProperty(\n                                value_type="valueType",\n\n                                # the properties below are optional\n                                value=securityhub.CfnConfigurationPolicy.ParameterValueProperty(\n                                    boolean=False,\n                                    double=123,\n                                    enum="enum",\n                                    enum_list=["enumList"],\n                                    integer=123,\n                                    integer_list=[123],\n                                    string="string",\n                                    string_list=["stringList"]\n                                )\n                            )\n                        },\n                        security_control_id="securityControlId"\n                    )]\n                ),\n                service_enabled=False\n            )\n        ),\n        name="name",\n\n        # the properties below are optional\n        description="description",\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['configuration_policy', 'name', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnConfigurationPolicyProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnDelegatedAdminProps
class CfnDelegatedAdminPropsDef(BaseCfnProperty):
    admin_account_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The AWS account identifier of the account to designate as the Security Hub administrator account.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-securityhub-delegatedadmin.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    cfn_delegated_admin_props = securityhub.CfnDelegatedAdminProps(\n        admin_account_id="adminAccountId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['admin_account_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnDelegatedAdminProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnFindingAggregatorProps
class CfnFindingAggregatorPropsDef(BaseCfnProperty):
    region_linking_mode: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Indicates whether to aggregate findings from all of the available Regions in the current partition. Also determines whether to automatically aggregate findings from new Regions as Security Hub supports them and you opt into them. The selected option also determines how to use the Regions provided in the Regions list. The options are as follows: - ``ALL_REGIONS`` - Indicates to aggregate findings from all of the Regions where Security Hub is enabled. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them. - ``ALL_REGIONS_EXCEPT_SPECIFIED`` - Indicates to aggregate findings from all of the Regions where Security Hub is enabled, except for the Regions listed in the ``Regions`` parameter. When you choose this option, Security Hub also automatically aggregates findings from new Regions as Security Hub supports them and you opt into them. - ``SPECIFIED_REGIONS`` - Indicates to aggregate findings only from the Regions listed in the ``Regions`` parameter. Security Hub does not automatically aggregate findings from new Regions.\n')
    regions: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='If ``RegionLinkingMode`` is ``ALL_REGIONS_EXCEPT_SPECIFIED`` , then this is a space-separated list of Regions that do not aggregate findings to the aggregation Region. If ``RegionLinkingMode`` is ``SPECIFIED_REGIONS`` , then this is a space-separated list of Regions that do aggregate findings to the aggregation Region.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-securityhub-findingaggregator.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    cfn_finding_aggregator_props = securityhub.CfnFindingAggregatorProps(\n        region_linking_mode="regionLinkingMode",\n\n        # the properties below are optional\n        regions=["regions"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['region_linking_mode', 'regions']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnFindingAggregatorProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnHubProps
class CfnHubPropsDef(BaseCfnProperty):
    auto_enable_controls: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Whether to automatically enable new controls when they are added to standards that are enabled. By default, this is set to ``true`` , and new controls are enabled automatically. To not automatically enable new controls, set this to ``false`` .\n')
    control_finding_generator: typing.Optional[str] = pydantic.Field(None, description="Specifies whether an account has consolidated control findings turned on or off. If the value for this field is set to ``SECURITY_CONTROL`` , Security Hub generates a single finding for a control check even when the check applies to multiple enabled standards. If the value for this field is set to ``STANDARD_CONTROL`` , Security Hub generates separate findings for a control check when the check applies to multiple enabled standards. The value for this field in a member account matches the value in the administrator account. For accounts that aren't part of an organization, the default value of this field is ``SECURITY_CONTROL`` if you enabled Security Hub on or after February 23, 2023.\n")
    enable_default_standards: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Whether to enable the security standards that Security Hub has designated as automatically enabled. If you don't provide a value for ``EnableDefaultStandards`` , it is set to ``true`` , and the designated standards are automatically enabled in each AWS Region where you enable Security Hub . If you don't want to enable the designated standards, set ``EnableDefaultStandards`` to ``false`` . Currently, the automatically enabled standards are the Center for Internet Security (CIS) AWS Foundations Benchmark v1.2.0 and AWS Foundational Security Best Practices (FSBP).\n")
    tags: typing.Any = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-securityhub-hub.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    # tags: Any\n\n    cfn_hub_props = securityhub.CfnHubProps(\n        auto_enable_controls=False,\n        control_finding_generator="controlFindingGenerator",\n        enable_default_standards=False,\n        tags=tags\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['auto_enable_controls', 'control_finding_generator', 'enable_default_standards', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnHubProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnInsightProps
class CfnInsightPropsDef(BaseCfnProperty):
    filters: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_securityhub.CfnInsight_AwsSecurityFindingFiltersPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='One or more attributes used to filter the findings included in the insight. The insight only includes findings that match the criteria defined in the filters. You can filter by up to ten finding attributes. For each attribute, you can provide up to 20 filter values.\n')
    group_by_attribute: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The grouping attribute for the insight's findings. Indicates how to group the matching findings, and identifies the type of item that the insight applies to. For example, if an insight is grouped by resource identifier, then the insight produces a list of resource identifiers.\n")
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of a Security Hub insight.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-securityhub-insight.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    cfn_insight_props = securityhub.CfnInsightProps(\n        filters=securityhub.CfnInsight.AwsSecurityFindingFiltersProperty(\n            aws_account_id=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            aws_account_name=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            company_name=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            compliance_associated_standards_id=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            compliance_security_control_id=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            compliance_security_control_parameters_name=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            compliance_security_control_parameters_value=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            compliance_status=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            confidence=[securityhub.CfnInsight.NumberFilterProperty(\n                eq=123,\n                gte=123,\n                lte=123\n            )],\n            created_at=[securityhub.CfnInsight.DateFilterProperty(\n                date_range=securityhub.CfnInsight.DateRangeProperty(\n                    unit="unit",\n                    value=123\n                ),\n                end="end",\n                start="start"\n            )],\n            criticality=[securityhub.CfnInsight.NumberFilterProperty(\n                eq=123,\n                gte=123,\n                lte=123\n            )],\n            description=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            finding_provider_fields_confidence=[securityhub.CfnInsight.NumberFilterProperty(\n                eq=123,\n                gte=123,\n                lte=123\n            )],\n            finding_provider_fields_criticality=[securityhub.CfnInsight.NumberFilterProperty(\n                eq=123,\n                gte=123,\n                lte=123\n            )],\n            finding_provider_fields_related_findings_id=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            finding_provider_fields_related_findings_product_arn=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            finding_provider_fields_severity_label=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            finding_provider_fields_severity_original=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            finding_provider_fields_types=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            first_observed_at=[securityhub.CfnInsight.DateFilterProperty(\n                date_range=securityhub.CfnInsight.DateRangeProperty(\n                    unit="unit",\n                    value=123\n                ),\n                end="end",\n                start="start"\n            )],\n            generator_id=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            id=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            keyword=[securityhub.CfnInsight.KeywordFilterProperty(\n                value="value"\n            )],\n            last_observed_at=[securityhub.CfnInsight.DateFilterProperty(\n                date_range=securityhub.CfnInsight.DateRangeProperty(\n                    unit="unit",\n                    value=123\n                ),\n                end="end",\n                start="start"\n            )],\n            malware_name=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            malware_path=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            malware_state=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            malware_type=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            network_destination_domain=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            network_destination_ip_v4=[securityhub.CfnInsight.IpFilterProperty(\n                cidr="cidr"\n            )],\n            network_destination_ip_v6=[securityhub.CfnInsight.IpFilterProperty(\n                cidr="cidr"\n            )],\n            network_destination_port=[securityhub.CfnInsight.NumberFilterProperty(\n                eq=123,\n                gte=123,\n                lte=123\n            )],\n            network_direction=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            network_protocol=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            network_source_domain=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            network_source_ip_v4=[securityhub.CfnInsight.IpFilterProperty(\n                cidr="cidr"\n            )],\n            network_source_ip_v6=[securityhub.CfnInsight.IpFilterProperty(\n                cidr="cidr"\n            )],\n            network_source_mac=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            network_source_port=[securityhub.CfnInsight.NumberFilterProperty(\n                eq=123,\n                gte=123,\n                lte=123\n            )],\n            note_text=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            note_updated_at=[securityhub.CfnInsight.DateFilterProperty(\n                date_range=securityhub.CfnInsight.DateRangeProperty(\n                    unit="unit",\n                    value=123\n                ),\n                end="end",\n                start="start"\n            )],\n            note_updated_by=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            process_launched_at=[securityhub.CfnInsight.DateFilterProperty(\n                date_range=securityhub.CfnInsight.DateRangeProperty(\n                    unit="unit",\n                    value=123\n                ),\n                end="end",\n                start="start"\n            )],\n            process_name=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            process_parent_pid=[securityhub.CfnInsight.NumberFilterProperty(\n                eq=123,\n                gte=123,\n                lte=123\n            )],\n            process_path=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            process_pid=[securityhub.CfnInsight.NumberFilterProperty(\n                eq=123,\n                gte=123,\n                lte=123\n            )],\n            process_terminated_at=[securityhub.CfnInsight.DateFilterProperty(\n                date_range=securityhub.CfnInsight.DateRangeProperty(\n                    unit="unit",\n                    value=123\n                ),\n                end="end",\n                start="start"\n            )],\n            product_arn=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            product_fields=[securityhub.CfnInsight.MapFilterProperty(\n                comparison="comparison",\n                key="key",\n                value="value"\n            )],\n            product_name=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            recommendation_text=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            record_state=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            region=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            related_findings_id=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            related_findings_product_arn=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_application_arn=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_application_name=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_aws_ec2_instance_iam_instance_profile_arn=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_aws_ec2_instance_image_id=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_aws_ec2_instance_ip_v4_addresses=[securityhub.CfnInsight.IpFilterProperty(\n                cidr="cidr"\n            )],\n            resource_aws_ec2_instance_ip_v6_addresses=[securityhub.CfnInsight.IpFilterProperty(\n                cidr="cidr"\n            )],\n            resource_aws_ec2_instance_key_name=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_aws_ec2_instance_launched_at=[securityhub.CfnInsight.DateFilterProperty(\n                date_range=securityhub.CfnInsight.DateRangeProperty(\n                    unit="unit",\n                    value=123\n                ),\n                end="end",\n                start="start"\n            )],\n            resource_aws_ec2_instance_subnet_id=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_aws_ec2_instance_type=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_aws_ec2_instance_vpc_id=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_aws_iam_access_key_created_at=[securityhub.CfnInsight.DateFilterProperty(\n                date_range=securityhub.CfnInsight.DateRangeProperty(\n                    unit="unit",\n                    value=123\n                ),\n                end="end",\n                start="start"\n            )],\n            resource_aws_iam_access_key_principal_name=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_aws_iam_access_key_status=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_aws_iam_access_key_user_name=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_aws_iam_user_user_name=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_aws_s3_bucket_owner_id=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_aws_s3_bucket_owner_name=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_container_image_id=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_container_image_name=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_container_launched_at=[securityhub.CfnInsight.DateFilterProperty(\n                date_range=securityhub.CfnInsight.DateRangeProperty(\n                    unit="unit",\n                    value=123\n                ),\n                end="end",\n                start="start"\n            )],\n            resource_container_name=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_details_other=[securityhub.CfnInsight.MapFilterProperty(\n                comparison="comparison",\n                key="key",\n                value="value"\n            )],\n            resource_id=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_partition=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_region=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_tags=[securityhub.CfnInsight.MapFilterProperty(\n                comparison="comparison",\n                key="key",\n                value="value"\n            )],\n            resource_type=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            sample=[securityhub.CfnInsight.BooleanFilterProperty(\n                value=False\n            )],\n            severity_label=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            severity_normalized=[securityhub.CfnInsight.NumberFilterProperty(\n                eq=123,\n                gte=123,\n                lte=123\n            )],\n            severity_product=[securityhub.CfnInsight.NumberFilterProperty(\n                eq=123,\n                gte=123,\n                lte=123\n            )],\n            source_url=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            threat_intel_indicator_category=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            threat_intel_indicator_last_observed_at=[securityhub.CfnInsight.DateFilterProperty(\n                date_range=securityhub.CfnInsight.DateRangeProperty(\n                    unit="unit",\n                    value=123\n                ),\n                end="end",\n                start="start"\n            )],\n            threat_intel_indicator_source=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            threat_intel_indicator_source_url=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            threat_intel_indicator_type=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            threat_intel_indicator_value=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            title=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            type=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            updated_at=[securityhub.CfnInsight.DateFilterProperty(\n                date_range=securityhub.CfnInsight.DateRangeProperty(\n                    unit="unit",\n                    value=123\n                ),\n                end="end",\n                start="start"\n            )],\n            user_defined_fields=[securityhub.CfnInsight.MapFilterProperty(\n                comparison="comparison",\n                key="key",\n                value="value"\n            )],\n            verification_state=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            vulnerabilities_exploit_available=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            vulnerabilities_fix_available=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            workflow_state=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            workflow_status=[securityhub.CfnInsight.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )]\n        ),\n        group_by_attribute="groupByAttribute",\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['filters', 'group_by_attribute', 'name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnInsightProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnOrganizationConfigurationProps
class CfnOrganizationConfigurationPropsDef(BaseCfnProperty):
    auto_enable: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description="Whether to automatically enable Security Hub in new member accounts when they join the organization. If set to ``true`` , then Security Hub is automatically enabled in new accounts. If set to ``false`` , then Security Hub isn't enabled in new accounts automatically. The default value is ``false`` . If the ``ConfigurationType`` of your organization is set to ``CENTRAL`` , then this field is set to ``false`` and can't be changed in the home Region and linked Regions. However, in that case, the delegated administrator can create a configuration policy in which Security Hub is enabled and associate the policy with new organization accounts.\n")
    auto_enable_standards: typing.Optional[str] = pydantic.Field(None, description="Whether to automatically enable Security Hub `default standards <https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-enable-disable.html>`_ in new member accounts when they join the organization. The default value of this parameter is equal to ``DEFAULT`` . If equal to ``DEFAULT`` , then Security Hub default standards are automatically enabled for new member accounts. If equal to ``NONE`` , then default standards are not automatically enabled for new member accounts. If the ``ConfigurationType`` of your organization is set to ``CENTRAL`` , then this field is set to ``NONE`` and can't be changed in the home Region and linked Regions. However, in that case, the delegated administrator can create a configuration policy in which specific security standards are enabled and associate the policy with new organization accounts.\n")
    configuration_type: typing.Optional[str] = pydantic.Field(None, description='Indicates whether the organization uses local or central configuration. If you use local configuration, the Security Hub delegated administrator can set ``AutoEnable`` to ``true`` and ``AutoEnableStandards`` to ``DEFAULT`` . This automatically enables Security Hub and default security standards in new organization accounts. These new account settings must be set separately in each AWS Region , and settings may be different in each Region. If you use central configuration, the delegated administrator can create configuration policies. Configuration policies can be used to configure Security Hub, security standards, and security controls in multiple accounts and Regions. If you want new organization accounts to use a specific configuration, you can create a configuration policy and associate it with the root or specific organizational units (OUs). New accounts will inherit the policy from the root or their assigned OU.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-securityhub-organizationconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    cfn_organization_configuration_props = securityhub.CfnOrganizationConfigurationProps(\n        auto_enable=False,\n\n        # the properties below are optional\n        auto_enable_standards="autoEnableStandards",\n        configuration_type="configurationType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['auto_enable', 'auto_enable_standards', 'configuration_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnOrganizationConfigurationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnPolicyAssociationProps
class CfnPolicyAssociationPropsDef(BaseCfnProperty):
    configuration_policy_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The universally unique identifier (UUID) of the configuration policy. A self-managed configuration has no UUID. The identifier of a self-managed configuration is ``SELF_MANAGED_SECURITY_HUB`` .\n')
    target_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identifier of the target account, organizational unit, or the root.\n')
    target_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies whether the target is an AWS account , organizational unit, or the root.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-securityhub-policyassociation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    cfn_policy_association_props = securityhub.CfnPolicyAssociationProps(\n        configuration_policy_id="configurationPolicyId",\n        target_id="targetId",\n        target_type="targetType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['configuration_policy_id', 'target_id', 'target_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnPolicyAssociationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnProductSubscriptionProps
class CfnProductSubscriptionPropsDef(BaseCfnProperty):
    product_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the product to enable the integration for.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-securityhub-productsubscription.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    cfn_product_subscription_props = securityhub.CfnProductSubscriptionProps(\n        product_arn="productArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['product_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnProductSubscriptionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnSecurityControlProps
class CfnSecurityControlPropsDef(BaseCfnProperty):
    parameters: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnSecurityControl_ParameterConfigurationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='An object that identifies the name of a control parameter, its current value, and whether it has been customized.\n')
    last_update_reason: typing.Optional[str] = pydantic.Field(None, description='The most recent reason for updating the customizable properties of a security control. This differs from the ``UpdateReason`` field of the ```BatchUpdateStandardsControlAssociations`` <https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_BatchUpdateStandardsControlAssociations.html>`_ API, which tracks the reason for updating the enablement status of a control. This field accepts alphanumeric characters in addition to white spaces, dashes, and underscores.\n')
    security_control_arn: typing.Optional[str] = pydantic.Field(None, description="The Amazon Resource Name (ARN) for a security control across standards, such as ``arn:aws:securityhub:eu-central-1:123456789012:security-control/S3.1`` . This parameter doesn't mention a specific standard.\n")
    security_control_id: typing.Optional[str] = pydantic.Field(None, description='The unique identifier of a security control across standards. Values for this field typically consist of an AWS service name and a number, such as APIGateway.3.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-securityhub-securitycontrol.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    cfn_security_control_props = securityhub.CfnSecurityControlProps(\n        parameters={\n            "parameters_key": securityhub.CfnSecurityControl.ParameterConfigurationProperty(\n                value_type="valueType"\n            )\n        },\n\n        # the properties below are optional\n        last_update_reason="lastUpdateReason",\n        security_control_arn="securityControlArn",\n        security_control_id="securityControlId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['parameters', 'last_update_reason', 'security_control_arn', 'security_control_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnSecurityControlProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnStandardProps
class CfnStandardPropsDef(BaseCfnProperty):
    standards_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the standard that you want to enable. To view a list of available Security Hub standards and their ARNs, use the ```DescribeStandards`` <https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_DescribeStandards.html>`_ API operation.\n')
    disabled_standards_controls: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnStandard_StandardsControlPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Specifies which controls are to be disabled in a standard. *Maximum* : ``100``\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-securityhub-standard.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    cfn_standard_props = securityhub.CfnStandardProps(\n        standards_arn="standardsArn",\n\n        # the properties below are optional\n        disabled_standards_controls=[securityhub.CfnStandard.StandardsControlProperty(\n            standards_control_arn="standardsControlArn",\n\n            # the properties below are optional\n            reason="reason"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['standards_arn', 'disabled_standards_controls']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnStandardProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnAutomationRule_AutomationRulesActionProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_AutomationRulesActionPropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_AutomationRulesFindingFieldsUpdateProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_AutomationRulesFindingFieldsUpdatePropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_AutomationRulesFindingFiltersProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_AutomationRulesFindingFiltersPropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_DateFilterProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_DateRangeProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_DateRangePropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_MapFilterProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_MapFilterPropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_NoteUpdateProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_NoteUpdatePropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_NumberFilterProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_NumberFilterPropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_RelatedFindingProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_RelatedFindingPropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_SeverityUpdateProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_SeverityUpdatePropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_StringFilterProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_WorkflowUpdateProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_WorkflowUpdatePropertyDef]] = pydantic.Field(None)
    CfnConfigurationPolicy_ParameterConfigurationProperty: typing.Optional[dict[str, models.aws_securityhub.CfnConfigurationPolicy_ParameterConfigurationPropertyDef]] = pydantic.Field(None)
    CfnConfigurationPolicy_ParameterValueProperty: typing.Optional[dict[str, models.aws_securityhub.CfnConfigurationPolicy_ParameterValuePropertyDef]] = pydantic.Field(None)
    CfnConfigurationPolicy_PolicyProperty: typing.Optional[dict[str, models.aws_securityhub.CfnConfigurationPolicy_PolicyPropertyDef]] = pydantic.Field(None)
    CfnConfigurationPolicy_SecurityControlCustomParameterProperty: typing.Optional[dict[str, models.aws_securityhub.CfnConfigurationPolicy_SecurityControlCustomParameterPropertyDef]] = pydantic.Field(None)
    CfnConfigurationPolicy_SecurityControlsConfigurationProperty: typing.Optional[dict[str, models.aws_securityhub.CfnConfigurationPolicy_SecurityControlsConfigurationPropertyDef]] = pydantic.Field(None)
    CfnConfigurationPolicy_SecurityHubPolicyProperty: typing.Optional[dict[str, models.aws_securityhub.CfnConfigurationPolicy_SecurityHubPolicyPropertyDef]] = pydantic.Field(None)
    CfnInsight_AwsSecurityFindingFiltersProperty: typing.Optional[dict[str, models.aws_securityhub.CfnInsight_AwsSecurityFindingFiltersPropertyDef]] = pydantic.Field(None)
    CfnInsight_BooleanFilterProperty: typing.Optional[dict[str, models.aws_securityhub.CfnInsight_BooleanFilterPropertyDef]] = pydantic.Field(None)
    CfnInsight_DateFilterProperty: typing.Optional[dict[str, models.aws_securityhub.CfnInsight_DateFilterPropertyDef]] = pydantic.Field(None)
    CfnInsight_DateRangeProperty: typing.Optional[dict[str, models.aws_securityhub.CfnInsight_DateRangePropertyDef]] = pydantic.Field(None)
    CfnInsight_IpFilterProperty: typing.Optional[dict[str, models.aws_securityhub.CfnInsight_IpFilterPropertyDef]] = pydantic.Field(None)
    CfnInsight_KeywordFilterProperty: typing.Optional[dict[str, models.aws_securityhub.CfnInsight_KeywordFilterPropertyDef]] = pydantic.Field(None)
    CfnInsight_MapFilterProperty: typing.Optional[dict[str, models.aws_securityhub.CfnInsight_MapFilterPropertyDef]] = pydantic.Field(None)
    CfnInsight_NumberFilterProperty: typing.Optional[dict[str, models.aws_securityhub.CfnInsight_NumberFilterPropertyDef]] = pydantic.Field(None)
    CfnInsight_StringFilterProperty: typing.Optional[dict[str, models.aws_securityhub.CfnInsight_StringFilterPropertyDef]] = pydantic.Field(None)
    CfnSecurityControl_ParameterConfigurationProperty: typing.Optional[dict[str, models.aws_securityhub.CfnSecurityControl_ParameterConfigurationPropertyDef]] = pydantic.Field(None)
    CfnStandard_StandardsControlProperty: typing.Optional[dict[str, models.aws_securityhub.CfnStandard_StandardsControlPropertyDef]] = pydantic.Field(None)
    CfnAutomationRule: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRuleDef]] = pydantic.Field(None)
    CfnConfigurationPolicy: typing.Optional[dict[str, models.aws_securityhub.CfnConfigurationPolicyDef]] = pydantic.Field(None)
    CfnDelegatedAdmin: typing.Optional[dict[str, models.aws_securityhub.CfnDelegatedAdminDef]] = pydantic.Field(None)
    CfnFindingAggregator: typing.Optional[dict[str, models.aws_securityhub.CfnFindingAggregatorDef]] = pydantic.Field(None)
    CfnHub: typing.Optional[dict[str, models.aws_securityhub.CfnHubDef]] = pydantic.Field(None)
    CfnInsight: typing.Optional[dict[str, models.aws_securityhub.CfnInsightDef]] = pydantic.Field(None)
    CfnOrganizationConfiguration: typing.Optional[dict[str, models.aws_securityhub.CfnOrganizationConfigurationDef]] = pydantic.Field(None)
    CfnPolicyAssociation: typing.Optional[dict[str, models.aws_securityhub.CfnPolicyAssociationDef]] = pydantic.Field(None)
    CfnProductSubscription: typing.Optional[dict[str, models.aws_securityhub.CfnProductSubscriptionDef]] = pydantic.Field(None)
    CfnSecurityControl: typing.Optional[dict[str, models.aws_securityhub.CfnSecurityControlDef]] = pydantic.Field(None)
    CfnStandard: typing.Optional[dict[str, models.aws_securityhub.CfnStandardDef]] = pydantic.Field(None)
    CfnAutomationRuleProps: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRulePropsDef]] = pydantic.Field(None)
    CfnConfigurationPolicyProps: typing.Optional[dict[str, models.aws_securityhub.CfnConfigurationPolicyPropsDef]] = pydantic.Field(None)
    CfnDelegatedAdminProps: typing.Optional[dict[str, models.aws_securityhub.CfnDelegatedAdminPropsDef]] = pydantic.Field(None)
    CfnFindingAggregatorProps: typing.Optional[dict[str, models.aws_securityhub.CfnFindingAggregatorPropsDef]] = pydantic.Field(None)
    CfnHubProps: typing.Optional[dict[str, models.aws_securityhub.CfnHubPropsDef]] = pydantic.Field(None)
    CfnInsightProps: typing.Optional[dict[str, models.aws_securityhub.CfnInsightPropsDef]] = pydantic.Field(None)
    CfnOrganizationConfigurationProps: typing.Optional[dict[str, models.aws_securityhub.CfnOrganizationConfigurationPropsDef]] = pydantic.Field(None)
    CfnPolicyAssociationProps: typing.Optional[dict[str, models.aws_securityhub.CfnPolicyAssociationPropsDef]] = pydantic.Field(None)
    CfnProductSubscriptionProps: typing.Optional[dict[str, models.aws_securityhub.CfnProductSubscriptionPropsDef]] = pydantic.Field(None)
    CfnSecurityControlProps: typing.Optional[dict[str, models.aws_securityhub.CfnSecurityControlPropsDef]] = pydantic.Field(None)
    CfnStandardProps: typing.Optional[dict[str, models.aws_securityhub.CfnStandardPropsDef]] = pydantic.Field(None)
    ...

import models
