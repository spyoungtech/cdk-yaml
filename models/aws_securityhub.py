from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.AutomationRulesActionProperty
class CfnAutomationRule_AutomationRulesActionPropertyDef(BaseStruct):
    finding_fields_update: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_AutomationRulesFindingFieldsUpdatePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies that the automation rule action is an update to a finding field.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies that the rule action should update the ``Types`` finding field. The ``Types`` finding field classifies findings in the format of namespace/category/classifier. For more information, see `Types taxonomy for ASFF <https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format-type-taxonomy.html>`_ in the *AWS Security Hub User Guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-automationrulesaction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    # id: Any\n    # updated_by: Any\n\n    automation_rules_action_property = securityhub.CfnAutomationRule.AutomationRulesActionProperty(\n        finding_fields_update=securityhub.CfnAutomationRule.AutomationRulesFindingFieldsUpdateProperty(\n            confidence=123,\n            criticality=123,\n            note=securityhub.CfnAutomationRule.NoteUpdateProperty(\n                text="text",\n                updated_by=updated_by\n            ),\n            related_findings=[securityhub.CfnAutomationRule.RelatedFindingProperty(\n                id=id,\n                product_arn="productArn"\n            )],\n            severity=securityhub.CfnAutomationRule.SeverityUpdateProperty(\n                label="label",\n                normalized=123,\n                product=123\n            ),\n            types=["types"],\n            user_defined_fields={\n                "user_defined_fields_key": "userDefinedFields"\n            },\n            verification_state="verificationState",\n            workflow=securityhub.CfnAutomationRule.WorkflowUpdateProperty(\n                status="status"\n            )\n        ),\n        type="type"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['finding_fields_update', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.AutomationRulesActionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.AutomationRulesFindingFieldsUpdateProperty
class CfnAutomationRule_AutomationRulesFindingFieldsUpdatePropertyDef(BaseStruct):
    confidence: typing.Union[int, float, None] = pydantic.Field(None, description='The rule action updates the ``Confidence`` field of a finding.\n')
    criticality: typing.Union[int, float, None] = pydantic.Field(None, description='The rule action updates the ``Criticality`` field of a finding.\n')
    note: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_NoteUpdatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The rule action will update the ``Note`` field of a finding.\n')
    related_findings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_RelatedFindingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The rule action will update the ``RelatedFindings`` field of a finding.\n')
    severity: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_SeverityUpdatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The rule action will update the ``Severity`` field of a finding.\n')
    types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The rule action updates the ``Types`` field of a finding.\n')
    user_defined_fields: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='The rule action updates the ``UserDefinedFields`` field of a finding.\n')
    verification_state: typing.Optional[str] = pydantic.Field(None, description='The rule action updates the ``VerificationState`` field of a finding.\n')
    workflow: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_WorkflowUpdatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The rule action will update the ``Workflow`` field of a finding.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-automationrulesfindingfieldsupdate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    # id: Any\n    # updated_by: Any\n\n    automation_rules_finding_fields_update_property = securityhub.CfnAutomationRule.AutomationRulesFindingFieldsUpdateProperty(\n        confidence=123,\n        criticality=123,\n        note=securityhub.CfnAutomationRule.NoteUpdateProperty(\n            text="text",\n            updated_by=updated_by\n        ),\n        related_findings=[securityhub.CfnAutomationRule.RelatedFindingProperty(\n            id=id,\n            product_arn="productArn"\n        )],\n        severity=securityhub.CfnAutomationRule.SeverityUpdateProperty(\n            label="label",\n            normalized=123,\n            product=123\n        ),\n        types=["types"],\n        user_defined_fields={\n            "user_defined_fields_key": "userDefinedFields"\n        },\n        verification_state="verificationState",\n        workflow=securityhub.CfnAutomationRule.WorkflowUpdateProperty(\n            status="status"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['confidence', 'criticality', 'note', 'related_findings', 'severity', 'types', 'user_defined_fields', 'verification_state', 'workflow']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.AutomationRulesFindingFieldsUpdateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.AutomationRulesFindingFiltersProperty
class CfnAutomationRule_AutomationRulesFindingFiltersPropertyDef(BaseStruct):
    aws_account_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The AWS account ID in which a finding was generated. Array Members: Minimum number of 1 item. Maximum number of 100 items.\n')
    company_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The name of the company for the product that generated the finding. For control-based findings, the company is AWS . Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    compliance_associated_standards_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The unique identifier of a standard in which a control is enabled. This field consists of the resource portion of the Amazon Resource Name (ARN) returned for a standard in the `DescribeStandards <https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_DescribeStandards.html>`_ API response. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    compliance_security_control_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The security control ID for which a finding was generated. Security control IDs are the same across standards. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    compliance_status: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The result of a security check. This field is only used for findings generated from controls. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    confidence: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="The likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. ``Confidence`` is scored on a 0–100 basis using a ratio scale. A value of ``0`` means 0 percent confidence, and a value of ``100`` means 100 percent confidence. For example, a data exfiltration detection based on a statistical deviation of network traffic has low confidence because an actual exfiltration hasn't been verified. For more information, see `Confidence <https://docs.aws.amazon.com/securityhub/latest/userguide/asff-top-level-attributes.html#asff-confidence>`_ in the *AWS Security Hub User Guide* . Array Members: Minimum number of 1 item. Maximum number of 20 items.\n")
    created_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A timestamp that indicates when this finding record was created. Uses the ``date-time`` format specified in `RFC 3339 section 5.6, Internet Date/Time Format <https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc3339#section-5.6>`_ . The value cannot contain spaces. For example, ``2020-03-22T13:22:13.933Z`` . Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    criticality: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The level of importance that is assigned to the resources that are associated with a finding. ``Criticality`` is scored on a 0–100 basis, using a ratio scale that supports only full integers. A score of ``0`` means that the underlying resources have no criticality, and a score of ``100`` is reserved for the most critical resources. For more information, see `Criticality <https://docs.aws.amazon.com/securityhub/latest/userguide/asff-top-level-attributes.html#asff-criticality>`_ in the *AWS Security Hub User Guide* . Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    description: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="A finding's description. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n")
    first_observed_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A timestamp that indicates when the potential security issue captured by a finding was first observed by the security findings product. Uses the ``date-time`` format specified in `RFC 3339 section 5.6, Internet Date/Time Format <https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc3339#section-5.6>`_ . The value cannot contain spaces. For example, ``2020-03-22T13:22:13.933Z`` . Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    generator_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The identifier for the solution-specific component that generated a finding. Array Members: Minimum number of 1 item. Maximum number of 100 items.\n')
    last_observed_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A timestamp that indicates when the potential security issue captured by a finding was most recently observed by the security findings product. Uses the ``date-time`` format specified in `RFC 3339 section 5.6, Internet Date/Time Format <https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc3339#section-5.6>`_ . The value cannot contain spaces. For example, ``2020-03-22T13:22:13.933Z`` . Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    note_text: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="The text of a user-defined note that's added to a finding. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n")
    note_updated_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The timestamp of when the note was updated. Uses the date-time format specified in `RFC 3339 section 5.6, Internet Date/Time Format <https://docs.aws.amazon.com/https://www.rfc-editor.org/rfc/rfc3339#section-5.6>`_ . The value cannot contain spaces. For example, ``2020-03-22T13:22:13.933Z`` . Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    note_updated_by: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The principal that created a note. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    product_arn: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The Amazon Resource Name (ARN) for a third-party product that generated a finding in Security Hub. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    product_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Provides the name of the product that generated the finding. For control-based findings, the product name is Security Hub. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    record_state: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Provides the current state of a finding. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    related_findings_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The product-generated identifier for a related finding. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    related_findings_product_arn: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The ARN for the product that generated a related finding. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    resource_details_other: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Custom fields and values about the resource that a finding pertains to. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    resource_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The identifier for the given resource type. For AWS resources that are identified by Amazon Resource Names (ARNs), this is the ARN. For AWS resources that lack ARNs, this is the identifier as defined by the AWS service that created the resource. For non- AWS resources, this is a unique identifier that is associated with the resource. Array Members: Minimum number of 1 item. Maximum number of 100 items.\n')
    resource_partition: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The partition in which the resource that the finding pertains to is located. A partition is a group of AWS Regions . Each AWS account is scoped to one partition. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    resource_region: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The AWS Region where the resource that a finding pertains to is located. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    resource_tags: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of AWS tags associated with a resource at the time the finding was processed. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    resource_type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="A finding's title. Array Members: Minimum number of 1 item. Maximum number of 100 items.\n")
    severity_label: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The severity value of the finding. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    source_url: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Provides a URL that links to a page about the current finding in the finding product. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    title: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="A finding's title. Array Members: Minimum number of 1 item. Maximum number of 100 items.\n")
    type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='One or more finding types in the format of namespace/category/classifier that classify a finding. For a list of namespaces, classifiers, and categories, see `Types taxonomy for ASFF <https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format-type-taxonomy.html>`_ in the *AWS Security Hub User Guide* . Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    updated_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A timestamp that indicates when the finding record was most recently updated. Uses the ``date-time`` format specified in `RFC 3339 section 5.6, Internet Date/Time Format <https://docs.aws.amazon.com/https://tools.ietf.org/html/rfc3339#section-5.6>`_ . The value cannot contain spaces. For example, ``2020-03-22T13:22:13.933Z`` . Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    user_defined_fields: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of user-defined name and value string pairs added to a finding. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    verification_state: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Provides the veracity of a finding. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n')
    workflow_status: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Provides information about the status of the investigation into a finding. Array Members: Minimum number of 1 item. Maximum number of 20 items.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-automationrulesfindingfilters.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    automation_rules_finding_filters_property = securityhub.CfnAutomationRule.AutomationRulesFindingFiltersProperty(\n        aws_account_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        company_name=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        compliance_associated_standards_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        compliance_security_control_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        compliance_status=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        confidence=[securityhub.CfnAutomationRule.NumberFilterProperty(\n            eq=123,\n            gte=123,\n            lte=123\n        )],\n        created_at=[securityhub.CfnAutomationRule.DateFilterProperty(\n            date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n                unit="unit",\n                value=123\n            ),\n            end="end",\n            start="start"\n        )],\n        criticality=[securityhub.CfnAutomationRule.NumberFilterProperty(\n            eq=123,\n            gte=123,\n            lte=123\n        )],\n        description=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        first_observed_at=[securityhub.CfnAutomationRule.DateFilterProperty(\n            date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n                unit="unit",\n                value=123\n            ),\n            end="end",\n            start="start"\n        )],\n        generator_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        id=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        last_observed_at=[securityhub.CfnAutomationRule.DateFilterProperty(\n            date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n                unit="unit",\n                value=123\n            ),\n            end="end",\n            start="start"\n        )],\n        note_text=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        note_updated_at=[securityhub.CfnAutomationRule.DateFilterProperty(\n            date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n                unit="unit",\n                value=123\n            ),\n            end="end",\n            start="start"\n        )],\n        note_updated_by=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        product_arn=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        product_name=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        record_state=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        related_findings_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        related_findings_product_arn=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_details_other=[securityhub.CfnAutomationRule.MapFilterProperty(\n            comparison="comparison",\n            key="key",\n            value="value"\n        )],\n        resource_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_partition=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_region=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        resource_tags=[securityhub.CfnAutomationRule.MapFilterProperty(\n            comparison="comparison",\n            key="key",\n            value="value"\n        )],\n        resource_type=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        severity_label=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        source_url=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        title=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        type=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        updated_at=[securityhub.CfnAutomationRule.DateFilterProperty(\n            date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n                unit="unit",\n                value=123\n            ),\n            end="end",\n            start="start"\n        )],\n        user_defined_fields=[securityhub.CfnAutomationRule.MapFilterProperty(\n            comparison="comparison",\n            key="key",\n            value="value"\n        )],\n        verification_state=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )],\n        workflow_status=[securityhub.CfnAutomationRule.StringFilterProperty(\n            comparison="comparison",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['aws_account_id', 'company_name', 'compliance_associated_standards_id', 'compliance_security_control_id', 'compliance_status', 'confidence', 'created_at', 'criticality', 'description', 'first_observed_at', 'generator_id', 'last_observed_at', 'note_text', 'note_updated_at', 'note_updated_by', 'product_arn', 'product_name', 'record_state', 'related_findings_id', 'related_findings_product_arn', 'resource_details_other', 'resource_id', 'resource_partition', 'resource_region', 'resource_tags', 'resource_type', 'severity_label', 'source_url', 'title', 'type', 'updated_at', 'user_defined_fields', 'verification_state', 'workflow_status']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.AutomationRulesFindingFiltersProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.DateFilterProperty
class CfnAutomationRule_DateFilterPropertyDef(BaseStruct):
    date_range: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateRangePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A date range for the date filter.\n')
    end: typing.Optional[str] = pydantic.Field(None, description='A timestamp that provides the end date for the date filter. A correctly formatted example is ``2020-05-21T20:16:34.724Z`` . The value cannot contain spaces, and date and time should be separated by ``T`` . For more information, see `RFC 3339 section 5.6, Internet Date/Time Format <https://docs.aws.amazon.com/https://www.rfc-editor.org/rfc/rfc3339#section-5.6>`_ .\n')
    start: typing.Optional[str] = pydantic.Field(None, description='A timestamp that provides the start date for the date filter. A correctly formatted example is ``2020-05-21T20:16:34.724Z`` . The value cannot contain spaces, and date and time should be separated by ``T`` . For more information, see `RFC 3339 section 5.6, Internet Date/Time Format <https://docs.aws.amazon.com/https://www.rfc-editor.org/rfc/rfc3339#section-5.6>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-datefilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    date_filter_property = securityhub.CfnAutomationRule.DateFilterProperty(\n        date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n            unit="unit",\n            value=123\n        ),\n        end="end",\n        start="start"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['date_range', 'end', 'start']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.DateFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.DateRangeProperty
class CfnAutomationRule_DateRangePropertyDef(BaseStruct):
    unit: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A date range unit for the date filter.\n')
    value: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='A date range value for the date filter.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-daterange.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    date_range_property = securityhub.CfnAutomationRule.DateRangeProperty(\n        unit="unit",\n        value=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['unit', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.DateRangeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.MapFilterProperty
class CfnAutomationRule_MapFilterPropertyDef(BaseStruct):
    comparison: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The condition to apply to the key value when filtering Security Hub findings with a map filter. To search for values that have the filter value, use one of the following comparison operators: - To search for values that include the filter value, use ``CONTAINS`` . For example, for the ``ResourceTags`` field, the filter ``Department CONTAINS Security`` matches findings that include the value ``Security`` for the ``Department`` tag. In the same example, a finding with a value of ``Security team`` for the ``Department`` tag is a match. - To search for values that exactly match the filter value, use ``EQUALS`` . For example, for the ``ResourceTags`` field, the filter ``Department EQUALS Security`` matches findings that have the value ``Security`` for the ``Department`` tag. ``CONTAINS`` and ``EQUALS`` filters on the same field are joined by ``OR`` . A finding matches if it matches any one of those filters. For example, the filters ``Department CONTAINS Security OR Department CONTAINS Finance`` match a finding that includes either ``Security`` , ``Finance`` , or both values. To search for values that don't have the filter value, use one of the following comparison operators: - To search for values that exclude the filter value, use ``NOT_CONTAINS`` . For example, for the ``ResourceTags`` field, the filter ``Department NOT_CONTAINS Finance`` matches findings that exclude the value ``Finance`` for the ``Department`` tag. - To search for values other than the filter value, use ``NOT_EQUALS`` . For example, for the ``ResourceTags`` field, the filter ``Department NOT_EQUALS Finance`` matches findings that don’t have the value ``Finance`` for the ``Department`` tag. ``NOT_CONTAINS`` and ``NOT_EQUALS`` filters on the same field are joined by ``AND`` . A finding matches only if it matches all of those filters. For example, the filters ``Department NOT_CONTAINS Security AND Department NOT_CONTAINS Finance`` match a finding that excludes both the ``Security`` and ``Finance`` values. ``CONTAINS`` filters can only be used with other ``CONTAINS`` filters. ``NOT_CONTAINS`` filters can only be used with other ``NOT_CONTAINS`` filters. You can’t have both a ``CONTAINS`` filter and a ``NOT_CONTAINS`` filter on the same field. Similarly, you can’t have both an ``EQUALS`` filter and a ``NOT_EQUALS`` filter on the same field. Combining filters in this way returns an error. ``CONTAINS`` and ``NOT_CONTAINS`` operators can be used only with automation rules. For more information, see `Automation rules <https://docs.aws.amazon.com/securityhub/latest/userguide/automation-rules.html>`_ in the *AWS Security Hub User Guide* .\n")
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The key of the map filter. For example, for ``ResourceTags`` , ``Key`` identifies the name of the tag. For ``UserDefinedFields`` , ``Key`` is the name of the field.\n')
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The value for the key in the map filter. Filter values are case sensitive. For example, one of the values for a tag called ``Department`` might be ``Security`` . If you provide ``security`` as the filter value, then there\'s no match.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-mapfilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    map_filter_property = securityhub.CfnAutomationRule.MapFilterProperty(\n        comparison="comparison",\n        key="key",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comparison', 'key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.MapFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.NoteUpdateProperty
class CfnAutomationRule_NoteUpdatePropertyDef(BaseStruct):
    text: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The updated note text.\n')
    updated_by: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The principal that updated the note.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-noteupdate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    # updated_by: Any\n\n    note_update_property = securityhub.CfnAutomationRule.NoteUpdateProperty(\n        text="text",\n        updated_by=updated_by\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['text', 'updated_by']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.NoteUpdateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.NumberFilterProperty
class CfnAutomationRule_NumberFilterPropertyDef(BaseStruct):
    eq: typing.Union[int, float, None] = pydantic.Field(None, description='The equal-to condition to be applied to a single field when querying for findings.\n')
    gte: typing.Union[int, float, None] = pydantic.Field(None, description='The greater-than-equal condition to be applied to a single field when querying for findings.\n')
    lte: typing.Union[int, float, None] = pydantic.Field(None, description='The less-than-equal condition to be applied to a single field when querying for findings.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-numberfilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    number_filter_property = securityhub.CfnAutomationRule.NumberFilterProperty(\n        eq=123,\n        gte=123,\n        lte=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['eq', 'gte', 'lte']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.NumberFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.RelatedFindingProperty
class CfnAutomationRule_RelatedFindingPropertyDef(BaseStruct):
    product_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) for the product that generated a related finding.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-relatedfinding.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    # id: Any\n\n    related_finding_property = securityhub.CfnAutomationRule.RelatedFindingProperty(\n        id=id,\n        product_arn="productArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['product_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.RelatedFindingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.SeverityUpdateProperty
class CfnAutomationRule_SeverityUpdatePropertyDef(BaseStruct):
    label: typing.Optional[str] = pydantic.Field(None, description='The severity value of the finding. The allowed values are the following. - ``INFORMATIONAL`` - No issue was found. - ``LOW`` - The issue does not require action on its own. - ``MEDIUM`` - The issue must be addressed but not urgently. - ``HIGH`` - The issue must be addressed as a priority. - ``CRITICAL`` - The issue must be remediated immediately to avoid it escalating.\n')
    normalized: typing.Union[int, float, None] = pydantic.Field(None, description='The normalized severity for the finding. This attribute is to be deprecated in favor of ``Label`` . If you provide ``Normalized`` and do not provide ``Label`` , ``Label`` is set automatically as follows. - 0 - ``INFORMATIONAL`` - 1–39 - ``LOW`` - 40–69 - ``MEDIUM`` - 70–89 - ``HIGH`` - 90–100 - ``CRITICAL``\n')
    product: typing.Union[int, float, None] = pydantic.Field(None, description='The native severity as defined by the AWS service or integrated partner product that generated the finding.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-severityupdate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    severity_update_property = securityhub.CfnAutomationRule.SeverityUpdateProperty(\n        label="label",\n        normalized=123,\n        product=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['label', 'normalized', 'product']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.SeverityUpdateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.StringFilterProperty
class CfnAutomationRule_StringFilterPropertyDef(BaseStruct):
    comparison: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The condition to apply to a string value when filtering Security Hub findings. To search for values that have the filter value, use one of the following comparison operators: - To search for values that include the filter value, use ``CONTAINS`` . For example, the filter ``Title CONTAINS CloudFront`` matches findings that have a ``Title`` that includes the string CloudFront. - To search for values that exactly match the filter value, use ``EQUALS`` . For example, the filter ``AwsAccountId EQUALS 123456789012`` only matches findings that have an account ID of ``123456789012`` . - To search for values that start with the filter value, use ``PREFIX`` . For example, the filter ``ResourceRegion PREFIX us`` matches findings that have a ``ResourceRegion`` that starts with ``us`` . A ``ResourceRegion`` that starts with a different value, such as ``af`` , ``ap`` , or ``ca`` , doesn't match. ``CONTAINS`` , ``EQUALS`` , and ``PREFIX`` filters on the same field are joined by ``OR`` . A finding matches if it matches any one of those filters. For example, the filters ``Title CONTAINS CloudFront OR Title CONTAINS CloudWatch`` match a finding that includes either ``CloudFront`` , ``CloudWatch`` , or both strings in the title. To search for values that don’t have the filter value, use one of the following comparison operators: - To search for values that exclude the filter value, use ``NOT_CONTAINS`` . For example, the filter ``Title NOT_CONTAINS CloudFront`` matches findings that have a ``Title`` that excludes the string CloudFront. - To search for values other than the filter value, use ``NOT_EQUALS`` . For example, the filter ``AwsAccountId NOT_EQUALS 123456789012`` only matches findings that have an account ID other than ``123456789012`` . - To search for values that don't start with the filter value, use ``PREFIX_NOT_EQUALS`` . For example, the filter ``ResourceRegion PREFIX_NOT_EQUALS us`` matches findings with a ``ResourceRegion`` that starts with a value other than ``us`` . ``NOT_CONTAINS`` , ``NOT_EQUALS`` , and ``PREFIX_NOT_EQUALS`` filters on the same field are joined by ``AND`` . A finding matches only if it matches all of those filters. For example, the filters ``Title NOT_CONTAINS CloudFront AND Title NOT_CONTAINS CloudWatch`` match a finding that excludes both ``CloudFront`` and ``CloudWatch`` in the title. You can’t have both a ``CONTAINS`` filter and a ``NOT_CONTAINS`` filter on the same field. Similarly, you can't provide both an ``EQUALS`` filter and a ``NOT_EQUALS`` or ``PREFIX_NOT_EQUALS`` filter on the same field. Combining filters in this way returns an error. ``CONTAINS`` filters can only be used with other ``CONTAINS`` filters. ``NOT_CONTAINS`` filters can only be used with other ``NOT_CONTAINS`` filters. You can combine ``PREFIX`` filters with ``NOT_EQUALS`` or ``PREFIX_NOT_EQUALS`` filters for the same field. Security Hub first processes the ``PREFIX`` filters, and then the ``NOT_EQUALS`` or ``PREFIX_NOT_EQUALS`` filters. For example, for the following filters, Security Hub first identifies findings that have resource types that start with either ``AwsIam`` or ``AwsEc2`` . It then excludes findings that have a resource type of ``AwsIamPolicy`` and findings that have a resource type of ``AwsEc2NetworkInterface`` . - ``ResourceType PREFIX AwsIam`` - ``ResourceType PREFIX AwsEc2`` - ``ResourceType NOT_EQUALS AwsIamPolicy`` - ``ResourceType NOT_EQUALS AwsEc2NetworkInterface`` ``CONTAINS`` and ``NOT_CONTAINS`` operators can be used only with automation rules. For more information, see `Automation rules <https://docs.aws.amazon.com/securityhub/latest/userguide/automation-rules.html>`_ in the *AWS Security Hub User Guide* .\n")
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The string filter value. Filter values are case sensitive. For example, the product name for control-based findings is ``Security Hub`` . If you provide ``security hub`` as the filter value, there\'s no match.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-stringfilter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    string_filter_property = securityhub.CfnAutomationRule.StringFilterProperty(\n        comparison="comparison",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['comparison', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.StringFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule.WorkflowUpdateProperty
class CfnAutomationRule_WorkflowUpdatePropertyDef(BaseStruct):
    status: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The status of the investigation into the finding. The workflow status is specific to an individual finding. It does not affect the generation of new findings. For example, setting the workflow status to ``SUPPRESSED`` or ``RESOLVED`` does not prevent a new finding for the same issue. The allowed values are the following. - ``NEW`` - The initial state of a finding, before it is reviewed. Security Hub also resets ``WorkFlowStatus`` from ``NOTIFIED`` or ``RESOLVED`` to ``NEW`` in the following cases: - The record state changes from ``ARCHIVED`` to ``ACTIVE`` . - The compliance status changes from ``PASSED`` to either ``WARNING`` , ``FAILED`` , or ``NOT_AVAILABLE`` . - ``NOTIFIED`` - Indicates that you notified the resource owner about the security issue. Used when the initial reviewer is not the resource owner, and needs intervention from the resource owner. - ``RESOLVED`` - The finding was reviewed and remediated and is now considered resolved. - ``SUPPRESSED`` - Indicates that you reviewed the finding and do not believe that any action is needed. The finding is no longer updated.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-automationrule-workflowupdate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    workflow_update_property = securityhub.CfnAutomationRule.WorkflowUpdateProperty(\n        status="status"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['status']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule.WorkflowUpdateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnStandard.StandardsControlProperty
class CfnStandard_StandardsControlPropertyDef(BaseStruct):
    standards_control_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of the control.\n')
    reason: typing.Optional[str] = pydantic.Field(None, description='A user-defined reason for changing a control\'s enablement status in a specified standard. If you are disabling a control, then this property is required.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-securityhub-standard-standardscontrol.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    standards_control_property = securityhub.CfnStandard.StandardsControlProperty(\n        standards_control_arn="standardsControlArn",\n\n        # the properties below are optional\n        reason="reason"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['standards_control_arn', 'reason']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnStandard.StandardsControlProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRule
class CfnAutomationRuleDef(BaseCfnResource):
    actions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_AutomationRulesActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='One or more actions to update finding fields if a finding matches the conditions specified in ``Criteria`` .\n')
    criteria: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_AutomationRulesFindingFiltersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A set of `AWS Security Finding Format (ASFF) <https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format.html>`_ finding field attributes and corresponding expected values that Security Hub uses to filter findings. If a rule is enabled and a finding matches the criteria specified in this parameter, Security Hub applies the rule action to the finding.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the rule.\n')
    is_terminal: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Specifies whether a rule is the last to be applied with respect to a finding that matches the rule criteria. This is useful when a finding matches the criteria for multiple rules, and each rule has different actions. If a rule is terminal, Security Hub applies the rule action to a finding that matches the rule criteria and doesn't evaluate other rules for the finding. By default, a rule isn't terminal.\n")
    rule_name: typing.Optional[str] = pydantic.Field(None, description='The name of the rule.\n')
    rule_order: typing.Union[int, float, None] = pydantic.Field(None, description='An integer ranging from 1 to 1000 that represents the order in which the rule action is applied to findings. Security Hub applies rules with lower values for this parameter first.\n')
    rule_status: typing.Optional[str] = pydantic.Field(None, description='Whether the rule is active after it is created. If this parameter is equal to ``ENABLED`` , Security Hub applies the rule to findings and finding updates after the rule is created.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='User-defined tags that help you label the purpose of a rule.')
    _init_params: typing.ClassVar[list[str]] = ['actions', 'criteria', 'description', 'is_terminal', 'rule_name', 'rule_order', 'rule_status', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AutomationRulesActionProperty', 'AutomationRulesFindingFieldsUpdateProperty', 'AutomationRulesFindingFiltersProperty', 'DateFilterProperty', 'DateRangeProperty', 'MapFilterProperty', 'NoteUpdateProperty', 'NumberFilterProperty', 'RelatedFindingProperty', 'SeverityUpdateProperty', 'StringFilterProperty', 'WorkflowUpdateProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRule'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_securityhub.CfnAutomationRuleDefConfig] = pydantic.Field(None)


class CfnAutomationRuleDefConfig(pydantic.BaseModel):
    AutomationRulesActionProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefAutomationrulesactionpropertyParams]] = pydantic.Field(None, description='')
    AutomationRulesFindingFieldsUpdateProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefAutomationrulesfindingfieldsupdatepropertyParams]] = pydantic.Field(None, description='')
    AutomationRulesFindingFiltersProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefAutomationrulesfindingfilterspropertyParams]] = pydantic.Field(None, description='')
    DateFilterProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefDatefilterpropertyParams]] = pydantic.Field(None, description='')
    DateRangeProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefDaterangepropertyParams]] = pydantic.Field(None, description='')
    MapFilterProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefMapfilterpropertyParams]] = pydantic.Field(None, description='')
    NoteUpdateProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefNoteupdatepropertyParams]] = pydantic.Field(None, description='')
    NumberFilterProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefNumberfilterpropertyParams]] = pydantic.Field(None, description='')
    RelatedFindingProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefRelatedfindingpropertyParams]] = pydantic.Field(None, description='')
    SeverityUpdateProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefSeverityupdatepropertyParams]] = pydantic.Field(None, description='')
    StringFilterProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefStringfilterpropertyParams]] = pydantic.Field(None, description='')
    WorkflowUpdateProperty: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefWorkflowupdatepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_securityhub.CfnAutomationRuleDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnAutomationRuleDefAutomationrulesactionpropertyParams(pydantic.BaseModel):
    finding_fields_update: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_AutomationRulesFindingFieldsUpdatePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    type: str = pydantic.Field(..., description='')
    ...

class CfnAutomationRuleDefAutomationrulesfindingfieldsupdatepropertyParams(pydantic.BaseModel):
    confidence: typing.Union[int, float, None] = pydantic.Field(None, description='')
    criticality: typing.Union[int, float, None] = pydantic.Field(None, description='')
    note: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_NoteUpdatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    related_findings: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_RelatedFindingPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    severity: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_SeverityUpdatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    user_defined_fields: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    verification_state: typing.Optional[str] = pydantic.Field(None, description='')
    workflow: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_WorkflowUpdatePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnAutomationRuleDefAutomationrulesfindingfilterspropertyParams(pydantic.BaseModel):
    aws_account_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    company_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    compliance_associated_standards_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    compliance_security_control_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    compliance_status: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    confidence: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    created_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    criticality: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_NumberFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    description: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    first_observed_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    generator_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    last_observed_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    note_text: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    note_updated_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    note_updated_by: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    product_arn: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    product_name: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    record_state: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    related_findings_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    related_findings_product_arn: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_details_other: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_id: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_partition: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_region: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_tags: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    resource_type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    severity_label: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    source_url: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    title: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    type: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    updated_at: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    user_defined_fields: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_MapFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    verification_state: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    workflow_status: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnAutomationRuleDefDatefilterpropertyParams(pydantic.BaseModel):
    date_range: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_DateRangePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    end: typing.Optional[str] = pydantic.Field(None, description='')
    start: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAutomationRuleDefDaterangepropertyParams(pydantic.BaseModel):
    unit: str = pydantic.Field(..., description='')
    value: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnAutomationRuleDefMapfilterpropertyParams(pydantic.BaseModel):
    comparison: str = pydantic.Field(..., description='')
    key: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnAutomationRuleDefNoteupdatepropertyParams(pydantic.BaseModel):
    text: str = pydantic.Field(..., description='')
    updated_by: typing.Any = pydantic.Field(..., description='')
    ...

class CfnAutomationRuleDefNumberfilterpropertyParams(pydantic.BaseModel):
    eq: typing.Union[int, float, None] = pydantic.Field(None, description='')
    gte: typing.Union[int, float, None] = pydantic.Field(None, description='')
    lte: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnAutomationRuleDefRelatedfindingpropertyParams(pydantic.BaseModel):
    id: typing.Any = pydantic.Field(..., description='')
    product_arn: str = pydantic.Field(..., description='')
    ...

class CfnAutomationRuleDefSeverityupdatepropertyParams(pydantic.BaseModel):
    label: typing.Optional[str] = pydantic.Field(None, description='')
    normalized: typing.Union[int, float, None] = pydantic.Field(None, description='')
    product: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnAutomationRuleDefStringfilterpropertyParams(pydantic.BaseModel):
    comparison: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnAutomationRuleDefWorkflowupdatepropertyParams(pydantic.BaseModel):
    status: str = pydantic.Field(..., description='')
    ...

class CfnAutomationRuleDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnAutomationRuleDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAutomationRuleDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnAutomationRuleDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAutomationRuleDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnAutomationRuleDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnAutomationRuleDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnAutomationRuleDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnAutomationRuleDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnAutomationRuleDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAutomationRuleDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnAutomationRuleDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnAutomationRuleDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAutomationRuleDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_securityhub.CfnHub
class CfnHubDef(BaseCfnResource):
    auto_enable_controls: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Whether to automatically enable new controls when they are added to standards that are enabled. By default, this is set to ``true`` , and new controls are enabled automatically. To not automatically enable new controls, set this to ``false`` .\n')
    control_finding_generator: typing.Optional[str] = pydantic.Field(None, description="Specifies whether an account has consolidated control findings turned on or off. If the value for this field is set to ``SECURITY_CONTROL`` , Security Hub generates a single finding for a control check even when the check applies to multiple enabled standards. If the value for this field is set to ``STANDARD_CONTROL`` , Security Hub generates separate findings for a control check when the check applies to multiple enabled standards. The value for this field in a member account matches the value in the administrator account. For accounts that aren't part of an organization, the default value of this field is ``SECURITY_CONTROL`` if you enabled Security Hub on or after February 23, 2023.\n")
    enable_default_standards: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Whether to enable the security standards that Security Hub has designated as automatically enabled. If you don't provide a value for ``EnableDefaultStandards`` , it is set to ``true`` , and the designated standards are automatically enabled in each AWS Region where you enable Security Hub . If you don't want to enable the designated standards, set ``EnableDefaultStandards`` to ``false`` . Currently, the automatically enabled standards are the Center for Internet Security (CIS) AWS Foundations Benchmark v1.2.0 and AWS Foundational Security Best Practices (FSBP).\n")
    tags: typing.Any = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['auto_enable_controls', 'control_finding_generator', 'enable_default_standards', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnHub'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_securityhub.CfnHubDefConfig] = pydantic.Field(None)


class CfnHubDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_securityhub.CfnHubDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_securityhub.CfnHubDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_securityhub.CfnHubDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_securityhub.CfnHubDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_securityhub.CfnHubDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_securityhub.CfnHubDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_securityhub.CfnHubDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_securityhub.CfnHubDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_securityhub.CfnHubDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_securityhub.CfnHubDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_securityhub.CfnHubDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_securityhub.CfnHubDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_securityhub.CfnHubDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnHubDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnHubDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnHubDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnHubDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnHubDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnHubDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnHubDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnHubDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnHubDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnHubDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnHubDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnHubDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnHubDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnHubDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_securityhub.CfnStandard
class CfnStandardDef(BaseCfnResource):
    standards_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the standard that you want to enable. To view a list of available Security Hub standards and their ARNs, use the ```DescribeStandards`` <https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_DescribeStandards.html>`_ API operation.\n')
    disabled_standards_controls: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnStandard_StandardsControlPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Specifies which controls are to be disabled in a standard. *Maximum* : ``100``')
    _init_params: typing.ClassVar[list[str]] = ['standards_arn', 'disabled_standards_controls']
    _method_names: typing.ClassVar[list[str]] = ['StandardsControlProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnStandard'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_securityhub.CfnStandardDefConfig] = pydantic.Field(None)


class CfnStandardDefConfig(pydantic.BaseModel):
    StandardsControlProperty: typing.Optional[list[models.aws_securityhub.CfnStandardDefStandardscontrolpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_securityhub.CfnStandardDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_securityhub.CfnStandardDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_securityhub.CfnStandardDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_securityhub.CfnStandardDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_securityhub.CfnStandardDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_securityhub.CfnStandardDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_securityhub.CfnStandardDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_securityhub.CfnStandardDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_securityhub.CfnStandardDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_securityhub.CfnStandardDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_securityhub.CfnStandardDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_securityhub.CfnStandardDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_securityhub.CfnStandardDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnStandardDefStandardscontrolpropertyParams(pydantic.BaseModel):
    standards_control_arn: str = pydantic.Field(..., description='')
    reason: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnStandardDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnStandardDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStandardDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnStandardDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStandardDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnStandardDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnStandardDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnStandardDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnStandardDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnStandardDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStandardDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnStandardDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnStandardDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStandardDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_securityhub.CfnAutomationRuleProps
class CfnAutomationRulePropsDef(BaseCfnProperty):
    actions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_AutomationRulesActionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='One or more actions to update finding fields if a finding matches the conditions specified in ``Criteria`` .\n')
    criteria: typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnAutomationRule_AutomationRulesFindingFiltersPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A set of `AWS Security Finding Format (ASFF) <https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format.html>`_ finding field attributes and corresponding expected values that Security Hub uses to filter findings. If a rule is enabled and a finding matches the criteria specified in this parameter, Security Hub applies the rule action to the finding.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the rule.\n')
    is_terminal: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Specifies whether a rule is the last to be applied with respect to a finding that matches the rule criteria. This is useful when a finding matches the criteria for multiple rules, and each rule has different actions. If a rule is terminal, Security Hub applies the rule action to a finding that matches the rule criteria and doesn't evaluate other rules for the finding. By default, a rule isn't terminal.\n")
    rule_name: typing.Optional[str] = pydantic.Field(None, description='The name of the rule.\n')
    rule_order: typing.Union[int, float, None] = pydantic.Field(None, description='An integer ranging from 1 to 1000 that represents the order in which the rule action is applied to findings. Security Hub applies rules with lower values for this parameter first.\n')
    rule_status: typing.Optional[str] = pydantic.Field(None, description='Whether the rule is active after it is created. If this parameter is equal to ``ENABLED`` , Security Hub applies the rule to findings and finding updates after the rule is created.\n')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='User-defined tags that help you label the purpose of a rule.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-securityhub-automationrule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    # id: Any\n    # updated_by: Any\n\n    cfn_automation_rule_props = securityhub.CfnAutomationRuleProps(\n        actions=[securityhub.CfnAutomationRule.AutomationRulesActionProperty(\n            finding_fields_update=securityhub.CfnAutomationRule.AutomationRulesFindingFieldsUpdateProperty(\n                confidence=123,\n                criticality=123,\n                note=securityhub.CfnAutomationRule.NoteUpdateProperty(\n                    text="text",\n                    updated_by=updated_by\n                ),\n                related_findings=[securityhub.CfnAutomationRule.RelatedFindingProperty(\n                    id=id,\n                    product_arn="productArn"\n                )],\n                severity=securityhub.CfnAutomationRule.SeverityUpdateProperty(\n                    label="label",\n                    normalized=123,\n                    product=123\n                ),\n                types=["types"],\n                user_defined_fields={\n                    "user_defined_fields_key": "userDefinedFields"\n                },\n                verification_state="verificationState",\n                workflow=securityhub.CfnAutomationRule.WorkflowUpdateProperty(\n                    status="status"\n                )\n            ),\n            type="type"\n        )],\n        criteria=securityhub.CfnAutomationRule.AutomationRulesFindingFiltersProperty(\n            aws_account_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            company_name=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            compliance_associated_standards_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            compliance_security_control_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            compliance_status=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            confidence=[securityhub.CfnAutomationRule.NumberFilterProperty(\n                eq=123,\n                gte=123,\n                lte=123\n            )],\n            created_at=[securityhub.CfnAutomationRule.DateFilterProperty(\n                date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n                    unit="unit",\n                    value=123\n                ),\n                end="end",\n                start="start"\n            )],\n            criticality=[securityhub.CfnAutomationRule.NumberFilterProperty(\n                eq=123,\n                gte=123,\n                lte=123\n            )],\n            description=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            first_observed_at=[securityhub.CfnAutomationRule.DateFilterProperty(\n                date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n                    unit="unit",\n                    value=123\n                ),\n                end="end",\n                start="start"\n            )],\n            generator_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            id=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            last_observed_at=[securityhub.CfnAutomationRule.DateFilterProperty(\n                date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n                    unit="unit",\n                    value=123\n                ),\n                end="end",\n                start="start"\n            )],\n            note_text=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            note_updated_at=[securityhub.CfnAutomationRule.DateFilterProperty(\n                date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n                    unit="unit",\n                    value=123\n                ),\n                end="end",\n                start="start"\n            )],\n            note_updated_by=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            product_arn=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            product_name=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            record_state=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            related_findings_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            related_findings_product_arn=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_details_other=[securityhub.CfnAutomationRule.MapFilterProperty(\n                comparison="comparison",\n                key="key",\n                value="value"\n            )],\n            resource_id=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_partition=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_region=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            resource_tags=[securityhub.CfnAutomationRule.MapFilterProperty(\n                comparison="comparison",\n                key="key",\n                value="value"\n            )],\n            resource_type=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            severity_label=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            source_url=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            title=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            type=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            updated_at=[securityhub.CfnAutomationRule.DateFilterProperty(\n                date_range=securityhub.CfnAutomationRule.DateRangeProperty(\n                    unit="unit",\n                    value=123\n                ),\n                end="end",\n                start="start"\n            )],\n            user_defined_fields=[securityhub.CfnAutomationRule.MapFilterProperty(\n                comparison="comparison",\n                key="key",\n                value="value"\n            )],\n            verification_state=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )],\n            workflow_status=[securityhub.CfnAutomationRule.StringFilterProperty(\n                comparison="comparison",\n                value="value"\n            )]\n        ),\n        description="description",\n        is_terminal=False,\n        rule_name="ruleName",\n        rule_order=123,\n        rule_status="ruleStatus",\n        tags={\n            "tags_key": "tags"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['actions', 'criteria', 'description', 'is_terminal', 'rule_name', 'rule_order', 'rule_status', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnAutomationRuleProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnHubProps
class CfnHubPropsDef(BaseCfnProperty):
    auto_enable_controls: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Whether to automatically enable new controls when they are added to standards that are enabled. By default, this is set to ``true`` , and new controls are enabled automatically. To not automatically enable new controls, set this to ``false`` .\n')
    control_finding_generator: typing.Optional[str] = pydantic.Field(None, description="Specifies whether an account has consolidated control findings turned on or off. If the value for this field is set to ``SECURITY_CONTROL`` , Security Hub generates a single finding for a control check even when the check applies to multiple enabled standards. If the value for this field is set to ``STANDARD_CONTROL`` , Security Hub generates separate findings for a control check when the check applies to multiple enabled standards. The value for this field in a member account matches the value in the administrator account. For accounts that aren't part of an organization, the default value of this field is ``SECURITY_CONTROL`` if you enabled Security Hub on or after February 23, 2023.\n")
    enable_default_standards: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description="Whether to enable the security standards that Security Hub has designated as automatically enabled. If you don't provide a value for ``EnableDefaultStandards`` , it is set to ``true`` , and the designated standards are automatically enabled in each AWS Region where you enable Security Hub . If you don't want to enable the designated standards, set ``EnableDefaultStandards`` to ``false`` . Currently, the automatically enabled standards are the Center for Internet Security (CIS) AWS Foundations Benchmark v1.2.0 and AWS Foundational Security Best Practices (FSBP).\n")
    tags: typing.Any = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-securityhub-hub.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    # tags: Any\n\n    cfn_hub_props = securityhub.CfnHubProps(\n        auto_enable_controls=False,\n        control_finding_generator="controlFindingGenerator",\n        enable_default_standards=False,\n        tags=tags\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['auto_enable_controls', 'control_finding_generator', 'enable_default_standards', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnHubProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_securityhub.CfnStandardProps
class CfnStandardPropsDef(BaseCfnProperty):
    standards_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN of the standard that you want to enable. To view a list of available Security Hub standards and their ARNs, use the ```DescribeStandards`` <https://docs.aws.amazon.com/securityhub/1.0/APIReference/API_DescribeStandards.html>`_ API operation.\n')
    disabled_standards_controls: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_securityhub.CfnStandard_StandardsControlPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Specifies which controls are to be disabled in a standard. *Maximum* : ``100``\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-securityhub-standard.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_securityhub as securityhub\n\n    cfn_standard_props = securityhub.CfnStandardProps(\n        standards_arn="standardsArn",\n\n        # the properties below are optional\n        disabled_standards_controls=[securityhub.CfnStandard.StandardsControlProperty(\n            standards_control_arn="standardsControlArn",\n\n            # the properties below are optional\n            reason="reason"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['standards_arn', 'disabled_standards_controls']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_securityhub.CfnStandardProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnAutomationRule_AutomationRulesActionProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_AutomationRulesActionPropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_AutomationRulesFindingFieldsUpdateProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_AutomationRulesFindingFieldsUpdatePropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_AutomationRulesFindingFiltersProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_AutomationRulesFindingFiltersPropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_DateFilterProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_DateFilterPropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_DateRangeProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_DateRangePropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_MapFilterProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_MapFilterPropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_NoteUpdateProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_NoteUpdatePropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_NumberFilterProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_NumberFilterPropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_RelatedFindingProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_RelatedFindingPropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_SeverityUpdateProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_SeverityUpdatePropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_StringFilterProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_StringFilterPropertyDef]] = pydantic.Field(None)
    CfnAutomationRule_WorkflowUpdateProperty: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRule_WorkflowUpdatePropertyDef]] = pydantic.Field(None)
    CfnStandard_StandardsControlProperty: typing.Optional[dict[str, models.aws_securityhub.CfnStandard_StandardsControlPropertyDef]] = pydantic.Field(None)
    CfnAutomationRule: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRuleDef]] = pydantic.Field(None)
    CfnHub: typing.Optional[dict[str, models.aws_securityhub.CfnHubDef]] = pydantic.Field(None)
    CfnStandard: typing.Optional[dict[str, models.aws_securityhub.CfnStandardDef]] = pydantic.Field(None)
    CfnAutomationRuleProps: typing.Optional[dict[str, models.aws_securityhub.CfnAutomationRulePropsDef]] = pydantic.Field(None)
    CfnHubProps: typing.Optional[dict[str, models.aws_securityhub.CfnHubPropsDef]] = pydantic.Field(None)
    CfnStandardProps: typing.Optional[dict[str, models.aws_securityhub.CfnStandardPropsDef]] = pydantic.Field(None)
    ...

import models
