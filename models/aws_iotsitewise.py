from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_iotsitewise.CfnAccessPolicy.AccessPolicyIdentityProperty
class CfnAccessPolicy_AccessPolicyIdentityPropertyDef(BaseStruct):
    iam_role: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAccessPolicy_IamRolePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An IAM role identity.\n')
    iam_user: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAccessPolicy_IamUserPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An IAM user identity.\n')
    user: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAccessPolicy_UserPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The IAM Identity Center user to which this access policy maps.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-accesspolicy-accesspolicyidentity.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    access_policy_identity_property = iotsitewise.CfnAccessPolicy.AccessPolicyIdentityProperty(\n        iam_role=iotsitewise.CfnAccessPolicy.IamRoleProperty(\n            arn="arn"\n        ),\n        iam_user=iotsitewise.CfnAccessPolicy.IamUserProperty(\n            arn="arn"\n        ),\n        user=iotsitewise.CfnAccessPolicy.UserProperty(\n            id="id"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['iam_role', 'iam_user', 'user']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAccessPolicy.AccessPolicyIdentityProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAccessPolicy.AccessPolicyResourceProperty
class CfnAccessPolicy_AccessPolicyResourcePropertyDef(BaseStruct):
    portal: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAccessPolicy_PortalPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The AWS IoT SiteWise Monitor portal for this access policy.\n')
    project: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAccessPolicy_ProjectPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The AWS IoT SiteWise Monitor project for this access policy.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-accesspolicy-accesspolicyresource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    access_policy_resource_property = iotsitewise.CfnAccessPolicy.AccessPolicyResourceProperty(\n        portal=iotsitewise.CfnAccessPolicy.PortalProperty(\n            id="id"\n        ),\n        project=iotsitewise.CfnAccessPolicy.ProjectProperty(\n            id="id"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['portal', 'project']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAccessPolicy.AccessPolicyResourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAccessPolicy.IamRoleProperty
class CfnAccessPolicy_IamRolePropertyDef(BaseStruct):
    arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the IAM role. For more information, see `IAM ARNs <https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html>`_ in the *IAM User Guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-accesspolicy-iamrole.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    iam_role_property = iotsitewise.CfnAccessPolicy.IamRoleProperty(\n        arn="arn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAccessPolicy.IamRoleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAccessPolicy.IamUserProperty
class CfnAccessPolicy_IamUserPropertyDef(BaseStruct):
    arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the IAM user. For more information, see `IAM ARNs <https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html>`_ in the *IAM User Guide* . .. epigraph:: If you delete the IAM user, access policies that contain this identity include an empty ``arn`` . You can delete the access policy for the IAM user that no longer exists.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-accesspolicy-iamuser.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    iam_user_property = iotsitewise.CfnAccessPolicy.IamUserProperty(\n        arn="arn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAccessPolicy.IamUserProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAccessPolicy.PortalProperty
class CfnAccessPolicy_PortalPropertyDef(BaseStruct):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAccessPolicy.PortalProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAccessPolicy.ProjectProperty
class CfnAccessPolicy_ProjectPropertyDef(BaseStruct):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAccessPolicy.ProjectProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAccessPolicy.UserProperty
class CfnAccessPolicy_UserPropertyDef(BaseStruct):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAccessPolicy.UserProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAsset.AssetHierarchyProperty
class CfnAsset_AssetHierarchyPropertyDef(BaseStruct):
    child_asset_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Id of the child asset.\n')
    logical_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ``LogicalID`` of the hierarchy. This ID is a ``hierarchyLogicalId`` . The maximum length is 256 characters, with the pattern ``[^\\u0000-\\u001F\\u007F]+`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-asset-assethierarchy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    asset_hierarchy_property = iotsitewise.CfnAsset.AssetHierarchyProperty(\n        child_asset_id="childAssetId",\n        logical_id="logicalId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['child_asset_id', 'logical_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAsset.AssetHierarchyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAsset.AssetPropertyProperty
class CfnAsset_AssetPropertyPropertyDef(BaseStruct):
    logical_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ``LogicalID`` of the asset property. The maximum length is 256 characters, with the pattern ``[^\\u0000-\\u001F\\u007F]+`` .\n')
    alias: typing.Optional[str] = pydantic.Field(None, description='The property alias that identifies the property, such as an OPC-UA server data stream path (for example, ``/company/windfarm/3/turbine/7/temperature`` ). For more information, see `Mapping industrial data streams to asset properties <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/connect-data-streams.html>`_ in the *AWS IoT SiteWise User Guide* . The property alias must have 1-1000 characters.\n')
    notification_state: typing.Optional[str] = pydantic.Field(None, description='The MQTT notification state ( ``ENABLED`` or ``DISABLED`` ) for this asset property. When the notification state is ``ENABLED`` , AWS IoT SiteWise publishes property value updates to a unique MQTT topic. For more information, see `Interacting with other services <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/interact-with-other-services.html>`_ in the *AWS IoT SiteWise User Guide* . If you omit this parameter, the notification state is set to ``DISABLED`` . .. epigraph:: You must use all caps for the NotificationState parameter. If you use lower case letters, you will receive a schema validation error.\n')
    unit: typing.Optional[str] = pydantic.Field(None, description='The unit (such as ``Newtons`` or ``RPM`` ) of the asset property.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-asset-assetproperty.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    asset_property_property = iotsitewise.CfnAsset.AssetPropertyProperty(\n        logical_id="logicalId",\n\n        # the properties below are optional\n        alias="alias",\n        notification_state="notificationState",\n        unit="unit"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['logical_id', 'alias', 'notification_state', 'unit']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAsset.AssetPropertyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAssetModel.AssetModelCompositeModelProperty
class CfnAssetModel_AssetModelCompositeModelPropertyDef(BaseStruct):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the composite model.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of the composite model. For alarm composite models, this type is ``AWS/ALARM`` .\n')
    composite_model_properties: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_AssetModelPropertyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The asset property definitions for this composite model.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the composite model.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-assetmodel-assetmodelcompositemodel.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    asset_model_composite_model_property = iotsitewise.CfnAssetModel.AssetModelCompositeModelProperty(\n        name="name",\n        type="type",\n\n        # the properties below are optional\n        composite_model_properties=[iotsitewise.CfnAssetModel.AssetModelPropertyProperty(\n            data_type="dataType",\n            logical_id="logicalId",\n            name="name",\n            type=iotsitewise.CfnAssetModel.PropertyTypeProperty(\n                type_name="typeName",\n\n                # the properties below are optional\n                attribute=iotsitewise.CfnAssetModel.AttributeProperty(\n                    default_value="defaultValue"\n                ),\n                metric=iotsitewise.CfnAssetModel.MetricProperty(\n                    expression="expression",\n                    variables=[iotsitewise.CfnAssetModel.ExpressionVariableProperty(\n                        name="name",\n                        value=iotsitewise.CfnAssetModel.VariableValueProperty(\n                            property_logical_id="propertyLogicalId",\n\n                            # the properties below are optional\n                            hierarchy_logical_id="hierarchyLogicalId"\n                        )\n                    )],\n                    window=iotsitewise.CfnAssetModel.MetricWindowProperty(\n                        tumbling=iotsitewise.CfnAssetModel.TumblingWindowProperty(\n                            interval="interval",\n\n                            # the properties below are optional\n                            offset="offset"\n                        )\n                    )\n                ),\n                transform=iotsitewise.CfnAssetModel.TransformProperty(\n                    expression="expression",\n                    variables=[iotsitewise.CfnAssetModel.ExpressionVariableProperty(\n                        name="name",\n                        value=iotsitewise.CfnAssetModel.VariableValueProperty(\n                            property_logical_id="propertyLogicalId",\n\n                            # the properties below are optional\n                            hierarchy_logical_id="hierarchyLogicalId"\n                        )\n                    )]\n                )\n            ),\n\n            # the properties below are optional\n            data_type_spec="dataTypeSpec",\n            unit="unit"\n        )],\n        description="description"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'type', 'composite_model_properties', 'description']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAssetModel.AssetModelCompositeModelProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAssetModel.AssetModelHierarchyProperty
class CfnAssetModel_AssetModelHierarchyPropertyDef(BaseStruct):
    child_asset_model_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Id of the asset model.\n')
    logical_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ``LogicalID`` of the asset model hierarchy. This ID is a ``hierarchyLogicalId`` . The maximum length is 256 characters, with the pattern ``[^\\u0000-\\u001F\\u007F]+``\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the asset model hierarchy. The maximum length is 256 characters with the pattern ``[^\\u0000-\\u001F\\u007F]+`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-assetmodel-assetmodelhierarchy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    asset_model_hierarchy_property = iotsitewise.CfnAssetModel.AssetModelHierarchyProperty(\n        child_asset_model_id="childAssetModelId",\n        logical_id="logicalId",\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['child_asset_model_id', 'logical_id', 'name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAssetModel.AssetModelHierarchyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAssetModel.AssetModelPropertyProperty
class CfnAssetModel_AssetModelPropertyPropertyDef(BaseStruct):
    data_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The data type of the asset model property. The value can be ``STRING`` , ``INTEGER`` , ``DOUBLE`` , ``BOOLEAN`` , or ``STRUCT`` .\n')
    logical_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ``LogicalID`` of the asset model property. The maximum length is 256 characters, with the pattern ``[^\\\\u0000-\\\\u001F\\\\u007F]+`` .\n')
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the asset model property. The maximum length is 256 characters with the pattern ``[^\\u0000-\\u001F\\u007F]+`` .\n')
    type: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_PropertyTypePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Contains a property type, which can be one of ``Attribute`` , ``Measurement`` , ``Metric`` , or ``Transform`` .\n')
    data_type_spec: typing.Optional[str] = pydantic.Field(None, description='The data type of the structure for this property. This parameter exists on properties that have the ``STRUCT`` data type.\n')
    unit: typing.Optional[str] = pydantic.Field(None, description='The unit of the asset model property, such as ``Newtons`` or ``RPM`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-assetmodel-assetmodelproperty.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    asset_model_property_property = iotsitewise.CfnAssetModel.AssetModelPropertyProperty(\n        data_type="dataType",\n        logical_id="logicalId",\n        name="name",\n        type=iotsitewise.CfnAssetModel.PropertyTypeProperty(\n            type_name="typeName",\n\n            # the properties below are optional\n            attribute=iotsitewise.CfnAssetModel.AttributeProperty(\n                default_value="defaultValue"\n            ),\n            metric=iotsitewise.CfnAssetModel.MetricProperty(\n                expression="expression",\n                variables=[iotsitewise.CfnAssetModel.ExpressionVariableProperty(\n                    name="name",\n                    value=iotsitewise.CfnAssetModel.VariableValueProperty(\n                        property_logical_id="propertyLogicalId",\n\n                        # the properties below are optional\n                        hierarchy_logical_id="hierarchyLogicalId"\n                    )\n                )],\n                window=iotsitewise.CfnAssetModel.MetricWindowProperty(\n                    tumbling=iotsitewise.CfnAssetModel.TumblingWindowProperty(\n                        interval="interval",\n\n                        # the properties below are optional\n                        offset="offset"\n                    )\n                )\n            ),\n            transform=iotsitewise.CfnAssetModel.TransformProperty(\n                expression="expression",\n                variables=[iotsitewise.CfnAssetModel.ExpressionVariableProperty(\n                    name="name",\n                    value=iotsitewise.CfnAssetModel.VariableValueProperty(\n                        property_logical_id="propertyLogicalId",\n\n                        # the properties below are optional\n                        hierarchy_logical_id="hierarchyLogicalId"\n                    )\n                )]\n            )\n        ),\n\n        # the properties below are optional\n        data_type_spec="dataTypeSpec",\n        unit="unit"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['data_type', 'logical_id', 'name', 'type', 'data_type_spec', 'unit']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAssetModel.AssetModelPropertyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAssetModel.AttributeProperty
class CfnAssetModel_AttributePropertyDef(BaseStruct):
    default_value: typing.Optional[str] = pydantic.Field(None, description='The default value of the asset model property attribute. All assets that you create from the asset model contain this attribute value. You can update an attribute\'s value after you create an asset. For more information, see `Updating attribute values <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/update-attribute-values.html>`_ in the *AWS IoT SiteWise User Guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-assetmodel-attribute.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    attribute_property = iotsitewise.CfnAssetModel.AttributeProperty(\n        default_value="defaultValue"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['default_value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAssetModel.AttributeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAssetModel.ExpressionVariableProperty
class CfnAssetModel_ExpressionVariablePropertyDef(BaseStruct):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The friendly name of the variable to be used in the expression. The maximum length is 64 characters with the pattern ``^[a-z][a-z0-9_]*$`` .\n')
    value: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_VariableValuePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The variable that identifies an asset property from which to use values.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-assetmodel-expressionvariable.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    expression_variable_property = iotsitewise.CfnAssetModel.ExpressionVariableProperty(\n        name="name",\n        value=iotsitewise.CfnAssetModel.VariableValueProperty(\n            property_logical_id="propertyLogicalId",\n\n            # the properties below are optional\n            hierarchy_logical_id="hierarchyLogicalId"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAssetModel.ExpressionVariableProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAssetModel.MetricProperty
class CfnAssetModel_MetricPropertyDef(BaseStruct):
    expression: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The mathematical expression that defines the metric aggregation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`_ in the *AWS IoT SiteWise User Guide* .\n')
    variables: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_ExpressionVariablePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The list of variables used in the expression.\n')
    window: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_MetricWindowPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The window (time interval) over which AWS IoT SiteWise computes the metric\'s aggregation expression. AWS IoT SiteWise computes one data point per ``window`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-assetmodel-metric.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    metric_property = iotsitewise.CfnAssetModel.MetricProperty(\n        expression="expression",\n        variables=[iotsitewise.CfnAssetModel.ExpressionVariableProperty(\n            name="name",\n            value=iotsitewise.CfnAssetModel.VariableValueProperty(\n                property_logical_id="propertyLogicalId",\n\n                # the properties below are optional\n                hierarchy_logical_id="hierarchyLogicalId"\n            )\n        )],\n        window=iotsitewise.CfnAssetModel.MetricWindowProperty(\n            tumbling=iotsitewise.CfnAssetModel.TumblingWindowProperty(\n                interval="interval",\n\n                # the properties below are optional\n                offset="offset"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['expression', 'variables', 'window']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAssetModel.MetricProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAssetModel.MetricWindowProperty
class CfnAssetModel_MetricWindowPropertyDef(BaseStruct):
    tumbling: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_TumblingWindowPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The tumbling time interval window.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-assetmodel-metricwindow.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    metric_window_property = iotsitewise.CfnAssetModel.MetricWindowProperty(\n        tumbling=iotsitewise.CfnAssetModel.TumblingWindowProperty(\n            interval="interval",\n\n            # the properties below are optional\n            offset="offset"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['tumbling']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAssetModel.MetricWindowProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAssetModel.PropertyTypeProperty
class CfnAssetModel_PropertyTypePropertyDef(BaseStruct):
    type_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type of property type, which can be one of ``Attribute`` , ``Measurement`` , ``Metric`` , or ``Transform`` .\n')
    attribute: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_AttributePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies an asset attribute property. An attribute generally contains static information, such as the serial number of an `industrial IoT <https://docs.aws.amazon.com/https://en.wikipedia.org/wiki/Internet_of_things#Industrial_applications>`_ wind turbine. This is required if the ``TypeName`` is ``Attribute`` and has a ``DefaultValue`` .\n')
    metric: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_MetricPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies an asset metric property. A metric contains a mathematical expression that uses aggregate functions to process all input data points over a time interval and output a single data point, such as to calculate the average hourly temperature. This is required if the ``TypeName`` is ``Metric`` .\n')
    transform: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_TransformPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies an asset transform property. A transform contains a mathematical expression that maps a property\'s data points from one form to another, such as a unit conversion from Celsius to Fahrenheit. This is required if the ``TypeName`` is ``Transform`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-assetmodel-propertytype.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    property_type_property = iotsitewise.CfnAssetModel.PropertyTypeProperty(\n        type_name="typeName",\n\n        # the properties below are optional\n        attribute=iotsitewise.CfnAssetModel.AttributeProperty(\n            default_value="defaultValue"\n        ),\n        metric=iotsitewise.CfnAssetModel.MetricProperty(\n            expression="expression",\n            variables=[iotsitewise.CfnAssetModel.ExpressionVariableProperty(\n                name="name",\n                value=iotsitewise.CfnAssetModel.VariableValueProperty(\n                    property_logical_id="propertyLogicalId",\n\n                    # the properties below are optional\n                    hierarchy_logical_id="hierarchyLogicalId"\n                )\n            )],\n            window=iotsitewise.CfnAssetModel.MetricWindowProperty(\n                tumbling=iotsitewise.CfnAssetModel.TumblingWindowProperty(\n                    interval="interval",\n\n                    # the properties below are optional\n                    offset="offset"\n                )\n            )\n        ),\n        transform=iotsitewise.CfnAssetModel.TransformProperty(\n            expression="expression",\n            variables=[iotsitewise.CfnAssetModel.ExpressionVariableProperty(\n                name="name",\n                value=iotsitewise.CfnAssetModel.VariableValueProperty(\n                    property_logical_id="propertyLogicalId",\n\n                    # the properties below are optional\n                    hierarchy_logical_id="hierarchyLogicalId"\n                )\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type_name', 'attribute', 'metric', 'transform']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAssetModel.PropertyTypeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAssetModel.TransformProperty
class CfnAssetModel_TransformPropertyDef(BaseStruct):
    expression: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The mathematical expression that defines the transformation function. You can specify up to 10 variables per expression. You can specify up to 10 functions per expression. For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`_ in the *AWS IoT SiteWise User Guide* .\n')
    variables: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_ExpressionVariablePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The list of variables used in the expression.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-assetmodel-transform.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    transform_property = iotsitewise.CfnAssetModel.TransformProperty(\n        expression="expression",\n        variables=[iotsitewise.CfnAssetModel.ExpressionVariableProperty(\n            name="name",\n            value=iotsitewise.CfnAssetModel.VariableValueProperty(\n                property_logical_id="propertyLogicalId",\n\n                # the properties below are optional\n                hierarchy_logical_id="hierarchyLogicalId"\n            )\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['expression', 'variables']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAssetModel.TransformProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAssetModel.TumblingWindowProperty
class CfnAssetModel_TumblingWindowPropertyDef(BaseStruct):
    interval: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The time interval for the tumbling window. The interval time must be between 1 minute and 1 week. AWS IoT SiteWise computes the ``1w`` interval the end of Sunday at midnight each week (UTC), the ``1d`` interval at the end of each day at midnight (UTC), the ``1h`` interval at the end of each hour, and so on. When AWS IoT SiteWise aggregates data points for metric computations, the start of each interval is exclusive and the end of each interval is inclusive. AWS IoT SiteWise places the computed data point at the end of the interval.\n')
    offset: typing.Optional[str] = pydantic.Field(None, description='The offset for the tumbling window. The ``offset`` parameter accepts the following:. - The offset time. For example, if you specify ``18h`` for ``offset`` and ``1d`` for ``interval`` , AWS IoT SiteWise aggregates data in one of the following ways: - If you create the metric before or at 6 PM (UTC), you get the first aggregation result at 6 PM (UTC) on the day when you create the metric. - If you create the metric after 6 PM (UTC), you get the first aggregation result at 6 PM (UTC) the next day. - The ISO 8601 format. For example, if you specify ``PT18H`` for ``offset`` and ``1d`` for ``interval`` , AWS IoT SiteWise aggregates data in one of the following ways: - If you create the metric before or at 6 PM (UTC), you get the first aggregation result at 6 PM (UTC) on the day when you create the metric. - If you create the metric after 6 PM (UTC), you get the first aggregation result at 6 PM (UTC) the next day. - The 24-hour clock. For example, if you specify ``00:03:00`` for ``offset`` , ``5m`` for ``interval`` , and you create the metric at 2 PM (UTC), you get the first aggregation result at 2:03 PM (UTC). You get the second aggregation result at 2:08 PM (UTC). - The offset time zone. For example, if you specify ``2021-07-23T18:00-08`` for ``offset`` and ``1d`` for ``interval`` , AWS IoT SiteWise aggregates data in one of the following ways: - If you create the metric before or at 6 PM (PST), you get the first aggregation result at 6 PM (PST) on the day when you create the metric. - If you create the metric after 6 PM (PST), you get the first aggregation result at 6 PM (PST) the next day.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-assetmodel-tumblingwindow.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    tumbling_window_property = iotsitewise.CfnAssetModel.TumblingWindowProperty(\n        interval="interval",\n\n        # the properties below are optional\n        offset="offset"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['interval', 'offset']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAssetModel.TumblingWindowProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAssetModel.VariableValueProperty
class CfnAssetModel_VariableValuePropertyDef(BaseStruct):
    property_logical_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ``LogicalID`` of the property to use as the variable.\n')
    hierarchy_logical_id: typing.Optional[str] = pydantic.Field(None, description='The ``LogicalID`` of the hierarchy to query for the ``PropertyLogicalID`` . You use a ``hierarchyLogicalID`` instead of a model ID because you can have several hierarchies using the same model and therefore the same property. For example, you might have separately grouped assets that come from the same asset model. For more information, see `Defining relationships between assets <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`_ in the *AWS IoT SiteWise User Guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-assetmodel-variablevalue.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    variable_value_property = iotsitewise.CfnAssetModel.VariableValueProperty(\n        property_logical_id="propertyLogicalId",\n\n        # the properties below are optional\n        hierarchy_logical_id="hierarchyLogicalId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['property_logical_id', 'hierarchy_logical_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAssetModel.VariableValueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnGateway.GatewayCapabilitySummaryProperty
class CfnGateway_GatewayCapabilitySummaryPropertyDef(BaseStruct):
    capability_namespace: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The namespace of the capability configuration. For example, if you configure OPC-UA sources from the AWS IoT SiteWise console, your OPC-UA capability configuration has the namespace ``iotsitewise:opcuacollector:version`` , where ``version`` is a number such as ``1`` . The maximum length is 512 characters with the pattern ``^[a-zA-Z]+:[a-zA-Z]+:[0-9]+$`` .\n')
    capability_configuration: typing.Optional[str] = pydantic.Field(None, description='The JSON document that defines the configuration for the gateway capability. For more information, see `Configuring data sources (CLI) <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/configure-sources.html#configure-source-cli>`_ in the *AWS IoT SiteWise User Guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-gateway-gatewaycapabilitysummary.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    gateway_capability_summary_property = iotsitewise.CfnGateway.GatewayCapabilitySummaryProperty(\n        capability_namespace="capabilityNamespace",\n\n        # the properties below are optional\n        capability_configuration="capabilityConfiguration"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['capability_namespace', 'capability_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnGateway.GatewayCapabilitySummaryProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnGateway.GatewayPlatformProperty
class CfnGateway_GatewayPlatformPropertyDef(BaseStruct):
    greengrass: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnGateway_GreengrassPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A gateway that runs on AWS IoT Greengrass .\n')
    greengrass_v2: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnGateway_GreengrassV2PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A gateway that runs on AWS IoT Greengrass V2.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-gateway-gatewayplatform.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    gateway_platform_property = iotsitewise.CfnGateway.GatewayPlatformProperty(\n        greengrass=iotsitewise.CfnGateway.GreengrassProperty(\n            group_arn="groupArn"\n        ),\n        greengrass_v2=iotsitewise.CfnGateway.GreengrassV2Property(\n            core_device_thing_name="coreDeviceThingName"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['greengrass', 'greengrass_v2']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnGateway.GatewayPlatformProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnGateway.GreengrassProperty
class CfnGateway_GreengrassPropertyDef(BaseStruct):
    group_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`_ of the Greengrass group. For more information about how to find a group\'s ARN, see `ListGroups <https://docs.aws.amazon.com/greengrass/latest/apireference/listgroups-get.html>`_ and `GetGroup <https://docs.aws.amazon.com/greengrass/latest/apireference/getgroup-get.html>`_ in the *AWS IoT Greengrass API Reference* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-gateway-greengrass.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    greengrass_property = iotsitewise.CfnGateway.GreengrassProperty(\n        group_arn="groupArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['group_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnGateway.GreengrassProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnGateway.GreengrassV2Property
class CfnGateway_GreengrassV2PropertyDef(BaseStruct):
    core_device_thing_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the AWS IoT thing for your AWS IoT Greengrass V2 core device.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-gateway-greengrassv2.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    greengrass_v2_property = iotsitewise.CfnGateway.GreengrassV2Property(\n        core_device_thing_name="coreDeviceThingName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['core_device_thing_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnGateway.GreengrassV2Property'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnPortal.AlarmsProperty
class CfnPortal_AlarmsPropertyDef(BaseStruct):
    alarm_role_arn: typing.Optional[str] = pydantic.Field(None, description='The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`_ of the IAM role that allows the alarm to perform actions and access AWS resources and services, such as AWS IoT Events .\n')
    notification_lambda_arn: typing.Optional[str] = pydantic.Field(None, description='The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`_ of the Lambda function that manages alarm notifications. For more information, see `Managing alarm notifications <https://docs.aws.amazon.com/iotevents/latest/developerguide/lambda-support.html>`_ in the *AWS IoT Events Developer Guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-iotsitewise-portal-alarms.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    alarms_property = iotsitewise.CfnPortal.AlarmsProperty(\n        alarm_role_arn="alarmRoleArn",\n        notification_lambda_arn="notificationLambdaArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['alarm_role_arn', 'notification_lambda_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnPortal.AlarmsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAccessPolicy
class CfnAccessPolicyDef(BaseCfnResource):
    access_policy_identity: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotsitewise.CfnAccessPolicy_AccessPolicyIdentityPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identity for this access policy. Choose an IAM Identity Center user, an IAM Identity Center group, or an IAM user.\n')
    access_policy_permission: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The permission level for this access policy. Choose either a ``ADMINISTRATOR`` or ``VIEWER`` . Note that a project ``ADMINISTRATOR`` is also known as a project owner.\n')
    access_policy_resource: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotsitewise.CfnAccessPolicy_AccessPolicyResourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The AWS IoT SiteWise Monitor resource for this access policy. Choose either a portal or a project.')
    _init_params: typing.ClassVar[list[str]] = ['access_policy_identity', 'access_policy_permission', 'access_policy_resource']
    _method_names: typing.ClassVar[list[str]] = ['AccessPolicyIdentityProperty', 'AccessPolicyResourceProperty', 'IamRoleProperty', 'IamUserProperty', 'PortalProperty', 'ProjectProperty', 'UserProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAccessPolicy'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_iotsitewise.CfnAccessPolicyDefConfig] = pydantic.Field(None)


class CfnAccessPolicyDefConfig(pydantic.BaseModel):
    AccessPolicyIdentityProperty: typing.Optional[list[models.aws_iotsitewise.CfnAccessPolicyDefAccesspolicyidentitypropertyParams]] = pydantic.Field(None, description='')
    AccessPolicyResourceProperty: typing.Optional[list[models.aws_iotsitewise.CfnAccessPolicyDefAccesspolicyresourcepropertyParams]] = pydantic.Field(None, description='')
    IamRoleProperty: typing.Optional[list[models.aws_iotsitewise.CfnAccessPolicyDefIamrolepropertyParams]] = pydantic.Field(None, description='')
    IamUserProperty: typing.Optional[list[models.aws_iotsitewise.CfnAccessPolicyDefIamuserpropertyParams]] = pydantic.Field(None, description='')
    PortalProperty: typing.Optional[list[models.aws_iotsitewise.CfnAccessPolicyDefPortalpropertyParams]] = pydantic.Field(None, description='')
    ProjectProperty: typing.Optional[list[models.aws_iotsitewise.CfnAccessPolicyDefProjectpropertyParams]] = pydantic.Field(None, description='')
    UserProperty: typing.Optional[list[models.aws_iotsitewise.CfnAccessPolicyDefUserpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_iotsitewise.CfnAccessPolicyDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_iotsitewise.CfnAccessPolicyDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_iotsitewise.CfnAccessPolicyDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_iotsitewise.CfnAccessPolicyDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_iotsitewise.CfnAccessPolicyDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_iotsitewise.CfnAccessPolicyDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_iotsitewise.CfnAccessPolicyDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_iotsitewise.CfnAccessPolicyDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_iotsitewise.CfnAccessPolicyDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_iotsitewise.CfnAccessPolicyDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_iotsitewise.CfnAccessPolicyDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_iotsitewise.CfnAccessPolicyDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_iotsitewise.CfnAccessPolicyDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnAccessPolicyDefAccesspolicyidentitypropertyParams(pydantic.BaseModel):
    iam_role: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAccessPolicy_IamRolePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    iam_user: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAccessPolicy_IamUserPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    user: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAccessPolicy_UserPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnAccessPolicyDefAccesspolicyresourcepropertyParams(pydantic.BaseModel):
    portal: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAccessPolicy_PortalPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    project: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAccessPolicy_ProjectPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnAccessPolicyDefIamrolepropertyParams(pydantic.BaseModel):
    arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAccessPolicyDefIamuserpropertyParams(pydantic.BaseModel):
    arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAccessPolicyDefPortalpropertyParams(pydantic.BaseModel):
    id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAccessPolicyDefProjectpropertyParams(pydantic.BaseModel):
    id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAccessPolicyDefUserpropertyParams(pydantic.BaseModel):
    id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAccessPolicyDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnAccessPolicyDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAccessPolicyDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnAccessPolicyDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAccessPolicyDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnAccessPolicyDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnAccessPolicyDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnAccessPolicyDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnAccessPolicyDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnAccessPolicyDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAccessPolicyDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnAccessPolicyDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnAccessPolicyDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAccessPolicyDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotsitewise.CfnAsset
class CfnAssetDef(BaseCfnResource):
    asset_model_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the asset model from which to create the asset.\n')
    asset_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A unique, friendly name for the asset. The maximum length is 256 characters with the pattern ``[^\\u0000-\\u001F\\u007F]+`` .\n')
    asset_description: typing.Optional[str] = pydantic.Field(None, description='A description for the asset.\n')
    asset_hierarchies: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAsset_AssetHierarchyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of asset hierarchies that each contain a ``hierarchyLogicalId`` . A hierarchy specifies allowed parent/child asset relationships.\n')
    asset_properties: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAsset_AssetPropertyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="The list of asset properties for the asset. This object doesn't include properties that you define in composite models. You can find composite model properties in the ``assetCompositeModels`` object.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that contain metadata for the asset. For more information, see `Tagging your AWS IoT SiteWise resources <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html>`_ in the *AWS IoT SiteWise User Guide* .')
    _init_params: typing.ClassVar[list[str]] = ['asset_model_id', 'asset_name', 'asset_description', 'asset_hierarchies', 'asset_properties', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AssetHierarchyProperty', 'AssetPropertyProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAsset'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_iotsitewise.CfnAssetDefConfig] = pydantic.Field(None)


class CfnAssetDefConfig(pydantic.BaseModel):
    AssetHierarchyProperty: typing.Optional[list[models.aws_iotsitewise.CfnAssetDefAssethierarchypropertyParams]] = pydantic.Field(None, description='')
    AssetPropertyProperty: typing.Optional[list[models.aws_iotsitewise.CfnAssetDefAssetpropertypropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_iotsitewise.CfnAssetDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_iotsitewise.CfnAssetDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_iotsitewise.CfnAssetDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_iotsitewise.CfnAssetDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_iotsitewise.CfnAssetDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_iotsitewise.CfnAssetDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_iotsitewise.CfnAssetDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_iotsitewise.CfnAssetDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_iotsitewise.CfnAssetDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_iotsitewise.CfnAssetDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_iotsitewise.CfnAssetDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_iotsitewise.CfnAssetDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_iotsitewise.CfnAssetDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnAssetDefAssethierarchypropertyParams(pydantic.BaseModel):
    child_asset_id: str = pydantic.Field(..., description='')
    logical_id: str = pydantic.Field(..., description='')
    ...

class CfnAssetDefAssetpropertypropertyParams(pydantic.BaseModel):
    logical_id: str = pydantic.Field(..., description='')
    alias: typing.Optional[str] = pydantic.Field(None, description='')
    notification_state: typing.Optional[str] = pydantic.Field(None, description='')
    unit: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAssetDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnAssetDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAssetDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnAssetDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAssetDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnAssetDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnAssetDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnAssetDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnAssetDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnAssetDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAssetDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnAssetDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnAssetDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAssetDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotsitewise.CfnAssetModel
class CfnAssetModelDef(BaseCfnResource):
    asset_model_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A unique, friendly name for the asset model. The maximum length is 256 characters with the pattern ``[^\\u0000-\\u001F\\u007F]+`` .\n')
    asset_model_composite_models: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_AssetModelCompositeModelPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties. Each composite model has a type that defines the properties that the composite model supports. You can use composite asset models to define alarms on this asset model.\n')
    asset_model_description: typing.Optional[str] = pydantic.Field(None, description='A description for the asset model.\n')
    asset_model_hierarchies: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_AssetModelHierarchyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. For more information, see `Defining relationships between assets <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`_ in the *AWS IoT SiteWise User Guide* . You can specify up to 10 hierarchies per asset model. For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`_ in the *AWS IoT SiteWise User Guide* .\n')
    asset_model_properties: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_AssetModelPropertyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The property definitions of the asset model. For more information, see `Defining data properties <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-properties.html>`_ in the *AWS IoT SiteWise User Guide* . You can specify up to 200 properties per asset model. For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`_ in the *AWS IoT SiteWise User Guide* .\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that contain metadata for the asset. For more information, see `Tagging your AWS IoT SiteWise resources <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html>`_ in the *AWS IoT SiteWise User Guide* .')
    _init_params: typing.ClassVar[list[str]] = ['asset_model_name', 'asset_model_composite_models', 'asset_model_description', 'asset_model_hierarchies', 'asset_model_properties', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AssetModelCompositeModelProperty', 'AssetModelHierarchyProperty', 'AssetModelPropertyProperty', 'AttributeProperty', 'ExpressionVariableProperty', 'MetricProperty', 'MetricWindowProperty', 'PropertyTypeProperty', 'TransformProperty', 'TumblingWindowProperty', 'VariableValueProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAssetModel'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_iotsitewise.CfnAssetModelDefConfig] = pydantic.Field(None)


class CfnAssetModelDefConfig(pydantic.BaseModel):
    AssetModelCompositeModelProperty: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefAssetmodelcompositemodelpropertyParams]] = pydantic.Field(None, description='')
    AssetModelHierarchyProperty: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefAssetmodelhierarchypropertyParams]] = pydantic.Field(None, description='')
    AssetModelPropertyProperty: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefAssetmodelpropertypropertyParams]] = pydantic.Field(None, description='')
    AttributeProperty: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefAttributepropertyParams]] = pydantic.Field(None, description='')
    ExpressionVariableProperty: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefExpressionvariablepropertyParams]] = pydantic.Field(None, description='')
    MetricProperty: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefMetricpropertyParams]] = pydantic.Field(None, description='')
    MetricWindowProperty: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefMetricwindowpropertyParams]] = pydantic.Field(None, description='')
    PropertyTypeProperty: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefPropertytypepropertyParams]] = pydantic.Field(None, description='')
    TransformProperty: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefTransformpropertyParams]] = pydantic.Field(None, description='')
    TumblingWindowProperty: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefTumblingwindowpropertyParams]] = pydantic.Field(None, description='')
    VariableValueProperty: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefVariablevaluepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_iotsitewise.CfnAssetModelDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnAssetModelDefAssetmodelcompositemodelpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    type: str = pydantic.Field(..., description='')
    composite_model_properties: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_AssetModelPropertyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAssetModelDefAssetmodelhierarchypropertyParams(pydantic.BaseModel):
    child_asset_model_id: str = pydantic.Field(..., description='')
    logical_id: str = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    ...

class CfnAssetModelDefAssetmodelpropertypropertyParams(pydantic.BaseModel):
    data_type: str = pydantic.Field(..., description='')
    logical_id: str = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    type: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_PropertyTypePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    data_type_spec: typing.Optional[str] = pydantic.Field(None, description='')
    unit: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAssetModelDefAttributepropertyParams(pydantic.BaseModel):
    default_value: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAssetModelDefExpressionvariablepropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    value: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_VariableValuePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnAssetModelDefMetricpropertyParams(pydantic.BaseModel):
    expression: str = pydantic.Field(..., description='')
    variables: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_ExpressionVariablePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    window: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_MetricWindowPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnAssetModelDefMetricwindowpropertyParams(pydantic.BaseModel):
    tumbling: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_TumblingWindowPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnAssetModelDefPropertytypepropertyParams(pydantic.BaseModel):
    type_name: str = pydantic.Field(..., description='')
    attribute: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_AttributePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    metric: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_MetricPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    transform: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_TransformPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnAssetModelDefTransformpropertyParams(pydantic.BaseModel):
    expression: str = pydantic.Field(..., description='')
    variables: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_ExpressionVariablePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnAssetModelDefTumblingwindowpropertyParams(pydantic.BaseModel):
    interval: str = pydantic.Field(..., description='')
    offset: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAssetModelDefVariablevaluepropertyParams(pydantic.BaseModel):
    property_logical_id: str = pydantic.Field(..., description='')
    hierarchy_logical_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAssetModelDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnAssetModelDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAssetModelDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnAssetModelDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAssetModelDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnAssetModelDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnAssetModelDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnAssetModelDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnAssetModelDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnAssetModelDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAssetModelDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnAssetModelDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnAssetModelDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAssetModelDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotsitewise.CfnDashboard
class CfnDashboardDef(BaseCfnResource):
    dashboard_definition: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The dashboard definition specified in a JSON literal. For detailed information, see `Creating dashboards (CLI) <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/create-dashboards-using-aws-cli.html>`_ in the *AWS IoT SiteWise User Guide* .\n')
    dashboard_description: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A description for the dashboard.\n')
    dashboard_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A friendly name for the dashboard.\n')
    project_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the project in which to create the dashboard.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that contain metadata for the dashboard. For more information, see `Tagging your AWS IoT SiteWise resources <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html>`_ in the *AWS IoT SiteWise User Guide* .')
    _init_params: typing.ClassVar[list[str]] = ['dashboard_definition', 'dashboard_description', 'dashboard_name', 'project_id', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnDashboard'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_iotsitewise.CfnDashboardDefConfig] = pydantic.Field(None)


class CfnDashboardDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_iotsitewise.CfnDashboardDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_iotsitewise.CfnDashboardDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_iotsitewise.CfnDashboardDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_iotsitewise.CfnDashboardDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_iotsitewise.CfnDashboardDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_iotsitewise.CfnDashboardDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_iotsitewise.CfnDashboardDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_iotsitewise.CfnDashboardDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_iotsitewise.CfnDashboardDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_iotsitewise.CfnDashboardDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_iotsitewise.CfnDashboardDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_iotsitewise.CfnDashboardDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_iotsitewise.CfnDashboardDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnDashboardDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDashboardDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDashboardDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDashboardDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDashboardDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDashboardDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDashboardDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDashboardDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDashboardDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDashboardDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDashboardDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnDashboardDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDashboardDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDashboardDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotsitewise.CfnGateway
class CfnGatewayDef(BaseCfnResource):
    gateway_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A unique, friendly name for the gateway. The maximum length is 256 characters with the pattern ``[^\\u0000-\\u001F\\u007F]+`` .\n')
    gateway_platform: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotsitewise.CfnGateway_GatewayPlatformPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description="The gateway's platform. You can only specify one platform in a gateway.\n")
    gateway_capability_summaries: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnGateway_GatewayCapabilitySummaryPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="A list of gateway capability summaries that each contain a namespace and status. Each gateway capability defines data sources for the gateway. To retrieve a capability configuration's definition, use `DescribeGatewayCapabilityConfiguration <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeGatewayCapabilityConfiguration.html>`_ .\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that contain metadata for the gateway. For more information, see `Tagging your AWS IoT SiteWise resources <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html>`_ in the *AWS IoT SiteWise User Guide* .')
    _init_params: typing.ClassVar[list[str]] = ['gateway_name', 'gateway_platform', 'gateway_capability_summaries', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['GatewayCapabilitySummaryProperty', 'GatewayPlatformProperty', 'GreengrassProperty', 'GreengrassV2Property', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnGateway'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_iotsitewise.CfnGatewayDefConfig] = pydantic.Field(None)


class CfnGatewayDefConfig(pydantic.BaseModel):
    GatewayCapabilitySummaryProperty: typing.Optional[list[models.aws_iotsitewise.CfnGatewayDefGatewaycapabilitysummarypropertyParams]] = pydantic.Field(None, description='')
    GatewayPlatformProperty: typing.Optional[list[models.aws_iotsitewise.CfnGatewayDefGatewayplatformpropertyParams]] = pydantic.Field(None, description='')
    GreengrassProperty: typing.Optional[list[models.aws_iotsitewise.CfnGatewayDefGreengrasspropertyParams]] = pydantic.Field(None, description='')
    GreengrassV2Property: typing.Optional[list[models.aws_iotsitewise.CfnGatewayDefGreengrassv2PropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_iotsitewise.CfnGatewayDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_iotsitewise.CfnGatewayDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_iotsitewise.CfnGatewayDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_iotsitewise.CfnGatewayDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_iotsitewise.CfnGatewayDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_iotsitewise.CfnGatewayDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_iotsitewise.CfnGatewayDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_iotsitewise.CfnGatewayDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_iotsitewise.CfnGatewayDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_iotsitewise.CfnGatewayDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_iotsitewise.CfnGatewayDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_iotsitewise.CfnGatewayDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_iotsitewise.CfnGatewayDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnGatewayDefGatewaycapabilitysummarypropertyParams(pydantic.BaseModel):
    capability_namespace: str = pydantic.Field(..., description='')
    capability_configuration: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnGatewayDefGatewayplatformpropertyParams(pydantic.BaseModel):
    greengrass: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnGateway_GreengrassPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    greengrass_v2: typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnGateway_GreengrassV2PropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnGatewayDefGreengrasspropertyParams(pydantic.BaseModel):
    group_arn: str = pydantic.Field(..., description='')
    ...

class CfnGatewayDefGreengrassv2PropertyParams(pydantic.BaseModel):
    core_device_thing_name: str = pydantic.Field(..., description='')
    ...

class CfnGatewayDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnGatewayDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnGatewayDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnGatewayDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnGatewayDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnGatewayDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnGatewayDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnGatewayDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnGatewayDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnGatewayDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnGatewayDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnGatewayDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnGatewayDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnGatewayDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotsitewise.CfnPortal
class CfnPortalDef(BaseCfnResource):
    portal_contact_email: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The AWS administrator's contact email address.\n")
    portal_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A friendly name for the portal.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`_ of a service role that allows the portal's users to access your AWS IoT SiteWise resources on your behalf. For more information, see `Using service roles for AWS IoT SiteWise Monitor <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html>`_ in the *AWS IoT SiteWise User Guide* .\n")
    alarms: typing.Any = pydantic.Field(None, description='Contains the configuration information of an alarm created in an AWS IoT SiteWise Monitor portal. You can use the alarm to monitor an asset property and get notified when the asset property value is outside a specified range. For more information, see `Monitoring with alarms <https://docs.aws.amazon.com/iot-sitewise/latest/appguide/monitor-alarms.html>`_ in the *AWS IoT SiteWise Application Guide* .\n')
    notification_sender_email: typing.Optional[str] = pydantic.Field(None, description='The email address that sends alarm notifications. .. epigraph:: If you use the `AWS IoT Events managed Lambda function <https://docs.aws.amazon.com/iotevents/latest/developerguide/lambda-support.html>`_ to manage your emails, you must `verify the sender email address in Amazon SES <https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html>`_ .\n')
    portal_auth_mode: typing.Optional[str] = pydantic.Field(None, description="The service to use to authenticate users to the portal. Choose from the following options:. - ``SSO`` – The portal uses AWS IAM Identity Center to authenticate users and manage user permissions. Before you can create a portal that uses IAM Identity Center , you must enable IAM Identity Center . For more information, see `Enabling IAM Identity Center <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-get-started.html#mon-gs-sso>`_ in the *AWS IoT SiteWise User Guide* . This option is only available in AWS Regions other than the China Regions. - ``IAM`` – The portal uses AWS Identity and Access Management ( IAM ) to authenticate users and manage user permissions. You can't change this value after you create a portal. Default: ``SSO``\n")
    portal_description: typing.Optional[str] = pydantic.Field(None, description='A description for the portal.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that contain metadata for the portal. For more information, see `Tagging your AWS IoT SiteWise resources <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html>`_ in the *AWS IoT SiteWise User Guide* .')
    _init_params: typing.ClassVar[list[str]] = ['portal_contact_email', 'portal_name', 'role_arn', 'alarms', 'notification_sender_email', 'portal_auth_mode', 'portal_description', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AlarmsProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnPortal'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_iotsitewise.CfnPortalDefConfig] = pydantic.Field(None)


class CfnPortalDefConfig(pydantic.BaseModel):
    AlarmsProperty: typing.Optional[list[models.aws_iotsitewise.CfnPortalDefAlarmspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_iotsitewise.CfnPortalDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_iotsitewise.CfnPortalDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_iotsitewise.CfnPortalDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_iotsitewise.CfnPortalDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_iotsitewise.CfnPortalDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_iotsitewise.CfnPortalDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_iotsitewise.CfnPortalDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_iotsitewise.CfnPortalDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_iotsitewise.CfnPortalDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_iotsitewise.CfnPortalDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_iotsitewise.CfnPortalDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_iotsitewise.CfnPortalDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_iotsitewise.CfnPortalDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnPortalDefAlarmspropertyParams(pydantic.BaseModel):
    alarm_role_arn: typing.Optional[str] = pydantic.Field(None, description='')
    notification_lambda_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPortalDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnPortalDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPortalDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnPortalDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPortalDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnPortalDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnPortalDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnPortalDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnPortalDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnPortalDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPortalDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnPortalDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnPortalDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPortalDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotsitewise.CfnProject
class CfnProjectDef(BaseCfnResource):
    portal_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the portal in which to create the project.\n')
    project_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A friendly name for the project.\n')
    asset_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list that contains the IDs of each asset associated with the project.\n')
    project_description: typing.Optional[str] = pydantic.Field(None, description='A description for the project.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that contain metadata for the project. For more information, see `Tagging your AWS IoT SiteWise resources <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html>`_ in the *AWS IoT SiteWise User Guide* .')
    _init_params: typing.ClassVar[list[str]] = ['portal_id', 'project_name', 'asset_ids', 'project_description', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnProject'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_iotsitewise.CfnProjectDefConfig] = pydantic.Field(None)


class CfnProjectDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_iotsitewise.CfnProjectDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_iotsitewise.CfnProjectDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_iotsitewise.CfnProjectDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_iotsitewise.CfnProjectDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_iotsitewise.CfnProjectDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_iotsitewise.CfnProjectDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_iotsitewise.CfnProjectDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_iotsitewise.CfnProjectDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_iotsitewise.CfnProjectDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_iotsitewise.CfnProjectDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_iotsitewise.CfnProjectDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_iotsitewise.CfnProjectDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_iotsitewise.CfnProjectDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnProjectDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnProjectDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnProjectDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnProjectDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnProjectDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnProjectDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnProjectDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnProjectDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnProjectDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnProjectDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnProjectDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnProjectDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnProjectDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnProjectDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_iotsitewise.CfnAccessPolicyProps
class CfnAccessPolicyPropsDef(BaseCfnProperty):
    access_policy_identity: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotsitewise.CfnAccessPolicy_AccessPolicyIdentityPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The identity for this access policy. Choose an IAM Identity Center user, an IAM Identity Center group, or an IAM user.\n')
    access_policy_permission: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The permission level for this access policy. Choose either a ``ADMINISTRATOR`` or ``VIEWER`` . Note that a project ``ADMINISTRATOR`` is also known as a project owner.\n')
    access_policy_resource: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotsitewise.CfnAccessPolicy_AccessPolicyResourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The AWS IoT SiteWise Monitor resource for this access policy. Choose either a portal or a project.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotsitewise-accesspolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    cfn_access_policy_props = iotsitewise.CfnAccessPolicyProps(\n        access_policy_identity=iotsitewise.CfnAccessPolicy.AccessPolicyIdentityProperty(\n            iam_role=iotsitewise.CfnAccessPolicy.IamRoleProperty(\n                arn="arn"\n            ),\n            iam_user=iotsitewise.CfnAccessPolicy.IamUserProperty(\n                arn="arn"\n            ),\n            user=iotsitewise.CfnAccessPolicy.UserProperty(\n                id="id"\n            )\n        ),\n        access_policy_permission="accessPolicyPermission",\n        access_policy_resource=iotsitewise.CfnAccessPolicy.AccessPolicyResourceProperty(\n            portal=iotsitewise.CfnAccessPolicy.PortalProperty(\n                id="id"\n            ),\n            project=iotsitewise.CfnAccessPolicy.ProjectProperty(\n                id="id"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['access_policy_identity', 'access_policy_permission', 'access_policy_resource']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAccessPolicyProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAssetModelProps
class CfnAssetModelPropsDef(BaseCfnProperty):
    asset_model_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A unique, friendly name for the asset model. The maximum length is 256 characters with the pattern ``[^\\u0000-\\u001F\\u007F]+`` .\n')
    asset_model_composite_models: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_AssetModelCompositeModelPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The composite asset models that are part of this asset model. Composite asset models are asset models that contain specific properties. Each composite model has a type that defines the properties that the composite model supports. You can use composite asset models to define alarms on this asset model.\n')
    asset_model_description: typing.Optional[str] = pydantic.Field(None, description='A description for the asset model.\n')
    asset_model_hierarchies: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_AssetModelHierarchyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The hierarchy definitions of the asset model. Each hierarchy specifies an asset model whose assets can be children of any other assets created from this asset model. For more information, see `Defining relationships between assets <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-hierarchies.html>`_ in the *AWS IoT SiteWise User Guide* . You can specify up to 10 hierarchies per asset model. For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`_ in the *AWS IoT SiteWise User Guide* .\n')
    asset_model_properties: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAssetModel_AssetModelPropertyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The property definitions of the asset model. For more information, see `Defining data properties <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/asset-properties.html>`_ in the *AWS IoT SiteWise User Guide* . You can specify up to 200 properties per asset model. For more information, see `Quotas <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/quotas.html>`_ in the *AWS IoT SiteWise User Guide* .\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that contain metadata for the asset. For more information, see `Tagging your AWS IoT SiteWise resources <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html>`_ in the *AWS IoT SiteWise User Guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotsitewise-assetmodel.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    cfn_asset_model_props = iotsitewise.CfnAssetModelProps(\n        asset_model_name="assetModelName",\n\n        # the properties below are optional\n        asset_model_composite_models=[iotsitewise.CfnAssetModel.AssetModelCompositeModelProperty(\n            name="name",\n            type="type",\n\n            # the properties below are optional\n            composite_model_properties=[iotsitewise.CfnAssetModel.AssetModelPropertyProperty(\n                data_type="dataType",\n                logical_id="logicalId",\n                name="name",\n                type=iotsitewise.CfnAssetModel.PropertyTypeProperty(\n                    type_name="typeName",\n\n                    # the properties below are optional\n                    attribute=iotsitewise.CfnAssetModel.AttributeProperty(\n                        default_value="defaultValue"\n                    ),\n                    metric=iotsitewise.CfnAssetModel.MetricProperty(\n                        expression="expression",\n                        variables=[iotsitewise.CfnAssetModel.ExpressionVariableProperty(\n                            name="name",\n                            value=iotsitewise.CfnAssetModel.VariableValueProperty(\n                                property_logical_id="propertyLogicalId",\n\n                                # the properties below are optional\n                                hierarchy_logical_id="hierarchyLogicalId"\n                            )\n                        )],\n                        window=iotsitewise.CfnAssetModel.MetricWindowProperty(\n                            tumbling=iotsitewise.CfnAssetModel.TumblingWindowProperty(\n                                interval="interval",\n\n                                # the properties below are optional\n                                offset="offset"\n                            )\n                        )\n                    ),\n                    transform=iotsitewise.CfnAssetModel.TransformProperty(\n                        expression="expression",\n                        variables=[iotsitewise.CfnAssetModel.ExpressionVariableProperty(\n                            name="name",\n                            value=iotsitewise.CfnAssetModel.VariableValueProperty(\n                                property_logical_id="propertyLogicalId",\n\n                                # the properties below are optional\n                                hierarchy_logical_id="hierarchyLogicalId"\n                            )\n                        )]\n                    )\n                ),\n\n                # the properties below are optional\n                data_type_spec="dataTypeSpec",\n                unit="unit"\n            )],\n            description="description"\n        )],\n        asset_model_description="assetModelDescription",\n        asset_model_hierarchies=[iotsitewise.CfnAssetModel.AssetModelHierarchyProperty(\n            child_asset_model_id="childAssetModelId",\n            logical_id="logicalId",\n            name="name"\n        )],\n        asset_model_properties=[iotsitewise.CfnAssetModel.AssetModelPropertyProperty(\n            data_type="dataType",\n            logical_id="logicalId",\n            name="name",\n            type=iotsitewise.CfnAssetModel.PropertyTypeProperty(\n                type_name="typeName",\n\n                # the properties below are optional\n                attribute=iotsitewise.CfnAssetModel.AttributeProperty(\n                    default_value="defaultValue"\n                ),\n                metric=iotsitewise.CfnAssetModel.MetricProperty(\n                    expression="expression",\n                    variables=[iotsitewise.CfnAssetModel.ExpressionVariableProperty(\n                        name="name",\n                        value=iotsitewise.CfnAssetModel.VariableValueProperty(\n                            property_logical_id="propertyLogicalId",\n\n                            # the properties below are optional\n                            hierarchy_logical_id="hierarchyLogicalId"\n                        )\n                    )],\n                    window=iotsitewise.CfnAssetModel.MetricWindowProperty(\n                        tumbling=iotsitewise.CfnAssetModel.TumblingWindowProperty(\n                            interval="interval",\n\n                            # the properties below are optional\n                            offset="offset"\n                        )\n                    )\n                ),\n                transform=iotsitewise.CfnAssetModel.TransformProperty(\n                    expression="expression",\n                    variables=[iotsitewise.CfnAssetModel.ExpressionVariableProperty(\n                        name="name",\n                        value=iotsitewise.CfnAssetModel.VariableValueProperty(\n                            property_logical_id="propertyLogicalId",\n\n                            # the properties below are optional\n                            hierarchy_logical_id="hierarchyLogicalId"\n                        )\n                    )]\n                )\n            ),\n\n            # the properties below are optional\n            data_type_spec="dataTypeSpec",\n            unit="unit"\n        )],\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['asset_model_name', 'asset_model_composite_models', 'asset_model_description', 'asset_model_hierarchies', 'asset_model_properties', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAssetModelProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnAssetProps
class CfnAssetPropsDef(BaseCfnProperty):
    asset_model_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the asset model from which to create the asset.\n')
    asset_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A unique, friendly name for the asset. The maximum length is 256 characters with the pattern ``[^\\u0000-\\u001F\\u007F]+`` .\n')
    asset_description: typing.Optional[str] = pydantic.Field(None, description='A description for the asset.\n')
    asset_hierarchies: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAsset_AssetHierarchyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of asset hierarchies that each contain a ``hierarchyLogicalId`` . A hierarchy specifies allowed parent/child asset relationships.\n')
    asset_properties: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnAsset_AssetPropertyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="The list of asset properties for the asset. This object doesn't include properties that you define in composite models. You can find composite model properties in the ``assetCompositeModels`` object.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that contain metadata for the asset. For more information, see `Tagging your AWS IoT SiteWise resources <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html>`_ in the *AWS IoT SiteWise User Guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotsitewise-asset.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    cfn_asset_props = iotsitewise.CfnAssetProps(\n        asset_model_id="assetModelId",\n        asset_name="assetName",\n\n        # the properties below are optional\n        asset_description="assetDescription",\n        asset_hierarchies=[iotsitewise.CfnAsset.AssetHierarchyProperty(\n            child_asset_id="childAssetId",\n            logical_id="logicalId"\n        )],\n        asset_properties=[iotsitewise.CfnAsset.AssetPropertyProperty(\n            logical_id="logicalId",\n\n            # the properties below are optional\n            alias="alias",\n            notification_state="notificationState",\n            unit="unit"\n        )],\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['asset_model_id', 'asset_name', 'asset_description', 'asset_hierarchies', 'asset_properties', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnAssetProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnDashboardProps
class CfnDashboardPropsDef(BaseCfnProperty):
    dashboard_definition: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The dashboard definition specified in a JSON literal. For detailed information, see `Creating dashboards (CLI) <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/create-dashboards-using-aws-cli.html>`_ in the *AWS IoT SiteWise User Guide* .\n')
    dashboard_description: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A description for the dashboard.\n')
    dashboard_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A friendly name for the dashboard.\n')
    project_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the project in which to create the dashboard.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that contain metadata for the dashboard. For more information, see `Tagging your AWS IoT SiteWise resources <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html>`_ in the *AWS IoT SiteWise User Guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotsitewise-dashboard.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    cfn_dashboard_props = iotsitewise.CfnDashboardProps(\n        dashboard_definition="dashboardDefinition",\n        dashboard_description="dashboardDescription",\n        dashboard_name="dashboardName",\n\n        # the properties below are optional\n        project_id="projectId",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['dashboard_definition', 'dashboard_description', 'dashboard_name', 'project_id', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnDashboardProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnGatewayProps
class CfnGatewayPropsDef(BaseCfnProperty):
    gateway_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A unique, friendly name for the gateway. The maximum length is 256 characters with the pattern ``[^\\u0000-\\u001F\\u007F]+`` .\n')
    gateway_platform: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_iotsitewise.CfnGateway_GatewayPlatformPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description="The gateway's platform. You can only specify one platform in a gateway.\n")
    gateway_capability_summaries: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_iotsitewise.CfnGateway_GatewayCapabilitySummaryPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="A list of gateway capability summaries that each contain a namespace and status. Each gateway capability defines data sources for the gateway. To retrieve a capability configuration's definition, use `DescribeGatewayCapabilityConfiguration <https://docs.aws.amazon.com/iot-sitewise/latest/APIReference/API_DescribeGatewayCapabilityConfiguration.html>`_ .\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that contain metadata for the gateway. For more information, see `Tagging your AWS IoT SiteWise resources <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html>`_ in the *AWS IoT SiteWise User Guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotsitewise-gateway.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    cfn_gateway_props = iotsitewise.CfnGatewayProps(\n        gateway_name="gatewayName",\n        gateway_platform=iotsitewise.CfnGateway.GatewayPlatformProperty(\n            greengrass=iotsitewise.CfnGateway.GreengrassProperty(\n                group_arn="groupArn"\n            ),\n            greengrass_v2=iotsitewise.CfnGateway.GreengrassV2Property(\n                core_device_thing_name="coreDeviceThingName"\n            )\n        ),\n\n        # the properties below are optional\n        gateway_capability_summaries=[iotsitewise.CfnGateway.GatewayCapabilitySummaryProperty(\n            capability_namespace="capabilityNamespace",\n\n            # the properties below are optional\n            capability_configuration="capabilityConfiguration"\n        )],\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['gateway_name', 'gateway_platform', 'gateway_capability_summaries', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnGatewayProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnPortalProps
class CfnPortalPropsDef(BaseCfnProperty):
    portal_contact_email: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The AWS administrator's contact email address.\n")
    portal_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A friendly name for the portal.\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The `ARN <https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html>`_ of a service role that allows the portal's users to access your AWS IoT SiteWise resources on your behalf. For more information, see `Using service roles for AWS IoT SiteWise Monitor <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-service-role.html>`_ in the *AWS IoT SiteWise User Guide* .\n")
    alarms: typing.Any = pydantic.Field(None, description='Contains the configuration information of an alarm created in an AWS IoT SiteWise Monitor portal. You can use the alarm to monitor an asset property and get notified when the asset property value is outside a specified range. For more information, see `Monitoring with alarms <https://docs.aws.amazon.com/iot-sitewise/latest/appguide/monitor-alarms.html>`_ in the *AWS IoT SiteWise Application Guide* .\n')
    notification_sender_email: typing.Optional[str] = pydantic.Field(None, description='The email address that sends alarm notifications. .. epigraph:: If you use the `AWS IoT Events managed Lambda function <https://docs.aws.amazon.com/iotevents/latest/developerguide/lambda-support.html>`_ to manage your emails, you must `verify the sender email address in Amazon SES <https://docs.aws.amazon.com/ses/latest/DeveloperGuide/verify-email-addresses.html>`_ .\n')
    portal_auth_mode: typing.Optional[str] = pydantic.Field(None, description="The service to use to authenticate users to the portal. Choose from the following options:. - ``SSO`` – The portal uses AWS IAM Identity Center to authenticate users and manage user permissions. Before you can create a portal that uses IAM Identity Center , you must enable IAM Identity Center . For more information, see `Enabling IAM Identity Center <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/monitor-get-started.html#mon-gs-sso>`_ in the *AWS IoT SiteWise User Guide* . This option is only available in AWS Regions other than the China Regions. - ``IAM`` – The portal uses AWS Identity and Access Management ( IAM ) to authenticate users and manage user permissions. You can't change this value after you create a portal. Default: ``SSO``\n")
    portal_description: typing.Optional[str] = pydantic.Field(None, description='A description for the portal.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that contain metadata for the portal. For more information, see `Tagging your AWS IoT SiteWise resources <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html>`_ in the *AWS IoT SiteWise User Guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotsitewise-portal.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    # alarms: Any\n\n    cfn_portal_props = iotsitewise.CfnPortalProps(\n        portal_contact_email="portalContactEmail",\n        portal_name="portalName",\n        role_arn="roleArn",\n\n        # the properties below are optional\n        alarms=alarms,\n        notification_sender_email="notificationSenderEmail",\n        portal_auth_mode="portalAuthMode",\n        portal_description="portalDescription",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['portal_contact_email', 'portal_name', 'role_arn', 'alarms', 'notification_sender_email', 'portal_auth_mode', 'portal_description', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnPortalProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_iotsitewise.CfnProjectProps
class CfnProjectPropsDef(BaseCfnProperty):
    portal_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ID of the portal in which to create the project.\n')
    project_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='A friendly name for the project.\n')
    asset_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list that contains the IDs of each asset associated with the project.\n')
    project_description: typing.Optional[str] = pydantic.Field(None, description='A description for the project.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs that contain metadata for the project. For more information, see `Tagging your AWS IoT SiteWise resources <https://docs.aws.amazon.com/iot-sitewise/latest/userguide/tag-resources.html>`_ in the *AWS IoT SiteWise User Guide* .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iotsitewise-project.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_iotsitewise as iotsitewise\n\n    cfn_project_props = iotsitewise.CfnProjectProps(\n        portal_id="portalId",\n        project_name="projectName",\n\n        # the properties below are optional\n        asset_ids=["assetIds"],\n        project_description="projectDescription",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['portal_id', 'project_name', 'asset_ids', 'project_description', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_iotsitewise.CfnProjectProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnAccessPolicy_AccessPolicyIdentityProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnAccessPolicy_AccessPolicyIdentityPropertyDef]] = pydantic.Field(None)
    CfnAccessPolicy_AccessPolicyResourceProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnAccessPolicy_AccessPolicyResourcePropertyDef]] = pydantic.Field(None)
    CfnAccessPolicy_IamRoleProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnAccessPolicy_IamRolePropertyDef]] = pydantic.Field(None)
    CfnAccessPolicy_IamUserProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnAccessPolicy_IamUserPropertyDef]] = pydantic.Field(None)
    CfnAccessPolicy_PortalProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnAccessPolicy_PortalPropertyDef]] = pydantic.Field(None)
    CfnAccessPolicy_ProjectProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnAccessPolicy_ProjectPropertyDef]] = pydantic.Field(None)
    CfnAccessPolicy_UserProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnAccessPolicy_UserPropertyDef]] = pydantic.Field(None)
    CfnAsset_AssetHierarchyProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnAsset_AssetHierarchyPropertyDef]] = pydantic.Field(None)
    CfnAsset_AssetPropertyProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnAsset_AssetPropertyPropertyDef]] = pydantic.Field(None)
    CfnAssetModel_AssetModelCompositeModelProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnAssetModel_AssetModelCompositeModelPropertyDef]] = pydantic.Field(None)
    CfnAssetModel_AssetModelHierarchyProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnAssetModel_AssetModelHierarchyPropertyDef]] = pydantic.Field(None)
    CfnAssetModel_AssetModelPropertyProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnAssetModel_AssetModelPropertyPropertyDef]] = pydantic.Field(None)
    CfnAssetModel_AttributeProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnAssetModel_AttributePropertyDef]] = pydantic.Field(None)
    CfnAssetModel_ExpressionVariableProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnAssetModel_ExpressionVariablePropertyDef]] = pydantic.Field(None)
    CfnAssetModel_MetricProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnAssetModel_MetricPropertyDef]] = pydantic.Field(None)
    CfnAssetModel_MetricWindowProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnAssetModel_MetricWindowPropertyDef]] = pydantic.Field(None)
    CfnAssetModel_PropertyTypeProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnAssetModel_PropertyTypePropertyDef]] = pydantic.Field(None)
    CfnAssetModel_TransformProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnAssetModel_TransformPropertyDef]] = pydantic.Field(None)
    CfnAssetModel_TumblingWindowProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnAssetModel_TumblingWindowPropertyDef]] = pydantic.Field(None)
    CfnAssetModel_VariableValueProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnAssetModel_VariableValuePropertyDef]] = pydantic.Field(None)
    CfnGateway_GatewayCapabilitySummaryProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnGateway_GatewayCapabilitySummaryPropertyDef]] = pydantic.Field(None)
    CfnGateway_GatewayPlatformProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnGateway_GatewayPlatformPropertyDef]] = pydantic.Field(None)
    CfnGateway_GreengrassProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnGateway_GreengrassPropertyDef]] = pydantic.Field(None)
    CfnGateway_GreengrassV2Property: typing.Optional[dict[str, models.aws_iotsitewise.CfnGateway_GreengrassV2PropertyDef]] = pydantic.Field(None)
    CfnPortal_AlarmsProperty: typing.Optional[dict[str, models.aws_iotsitewise.CfnPortal_AlarmsPropertyDef]] = pydantic.Field(None)
    CfnAccessPolicy: typing.Optional[dict[str, models.aws_iotsitewise.CfnAccessPolicyDef]] = pydantic.Field(None)
    CfnAsset: typing.Optional[dict[str, models.aws_iotsitewise.CfnAssetDef]] = pydantic.Field(None)
    CfnAssetModel: typing.Optional[dict[str, models.aws_iotsitewise.CfnAssetModelDef]] = pydantic.Field(None)
    CfnDashboard: typing.Optional[dict[str, models.aws_iotsitewise.CfnDashboardDef]] = pydantic.Field(None)
    CfnGateway: typing.Optional[dict[str, models.aws_iotsitewise.CfnGatewayDef]] = pydantic.Field(None)
    CfnPortal: typing.Optional[dict[str, models.aws_iotsitewise.CfnPortalDef]] = pydantic.Field(None)
    CfnProject: typing.Optional[dict[str, models.aws_iotsitewise.CfnProjectDef]] = pydantic.Field(None)
    CfnAccessPolicyProps: typing.Optional[dict[str, models.aws_iotsitewise.CfnAccessPolicyPropsDef]] = pydantic.Field(None)
    CfnAssetModelProps: typing.Optional[dict[str, models.aws_iotsitewise.CfnAssetModelPropsDef]] = pydantic.Field(None)
    CfnAssetProps: typing.Optional[dict[str, models.aws_iotsitewise.CfnAssetPropsDef]] = pydantic.Field(None)
    CfnDashboardProps: typing.Optional[dict[str, models.aws_iotsitewise.CfnDashboardPropsDef]] = pydantic.Field(None)
    CfnGatewayProps: typing.Optional[dict[str, models.aws_iotsitewise.CfnGatewayPropsDef]] = pydantic.Field(None)
    CfnPortalProps: typing.Optional[dict[str, models.aws_iotsitewise.CfnPortalPropsDef]] = pydantic.Field(None)
    CfnProjectProps: typing.Optional[dict[str, models.aws_iotsitewise.CfnProjectPropsDef]] = pydantic.Field(None)
    ...

import models
