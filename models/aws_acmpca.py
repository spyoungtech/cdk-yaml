from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_acmpca.CertificateAuthority
class CertificateAuthorityDef(BaseClass):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = ['from_certificate_authority_arn']
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CertificateAuthority'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = ['from_certificate_authority_arn']
    ...


    from_certificate_authority_arn: typing.Optional[models.aws_acmpca.CertificateAuthorityDefFromCertificateAuthorityArnParams] = pydantic.Field(None, description='Import an existing Certificate given an ARN.')

class CertificateAuthorityDefFromCertificateAuthorityArnParams(pydantic.BaseModel):
    scope: models.constructs.ConstructDef = pydantic.Field(..., description='-\n')
    id: str = pydantic.Field(..., description='-\n')
    certificate_authority_arn: str = pydantic.Field(..., description='-')
    ...


#  autogenerated from aws_cdk.aws_acmpca.CfnCertificate.ApiPassthroughProperty
class CfnCertificate_ApiPassthroughPropertyDef(BaseStruct):
    extensions: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_ExtensionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies X.509 extension information for a certificate.\n')
    subject: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_SubjectPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Contains information about the certificate subject. The Subject field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The Subject must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificate-apipassthrough.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    api_passthrough_property = acmpca.CfnCertificate.ApiPassthroughProperty(\n        extensions=acmpca.CfnCertificate.ExtensionsProperty(\n            certificate_policies=[acmpca.CfnCertificate.PolicyInformationProperty(\n                cert_policy_id="certPolicyId",\n\n                # the properties below are optional\n                policy_qualifiers=[acmpca.CfnCertificate.PolicyQualifierInfoProperty(\n                    policy_qualifier_id="policyQualifierId",\n                    qualifier=acmpca.CfnCertificate.QualifierProperty(\n                        cps_uri="cpsUri"\n                    )\n                )]\n            )],\n            custom_extensions=[acmpca.CfnCertificate.CustomExtensionProperty(\n                object_identifier="objectIdentifier",\n                value="value",\n\n                # the properties below are optional\n                critical=False\n            )],\n            extended_key_usage=[acmpca.CfnCertificate.ExtendedKeyUsageProperty(\n                extended_key_usage_object_identifier="extendedKeyUsageObjectIdentifier",\n                extended_key_usage_type="extendedKeyUsageType"\n            )],\n            key_usage=acmpca.CfnCertificate.KeyUsageProperty(\n                crl_sign=False,\n                data_encipherment=False,\n                decipher_only=False,\n                digital_signature=False,\n                encipher_only=False,\n                key_agreement=False,\n                key_cert_sign=False,\n                key_encipherment=False,\n                non_repudiation=False\n            ),\n            subject_alternative_names=[acmpca.CfnCertificate.GeneralNameProperty(\n                directory_name=acmpca.CfnCertificate.SubjectProperty(\n                    common_name="commonName",\n                    country="country",\n                    custom_attributes=[acmpca.CfnCertificate.CustomAttributeProperty(\n                        object_identifier="objectIdentifier",\n                        value="value"\n                    )],\n                    distinguished_name_qualifier="distinguishedNameQualifier",\n                    generation_qualifier="generationQualifier",\n                    given_name="givenName",\n                    initials="initials",\n                    locality="locality",\n                    organization="organization",\n                    organizational_unit="organizationalUnit",\n                    pseudonym="pseudonym",\n                    serial_number="serialNumber",\n                    state="state",\n                    surname="surname",\n                    title="title"\n                ),\n                dns_name="dnsName",\n                edi_party_name=acmpca.CfnCertificate.EdiPartyNameProperty(\n                    name_assigner="nameAssigner",\n                    party_name="partyName"\n                ),\n                ip_address="ipAddress",\n                other_name=acmpca.CfnCertificate.OtherNameProperty(\n                    type_id="typeId",\n                    value="value"\n                ),\n                registered_id="registeredId",\n                rfc822_name="rfc822Name",\n                uniform_resource_identifier="uniformResourceIdentifier"\n            )]\n        ),\n        subject=acmpca.CfnCertificate.SubjectProperty(\n            common_name="commonName",\n            country="country",\n            custom_attributes=[acmpca.CfnCertificate.CustomAttributeProperty(\n                object_identifier="objectIdentifier",\n                value="value"\n            )],\n            distinguished_name_qualifier="distinguishedNameQualifier",\n            generation_qualifier="generationQualifier",\n            given_name="givenName",\n            initials="initials",\n            locality="locality",\n            organization="organization",\n            organizational_unit="organizationalUnit",\n            pseudonym="pseudonym",\n            serial_number="serialNumber",\n            state="state",\n            surname="surname",\n            title="title"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['extensions', 'subject']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificate.ApiPassthroughProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificate.CustomAttributeProperty
class CfnCertificate_CustomAttributePropertyDef(BaseStruct):
    object_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the object identifier (OID) of the attribute type of the relative distinguished name (RDN).\n')
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the attribute value of relative distinguished name (RDN).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificate-customattribute.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    custom_attribute_property = acmpca.CfnCertificate.CustomAttributeProperty(\n        object_identifier="objectIdentifier",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object_identifier', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificate.CustomAttributeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificate.CustomExtensionProperty
class CfnCertificate_CustomExtensionPropertyDef(BaseStruct):
    object_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the object identifier (OID) of the X.509 extension. For more information, see the `Global OID reference database. <https://docs.aws.amazon.com/https://oidref.com/2.5.29>`_.\n')
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the base64-encoded value of the X.509 extension.\n')
    critical: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Specifies the critical flag of the X.509 extension.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificate-customextension.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    custom_extension_property = acmpca.CfnCertificate.CustomExtensionProperty(\n        object_identifier="objectIdentifier",\n        value="value",\n\n        # the properties below are optional\n        critical=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object_identifier', 'value', 'critical']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificate.CustomExtensionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificate.EdiPartyNameProperty
class CfnCertificate_EdiPartyNamePropertyDef(BaseStruct):
    name_assigner: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the name assigner.\n')
    party_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the party name.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificate-edipartyname.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    edi_party_name_property = acmpca.CfnCertificate.EdiPartyNameProperty(\n        name_assigner="nameAssigner",\n        party_name="partyName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name_assigner', 'party_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificate.EdiPartyNameProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificate.ExtendedKeyUsageProperty
class CfnCertificate_ExtendedKeyUsagePropertyDef(BaseStruct):
    extended_key_usage_object_identifier: typing.Optional[str] = pydantic.Field(None, description='Specifies a custom ``ExtendedKeyUsage`` with an object identifier (OID).\n')
    extended_key_usage_type: typing.Optional[str] = pydantic.Field(None, description='Specifies a standard ``ExtendedKeyUsage`` as defined as in `RFC 5280 <https://docs.aws.amazon.com/https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.12>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificate-extendedkeyusage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    extended_key_usage_property = acmpca.CfnCertificate.ExtendedKeyUsageProperty(\n        extended_key_usage_object_identifier="extendedKeyUsageObjectIdentifier",\n        extended_key_usage_type="extendedKeyUsageType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['extended_key_usage_object_identifier', 'extended_key_usage_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificate.ExtendedKeyUsageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificate.ExtensionsProperty
class CfnCertificate_ExtensionsPropertyDef(BaseStruct):
    certificate_policies: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_PolicyInformationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="Contains a sequence of one or more policy information terms, each of which consists of an object identifier (OID) and optional qualifiers. For more information, see NIST's definition of `Object Identifier (OID) <https://docs.aws.amazon.com/https://csrc.nist.gov/glossary/term/Object_Identifier>`_ . In an end-entity certificate, these terms indicate the policy under which the certificate was issued and the purposes for which it may be used. In a CA certificate, these terms limit the set of policies for certification paths that include this certificate.\n")
    custom_extensions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_CustomExtensionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Contains a sequence of one or more X.509 extensions, each of which consists of an object identifier (OID), a base64-encoded value, and the critical flag. For more information, see the `Global OID reference database. <https://docs.aws.amazon.com/https://oidref.com/2.5.29>`_.\n')
    extended_key_usage: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_ExtendedKeyUsagePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Specifies additional purposes for which the certified public key may be used other than basic purposes indicated in the ``KeyUsage`` extension.\n')
    key_usage: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_KeyUsagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Defines one or more purposes for which the key contained in the certificate can be used. Default value for each option is false.\n')
    subject_alternative_names: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_GeneralNamePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The subject alternative name extension allows identities to be bound to the subject of the certificate. These identities may be included in addition to or in place of the identity in the subject field of the certificate.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificate-extensions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    extensions_property = acmpca.CfnCertificate.ExtensionsProperty(\n        certificate_policies=[acmpca.CfnCertificate.PolicyInformationProperty(\n            cert_policy_id="certPolicyId",\n\n            # the properties below are optional\n            policy_qualifiers=[acmpca.CfnCertificate.PolicyQualifierInfoProperty(\n                policy_qualifier_id="policyQualifierId",\n                qualifier=acmpca.CfnCertificate.QualifierProperty(\n                    cps_uri="cpsUri"\n                )\n            )]\n        )],\n        custom_extensions=[acmpca.CfnCertificate.CustomExtensionProperty(\n            object_identifier="objectIdentifier",\n            value="value",\n\n            # the properties below are optional\n            critical=False\n        )],\n        extended_key_usage=[acmpca.CfnCertificate.ExtendedKeyUsageProperty(\n            extended_key_usage_object_identifier="extendedKeyUsageObjectIdentifier",\n            extended_key_usage_type="extendedKeyUsageType"\n        )],\n        key_usage=acmpca.CfnCertificate.KeyUsageProperty(\n            crl_sign=False,\n            data_encipherment=False,\n            decipher_only=False,\n            digital_signature=False,\n            encipher_only=False,\n            key_agreement=False,\n            key_cert_sign=False,\n            key_encipherment=False,\n            non_repudiation=False\n        ),\n        subject_alternative_names=[acmpca.CfnCertificate.GeneralNameProperty(\n            directory_name=acmpca.CfnCertificate.SubjectProperty(\n                common_name="commonName",\n                country="country",\n                custom_attributes=[acmpca.CfnCertificate.CustomAttributeProperty(\n                    object_identifier="objectIdentifier",\n                    value="value"\n                )],\n                distinguished_name_qualifier="distinguishedNameQualifier",\n                generation_qualifier="generationQualifier",\n                given_name="givenName",\n                initials="initials",\n                locality="locality",\n                organization="organization",\n                organizational_unit="organizationalUnit",\n                pseudonym="pseudonym",\n                serial_number="serialNumber",\n                state="state",\n                surname="surname",\n                title="title"\n            ),\n            dns_name="dnsName",\n            edi_party_name=acmpca.CfnCertificate.EdiPartyNameProperty(\n                name_assigner="nameAssigner",\n                party_name="partyName"\n            ),\n            ip_address="ipAddress",\n            other_name=acmpca.CfnCertificate.OtherNameProperty(\n                type_id="typeId",\n                value="value"\n            ),\n            registered_id="registeredId",\n            rfc822_name="rfc822Name",\n            uniform_resource_identifier="uniformResourceIdentifier"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['certificate_policies', 'custom_extensions', 'extended_key_usage', 'key_usage', 'subject_alternative_names']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificate.ExtensionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificate.GeneralNameProperty
class CfnCertificate_GeneralNamePropertyDef(BaseStruct):
    directory_name: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_SubjectPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Contains information about the certificate subject. The certificate can be one issued by your private certificate authority (CA) or it can be your private CA certificate. The Subject field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The Subject must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate. The DN must be unique for each entity, but your private CA can issue more than one certificate with the same DN to the same entity.\n')
    dns_name: typing.Optional[str] = pydantic.Field(None, description='Represents ``GeneralName`` as a DNS name.\n')
    edi_party_name: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_EdiPartyNamePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Represents ``GeneralName`` as an ``EdiPartyName`` object.\n')
    ip_address: typing.Optional[str] = pydantic.Field(None, description='Represents ``GeneralName`` as an IPv4 or IPv6 address.\n')
    other_name: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_OtherNamePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Represents ``GeneralName`` using an ``OtherName`` object.\n')
    registered_id: typing.Optional[str] = pydantic.Field(None, description='Represents ``GeneralName`` as an object identifier (OID).\n')
    rfc822_name: typing.Optional[str] = pydantic.Field(None, description='Represents ``GeneralName`` as an `RFC 822 <https://docs.aws.amazon.com/https://datatracker.ietf.org/doc/html/rfc822>`_ email address.\n')
    uniform_resource_identifier: typing.Optional[str] = pydantic.Field(None, description='Represents ``GeneralName`` as a URI.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificate-generalname.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    general_name_property = acmpca.CfnCertificate.GeneralNameProperty(\n        directory_name=acmpca.CfnCertificate.SubjectProperty(\n            common_name="commonName",\n            country="country",\n            custom_attributes=[acmpca.CfnCertificate.CustomAttributeProperty(\n                object_identifier="objectIdentifier",\n                value="value"\n            )],\n            distinguished_name_qualifier="distinguishedNameQualifier",\n            generation_qualifier="generationQualifier",\n            given_name="givenName",\n            initials="initials",\n            locality="locality",\n            organization="organization",\n            organizational_unit="organizationalUnit",\n            pseudonym="pseudonym",\n            serial_number="serialNumber",\n            state="state",\n            surname="surname",\n            title="title"\n        ),\n        dns_name="dnsName",\n        edi_party_name=acmpca.CfnCertificate.EdiPartyNameProperty(\n            name_assigner="nameAssigner",\n            party_name="partyName"\n        ),\n        ip_address="ipAddress",\n        other_name=acmpca.CfnCertificate.OtherNameProperty(\n            type_id="typeId",\n            value="value"\n        ),\n        registered_id="registeredId",\n        rfc822_name="rfc822Name",\n        uniform_resource_identifier="uniformResourceIdentifier"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['directory_name', 'dns_name', 'edi_party_name', 'ip_address', 'other_name', 'registered_id', 'rfc822_name', 'uniform_resource_identifier']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificate.GeneralNameProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificate.KeyUsageProperty
class CfnCertificate_KeyUsagePropertyDef(BaseStruct):
    crl_sign: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Key can be used to sign CRLs. Default: - false\n')
    data_encipherment: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Key can be used to decipher data. Default: - false\n')
    decipher_only: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Key can be used only to decipher data. Default: - false\n')
    digital_signature: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Key can be used for digital signing. Default: - false\n')
    encipher_only: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Key can be used only to encipher data. Default: - false\n')
    key_agreement: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Key can be used in a key-agreement protocol. Default: - false\n')
    key_cert_sign: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Key can be used to sign certificates. Default: - false\n')
    key_encipherment: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Key can be used to encipher data. Default: - false\n')
    non_repudiation: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Key can be used for non-repudiation. Default: - false\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificate-keyusage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    key_usage_property = acmpca.CfnCertificate.KeyUsageProperty(\n        crl_sign=False,\n        data_encipherment=False,\n        decipher_only=False,\n        digital_signature=False,\n        encipher_only=False,\n        key_agreement=False,\n        key_cert_sign=False,\n        key_encipherment=False,\n        non_repudiation=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['crl_sign', 'data_encipherment', 'decipher_only', 'digital_signature', 'encipher_only', 'key_agreement', 'key_cert_sign', 'key_encipherment', 'non_repudiation']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificate.KeyUsageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificate.OtherNameProperty
class CfnCertificate_OtherNamePropertyDef(BaseStruct):
    type_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies an OID.\n')
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies an OID value.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificate-othername.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    other_name_property = acmpca.CfnCertificate.OtherNameProperty(\n        type_id="typeId",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type_id', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificate.OtherNameProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificate.PolicyInformationProperty
class CfnCertificate_PolicyInformationPropertyDef(BaseStruct):
    cert_policy_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="Specifies the object identifier (OID) of the certificate policy under which the certificate was issued. For more information, see NIST's definition of `Object Identifier (OID) <https://docs.aws.amazon.com/https://csrc.nist.gov/glossary/term/Object_Identifier>`_ .\n")
    policy_qualifiers: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_PolicyQualifierInfoPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Modifies the given ``CertPolicyId`` with a qualifier. AWS Private CA supports the certification practice statement (CPS) qualifier.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificate-policyinformation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    policy_information_property = acmpca.CfnCertificate.PolicyInformationProperty(\n        cert_policy_id="certPolicyId",\n\n        # the properties below are optional\n        policy_qualifiers=[acmpca.CfnCertificate.PolicyQualifierInfoProperty(\n            policy_qualifier_id="policyQualifierId",\n            qualifier=acmpca.CfnCertificate.QualifierProperty(\n                cps_uri="cpsUri"\n            )\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cert_policy_id', 'policy_qualifiers']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificate.PolicyInformationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificate.PolicyQualifierInfoProperty
class CfnCertificate_PolicyQualifierInfoPropertyDef(BaseStruct):
    policy_qualifier_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Identifies the qualifier modifying a ``CertPolicyId`` .\n')
    qualifier: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_acmpca.CfnCertificate_QualifierPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Defines the qualifier type. AWS Private CA supports the use of a URI for a CPS qualifier in this field.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificate-policyqualifierinfo.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    policy_qualifier_info_property = acmpca.CfnCertificate.PolicyQualifierInfoProperty(\n        policy_qualifier_id="policyQualifierId",\n        qualifier=acmpca.CfnCertificate.QualifierProperty(\n            cps_uri="cpsUri"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['policy_qualifier_id', 'qualifier']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificate.PolicyQualifierInfoProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificate.QualifierProperty
class CfnCertificate_QualifierPropertyDef(BaseStruct):
    cps_uri: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Contains a pointer to a certification practice statement (CPS) published by the CA.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificate-qualifier.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    qualifier_property = acmpca.CfnCertificate.QualifierProperty(\n        cps_uri="cpsUri"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cps_uri']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificate.QualifierProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificate.SubjectProperty
class CfnCertificate_SubjectPropertyDef(BaseStruct):
    common_name: typing.Optional[str] = pydantic.Field(None, description='For CA and end-entity certificates in a private PKI, the common name (CN) can be any string within the length limit. Note: In publicly trusted certificates, the common name must be a fully qualified domain name (FQDN) associated with the certificate subject.\n')
    country: typing.Optional[str] = pydantic.Field(None, description='Two-digit code that specifies the country in which the certificate subject located.\n')
    custom_attributes: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_CustomAttributePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Contains a sequence of one or more X.500 relative distinguished names (RDNs), each of which consists of an object identifier (OID) and a value. For more information, see NIST’s definition of `Object Identifier (OID) <https://docs.aws.amazon.com/https://csrc.nist.gov/glossary/term/Object_Identifier>`_ . .. epigraph:: Custom attributes cannot be used in combination with standard attributes.\n')
    distinguished_name_qualifier: typing.Optional[str] = pydantic.Field(None, description='Disambiguating information for the certificate subject.\n')
    generation_qualifier: typing.Optional[str] = pydantic.Field(None, description='Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third.\n')
    given_name: typing.Optional[str] = pydantic.Field(None, description='First name.\n')
    initials: typing.Optional[str] = pydantic.Field(None, description='Concatenation that typically contains the first letter of the *GivenName* , the first letter of the middle name if one exists, and the first letter of the *Surname* .\n')
    locality: typing.Optional[str] = pydantic.Field(None, description='The locality (such as a city or town) in which the certificate subject is located.\n')
    organization: typing.Optional[str] = pydantic.Field(None, description='Legal name of the organization with which the certificate subject is affiliated.\n')
    organizational_unit: typing.Optional[str] = pydantic.Field(None, description='A subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated.\n')
    pseudonym: typing.Optional[str] = pydantic.Field(None, description='Typically a shortened version of a longer *GivenName* . For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza.\n')
    serial_number: typing.Optional[str] = pydantic.Field(None, description='The certificate serial number.\n')
    state: typing.Optional[str] = pydantic.Field(None, description='State in which the subject of the certificate is located.\n')
    surname: typing.Optional[str] = pydantic.Field(None, description='Family name. In the US and the UK, for example, the surname of an individual is ordered last. In Asian cultures the surname is typically ordered first.\n')
    title: typing.Optional[str] = pydantic.Field(None, description='A title such as Mr. or Ms., which is pre-pended to the name to refer formally to the certificate subject.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificate-subject.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    subject_property = acmpca.CfnCertificate.SubjectProperty(\n        common_name="commonName",\n        country="country",\n        custom_attributes=[acmpca.CfnCertificate.CustomAttributeProperty(\n            object_identifier="objectIdentifier",\n            value="value"\n        )],\n        distinguished_name_qualifier="distinguishedNameQualifier",\n        generation_qualifier="generationQualifier",\n        given_name="givenName",\n        initials="initials",\n        locality="locality",\n        organization="organization",\n        organizational_unit="organizationalUnit",\n        pseudonym="pseudonym",\n        serial_number="serialNumber",\n        state="state",\n        surname="surname",\n        title="title"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['common_name', 'country', 'custom_attributes', 'distinguished_name_qualifier', 'generation_qualifier', 'given_name', 'initials', 'locality', 'organization', 'organizational_unit', 'pseudonym', 'serial_number', 'state', 'surname', 'title']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificate.SubjectProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificate.ValidityProperty
class CfnCertificate_ValidityPropertyDef(BaseStruct):
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies whether the ``Value`` parameter represents days, months, or years.\n')
    value: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='A long integer interpreted according to the value of ``Type`` , below.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificate-validity.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    validity_property = acmpca.CfnCertificate.ValidityProperty(\n        type="type",\n        value=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificate.ValidityProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificateAuthority.AccessDescriptionProperty
class CfnCertificateAuthority_AccessDescriptionPropertyDef(BaseStruct):
    access_location: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_GeneralNamePropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The location of ``AccessDescription`` information.\n')
    access_method: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_AccessMethodPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The type and format of ``AccessDescription`` information.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificateauthority-accessdescription.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    access_description_property = acmpca.CfnCertificateAuthority.AccessDescriptionProperty(\n        access_location=acmpca.CfnCertificateAuthority.GeneralNameProperty(\n            directory_name=acmpca.CfnCertificateAuthority.SubjectProperty(\n                common_name="commonName",\n                country="country",\n                custom_attributes=[acmpca.CfnCertificateAuthority.CustomAttributeProperty(\n                    object_identifier="objectIdentifier",\n                    value="value"\n                )],\n                distinguished_name_qualifier="distinguishedNameQualifier",\n                generation_qualifier="generationQualifier",\n                given_name="givenName",\n                initials="initials",\n                locality="locality",\n                organization="organization",\n                organizational_unit="organizationalUnit",\n                pseudonym="pseudonym",\n                serial_number="serialNumber",\n                state="state",\n                surname="surname",\n                title="title"\n            ),\n            dns_name="dnsName",\n            edi_party_name=acmpca.CfnCertificateAuthority.EdiPartyNameProperty(\n                party_name="partyName",\n\n                # the properties below are optional\n                name_assigner="nameAssigner"\n            ),\n            ip_address="ipAddress",\n            other_name=acmpca.CfnCertificateAuthority.OtherNameProperty(\n                type_id="typeId",\n                value="value"\n            ),\n            registered_id="registeredId",\n            rfc822_name="rfc822Name",\n            uniform_resource_identifier="uniformResourceIdentifier"\n        ),\n        access_method=acmpca.CfnCertificateAuthority.AccessMethodProperty(\n            access_method_type="accessMethodType",\n            custom_object_identifier="customObjectIdentifier"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['access_location', 'access_method']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificateAuthority.AccessDescriptionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificateAuthority.AccessMethodProperty
class CfnCertificateAuthority_AccessMethodPropertyDef(BaseStruct):
    access_method_type: typing.Optional[str] = pydantic.Field(None, description='Specifies the ``AccessMethod`` .\n')
    custom_object_identifier: typing.Optional[str] = pydantic.Field(None, description='An object identifier (OID) specifying the ``AccessMethod`` . The OID must satisfy the regular expression shown below. For more information, see NIST\'s definition of `Object Identifier (OID) <https://docs.aws.amazon.com/https://csrc.nist.gov/glossary/term/Object_Identifier>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificateauthority-accessmethod.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    access_method_property = acmpca.CfnCertificateAuthority.AccessMethodProperty(\n        access_method_type="accessMethodType",\n        custom_object_identifier="customObjectIdentifier"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['access_method_type', 'custom_object_identifier']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificateAuthority.AccessMethodProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificateAuthority.CrlConfigurationProperty
class CfnCertificateAuthority_CrlConfigurationPropertyDef(BaseStruct):
    enabled: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Boolean value that specifies whether certificate revocation lists (CRLs) are enabled. You can use this value to enable certificate revocation for a new CA when you call the ``CreateCertificateAuthority`` operation or for an existing CA when you call the ``UpdateCertificateAuthority`` operation.\n')
    crl_distribution_point_extension_configuration: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_CrlDistributionPointExtensionConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configures the default behavior of the CRL Distribution Point extension for certificates issued by your CA. If this field is not provided, then the CRL Distribution Point extension will be present and contain the default CRL URL.\n')
    custom_cname: typing.Optional[str] = pydantic.Field(None, description='Name inserted into the certificate *CRL Distribution Points* extension that enables the use of an alias for the CRL distribution point. Use this value if you don\'t want the name of your S3 bucket to be public. .. epigraph:: The content of a Canonical Name (CNAME) record must conform to `RFC2396 <https://docs.aws.amazon.com/https://www.ietf.org/rfc/rfc2396.txt>`_ restrictions on the use of special characters in URIs. Additionally, the value of the CNAME must not include a protocol prefix such as "http://" or "https://".\n')
    expiration_in_days: typing.Union[int, float, None] = pydantic.Field(None, description='Validity period of the CRL in days.\n')
    s3_bucket_name: typing.Optional[str] = pydantic.Field(None, description='Name of the S3 bucket that contains the CRL. If you do not provide a value for the *CustomCname* argument, the name of your S3 bucket is placed into the *CRL Distribution Points* extension of the issued certificate. You can change the name of your bucket by calling the `UpdateCertificateAuthority <https://docs.aws.amazon.com/privateca/latest/APIReference/API_UpdateCertificateAuthority.html>`_ operation. You must specify a `bucket policy <https://docs.aws.amazon.com/privateca/latest/userguide/PcaCreateCa.html#s3-policies>`_ that allows AWS Private CA to write the CRL to your bucket. .. epigraph:: The ``S3BucketName`` parameter must conform to the `S3 bucket naming rules <https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html>`_ .\n')
    s3_object_acl: typing.Optional[str] = pydantic.Field(None, description='Determines whether the CRL will be publicly readable or privately held in the CRL Amazon S3 bucket. If you choose PUBLIC_READ, the CRL will be accessible over the public internet. If you choose BUCKET_OWNER_FULL_CONTROL, only the owner of the CRL S3 bucket can access the CRL, and your PKI clients may need an alternative method of access. If no value is specified, the default is PUBLIC_READ. *Note:* This default can cause CA creation to fail in some circumstances. If you have have enabled the Block Public Access (BPA) feature in your S3 account, then you must specify the value of this parameter as ``BUCKET_OWNER_FULL_CONTROL`` , and not doing so results in an error. If you have disabled BPA in S3, then you can specify either ``BUCKET_OWNER_FULL_CONTROL`` or ``PUBLIC_READ`` as the value. For more information, see `Blocking public access to the S3 bucket <https://docs.aws.amazon.com/privateca/latest/userguide/PcaCreateCa.html#s3-bpa>`_ .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificateauthority-crlconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    crl_configuration_property = acmpca.CfnCertificateAuthority.CrlConfigurationProperty(\n        enabled=False,\n\n        # the properties below are optional\n        crl_distribution_point_extension_configuration=acmpca.CfnCertificateAuthority.CrlDistributionPointExtensionConfigurationProperty(\n            omit_extension=False\n        ),\n        custom_cname="customCname",\n        expiration_in_days=123,\n        s3_bucket_name="s3BucketName",\n        s3_object_acl="s3ObjectAcl"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled', 'crl_distribution_point_extension_configuration', 'custom_cname', 'expiration_in_days', 's3_bucket_name', 's3_object_acl']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificateAuthority.CrlConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificateAuthority.CrlDistributionPointExtensionConfigurationProperty
class CfnCertificateAuthority_CrlDistributionPointExtensionConfigurationPropertyDef(BaseStruct):
    omit_extension: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Configures whether the CRL Distribution Point extension should be populated with the default URL to the CRL. If set to ``true`` , then the CDP extension will not be present in any certificates issued by that CA unless otherwise specified through CSR or API passthrough. .. epigraph:: Only set this if you have another way to distribute the CRL Distribution Points for certificates issued by your CA, such as the Matter Distributed Compliance Ledger. This configuration cannot be enabled with a custom CNAME set.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificateauthority-crldistributionpointextensionconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    crl_distribution_point_extension_configuration_property = acmpca.CfnCertificateAuthority.CrlDistributionPointExtensionConfigurationProperty(\n        omit_extension=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['omit_extension']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificateAuthority.CrlDistributionPointExtensionConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificateAuthority.CsrExtensionsProperty
class CfnCertificateAuthority_CsrExtensionsPropertyDef(BaseStruct):
    key_usage: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_KeyUsagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Indicates the purpose of the certificate and of the key contained in the certificate.\n')
    subject_information_access: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_AccessDescriptionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='For CA certificates, provides a path to additional information pertaining to the CA, such as revocation and policy. For more information, see `Subject Information Access <https://docs.aws.amazon.com/https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.2.2>`_ in RFC 5280.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificateauthority-csrextensions.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    csr_extensions_property = acmpca.CfnCertificateAuthority.CsrExtensionsProperty(\n        key_usage=acmpca.CfnCertificateAuthority.KeyUsageProperty(\n            crl_sign=False,\n            data_encipherment=False,\n            decipher_only=False,\n            digital_signature=False,\n            encipher_only=False,\n            key_agreement=False,\n            key_cert_sign=False,\n            key_encipherment=False,\n            non_repudiation=False\n        ),\n        subject_information_access=[acmpca.CfnCertificateAuthority.AccessDescriptionProperty(\n            access_location=acmpca.CfnCertificateAuthority.GeneralNameProperty(\n                directory_name=acmpca.CfnCertificateAuthority.SubjectProperty(\n                    common_name="commonName",\n                    country="country",\n                    custom_attributes=[acmpca.CfnCertificateAuthority.CustomAttributeProperty(\n                        object_identifier="objectIdentifier",\n                        value="value"\n                    )],\n                    distinguished_name_qualifier="distinguishedNameQualifier",\n                    generation_qualifier="generationQualifier",\n                    given_name="givenName",\n                    initials="initials",\n                    locality="locality",\n                    organization="organization",\n                    organizational_unit="organizationalUnit",\n                    pseudonym="pseudonym",\n                    serial_number="serialNumber",\n                    state="state",\n                    surname="surname",\n                    title="title"\n                ),\n                dns_name="dnsName",\n                edi_party_name=acmpca.CfnCertificateAuthority.EdiPartyNameProperty(\n                    party_name="partyName",\n\n                    # the properties below are optional\n                    name_assigner="nameAssigner"\n                ),\n                ip_address="ipAddress",\n                other_name=acmpca.CfnCertificateAuthority.OtherNameProperty(\n                    type_id="typeId",\n                    value="value"\n                ),\n                registered_id="registeredId",\n                rfc822_name="rfc822Name",\n                uniform_resource_identifier="uniformResourceIdentifier"\n            ),\n            access_method=acmpca.CfnCertificateAuthority.AccessMethodProperty(\n                access_method_type="accessMethodType",\n                custom_object_identifier="customObjectIdentifier"\n            )\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key_usage', 'subject_information_access']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificateAuthority.CsrExtensionsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificateAuthority.CustomAttributeProperty
class CfnCertificateAuthority_CustomAttributePropertyDef(BaseStruct):
    object_identifier: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the object identifier (OID) of the attribute type of the relative distinguished name (RDN).\n')
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the attribute value of relative distinguished name (RDN).\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificateauthority-customattribute.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    custom_attribute_property = acmpca.CfnCertificateAuthority.CustomAttributeProperty(\n        object_identifier="objectIdentifier",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object_identifier', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificateAuthority.CustomAttributeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificateAuthority.EdiPartyNameProperty
class CfnCertificateAuthority_EdiPartyNamePropertyDef(BaseStruct):
    party_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies the party name.\n')
    name_assigner: typing.Optional[str] = pydantic.Field(None, description='Specifies the name assigner.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificateauthority-edipartyname.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    edi_party_name_property = acmpca.CfnCertificateAuthority.EdiPartyNameProperty(\n        party_name="partyName",\n\n        # the properties below are optional\n        name_assigner="nameAssigner"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['party_name', 'name_assigner']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificateAuthority.EdiPartyNameProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificateAuthority.GeneralNameProperty
class CfnCertificateAuthority_GeneralNamePropertyDef(BaseStruct):
    directory_name: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_SubjectPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Contains information about the certificate subject. The certificate can be one issued by your private certificate authority (CA) or it can be your private CA certificate. The Subject field in the certificate identifies the entity that owns or controls the public key in the certificate. The entity can be a user, computer, device, or service. The Subject must contain an X.500 distinguished name (DN). A DN is a sequence of relative distinguished names (RDNs). The RDNs are separated by commas in the certificate. The DN must be unique for each entity, but your private CA can issue more than one certificate with the same DN to the same entity.\n')
    dns_name: typing.Optional[str] = pydantic.Field(None, description='Represents ``GeneralName`` as a DNS name.\n')
    edi_party_name: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_EdiPartyNamePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Represents ``GeneralName`` as an ``EdiPartyName`` object.\n')
    ip_address: typing.Optional[str] = pydantic.Field(None, description='Represents ``GeneralName`` as an IPv4 or IPv6 address.\n')
    other_name: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_OtherNamePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Represents ``GeneralName`` using an ``OtherName`` object.\n')
    registered_id: typing.Optional[str] = pydantic.Field(None, description='Represents ``GeneralName`` as an object identifier (OID).\n')
    rfc822_name: typing.Optional[str] = pydantic.Field(None, description='Represents ``GeneralName`` as an `RFC 822 <https://docs.aws.amazon.com/https://datatracker.ietf.org/doc/html/rfc822>`_ email address.\n')
    uniform_resource_identifier: typing.Optional[str] = pydantic.Field(None, description='Represents ``GeneralName`` as a URI.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificateauthority-generalname.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    general_name_property = acmpca.CfnCertificateAuthority.GeneralNameProperty(\n        directory_name=acmpca.CfnCertificateAuthority.SubjectProperty(\n            common_name="commonName",\n            country="country",\n            custom_attributes=[acmpca.CfnCertificateAuthority.CustomAttributeProperty(\n                object_identifier="objectIdentifier",\n                value="value"\n            )],\n            distinguished_name_qualifier="distinguishedNameQualifier",\n            generation_qualifier="generationQualifier",\n            given_name="givenName",\n            initials="initials",\n            locality="locality",\n            organization="organization",\n            organizational_unit="organizationalUnit",\n            pseudonym="pseudonym",\n            serial_number="serialNumber",\n            state="state",\n            surname="surname",\n            title="title"\n        ),\n        dns_name="dnsName",\n        edi_party_name=acmpca.CfnCertificateAuthority.EdiPartyNameProperty(\n            party_name="partyName",\n\n            # the properties below are optional\n            name_assigner="nameAssigner"\n        ),\n        ip_address="ipAddress",\n        other_name=acmpca.CfnCertificateAuthority.OtherNameProperty(\n            type_id="typeId",\n            value="value"\n        ),\n        registered_id="registeredId",\n        rfc822_name="rfc822Name",\n        uniform_resource_identifier="uniformResourceIdentifier"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['directory_name', 'dns_name', 'edi_party_name', 'ip_address', 'other_name', 'registered_id', 'rfc822_name', 'uniform_resource_identifier']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificateAuthority.GeneralNameProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificateAuthority.KeyUsageProperty
class CfnCertificateAuthority_KeyUsagePropertyDef(BaseStruct):
    crl_sign: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Key can be used to sign CRLs. Default: - false\n')
    data_encipherment: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Key can be used to decipher data. Default: - false\n')
    decipher_only: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Key can be used only to decipher data. Default: - false\n')
    digital_signature: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Key can be used for digital signing. Default: - false\n')
    encipher_only: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Key can be used only to encipher data. Default: - false\n')
    key_agreement: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Key can be used in a key-agreement protocol. Default: - false\n')
    key_cert_sign: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Key can be used to sign certificates. Default: - false\n')
    key_encipherment: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Key can be used to encipher data. Default: - false\n')
    non_repudiation: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Key can be used for non-repudiation. Default: - false\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificateauthority-keyusage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    key_usage_property = acmpca.CfnCertificateAuthority.KeyUsageProperty(\n        crl_sign=False,\n        data_encipherment=False,\n        decipher_only=False,\n        digital_signature=False,\n        encipher_only=False,\n        key_agreement=False,\n        key_cert_sign=False,\n        key_encipherment=False,\n        non_repudiation=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['crl_sign', 'data_encipherment', 'decipher_only', 'digital_signature', 'encipher_only', 'key_agreement', 'key_cert_sign', 'key_encipherment', 'non_repudiation']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificateAuthority.KeyUsageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificateAuthority.OcspConfigurationProperty
class CfnCertificateAuthority_OcspConfigurationPropertyDef(BaseStruct):
    enabled: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='Flag enabling use of the Online Certificate Status Protocol (OCSP) for validating certificate revocation status.\n')
    ocsp_custom_cname: typing.Optional[str] = pydantic.Field(None, description='By default, AWS Private CA injects an Amazon domain into certificates being validated by the Online Certificate Status Protocol (OCSP). A customer can alternatively use this object to define a CNAME specifying a customized OCSP domain. .. epigraph:: The content of a Canonical Name (CNAME) record must conform to `RFC2396 <https://docs.aws.amazon.com/https://www.ietf.org/rfc/rfc2396.txt>`_ restrictions on the use of special characters in URIs. Additionally, the value of the CNAME must not include a protocol prefix such as "http://" or "https://".\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificateauthority-ocspconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    ocsp_configuration_property = acmpca.CfnCertificateAuthority.OcspConfigurationProperty(\n        enabled=False,\n\n        # the properties below are optional\n        ocsp_custom_cname="ocspCustomCname"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled', 'ocsp_custom_cname']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificateAuthority.OcspConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificateAuthority.OtherNameProperty
class CfnCertificateAuthority_OtherNamePropertyDef(BaseStruct):
    type_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies an OID.\n')
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Specifies an OID value.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificateauthority-othername.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    other_name_property = acmpca.CfnCertificateAuthority.OtherNameProperty(\n        type_id="typeId",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type_id', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificateAuthority.OtherNameProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificateAuthority.RevocationConfigurationProperty
class CfnCertificateAuthority_RevocationConfigurationPropertyDef(BaseStruct):
    crl_configuration: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_CrlConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration of the certificate revocation list (CRL), if any, maintained by your private CA.\n')
    ocsp_configuration: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_OcspConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration of Online Certificate Status Protocol (OCSP) support, if any, maintained by your private CA.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificateauthority-revocationconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    revocation_configuration_property = acmpca.CfnCertificateAuthority.RevocationConfigurationProperty(\n        crl_configuration=acmpca.CfnCertificateAuthority.CrlConfigurationProperty(\n            enabled=False,\n\n            # the properties below are optional\n            crl_distribution_point_extension_configuration=acmpca.CfnCertificateAuthority.CrlDistributionPointExtensionConfigurationProperty(\n                omit_extension=False\n            ),\n            custom_cname="customCname",\n            expiration_in_days=123,\n            s3_bucket_name="s3BucketName",\n            s3_object_acl="s3ObjectAcl"\n        ),\n        ocsp_configuration=acmpca.CfnCertificateAuthority.OcspConfigurationProperty(\n            enabled=False,\n\n            # the properties below are optional\n            ocsp_custom_cname="ocspCustomCname"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['crl_configuration', 'ocsp_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificateAuthority.RevocationConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificateAuthority.SubjectProperty
class CfnCertificateAuthority_SubjectPropertyDef(BaseStruct):
    common_name: typing.Optional[str] = pydantic.Field(None, description='Fully qualified domain name (FQDN) associated with the certificate subject.\n')
    country: typing.Optional[str] = pydantic.Field(None, description='Two-digit code that specifies the country in which the certificate subject located.\n')
    custom_attributes: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_CustomAttributePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Contains a sequence of one or more X.500 relative distinguished names (RDNs), each of which consists of an object identifier (OID) and a value. For more information, see NIST’s definition of `Object Identifier (OID) <https://docs.aws.amazon.com/https://csrc.nist.gov/glossary/term/Object_Identifier>`_ . .. epigraph:: Custom attributes cannot be used in combination with standard attributes.\n')
    distinguished_name_qualifier: typing.Optional[str] = pydantic.Field(None, description='Disambiguating information for the certificate subject.\n')
    generation_qualifier: typing.Optional[str] = pydantic.Field(None, description='Typically a qualifier appended to the name of an individual. Examples include Jr. for junior, Sr. for senior, and III for third.\n')
    given_name: typing.Optional[str] = pydantic.Field(None, description='First name.\n')
    initials: typing.Optional[str] = pydantic.Field(None, description='Concatenation that typically contains the first letter of the GivenName, the first letter of the middle name if one exists, and the first letter of the SurName.\n')
    locality: typing.Optional[str] = pydantic.Field(None, description='The locality (such as a city or town) in which the certificate subject is located.\n')
    organization: typing.Optional[str] = pydantic.Field(None, description='Legal name of the organization with which the certificate subject is affiliated.\n')
    organizational_unit: typing.Optional[str] = pydantic.Field(None, description='A subdivision or unit of the organization (such as sales or finance) with which the certificate subject is affiliated.\n')
    pseudonym: typing.Optional[str] = pydantic.Field(None, description='Typically a shortened version of a longer GivenName. For example, Jonathan is often shortened to John. Elizabeth is often shortened to Beth, Liz, or Eliza.\n')
    serial_number: typing.Optional[str] = pydantic.Field(None, description='The certificate serial number.\n')
    state: typing.Optional[str] = pydantic.Field(None, description='State in which the subject of the certificate is located.\n')
    surname: typing.Optional[str] = pydantic.Field(None, description='Family name.\n')
    title: typing.Optional[str] = pydantic.Field(None, description='A personal title such as Mr.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-acmpca-certificateauthority-subject.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    subject_property = acmpca.CfnCertificateAuthority.SubjectProperty(\n        common_name="commonName",\n        country="country",\n        custom_attributes=[acmpca.CfnCertificateAuthority.CustomAttributeProperty(\n            object_identifier="objectIdentifier",\n            value="value"\n        )],\n        distinguished_name_qualifier="distinguishedNameQualifier",\n        generation_qualifier="generationQualifier",\n        given_name="givenName",\n        initials="initials",\n        locality="locality",\n        organization="organization",\n        organizational_unit="organizationalUnit",\n        pseudonym="pseudonym",\n        serial_number="serialNumber",\n        state="state",\n        surname="surname",\n        title="title"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['common_name', 'country', 'custom_attributes', 'distinguished_name_qualifier', 'generation_qualifier', 'given_name', 'initials', 'locality', 'organization', 'organizational_unit', 'pseudonym', 'serial_number', 'state', 'surname', 'title']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificateAuthority.SubjectProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.ICertificateAuthority
#  skipping Interface

#  autogenerated from aws_cdk.aws_acmpca.CfnCertificate
class CfnCertificateDef(BaseCfnResource):
    certificate_authority_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) for the private CA issues the certificate.\n')
    certificate_signing_request: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The certificate signing request (CSR) for the certificate.\n')
    signing_algorithm: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The name of the algorithm that will be used to sign the certificate to be issued. This parameter should not be confused with the ``SigningAlgorithm`` parameter used to sign a CSR in the ``CreateCertificateAuthority`` action. .. epigraph:: The specified signing algorithm family (RSA or ECDSA) must match the algorithm family of the CA's secret key.\n")
    validity: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_acmpca.CfnCertificate_ValidityPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The period of time during which the certificate will be valid.\n')
    api_passthrough: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_ApiPassthroughPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies X.509 certificate information to be included in the issued certificate. An ``APIPassthrough`` or ``APICSRPassthrough`` template variant must be selected, or else this parameter is ignored.\n')
    template_arn: typing.Optional[str] = pydantic.Field(None, description='Specifies a custom configuration template to use when issuing a certificate. If this parameter is not provided, AWS Private CA defaults to the ``EndEntityCertificate/V1`` template. For more information about AWS Private CA templates, see `Using Templates <https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html>`_ .\n')
    validity_not_before: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_ValidityPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information describing the start of the validity period of the certificate. This parameter sets the “Not Before" date for the certificate. By default, when issuing a certificate, AWS Private CA sets the "Not Before" date to the issuance time minus 60 minutes. This compensates for clock inconsistencies across computer systems. The ``ValidityNotBefore`` parameter can be used to customize the “Not Before” value. Unlike the ``Validity`` parameter, the ``ValidityNotBefore`` parameter is optional. The ``ValidityNotBefore`` value is expressed as an explicit date and time, using the ``Validity`` type value ``ABSOLUTE`` .')
    _init_params: typing.ClassVar[list[str]] = ['certificate_authority_arn', 'certificate_signing_request', 'signing_algorithm', 'validity', 'api_passthrough', 'template_arn', 'validity_not_before']
    _method_names: typing.ClassVar[list[str]] = ['ApiPassthroughProperty', 'CustomAttributeProperty', 'CustomExtensionProperty', 'EdiPartyNameProperty', 'ExtendedKeyUsageProperty', 'ExtensionsProperty', 'GeneralNameProperty', 'KeyUsageProperty', 'OtherNameProperty', 'PolicyInformationProperty', 'PolicyQualifierInfoProperty', 'QualifierProperty', 'SubjectProperty', 'ValidityProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificate'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_acmpca.CfnCertificateDefConfig] = pydantic.Field(None)


class CfnCertificateDefConfig(pydantic.BaseModel):
    ApiPassthroughProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateDefApipassthroughpropertyParams]] = pydantic.Field(None, description='')
    CustomAttributeProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateDefCustomattributepropertyParams]] = pydantic.Field(None, description='')
    CustomExtensionProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateDefCustomextensionpropertyParams]] = pydantic.Field(None, description='')
    EdiPartyNameProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateDefEdipartynamepropertyParams]] = pydantic.Field(None, description='')
    ExtendedKeyUsageProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateDefExtendedkeyusagepropertyParams]] = pydantic.Field(None, description='')
    ExtensionsProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateDefExtensionspropertyParams]] = pydantic.Field(None, description='')
    GeneralNameProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateDefGeneralnamepropertyParams]] = pydantic.Field(None, description='')
    KeyUsageProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateDefKeyusagepropertyParams]] = pydantic.Field(None, description='')
    OtherNameProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateDefOthernamepropertyParams]] = pydantic.Field(None, description='')
    PolicyInformationProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateDefPolicyinformationpropertyParams]] = pydantic.Field(None, description='')
    PolicyQualifierInfoProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateDefPolicyqualifierinfopropertyParams]] = pydantic.Field(None, description='')
    QualifierProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateDefQualifierpropertyParams]] = pydantic.Field(None, description='')
    SubjectProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateDefSubjectpropertyParams]] = pydantic.Field(None, description='')
    ValidityProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateDefValiditypropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_acmpca.CfnCertificateDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_acmpca.CfnCertificateDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_acmpca.CfnCertificateDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_acmpca.CfnCertificateDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_acmpca.CfnCertificateDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_acmpca.CfnCertificateDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_acmpca.CfnCertificateDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_acmpca.CfnCertificateDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_acmpca.CfnCertificateDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_acmpca.CfnCertificateDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_acmpca.CfnCertificateDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_acmpca.CfnCertificateDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_acmpca.CfnCertificateDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnCertificateDefApipassthroughpropertyParams(pydantic.BaseModel):
    extensions: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_ExtensionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    subject: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_SubjectPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnCertificateDefCustomattributepropertyParams(pydantic.BaseModel):
    object_identifier: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnCertificateDefCustomextensionpropertyParams(pydantic.BaseModel):
    object_identifier: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    critical: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnCertificateDefEdipartynamepropertyParams(pydantic.BaseModel):
    name_assigner: str = pydantic.Field(..., description='')
    party_name: str = pydantic.Field(..., description='')
    ...

class CfnCertificateDefExtendedkeyusagepropertyParams(pydantic.BaseModel):
    extended_key_usage_object_identifier: typing.Optional[str] = pydantic.Field(None, description='')
    extended_key_usage_type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCertificateDefExtensionspropertyParams(pydantic.BaseModel):
    certificate_policies: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_PolicyInformationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    custom_extensions: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_CustomExtensionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    extended_key_usage: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_ExtendedKeyUsagePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    key_usage: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_KeyUsagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    subject_alternative_names: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_GeneralNamePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnCertificateDefGeneralnamepropertyParams(pydantic.BaseModel):
    directory_name: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_SubjectPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    dns_name: typing.Optional[str] = pydantic.Field(None, description='')
    edi_party_name: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_EdiPartyNamePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ip_address: typing.Optional[str] = pydantic.Field(None, description='')
    other_name: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_OtherNamePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    registered_id: typing.Optional[str] = pydantic.Field(None, description='')
    rfc822_name: typing.Optional[str] = pydantic.Field(None, description='')
    uniform_resource_identifier: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCertificateDefKeyusagepropertyParams(pydantic.BaseModel):
    crl_sign: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    data_encipherment: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    decipher_only: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    digital_signature: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    encipher_only: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    key_agreement: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    key_cert_sign: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    key_encipherment: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    non_repudiation: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnCertificateDefOthernamepropertyParams(pydantic.BaseModel):
    type_id: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnCertificateDefPolicyinformationpropertyParams(pydantic.BaseModel):
    cert_policy_id: str = pydantic.Field(..., description='')
    policy_qualifiers: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_PolicyQualifierInfoPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnCertificateDefPolicyqualifierinfopropertyParams(pydantic.BaseModel):
    policy_qualifier_id: str = pydantic.Field(..., description='')
    qualifier: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_QualifierPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnCertificateDefQualifierpropertyParams(pydantic.BaseModel):
    cps_uri: str = pydantic.Field(..., description='')
    ...

class CfnCertificateDefSubjectpropertyParams(pydantic.BaseModel):
    common_name: typing.Optional[str] = pydantic.Field(None, description='')
    country: typing.Optional[str] = pydantic.Field(None, description='')
    custom_attributes: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_CustomAttributePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    distinguished_name_qualifier: typing.Optional[str] = pydantic.Field(None, description='')
    generation_qualifier: typing.Optional[str] = pydantic.Field(None, description='')
    given_name: typing.Optional[str] = pydantic.Field(None, description='')
    initials: typing.Optional[str] = pydantic.Field(None, description='')
    locality: typing.Optional[str] = pydantic.Field(None, description='')
    organization: typing.Optional[str] = pydantic.Field(None, description='')
    organizational_unit: typing.Optional[str] = pydantic.Field(None, description='')
    pseudonym: typing.Optional[str] = pydantic.Field(None, description='')
    serial_number: typing.Optional[str] = pydantic.Field(None, description='')
    state: typing.Optional[str] = pydantic.Field(None, description='')
    surname: typing.Optional[str] = pydantic.Field(None, description='')
    title: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCertificateDefValiditypropertyParams(pydantic.BaseModel):
    type: str = pydantic.Field(..., description='')
    value: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnCertificateDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnCertificateDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCertificateDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnCertificateDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCertificateDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnCertificateDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnCertificateDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnCertificateDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnCertificateDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnCertificateDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCertificateDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnCertificateDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnCertificateDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCertificateDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_acmpca.CfnCertificateAuthority
class CfnCertificateAuthorityDef(BaseCfnResource):
    key_algorithm: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Type of the public key algorithm and size, in bits, of the key pair that your CA creates when it issues a certificate. When you create a subordinate CA, you must use a key algorithm supported by the parent CA.\n')
    signing_algorithm: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Name of the algorithm your private CA uses to sign certificate requests. This parameter should not be confused with the ``SigningAlgorithm`` parameter used to sign certificates when they are issued.\n')
    subject: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_SubjectPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Structure that contains X.500 distinguished name information for your private CA.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Type of your private CA.\n')
    csr_extensions: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_CsrExtensionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies information to be added to the extension section of the certificate signing request (CSR).\n')
    key_storage_security_standard: typing.Optional[str] = pydantic.Field(None, description='Specifies a cryptographic key management compliance standard used for handling CA keys. Default: FIPS_140_2_LEVEL_3_OR_HIGHER .. epigraph:: Some AWS Regions do not support the default. When creating a CA in these Regions, you must provide ``FIPS_140_2_LEVEL_2_OR_HIGHER`` as the argument for ``KeyStorageSecurityStandard`` . Failure to do this results in an ``InvalidArgsException`` with the message, "A certificate authority cannot be created in this region with the specified security standard." For information about security standard support in various Regions, see `Storage and security compliance of AWS Private CA private keys <https://docs.aws.amazon.com/privateca/latest/userguide/data-protection.html#private-keys>`_ .\n')
    revocation_configuration: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_RevocationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Certificate revocation information used by the `CreateCertificateAuthority <https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html>`_ and `UpdateCertificateAuthority <https://docs.aws.amazon.com/privateca/latest/APIReference/API_UpdateCertificateAuthority.html>`_ actions. Your private certificate authority (CA) can configure Online Certificate Status Protocol (OCSP) support and/or maintain a certificate revocation list (CRL). OCSP returns validation information about certificates as requested by clients, and a CRL contains an updated list of certificates revoked by your CA. For more information, see `RevokeCertificate <https://docs.aws.amazon.com/privateca/latest/APIReference/API_RevokeCertificate.html>`_ in the *AWS Private CA API Reference* and `Setting up a certificate revocation method <https://docs.aws.amazon.com/privateca/latest/userguide/revocation-setup.html>`_ in the *AWS Private CA User Guide* . .. epigraph:: The following requirements apply to revocation configurations. - A configuration disabling CRLs or OCSP must contain only the ``Enabled=False`` parameter, and will fail if other parameters such as ``CustomCname`` or ``ExpirationInDays`` are included. - In a CRL configuration, the ``S3BucketName`` parameter must conform to the `Amazon S3 bucket naming rules <https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html>`_ . - A configuration containing a custom Canonical Name (CNAME) parameter for CRLs or OCSP must conform to `RFC2396 <https://docs.aws.amazon.com/https://www.ietf.org/rfc/rfc2396.txt>`_ restrictions on the use of special characters in a CNAME. - In a CRL or OCSP configuration, the value of a CNAME parameter must not include a protocol prefix such as "http://" or "https://".\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Key-value pairs that will be attached to the new private CA. You can associate up to 50 tags with a private CA. For information using tags with IAM to manage permissions, see `Controlling Access Using IAM Tags <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html>`_ .\n')
    usage_mode: typing.Optional[str] = pydantic.Field(None, description='Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days. The default value is GENERAL_PURPOSE.')
    _init_params: typing.ClassVar[list[str]] = ['key_algorithm', 'signing_algorithm', 'subject', 'type', 'csr_extensions', 'key_storage_security_standard', 'revocation_configuration', 'tags', 'usage_mode']
    _method_names: typing.ClassVar[list[str]] = ['AccessDescriptionProperty', 'AccessMethodProperty', 'CrlConfigurationProperty', 'CrlDistributionPointExtensionConfigurationProperty', 'CsrExtensionsProperty', 'CustomAttributeProperty', 'EdiPartyNameProperty', 'GeneralNameProperty', 'KeyUsageProperty', 'OcspConfigurationProperty', 'OtherNameProperty', 'RevocationConfigurationProperty', 'SubjectProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificateAuthority'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_acmpca.CfnCertificateAuthorityDefConfig] = pydantic.Field(None)


class CfnCertificateAuthorityDefConfig(pydantic.BaseModel):
    AccessDescriptionProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefAccessdescriptionpropertyParams]] = pydantic.Field(None, description='')
    AccessMethodProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefAccessmethodpropertyParams]] = pydantic.Field(None, description='')
    CrlConfigurationProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefCrlconfigurationpropertyParams]] = pydantic.Field(None, description='')
    CrlDistributionPointExtensionConfigurationProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefCrldistributionpointextensionconfigurationpropertyParams]] = pydantic.Field(None, description='')
    CsrExtensionsProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefCsrextensionspropertyParams]] = pydantic.Field(None, description='')
    CustomAttributeProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefCustomattributepropertyParams]] = pydantic.Field(None, description='')
    EdiPartyNameProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefEdipartynamepropertyParams]] = pydantic.Field(None, description='')
    GeneralNameProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefGeneralnamepropertyParams]] = pydantic.Field(None, description='')
    KeyUsageProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefKeyusagepropertyParams]] = pydantic.Field(None, description='')
    OcspConfigurationProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefOcspconfigurationpropertyParams]] = pydantic.Field(None, description='')
    OtherNameProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefOthernamepropertyParams]] = pydantic.Field(None, description='')
    RevocationConfigurationProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefRevocationconfigurationpropertyParams]] = pydantic.Field(None, description='')
    SubjectProperty: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefSubjectpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnCertificateAuthorityDefAccessdescriptionpropertyParams(pydantic.BaseModel):
    access_location: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_GeneralNamePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    access_method: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_AccessMethodPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnCertificateAuthorityDefAccessmethodpropertyParams(pydantic.BaseModel):
    access_method_type: typing.Optional[str] = pydantic.Field(None, description='')
    custom_object_identifier: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCertificateAuthorityDefCrlconfigurationpropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    crl_distribution_point_extension_configuration: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_CrlDistributionPointExtensionConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    custom_cname: typing.Optional[str] = pydantic.Field(None, description='')
    expiration_in_days: typing.Union[int, float, None] = pydantic.Field(None, description='')
    s3_bucket_name: typing.Optional[str] = pydantic.Field(None, description='')
    s3_object_acl: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCertificateAuthorityDefCrldistributionpointextensionconfigurationpropertyParams(pydantic.BaseModel):
    omit_extension: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    ...

class CfnCertificateAuthorityDefCsrextensionspropertyParams(pydantic.BaseModel):
    key_usage: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_KeyUsagePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    subject_information_access: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_AccessDescriptionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnCertificateAuthorityDefCustomattributepropertyParams(pydantic.BaseModel):
    object_identifier: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnCertificateAuthorityDefEdipartynamepropertyParams(pydantic.BaseModel):
    party_name: str = pydantic.Field(..., description='')
    name_assigner: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCertificateAuthorityDefGeneralnamepropertyParams(pydantic.BaseModel):
    directory_name: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_SubjectPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    dns_name: typing.Optional[str] = pydantic.Field(None, description='')
    edi_party_name: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_EdiPartyNamePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ip_address: typing.Optional[str] = pydantic.Field(None, description='')
    other_name: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_OtherNamePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    registered_id: typing.Optional[str] = pydantic.Field(None, description='')
    rfc822_name: typing.Optional[str] = pydantic.Field(None, description='')
    uniform_resource_identifier: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCertificateAuthorityDefKeyusagepropertyParams(pydantic.BaseModel):
    crl_sign: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    data_encipherment: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    decipher_only: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    digital_signature: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    encipher_only: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    key_agreement: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    key_cert_sign: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    key_encipherment: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    non_repudiation: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnCertificateAuthorityDefOcspconfigurationpropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    ocsp_custom_cname: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCertificateAuthorityDefOthernamepropertyParams(pydantic.BaseModel):
    type_id: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnCertificateAuthorityDefRevocationconfigurationpropertyParams(pydantic.BaseModel):
    crl_configuration: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_CrlConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ocsp_configuration: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_OcspConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnCertificateAuthorityDefSubjectpropertyParams(pydantic.BaseModel):
    common_name: typing.Optional[str] = pydantic.Field(None, description='')
    country: typing.Optional[str] = pydantic.Field(None, description='')
    custom_attributes: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_CustomAttributePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    distinguished_name_qualifier: typing.Optional[str] = pydantic.Field(None, description='')
    generation_qualifier: typing.Optional[str] = pydantic.Field(None, description='')
    given_name: typing.Optional[str] = pydantic.Field(None, description='')
    initials: typing.Optional[str] = pydantic.Field(None, description='')
    locality: typing.Optional[str] = pydantic.Field(None, description='')
    organization: typing.Optional[str] = pydantic.Field(None, description='')
    organizational_unit: typing.Optional[str] = pydantic.Field(None, description='')
    pseudonym: typing.Optional[str] = pydantic.Field(None, description='')
    serial_number: typing.Optional[str] = pydantic.Field(None, description='')
    state: typing.Optional[str] = pydantic.Field(None, description='')
    surname: typing.Optional[str] = pydantic.Field(None, description='')
    title: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCertificateAuthorityDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnCertificateAuthorityDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCertificateAuthorityDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnCertificateAuthorityDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCertificateAuthorityDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnCertificateAuthorityDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnCertificateAuthorityDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnCertificateAuthorityDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnCertificateAuthorityDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnCertificateAuthorityDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCertificateAuthorityDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnCertificateAuthorityDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnCertificateAuthorityDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCertificateAuthorityDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_acmpca.CfnCertificateAuthorityActivation
class CfnCertificateAuthorityActivationDef(BaseCfnResource):
    certificate: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Base64 PEM-encoded certificate authority certificate.\n')
    certificate_authority_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of your private CA.\n')
    certificate_chain: typing.Optional[str] = pydantic.Field(None, description='The Base64 PEM-encoded certificate chain that chains up to the root CA certificate that you used to sign your private CA certificate.\n')
    status: typing.Optional[str] = pydantic.Field(None, description='Status of your private CA.')
    _init_params: typing.ClassVar[list[str]] = ['certificate', 'certificate_authority_arn', 'certificate_chain', 'status']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificateAuthorityActivation'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_acmpca.CfnCertificateAuthorityActivationDefConfig] = pydantic.Field(None)


class CfnCertificateAuthorityActivationDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityActivationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityActivationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityActivationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityActivationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityActivationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityActivationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityActivationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityActivationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityActivationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityActivationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityActivationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityActivationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_acmpca.CfnCertificateAuthorityActivationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnCertificateAuthorityActivationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnCertificateAuthorityActivationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCertificateAuthorityActivationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnCertificateAuthorityActivationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCertificateAuthorityActivationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnCertificateAuthorityActivationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnCertificateAuthorityActivationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnCertificateAuthorityActivationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnCertificateAuthorityActivationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnCertificateAuthorityActivationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCertificateAuthorityActivationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnCertificateAuthorityActivationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnCertificateAuthorityActivationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCertificateAuthorityActivationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_acmpca.CfnPermission
class CfnPermissionDef(BaseCfnResource):
    actions: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The private CA actions that can be performed by the designated AWS service. Supported actions are ``IssueCertificate`` , ``GetCertificate`` , and ``ListPermissions`` .\n')
    certificate_authority_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Number (ARN) of the private CA from which the permission was issued.\n')
    principal: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The AWS service or entity that holds the permission. At this time, the only valid principal is ``acm.amazonaws.com`` .\n')
    source_account: typing.Optional[str] = pydantic.Field(None, description='The ID of the account that assigned the permission.')
    _init_params: typing.ClassVar[list[str]] = ['actions', 'certificate_authority_arn', 'principal', 'source_account']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnPermission'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_acmpca.CfnPermissionDefConfig] = pydantic.Field(None)


class CfnPermissionDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_acmpca.CfnPermissionDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_acmpca.CfnPermissionDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_acmpca.CfnPermissionDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_acmpca.CfnPermissionDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_acmpca.CfnPermissionDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_acmpca.CfnPermissionDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_acmpca.CfnPermissionDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_acmpca.CfnPermissionDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_acmpca.CfnPermissionDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_acmpca.CfnPermissionDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_acmpca.CfnPermissionDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_acmpca.CfnPermissionDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_acmpca.CfnPermissionDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnPermissionDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnPermissionDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPermissionDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnPermissionDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPermissionDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnPermissionDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnPermissionDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnPermissionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnPermissionDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnPermissionDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPermissionDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnPermissionDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnPermissionDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPermissionDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_acmpca.CfnCertificateAuthorityActivationProps
class CfnCertificateAuthorityActivationPropsDef(BaseCfnProperty):
    certificate: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Base64 PEM-encoded certificate authority certificate.\n')
    certificate_authority_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) of your private CA.\n')
    certificate_chain: typing.Optional[str] = pydantic.Field(None, description='The Base64 PEM-encoded certificate chain that chains up to the root CA certificate that you used to sign your private CA certificate.\n')
    status: typing.Optional[str] = pydantic.Field(None, description='Status of your private CA.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-acmpca-certificateauthorityactivation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    cfn_certificate_authority_activation_props = acmpca.CfnCertificateAuthorityActivationProps(\n        certificate="certificate",\n        certificate_authority_arn="certificateAuthorityArn",\n\n        # the properties below are optional\n        certificate_chain="certificateChain",\n        status="status"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['certificate', 'certificate_authority_arn', 'certificate_chain', 'status']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificateAuthorityActivationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificateAuthorityProps
class CfnCertificateAuthorityPropsDef(BaseCfnProperty):
    key_algorithm: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Type of the public key algorithm and size, in bits, of the key pair that your CA creates when it issues a certificate. When you create a subordinate CA, you must use a key algorithm supported by the parent CA.\n')
    signing_algorithm: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Name of the algorithm your private CA uses to sign certificate requests. This parameter should not be confused with the ``SigningAlgorithm`` parameter used to sign certificates when they are issued.\n')
    subject: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_SubjectPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='Structure that contains X.500 distinguished name information for your private CA.\n')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='Type of your private CA.\n')
    csr_extensions: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_CsrExtensionsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies information to be added to the extension section of the certificate signing request (CSR).\n')
    key_storage_security_standard: typing.Optional[str] = pydantic.Field(None, description='Specifies a cryptographic key management compliance standard used for handling CA keys. Default: FIPS_140_2_LEVEL_3_OR_HIGHER .. epigraph:: Some AWS Regions do not support the default. When creating a CA in these Regions, you must provide ``FIPS_140_2_LEVEL_2_OR_HIGHER`` as the argument for ``KeyStorageSecurityStandard`` . Failure to do this results in an ``InvalidArgsException`` with the message, "A certificate authority cannot be created in this region with the specified security standard." For information about security standard support in various Regions, see `Storage and security compliance of AWS Private CA private keys <https://docs.aws.amazon.com/privateca/latest/userguide/data-protection.html#private-keys>`_ .\n')
    revocation_configuration: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificateAuthority_RevocationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Certificate revocation information used by the `CreateCertificateAuthority <https://docs.aws.amazon.com/privateca/latest/APIReference/API_CreateCertificateAuthority.html>`_ and `UpdateCertificateAuthority <https://docs.aws.amazon.com/privateca/latest/APIReference/API_UpdateCertificateAuthority.html>`_ actions. Your private certificate authority (CA) can configure Online Certificate Status Protocol (OCSP) support and/or maintain a certificate revocation list (CRL). OCSP returns validation information about certificates as requested by clients, and a CRL contains an updated list of certificates revoked by your CA. For more information, see `RevokeCertificate <https://docs.aws.amazon.com/privateca/latest/APIReference/API_RevokeCertificate.html>`_ in the *AWS Private CA API Reference* and `Setting up a certificate revocation method <https://docs.aws.amazon.com/privateca/latest/userguide/revocation-setup.html>`_ in the *AWS Private CA User Guide* . .. epigraph:: The following requirements apply to revocation configurations. - A configuration disabling CRLs or OCSP must contain only the ``Enabled=False`` parameter, and will fail if other parameters such as ``CustomCname`` or ``ExpirationInDays`` are included. - In a CRL configuration, the ``S3BucketName`` parameter must conform to the `Amazon S3 bucket naming rules <https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html>`_ . - A configuration containing a custom Canonical Name (CNAME) parameter for CRLs or OCSP must conform to `RFC2396 <https://docs.aws.amazon.com/https://www.ietf.org/rfc/rfc2396.txt>`_ restrictions on the use of special characters in a CNAME. - In a CRL or OCSP configuration, the value of a CNAME parameter must not include a protocol prefix such as "http://" or "https://".\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Key-value pairs that will be attached to the new private CA. You can associate up to 50 tags with a private CA. For information using tags with IAM to manage permissions, see `Controlling Access Using IAM Tags <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html>`_ .\n')
    usage_mode: typing.Optional[str] = pydantic.Field(None, description='Specifies whether the CA issues general-purpose certificates that typically require a revocation mechanism, or short-lived certificates that may optionally omit revocation because they expire quickly. Short-lived certificate validity is limited to seven days. The default value is GENERAL_PURPOSE.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-acmpca-certificateauthority.html\n:exampleMetadata: infused\n\nExample::\n\n    cfn_certificate_authority = acmpca.CfnCertificateAuthority(self, "CA",\n        type="ROOT",\n        key_algorithm="RSA_2048",\n        signing_algorithm="SHA256WITHRSA",\n        subject=acmpca.CfnCertificateAuthority.SubjectProperty(\n            country="US",\n            organization="string",\n            organizational_unit="string",\n            distinguished_name_qualifier="string",\n            state="string",\n            common_name="123",\n            serial_number="string",\n            locality="string",\n            title="string",\n            surname="string",\n            given_name="string",\n            initials="DG",\n            pseudonym="string",\n            generation_qualifier="DBG"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key_algorithm', 'signing_algorithm', 'subject', 'type', 'csr_extensions', 'key_storage_security_standard', 'revocation_configuration', 'tags', 'usage_mode']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificateAuthorityProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnCertificateProps
class CfnCertificatePropsDef(BaseCfnProperty):
    certificate_authority_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Name (ARN) for the private CA issues the certificate.\n')
    certificate_signing_request: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The certificate signing request (CSR) for the certificate.\n')
    signing_algorithm: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The name of the algorithm that will be used to sign the certificate to be issued. This parameter should not be confused with the ``SigningAlgorithm`` parameter used to sign a CSR in the ``CreateCertificateAuthority`` action. .. epigraph:: The specified signing algorithm family (RSA or ECDSA) must match the algorithm family of the CA's secret key.\n")
    validity: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_acmpca.CfnCertificate_ValidityPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The period of time during which the certificate will be valid.\n')
    api_passthrough: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_ApiPassthroughPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies X.509 certificate information to be included in the issued certificate. An ``APIPassthrough`` or ``APICSRPassthrough`` template variant must be selected, or else this parameter is ignored.\n')
    template_arn: typing.Optional[str] = pydantic.Field(None, description='Specifies a custom configuration template to use when issuing a certificate. If this parameter is not provided, AWS Private CA defaults to the ``EndEntityCertificate/V1`` template. For more information about AWS Private CA templates, see `Using Templates <https://docs.aws.amazon.com/privateca/latest/userguide/UsingTemplates.html>`_ .\n')
    validity_not_before: typing.Union[models.UnsupportedResource, models.aws_acmpca.CfnCertificate_ValidityPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information describing the start of the validity period of the certificate. This parameter sets the “Not Before" date for the certificate. By default, when issuing a certificate, AWS Private CA sets the "Not Before" date to the issuance time minus 60 minutes. This compensates for clock inconsistencies across computer systems. The ``ValidityNotBefore`` parameter can be used to customize the “Not Before” value. Unlike the ``Validity`` parameter, the ``ValidityNotBefore`` parameter is optional. The ``ValidityNotBefore`` value is expressed as an explicit date and time, using the ``Validity`` type value ``ABSOLUTE`` .\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-acmpca-certificate.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    cfn_certificate_props = acmpca.CfnCertificateProps(\n        certificate_authority_arn="certificateAuthorityArn",\n        certificate_signing_request="certificateSigningRequest",\n        signing_algorithm="signingAlgorithm",\n        validity=acmpca.CfnCertificate.ValidityProperty(\n            type="type",\n            value=123\n        ),\n\n        # the properties below are optional\n        api_passthrough=acmpca.CfnCertificate.ApiPassthroughProperty(\n            extensions=acmpca.CfnCertificate.ExtensionsProperty(\n                certificate_policies=[acmpca.CfnCertificate.PolicyInformationProperty(\n                    cert_policy_id="certPolicyId",\n\n                    # the properties below are optional\n                    policy_qualifiers=[acmpca.CfnCertificate.PolicyQualifierInfoProperty(\n                        policy_qualifier_id="policyQualifierId",\n                        qualifier=acmpca.CfnCertificate.QualifierProperty(\n                            cps_uri="cpsUri"\n                        )\n                    )]\n                )],\n                custom_extensions=[acmpca.CfnCertificate.CustomExtensionProperty(\n                    object_identifier="objectIdentifier",\n                    value="value",\n\n                    # the properties below are optional\n                    critical=False\n                )],\n                extended_key_usage=[acmpca.CfnCertificate.ExtendedKeyUsageProperty(\n                    extended_key_usage_object_identifier="extendedKeyUsageObjectIdentifier",\n                    extended_key_usage_type="extendedKeyUsageType"\n                )],\n                key_usage=acmpca.CfnCertificate.KeyUsageProperty(\n                    crl_sign=False,\n                    data_encipherment=False,\n                    decipher_only=False,\n                    digital_signature=False,\n                    encipher_only=False,\n                    key_agreement=False,\n                    key_cert_sign=False,\n                    key_encipherment=False,\n                    non_repudiation=False\n                ),\n                subject_alternative_names=[acmpca.CfnCertificate.GeneralNameProperty(\n                    directory_name=acmpca.CfnCertificate.SubjectProperty(\n                        common_name="commonName",\n                        country="country",\n                        custom_attributes=[acmpca.CfnCertificate.CustomAttributeProperty(\n                            object_identifier="objectIdentifier",\n                            value="value"\n                        )],\n                        distinguished_name_qualifier="distinguishedNameQualifier",\n                        generation_qualifier="generationQualifier",\n                        given_name="givenName",\n                        initials="initials",\n                        locality="locality",\n                        organization="organization",\n                        organizational_unit="organizationalUnit",\n                        pseudonym="pseudonym",\n                        serial_number="serialNumber",\n                        state="state",\n                        surname="surname",\n                        title="title"\n                    ),\n                    dns_name="dnsName",\n                    edi_party_name=acmpca.CfnCertificate.EdiPartyNameProperty(\n                        name_assigner="nameAssigner",\n                        party_name="partyName"\n                    ),\n                    ip_address="ipAddress",\n                    other_name=acmpca.CfnCertificate.OtherNameProperty(\n                        type_id="typeId",\n                        value="value"\n                    ),\n                    registered_id="registeredId",\n                    rfc822_name="rfc822Name",\n                    uniform_resource_identifier="uniformResourceIdentifier"\n                )]\n            ),\n            subject=acmpca.CfnCertificate.SubjectProperty(\n                common_name="commonName",\n                country="country",\n                custom_attributes=[acmpca.CfnCertificate.CustomAttributeProperty(\n                    object_identifier="objectIdentifier",\n                    value="value"\n                )],\n                distinguished_name_qualifier="distinguishedNameQualifier",\n                generation_qualifier="generationQualifier",\n                given_name="givenName",\n                initials="initials",\n                locality="locality",\n                organization="organization",\n                organizational_unit="organizationalUnit",\n                pseudonym="pseudonym",\n                serial_number="serialNumber",\n                state="state",\n                surname="surname",\n                title="title"\n            )\n        ),\n        template_arn="templateArn",\n        validity_not_before=acmpca.CfnCertificate.ValidityProperty(\n            type="type",\n            value=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['certificate_authority_arn', 'certificate_signing_request', 'signing_algorithm', 'validity', 'api_passthrough', 'template_arn', 'validity_not_before']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnCertificateProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_acmpca.CfnPermissionProps
class CfnPermissionPropsDef(BaseCfnProperty):
    actions: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The private CA actions that can be performed by the designated AWS service. Supported actions are ``IssueCertificate`` , ``GetCertificate`` , and ``ListPermissions`` .\n')
    certificate_authority_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The Amazon Resource Number (ARN) of the private CA from which the permission was issued.\n')
    principal: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The AWS service or entity that holds the permission. At this time, the only valid principal is ``acm.amazonaws.com`` .\n')
    source_account: typing.Optional[str] = pydantic.Field(None, description='The ID of the account that assigned the permission.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-acmpca-permission.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_acmpca as acmpca\n\n    cfn_permission_props = acmpca.CfnPermissionProps(\n        actions=["actions"],\n        certificate_authority_arn="certificateAuthorityArn",\n        principal="principal",\n\n        # the properties below are optional\n        source_account="sourceAccount"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['actions', 'certificate_authority_arn', 'principal', 'source_account']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_acmpca.CfnPermissionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CertificateAuthority: typing.Optional[dict[str, models.aws_acmpca.CertificateAuthorityDef]] = pydantic.Field(None)
    CfnCertificate_ApiPassthroughProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificate_ApiPassthroughPropertyDef]] = pydantic.Field(None)
    CfnCertificate_CustomAttributeProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificate_CustomAttributePropertyDef]] = pydantic.Field(None)
    CfnCertificate_CustomExtensionProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificate_CustomExtensionPropertyDef]] = pydantic.Field(None)
    CfnCertificate_EdiPartyNameProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificate_EdiPartyNamePropertyDef]] = pydantic.Field(None)
    CfnCertificate_ExtendedKeyUsageProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificate_ExtendedKeyUsagePropertyDef]] = pydantic.Field(None)
    CfnCertificate_ExtensionsProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificate_ExtensionsPropertyDef]] = pydantic.Field(None)
    CfnCertificate_GeneralNameProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificate_GeneralNamePropertyDef]] = pydantic.Field(None)
    CfnCertificate_KeyUsageProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificate_KeyUsagePropertyDef]] = pydantic.Field(None)
    CfnCertificate_OtherNameProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificate_OtherNamePropertyDef]] = pydantic.Field(None)
    CfnCertificate_PolicyInformationProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificate_PolicyInformationPropertyDef]] = pydantic.Field(None)
    CfnCertificate_PolicyQualifierInfoProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificate_PolicyQualifierInfoPropertyDef]] = pydantic.Field(None)
    CfnCertificate_QualifierProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificate_QualifierPropertyDef]] = pydantic.Field(None)
    CfnCertificate_SubjectProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificate_SubjectPropertyDef]] = pydantic.Field(None)
    CfnCertificate_ValidityProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificate_ValidityPropertyDef]] = pydantic.Field(None)
    CfnCertificateAuthority_AccessDescriptionProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificateAuthority_AccessDescriptionPropertyDef]] = pydantic.Field(None)
    CfnCertificateAuthority_AccessMethodProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificateAuthority_AccessMethodPropertyDef]] = pydantic.Field(None)
    CfnCertificateAuthority_CrlConfigurationProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificateAuthority_CrlConfigurationPropertyDef]] = pydantic.Field(None)
    CfnCertificateAuthority_CrlDistributionPointExtensionConfigurationProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificateAuthority_CrlDistributionPointExtensionConfigurationPropertyDef]] = pydantic.Field(None)
    CfnCertificateAuthority_CsrExtensionsProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificateAuthority_CsrExtensionsPropertyDef]] = pydantic.Field(None)
    CfnCertificateAuthority_CustomAttributeProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificateAuthority_CustomAttributePropertyDef]] = pydantic.Field(None)
    CfnCertificateAuthority_EdiPartyNameProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificateAuthority_EdiPartyNamePropertyDef]] = pydantic.Field(None)
    CfnCertificateAuthority_GeneralNameProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificateAuthority_GeneralNamePropertyDef]] = pydantic.Field(None)
    CfnCertificateAuthority_KeyUsageProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificateAuthority_KeyUsagePropertyDef]] = pydantic.Field(None)
    CfnCertificateAuthority_OcspConfigurationProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificateAuthority_OcspConfigurationPropertyDef]] = pydantic.Field(None)
    CfnCertificateAuthority_OtherNameProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificateAuthority_OtherNamePropertyDef]] = pydantic.Field(None)
    CfnCertificateAuthority_RevocationConfigurationProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificateAuthority_RevocationConfigurationPropertyDef]] = pydantic.Field(None)
    CfnCertificateAuthority_SubjectProperty: typing.Optional[dict[str, models.aws_acmpca.CfnCertificateAuthority_SubjectPropertyDef]] = pydantic.Field(None)
    CfnCertificate: typing.Optional[dict[str, models.aws_acmpca.CfnCertificateDef]] = pydantic.Field(None)
    CfnCertificateAuthority: typing.Optional[dict[str, models.aws_acmpca.CfnCertificateAuthorityDef]] = pydantic.Field(None)
    CfnCertificateAuthorityActivation: typing.Optional[dict[str, models.aws_acmpca.CfnCertificateAuthorityActivationDef]] = pydantic.Field(None)
    CfnPermission: typing.Optional[dict[str, models.aws_acmpca.CfnPermissionDef]] = pydantic.Field(None)
    CfnCertificateAuthorityActivationProps: typing.Optional[dict[str, models.aws_acmpca.CfnCertificateAuthorityActivationPropsDef]] = pydantic.Field(None)
    CfnCertificateAuthorityProps: typing.Optional[dict[str, models.aws_acmpca.CfnCertificateAuthorityPropsDef]] = pydantic.Field(None)
    CfnCertificateProps: typing.Optional[dict[str, models.aws_acmpca.CfnCertificatePropsDef]] = pydantic.Field(None)
    CfnPermissionProps: typing.Optional[dict[str, models.aws_acmpca.CfnPermissionPropsDef]] = pydantic.Field(None)
    ...

import models
