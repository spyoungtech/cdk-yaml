from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_sagemaker.CfnApp.ResourceSpecProperty
class CfnApp_ResourceSpecPropertyDef(BaseStruct):
    instance_type: typing.Optional[str] = pydantic.Field(None, description='The instance type that the image version runs on. .. epigraph:: *JupyterServer apps* only support the ``system`` value. For *KernelGateway apps* , the ``system`` value is translated to ``ml.t3.medium`` . KernelGateway apps also support all other values for available instance types.\n')
    sage_maker_image_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the SageMaker image that the image version belongs to.\n')
    sage_maker_image_version_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the image version created on the instance.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-app-resourcespec.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    resource_spec_property = sagemaker.CfnApp.ResourceSpecProperty(\n        instance_type="instanceType",\n        sage_maker_image_arn="sageMakerImageArn",\n        sage_maker_image_version_arn="sageMakerImageVersionArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_type', 'sage_maker_image_arn', 'sage_maker_image_version_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnApp.ResourceSpecProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnAppImageConfig.FileSystemConfigProperty
class CfnAppImageConfig_FileSystemConfigPropertyDef(BaseStruct):
    default_gid: typing.Union[int, float, None] = pydantic.Field(None, description='The default POSIX group ID (GID). If not specified, defaults to ``100`` .\n')
    default_uid: typing.Union[int, float, None] = pydantic.Field(None, description='The default POSIX user ID (UID). If not specified, defaults to ``1000`` .\n')
    mount_path: typing.Optional[str] = pydantic.Field(None, description='The path within the image to mount the user\'s EFS home directory. The directory should be empty. If not specified, defaults to * /home/sagemaker-user* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-appimageconfig-filesystemconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    file_system_config_property = sagemaker.CfnAppImageConfig.FileSystemConfigProperty(\n        default_gid=123,\n        default_uid=123,\n        mount_path="mountPath"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['default_gid', 'default_uid', 'mount_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnAppImageConfig.FileSystemConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnAppImageConfig.KernelGatewayImageConfigProperty
class CfnAppImageConfig_KernelGatewayImageConfigPropertyDef(BaseStruct):
    kernel_specs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnAppImageConfig_KernelSpecPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The specification of the Jupyter kernels in the image.\n')
    file_system_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnAppImageConfig_FileSystemConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The Amazon Elastic File System (EFS) storage configuration for a SageMaker image.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-appimageconfig-kernelgatewayimageconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    kernel_gateway_image_config_property = sagemaker.CfnAppImageConfig.KernelGatewayImageConfigProperty(\n        kernel_specs=[sagemaker.CfnAppImageConfig.KernelSpecProperty(\n            name="name",\n\n            # the properties below are optional\n            display_name="displayName"\n        )],\n\n        # the properties below are optional\n        file_system_config=sagemaker.CfnAppImageConfig.FileSystemConfigProperty(\n            default_gid=123,\n            default_uid=123,\n            mount_path="mountPath"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['kernel_specs', 'file_system_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnAppImageConfig.KernelGatewayImageConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnAppImageConfig.KernelSpecProperty
class CfnAppImageConfig_KernelSpecPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='The name of the Jupyter kernel in the image. This value is case sensitive.\n')
    display_name: typing.Optional[str] = pydantic.Field(None, description='The display name of the kernel.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-appimageconfig-kernelspec.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    kernel_spec_property = sagemaker.CfnAppImageConfig.KernelSpecProperty(\n        name="name",\n\n        # the properties below are optional\n        display_name="displayName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'display_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnAppImageConfig.KernelSpecProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnCodeRepository.GitConfigProperty
class CfnCodeRepository_GitConfigPropertyDef(BaseStruct):
    repository_url: str = pydantic.Field(..., description='The URL where the Git repository is located.\n')
    branch: typing.Optional[str] = pydantic.Field(None, description='The default branch for the Git repository.\n')
    secret_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the AWS Secrets Manager secret that contains the credentials used to access the git repository. The secret must have a staging label of ``AWSCURRENT`` and must be in the following format: ``{"username": *UserName* , "password": *Password* }``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-coderepository-gitconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    git_config_property = sagemaker.CfnCodeRepository.GitConfigProperty(\n        repository_url="repositoryUrl",\n\n        # the properties below are optional\n        branch="branch",\n        secret_arn="secretArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['repository_url', 'branch', 'secret_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnCodeRepository.GitConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.BatchTransformInputProperty
class CfnDataQualityJobDefinition_BatchTransformInputPropertyDef(BaseStruct):
    data_captured_destination_s3_uri: str = pydantic.Field(..., description='``CfnDataQualityJobDefinition.BatchTransformInputProperty.DataCapturedDestinationS3Uri``.')
    dataset_format: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_DatasetFormatPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='``CfnDataQualityJobDefinition.BatchTransformInputProperty.DatasetFormat``.\n')
    local_path: str = pydantic.Field(..., description='``CfnDataQualityJobDefinition.BatchTransformInputProperty.LocalPath``.\n')
    s3_data_distribution_type: typing.Optional[str] = pydantic.Field(None, description='``CfnDataQualityJobDefinition.BatchTransformInputProperty.S3DataDistributionType``.\n')
    s3_input_mode: typing.Optional[str] = pydantic.Field(None, description='``CfnDataQualityJobDefinition.BatchTransformInputProperty.S3InputMode``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-batchtransforminput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    batch_transform_input_property = sagemaker.CfnDataQualityJobDefinition.BatchTransformInputProperty(\n        data_captured_destination_s3_uri="dataCapturedDestinationS3Uri",\n        dataset_format=sagemaker.CfnDataQualityJobDefinition.DatasetFormatProperty(\n            csv=sagemaker.CfnDataQualityJobDefinition.CsvProperty(\n                header=False\n            ),\n            json=sagemaker.CfnDataQualityJobDefinition.JsonProperty(\n                line=False\n            ),\n            parquet=False\n        ),\n        local_path="localPath",\n\n        # the properties below are optional\n        s3_data_distribution_type="s3DataDistributionType",\n        s3_input_mode="s3InputMode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['data_captured_destination_s3_uri', 'dataset_format', 'local_path', 's3_data_distribution_type', 's3_input_mode']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.BatchTransformInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.ClusterConfigProperty
class CfnDataQualityJobDefinition_ClusterConfigPropertyDef(BaseStruct):
    instance_count: typing.Union[int, float] = pydantic.Field(..., description='The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.\n')
    instance_type: str = pydantic.Field(..., description='The ML compute instance type for the processing job.\n')
    volume_size_in_gb: typing.Union[int, float] = pydantic.Field(..., description='The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.\n')
    volume_kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-clusterconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cluster_config_property = sagemaker.CfnDataQualityJobDefinition.ClusterConfigProperty(\n        instance_count=123,\n        instance_type="instanceType",\n        volume_size_in_gb=123,\n\n        # the properties below are optional\n        volume_kms_key_id="volumeKmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_count', 'instance_type', 'volume_size_in_gb', 'volume_kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.ClusterConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.ConstraintsResourceProperty
class CfnDataQualityJobDefinition_ConstraintsResourcePropertyDef(BaseStruct):
    s3_uri: typing.Optional[str] = pydantic.Field(None, description='The Amazon S3 URI for the constraints resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-constraintsresource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    constraints_resource_property = sagemaker.CfnDataQualityJobDefinition.ConstraintsResourceProperty(\n        s3_uri="s3Uri"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_uri']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.ConstraintsResourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.CsvProperty
class CfnDataQualityJobDefinition_CsvPropertyDef(BaseStruct):
    header: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnDataQualityJobDefinition.CsvProperty.Header``.')
    _init_params: typing.ClassVar[list[str]] = ['header']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.CsvProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.DataQualityAppSpecificationProperty
class CfnDataQualityJobDefinition_DataQualityAppSpecificationPropertyDef(BaseStruct):
    image_uri: str = pydantic.Field(..., description='The container image that the data quality monitoring job runs.\n')
    container_arguments: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The arguments to send to the container that the monitoring job runs.\n')
    container_entrypoint: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The entrypoint for a container used to run a monitoring job.\n')
    environment: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='Sets the environment variables in the container that the monitoring job runs.\n')
    post_analytics_processor_source_uri: typing.Optional[str] = pydantic.Field(None, description='An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.\n')
    record_preprocessor_source_uri: typing.Optional[str] = pydantic.Field(None, description='An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-dataqualityappspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    data_quality_app_specification_property = sagemaker.CfnDataQualityJobDefinition.DataQualityAppSpecificationProperty(\n        image_uri="imageUri",\n\n        # the properties below are optional\n        container_arguments=["containerArguments"],\n        container_entrypoint=["containerEntrypoint"],\n        environment={\n            "environment_key": "environment"\n        },\n        post_analytics_processor_source_uri="postAnalyticsProcessorSourceUri",\n        record_preprocessor_source_uri="recordPreprocessorSourceUri"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['image_uri', 'container_arguments', 'container_entrypoint', 'environment', 'post_analytics_processor_source_uri', 'record_preprocessor_source_uri']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.DataQualityAppSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.DataQualityBaselineConfigProperty
class CfnDataQualityJobDefinition_DataQualityBaselineConfigPropertyDef(BaseStruct):
    baselining_job_name: typing.Optional[str] = pydantic.Field(None, description='The name of the job that performs baselining for the data quality monitoring job.\n')
    constraints_resource: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_ConstraintsResourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The constraints resource for a monitoring job.\n')
    statistics_resource: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_StatisticsResourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration for monitoring constraints and monitoring statistics. These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-dataqualitybaselineconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    data_quality_baseline_config_property = sagemaker.CfnDataQualityJobDefinition.DataQualityBaselineConfigProperty(\n        baselining_job_name="baseliningJobName",\n        constraints_resource=sagemaker.CfnDataQualityJobDefinition.ConstraintsResourceProperty(\n            s3_uri="s3Uri"\n        ),\n        statistics_resource=sagemaker.CfnDataQualityJobDefinition.StatisticsResourceProperty(\n            s3_uri="s3Uri"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['baselining_job_name', 'constraints_resource', 'statistics_resource']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.DataQualityBaselineConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.DataQualityJobInputProperty
class CfnDataQualityJobDefinition_DataQualityJobInputPropertyDef(BaseStruct):
    batch_transform_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_BatchTransformInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnDataQualityJobDefinition.DataQualityJobInputProperty.BatchTransformInput``.\n')
    endpoint_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_EndpointInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Input object for the endpoint.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-dataqualityjobinput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    data_quality_job_input_property = sagemaker.CfnDataQualityJobDefinition.DataQualityJobInputProperty(\n        batch_transform_input=sagemaker.CfnDataQualityJobDefinition.BatchTransformInputProperty(\n            data_captured_destination_s3_uri="dataCapturedDestinationS3Uri",\n            dataset_format=sagemaker.CfnDataQualityJobDefinition.DatasetFormatProperty(\n                csv=sagemaker.CfnDataQualityJobDefinition.CsvProperty(\n                    header=False\n                ),\n                json=sagemaker.CfnDataQualityJobDefinition.JsonProperty(\n                    line=False\n                ),\n                parquet=False\n            ),\n            local_path="localPath",\n\n            # the properties below are optional\n            s3_data_distribution_type="s3DataDistributionType",\n            s3_input_mode="s3InputMode"\n        ),\n        endpoint_input=sagemaker.CfnDataQualityJobDefinition.EndpointInputProperty(\n            endpoint_name="endpointName",\n            local_path="localPath",\n\n            # the properties below are optional\n            s3_data_distribution_type="s3DataDistributionType",\n            s3_input_mode="s3InputMode"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['batch_transform_input', 'endpoint_input']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.DataQualityJobInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.DatasetFormatProperty
class CfnDataQualityJobDefinition_DatasetFormatPropertyDef(BaseStruct):
    csv: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_CsvPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnDataQualityJobDefinition.DatasetFormatProperty.Csv``.')
    json_: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_JsonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnDataQualityJobDefinition.DatasetFormatProperty.Json``.\n', alias='json')
    parquet: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnDataQualityJobDefinition.DatasetFormatProperty.Parquet``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-datasetformat.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    dataset_format_property = sagemaker.CfnDataQualityJobDefinition.DatasetFormatProperty(\n        csv=sagemaker.CfnDataQualityJobDefinition.CsvProperty(\n            header=False\n        ),\n        json=sagemaker.CfnDataQualityJobDefinition.JsonProperty(\n            line=False\n        ),\n        parquet=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['csv', 'json', 'parquet']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.DatasetFormatProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.EndpointInputProperty
class CfnDataQualityJobDefinition_EndpointInputPropertyDef(BaseStruct):
    endpoint_name: str = pydantic.Field(..., description="An endpoint in customer's account which has enabled ``DataCaptureConfig`` enabled.\n")
    local_path: str = pydantic.Field(..., description='Path to the filesystem where the endpoint data is available to the container.\n')
    s3_data_distribution_type: typing.Optional[str] = pydantic.Field(None, description='Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defaults to ``FullyReplicated``\n')
    s3_input_mode: typing.Optional[str] = pydantic.Field(None, description='Whether the ``Pipe`` or ``File`` is used as the input mode for transferring data for the monitoring job. ``Pipe`` mode is recommended for large datasets. ``File`` mode is useful for small files that fit in memory. Defaults to ``File`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-endpointinput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    endpoint_input_property = sagemaker.CfnDataQualityJobDefinition.EndpointInputProperty(\n        endpoint_name="endpointName",\n        local_path="localPath",\n\n        # the properties below are optional\n        s3_data_distribution_type="s3DataDistributionType",\n        s3_input_mode="s3InputMode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['endpoint_name', 'local_path', 's3_data_distribution_type', 's3_input_mode']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.EndpointInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.JsonProperty
class CfnDataQualityJobDefinition_JsonPropertyDef(BaseStruct):
    line: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnDataQualityJobDefinition.JsonProperty.Line``.')
    _init_params: typing.ClassVar[list[str]] = ['line']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.JsonProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.MonitoringOutputConfigProperty
class CfnDataQualityJobDefinition_MonitoringOutputConfigPropertyDef(BaseStruct):
    monitoring_outputs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_MonitoringOutputPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.\n')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-monitoringoutputconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_output_config_property = sagemaker.CfnDataQualityJobDefinition.MonitoringOutputConfigProperty(\n        monitoring_outputs=[sagemaker.CfnDataQualityJobDefinition.MonitoringOutputProperty(\n            s3_output=sagemaker.CfnDataQualityJobDefinition.S3OutputProperty(\n                local_path="localPath",\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                s3_upload_mode="s3UploadMode"\n            )\n        )],\n\n        # the properties below are optional\n        kms_key_id="kmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['monitoring_outputs', 'kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.MonitoringOutputConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.MonitoringOutputProperty
class CfnDataQualityJobDefinition_MonitoringOutputPropertyDef(BaseStruct):
    s3_output: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_S3OutputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The Amazon S3 storage location where the results of a monitoring job are saved.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-monitoringoutput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_output_property = sagemaker.CfnDataQualityJobDefinition.MonitoringOutputProperty(\n        s3_output=sagemaker.CfnDataQualityJobDefinition.S3OutputProperty(\n            local_path="localPath",\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            s3_upload_mode="s3UploadMode"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_output']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.MonitoringOutputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.MonitoringResourcesProperty
class CfnDataQualityJobDefinition_MonitoringResourcesPropertyDef(BaseStruct):
    cluster_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_ClusterConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The configuration for the cluster resources used to run the processing job.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-monitoringresources.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_resources_property = sagemaker.CfnDataQualityJobDefinition.MonitoringResourcesProperty(\n        cluster_config=sagemaker.CfnDataQualityJobDefinition.ClusterConfigProperty(\n            instance_count=123,\n            instance_type="instanceType",\n            volume_size_in_gb=123,\n\n            # the properties below are optional\n            volume_kms_key_id="volumeKmsKeyId"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cluster_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.MonitoringResourcesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.NetworkConfigProperty
class CfnDataQualityJobDefinition_NetworkConfigPropertyDef(BaseStruct):
    enable_inter_container_traffic_encryption: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Whether to encrypt all communications between distributed processing jobs. Choose ``True`` to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.\n')
    enable_network_isolation: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Whether to allow inbound and outbound network calls to and from the containers used for the processing job.\n')
    vpc_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_VpcConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-networkconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    network_config_property = sagemaker.CfnDataQualityJobDefinition.NetworkConfigProperty(\n        enable_inter_container_traffic_encryption=False,\n        enable_network_isolation=False,\n        vpc_config=sagemaker.CfnDataQualityJobDefinition.VpcConfigProperty(\n            security_group_ids=["securityGroupIds"],\n            subnets=["subnets"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enable_inter_container_traffic_encryption', 'enable_network_isolation', 'vpc_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.NetworkConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.S3OutputProperty
class CfnDataQualityJobDefinition_S3OutputPropertyDef(BaseStruct):
    local_path: str = pydantic.Field(..., description='The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.\n')
    s3_uri: str = pydantic.Field(..., description='A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.\n')
    s3_upload_mode: typing.Optional[str] = pydantic.Field(None, description='Whether to upload the results of the monitoring job continuously or after the job completes.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-s3output.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    s3_output_property = sagemaker.CfnDataQualityJobDefinition.S3OutputProperty(\n        local_path="localPath",\n        s3_uri="s3Uri",\n\n        # the properties below are optional\n        s3_upload_mode="s3UploadMode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['local_path', 's3_uri', 's3_upload_mode']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.S3OutputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.StatisticsResourceProperty
class CfnDataQualityJobDefinition_StatisticsResourcePropertyDef(BaseStruct):
    s3_uri: typing.Optional[str] = pydantic.Field(None, description='The Amazon S3 URI for the statistics resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-statisticsresource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    statistics_resource_property = sagemaker.CfnDataQualityJobDefinition.StatisticsResourceProperty(\n        s3_uri="s3Uri"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_uri']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.StatisticsResourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.StoppingConditionProperty
class CfnDataQualityJobDefinition_StoppingConditionPropertyDef(BaseStruct):
    max_runtime_in_seconds: typing.Union[int, float] = pydantic.Field(..., description='The maximum length of time, in seconds, that a training or compilation job can run before it is stopped. For compilation jobs, if the job does not complete during this time, a ``TimeOut`` error is generated. We recommend starting with 900 seconds and increasing as necessary based on your model. For all other jobs, if the job does not complete during this time, SageMaker ends the job. When ``RetryStrategy`` is specified in the job request, ``MaxRuntimeInSeconds`` specifies the maximum time for all of the attempts in total, not each individual attempt. The default value is 1 day. The maximum value is 28 days. The maximum time that a ``TrainingJob`` can run in total, including any time spent publishing metrics or archiving and uploading models after it has been stopped, is 30 days.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-stoppingcondition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    stopping_condition_property = sagemaker.CfnDataQualityJobDefinition.StoppingConditionProperty(\n        max_runtime_in_seconds=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_runtime_in_seconds']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.StoppingConditionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.VpcConfigProperty
class CfnDataQualityJobDefinition_VpcConfigPropertyDef(BaseStruct):
    security_group_ids: typing.Sequence[str] = pydantic.Field(..., description='The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the ``Subnets`` field.\n')
    subnets: typing.Sequence[str] = pydantic.Field(..., description='The ID of the subnets in the VPC to which you want to connect your training job or model. For information about the availability of specific instance types, see `Supported Instance Types and Availability Zones <https://docs.aws.amazon.com/sagemaker/latest/dg/instance-types-az.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-dataqualityjobdefinition-vpcconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    vpc_config_property = sagemaker.CfnDataQualityJobDefinition.VpcConfigProperty(\n        security_group_ids=["securityGroupIds"],\n        subnets=["subnets"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['security_group_ids', 'subnets']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition.VpcConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDevice.DeviceProperty
class CfnDevice_DevicePropertyDef(BaseStruct):
    device_name: str = pydantic.Field(..., description='The name of the device.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='Description of the device.\n')
    iot_thing_name: typing.Optional[str] = pydantic.Field(None, description='AWS Internet of Things (IoT) object name.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-device-device.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    device_property = sagemaker.CfnDevice.DeviceProperty(\n        device_name="deviceName",\n\n        # the properties below are optional\n        description="description",\n        iot_thing_name="iotThingName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['device_name', 'description', 'iot_thing_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDevice.DeviceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDeviceFleet.EdgeOutputConfigProperty
class CfnDeviceFleet_EdgeOutputConfigPropertyDef(BaseStruct):
    s3_output_location: str = pydantic.Field(..., description='The Amazon Simple Storage (S3) bucket URI.\n')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume after compilation job. If you don\'t provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role\'s account.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-devicefleet-edgeoutputconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    edge_output_config_property = sagemaker.CfnDeviceFleet.EdgeOutputConfigProperty(\n        s3_output_location="s3OutputLocation",\n\n        # the properties below are optional\n        kms_key_id="kmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_output_location', 'kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDeviceFleet.EdgeOutputConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDomain.CustomImageProperty
class CfnDomain_CustomImagePropertyDef(BaseStruct):
    app_image_config_name: str = pydantic.Field(..., description='The name of the AppImageConfig.\n')
    image_name: str = pydantic.Field(..., description='The name of the CustomImage. Must be unique to your account.\n')
    image_version_number: typing.Union[int, float, None] = pydantic.Field(None, description='The version number of the CustomImage.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-customimage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    custom_image_property = sagemaker.CfnDomain.CustomImageProperty(\n        app_image_config_name="appImageConfigName",\n        image_name="imageName",\n\n        # the properties below are optional\n        image_version_number=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['app_image_config_name', 'image_name', 'image_version_number']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDomain.CustomImageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDomain.DefaultSpaceSettingsProperty
class CfnDomain_DefaultSpaceSettingsPropertyDef(BaseStruct):
    execution_role: str = pydantic.Field(..., description='The ARN of the execution role for the space.\n')
    jupyter_server_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_JupyterServerAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The JupyterServer app settings.\n')
    kernel_gateway_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_KernelGatewayAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The KernelGateway app settings.\n')
    security_groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The security group IDs for the Amazon Virtual Private Cloud that the space uses for communication.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-defaultspacesettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    default_space_settings_property = sagemaker.CfnDomain.DefaultSpaceSettingsProperty(\n        execution_role="executionRole",\n\n        # the properties below are optional\n        jupyter_server_app_settings=sagemaker.CfnDomain.JupyterServerAppSettingsProperty(\n            default_resource_spec=sagemaker.CfnDomain.ResourceSpecProperty(\n                instance_type="instanceType",\n                lifecycle_config_arn="lifecycleConfigArn",\n                sage_maker_image_arn="sageMakerImageArn",\n                sage_maker_image_version_arn="sageMakerImageVersionArn"\n            )\n        ),\n        kernel_gateway_app_settings=sagemaker.CfnDomain.KernelGatewayAppSettingsProperty(\n            custom_images=[sagemaker.CfnDomain.CustomImageProperty(\n                app_image_config_name="appImageConfigName",\n                image_name="imageName",\n\n                # the properties below are optional\n                image_version_number=123\n            )],\n            default_resource_spec=sagemaker.CfnDomain.ResourceSpecProperty(\n                instance_type="instanceType",\n                lifecycle_config_arn="lifecycleConfigArn",\n                sage_maker_image_arn="sageMakerImageArn",\n                sage_maker_image_version_arn="sageMakerImageVersionArn"\n            )\n        ),\n        security_groups=["securityGroups"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['execution_role', 'jupyter_server_app_settings', 'kernel_gateway_app_settings', 'security_groups']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDomain.DefaultSpaceSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDomain.DomainSettingsProperty
class CfnDomain_DomainSettingsPropertyDef(BaseStruct):
    r_studio_server_pro_domain_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_RStudioServerProDomainSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A collection of settings that configure the ``RStudioServerPro`` Domain-level app.\n')
    security_group_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The security groups for the Amazon Virtual Private Cloud that the ``Domain`` uses for communication between Domain-level apps and user apps.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-domainsettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    domain_settings_property = sagemaker.CfnDomain.DomainSettingsProperty(\n        r_studio_server_pro_domain_settings=sagemaker.CfnDomain.RStudioServerProDomainSettingsProperty(\n            domain_execution_role_arn="domainExecutionRoleArn",\n\n            # the properties below are optional\n            default_resource_spec=sagemaker.CfnDomain.ResourceSpecProperty(\n                instance_type="instanceType",\n                lifecycle_config_arn="lifecycleConfigArn",\n                sage_maker_image_arn="sageMakerImageArn",\n                sage_maker_image_version_arn="sageMakerImageVersionArn"\n            ),\n            r_studio_connect_url="rStudioConnectUrl",\n            r_studio_package_manager_url="rStudioPackageManagerUrl"\n        ),\n        security_group_ids=["securityGroupIds"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['r_studio_server_pro_domain_settings', 'security_group_ids']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDomain.DomainSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDomain.JupyterServerAppSettingsProperty
class CfnDomain_JupyterServerAppSettingsPropertyDef(BaseStruct):
    default_resource_spec: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_ResourceSpecPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the JupyterServer app.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-jupyterserverappsettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    jupyter_server_app_settings_property = sagemaker.CfnDomain.JupyterServerAppSettingsProperty(\n        default_resource_spec=sagemaker.CfnDomain.ResourceSpecProperty(\n            instance_type="instanceType",\n            lifecycle_config_arn="lifecycleConfigArn",\n            sage_maker_image_arn="sageMakerImageArn",\n            sage_maker_image_version_arn="sageMakerImageVersionArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['default_resource_spec']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDomain.JupyterServerAppSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDomain.KernelGatewayAppSettingsProperty
class CfnDomain_KernelGatewayAppSettingsPropertyDef(BaseStruct):
    custom_images: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_CustomImagePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of custom SageMaker images that are configured to run as a KernelGateway app.\n')
    default_resource_spec: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_ResourceSpecPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app. .. epigraph:: The Amazon SageMaker Studio UI does not use the default instance type value set here. The default instance type set here is used when Apps are created using the AWS Command Line Interface or AWS CloudFormation and the instance type parameter value is not passed.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-kernelgatewayappsettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    kernel_gateway_app_settings_property = sagemaker.CfnDomain.KernelGatewayAppSettingsProperty(\n        custom_images=[sagemaker.CfnDomain.CustomImageProperty(\n            app_image_config_name="appImageConfigName",\n            image_name="imageName",\n\n            # the properties below are optional\n            image_version_number=123\n        )],\n        default_resource_spec=sagemaker.CfnDomain.ResourceSpecProperty(\n            instance_type="instanceType",\n            lifecycle_config_arn="lifecycleConfigArn",\n            sage_maker_image_arn="sageMakerImageArn",\n            sage_maker_image_version_arn="sageMakerImageVersionArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['custom_images', 'default_resource_spec']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDomain.KernelGatewayAppSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDomain.ResourceSpecProperty
class CfnDomain_ResourceSpecPropertyDef(BaseStruct):
    instance_type: typing.Optional[str] = pydantic.Field(None, description='The instance type that the image version runs on. .. epigraph:: *JupyterServer apps* only support the ``system`` value. For *KernelGateway apps* , the ``system`` value is translated to ``ml.t3.medium`` . KernelGateway apps also support all other values for available instance types.\n')
    lifecycle_config_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.\n')
    sage_maker_image_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the SageMaker image that the image version belongs to.\n')
    sage_maker_image_version_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the image version created on the instance.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-resourcespec.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    resource_spec_property = sagemaker.CfnDomain.ResourceSpecProperty(\n        instance_type="instanceType",\n        lifecycle_config_arn="lifecycleConfigArn",\n        sage_maker_image_arn="sageMakerImageArn",\n        sage_maker_image_version_arn="sageMakerImageVersionArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_type', 'lifecycle_config_arn', 'sage_maker_image_arn', 'sage_maker_image_version_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDomain.ResourceSpecProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDomain.RSessionAppSettingsProperty
class CfnDomain_RSessionAppSettingsPropertyDef(BaseStruct):
    custom_images: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_CustomImagePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of custom SageMaker images that are configured to run as a RSession app.\n')
    default_resource_spec: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_ResourceSpecPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the ARNs of a SageMaker image and SageMaker image version, and the instance type that the version runs on.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-rsessionappsettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    r_session_app_settings_property = sagemaker.CfnDomain.RSessionAppSettingsProperty(\n        custom_images=[sagemaker.CfnDomain.CustomImageProperty(\n            app_image_config_name="appImageConfigName",\n            image_name="imageName",\n\n            # the properties below are optional\n            image_version_number=123\n        )],\n        default_resource_spec=sagemaker.CfnDomain.ResourceSpecProperty(\n            instance_type="instanceType",\n            lifecycle_config_arn="lifecycleConfigArn",\n            sage_maker_image_arn="sageMakerImageArn",\n            sage_maker_image_version_arn="sageMakerImageVersionArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['custom_images', 'default_resource_spec']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDomain.RSessionAppSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDomain.RStudioServerProAppSettingsProperty
class CfnDomain_RStudioServerProAppSettingsPropertyDef(BaseStruct):
    access_status: typing.Optional[str] = pydantic.Field(None, description='Indicates whether the current user has access to the ``RStudioServerPro`` app.\n')
    user_group: typing.Optional[str] = pydantic.Field(None, description='The level of permissions that the user has within the ``RStudioServerPro`` app. This value defaults to ``User``. The ``Admin`` value allows the user access to the RStudio Administrative Dashboard.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-rstudioserverproappsettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    r_studio_server_pro_app_settings_property = sagemaker.CfnDomain.RStudioServerProAppSettingsProperty(\n        access_status="accessStatus",\n        user_group="userGroup"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['access_status', 'user_group']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDomain.RStudioServerProAppSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDomain.RStudioServerProDomainSettingsProperty
class CfnDomain_RStudioServerProDomainSettingsPropertyDef(BaseStruct):
    domain_execution_role_arn: str = pydantic.Field(..., description='The ARN of the execution role for the ``RStudioServerPro`` Domain-level app.\n')
    default_resource_spec: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_ResourceSpecPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A collection that defines the default ``InstanceType`` , ``SageMakerImageArn`` , and ``SageMakerImageVersionArn`` for the Domain.\n')
    r_studio_connect_url: typing.Optional[str] = pydantic.Field(None, description='A URL pointing to an RStudio Connect server.\n')
    r_studio_package_manager_url: typing.Optional[str] = pydantic.Field(None, description='A URL pointing to an RStudio Package Manager server.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-rstudioserverprodomainsettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    r_studio_server_pro_domain_settings_property = sagemaker.CfnDomain.RStudioServerProDomainSettingsProperty(\n        domain_execution_role_arn="domainExecutionRoleArn",\n\n        # the properties below are optional\n        default_resource_spec=sagemaker.CfnDomain.ResourceSpecProperty(\n            instance_type="instanceType",\n            lifecycle_config_arn="lifecycleConfigArn",\n            sage_maker_image_arn="sageMakerImageArn",\n            sage_maker_image_version_arn="sageMakerImageVersionArn"\n        ),\n        r_studio_connect_url="rStudioConnectUrl",\n        r_studio_package_manager_url="rStudioPackageManagerUrl"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['domain_execution_role_arn', 'default_resource_spec', 'r_studio_connect_url', 'r_studio_package_manager_url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDomain.RStudioServerProDomainSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDomain.SharingSettingsProperty
class CfnDomain_SharingSettingsPropertyDef(BaseStruct):
    notebook_output_option: typing.Optional[str] = pydantic.Field(None, description='Whether to include the notebook cell output when sharing the notebook. The default is ``Disabled`` .\n')
    s3_kms_key_id: typing.Optional[str] = pydantic.Field(None, description='When ``NotebookOutputOption`` is ``Allowed`` , the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.\n')
    s3_output_path: typing.Optional[str] = pydantic.Field(None, description='When ``NotebookOutputOption`` is ``Allowed`` , the Amazon S3 bucket used to store the shared notebook snapshots.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-sharingsettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    sharing_settings_property = sagemaker.CfnDomain.SharingSettingsProperty(\n        notebook_output_option="notebookOutputOption",\n        s3_kms_key_id="s3KmsKeyId",\n        s3_output_path="s3OutputPath"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['notebook_output_option', 's3_kms_key_id', 's3_output_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDomain.SharingSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDomain.UserSettingsProperty
class CfnDomain_UserSettingsPropertyDef(BaseStruct):
    execution_role: str = pydantic.Field(..., description='The execution role for the user.\n')
    jupyter_server_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_JupyterServerAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The Jupyter server's app settings.\n")
    kernel_gateway_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_KernelGatewayAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The kernel gateway app settings.\n')
    r_session_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_RSessionAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A collection of settings that configure the ``RSessionGateway`` app.\n')
    r_studio_server_pro_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_RStudioServerProAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A collection of settings that configure user interaction with the ``RStudioServerPro`` app.\n')
    security_groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication. Optional when the ``CreateDomain.AppNetworkAccessType`` parameter is set to ``PublicInternetOnly`` . Required when the ``CreateDomain.AppNetworkAccessType`` parameter is set to ``VpcOnly`` , unless specified as part of the ``DefaultUserSettings`` for the domain. Amazon SageMaker adds a security group to allow NFS traffic from SageMaker Studio. Therefore, the number of security groups that you can specify is one less than the maximum number shown.\n')
    sharing_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_SharingSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies options for sharing SageMaker Studio notebooks.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-domain-usersettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    user_settings_property = sagemaker.CfnDomain.UserSettingsProperty(\n        execution_role="executionRole",\n\n        # the properties below are optional\n        jupyter_server_app_settings=sagemaker.CfnDomain.JupyterServerAppSettingsProperty(\n            default_resource_spec=sagemaker.CfnDomain.ResourceSpecProperty(\n                instance_type="instanceType",\n                lifecycle_config_arn="lifecycleConfigArn",\n                sage_maker_image_arn="sageMakerImageArn",\n                sage_maker_image_version_arn="sageMakerImageVersionArn"\n            )\n        ),\n        kernel_gateway_app_settings=sagemaker.CfnDomain.KernelGatewayAppSettingsProperty(\n            custom_images=[sagemaker.CfnDomain.CustomImageProperty(\n                app_image_config_name="appImageConfigName",\n                image_name="imageName",\n\n                # the properties below are optional\n                image_version_number=123\n            )],\n            default_resource_spec=sagemaker.CfnDomain.ResourceSpecProperty(\n                instance_type="instanceType",\n                lifecycle_config_arn="lifecycleConfigArn",\n                sage_maker_image_arn="sageMakerImageArn",\n                sage_maker_image_version_arn="sageMakerImageVersionArn"\n            )\n        ),\n        r_session_app_settings=sagemaker.CfnDomain.RSessionAppSettingsProperty(\n            custom_images=[sagemaker.CfnDomain.CustomImageProperty(\n                app_image_config_name="appImageConfigName",\n                image_name="imageName",\n\n                # the properties below are optional\n                image_version_number=123\n            )],\n            default_resource_spec=sagemaker.CfnDomain.ResourceSpecProperty(\n                instance_type="instanceType",\n                lifecycle_config_arn="lifecycleConfigArn",\n                sage_maker_image_arn="sageMakerImageArn",\n                sage_maker_image_version_arn="sageMakerImageVersionArn"\n            )\n        ),\n        r_studio_server_pro_app_settings=sagemaker.CfnDomain.RStudioServerProAppSettingsProperty(\n            access_status="accessStatus",\n            user_group="userGroup"\n        ),\n        security_groups=["securityGroups"],\n        sharing_settings=sagemaker.CfnDomain.SharingSettingsProperty(\n            notebook_output_option="notebookOutputOption",\n            s3_kms_key_id="s3KmsKeyId",\n            s3_output_path="s3OutputPath"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['execution_role', 'jupyter_server_app_settings', 'kernel_gateway_app_settings', 'r_session_app_settings', 'r_studio_server_pro_app_settings', 'security_groups', 'sharing_settings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDomain.UserSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpoint.AlarmProperty
class CfnEndpoint_AlarmPropertyDef(BaseStruct):
    alarm_name: str = pydantic.Field(..., description='The name of a CloudWatch alarm in your account.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-alarm.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    alarm_property = sagemaker.CfnEndpoint.AlarmProperty(\n        alarm_name="alarmName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['alarm_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpoint.AlarmProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpoint.AutoRollbackConfigProperty
class CfnEndpoint_AutoRollbackConfigPropertyDef(BaseStruct):
    alarms: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpoint_AlarmPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='List of CloudWatch alarms in your account that are configured to monitor metrics on an endpoint. If any alarms are tripped during a deployment, SageMaker rolls back the deployment.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-autorollbackconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    auto_rollback_config_property = sagemaker.CfnEndpoint.AutoRollbackConfigProperty(\n        alarms=[sagemaker.CfnEndpoint.AlarmProperty(\n            alarm_name="alarmName"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['alarms']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpoint.AutoRollbackConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpoint.BlueGreenUpdatePolicyProperty
class CfnEndpoint_BlueGreenUpdatePolicyPropertyDef(BaseStruct):
    traffic_routing_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpoint_TrafficRoutingConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Defines the traffic routing strategy to shift traffic from the old fleet to the new fleet during an endpoint deployment.\n')
    maximum_execution_timeout_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Maximum execution timeout for the deployment. Note that the timeout value should be larger than the total waiting time specified in ``TerminationWaitInSeconds`` and ``WaitIntervalInSeconds`` .\n')
    termination_wait_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Additional waiting time in seconds after the completion of an endpoint deployment before terminating the old endpoint fleet. Default is 0.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-bluegreenupdatepolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    blue_green_update_policy_property = sagemaker.CfnEndpoint.BlueGreenUpdatePolicyProperty(\n        traffic_routing_configuration=sagemaker.CfnEndpoint.TrafficRoutingConfigProperty(\n            type="type",\n\n            # the properties below are optional\n            canary_size=sagemaker.CfnEndpoint.CapacitySizeProperty(\n                type="type",\n                value=123\n            ),\n            linear_step_size=sagemaker.CfnEndpoint.CapacitySizeProperty(\n                type="type",\n                value=123\n            ),\n            wait_interval_in_seconds=123\n        ),\n\n        # the properties below are optional\n        maximum_execution_timeout_in_seconds=123,\n        termination_wait_in_seconds=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['traffic_routing_configuration', 'maximum_execution_timeout_in_seconds', 'termination_wait_in_seconds']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpoint.BlueGreenUpdatePolicyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpoint.CapacitySizeProperty
class CfnEndpoint_CapacitySizePropertyDef(BaseStruct):
    type: str = pydantic.Field(..., description='Specifies the endpoint capacity type. - ``INSTANCE_COUNT`` : The endpoint activates based on the number of instances. - ``CAPACITY_PERCENT`` : The endpoint activates based on the specified percentage of capacity.\n')
    value: typing.Union[int, float] = pydantic.Field(..., description='Defines the capacity size, either as a number of instances or a capacity percentage.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-capacitysize.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    capacity_size_property = sagemaker.CfnEndpoint.CapacitySizeProperty(\n        type="type",\n        value=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpoint.CapacitySizeProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpoint.DeploymentConfigProperty
class CfnEndpoint_DeploymentConfigPropertyDef(BaseStruct):
    blue_green_update_policy: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpoint_BlueGreenUpdatePolicyPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default.\n')
    auto_rollback_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpoint_AutoRollbackConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Automatic rollback configuration for handling endpoint deployment failures and recovery.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-deploymentconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    deployment_config_property = sagemaker.CfnEndpoint.DeploymentConfigProperty(\n        blue_green_update_policy=sagemaker.CfnEndpoint.BlueGreenUpdatePolicyProperty(\n            traffic_routing_configuration=sagemaker.CfnEndpoint.TrafficRoutingConfigProperty(\n                type="type",\n\n                # the properties below are optional\n                canary_size=sagemaker.CfnEndpoint.CapacitySizeProperty(\n                    type="type",\n                    value=123\n                ),\n                linear_step_size=sagemaker.CfnEndpoint.CapacitySizeProperty(\n                    type="type",\n                    value=123\n                ),\n                wait_interval_in_seconds=123\n            ),\n\n            # the properties below are optional\n            maximum_execution_timeout_in_seconds=123,\n            termination_wait_in_seconds=123\n        ),\n\n        # the properties below are optional\n        auto_rollback_configuration=sagemaker.CfnEndpoint.AutoRollbackConfigProperty(\n            alarms=[sagemaker.CfnEndpoint.AlarmProperty(\n                alarm_name="alarmName"\n            )]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['blue_green_update_policy', 'auto_rollback_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpoint.DeploymentConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpoint.TrafficRoutingConfigProperty
class CfnEndpoint_TrafficRoutingConfigPropertyDef(BaseStruct):
    type: str = pydantic.Field(..., description='Traffic routing strategy type. - ``ALL_AT_ONCE`` : Endpoint traffic shifts to the new fleet in a single step. - ``CANARY`` : Endpoint traffic shifts to the new fleet in two steps. The first step is the canary, which is a small portion of the traffic. The second step is the remainder of the traffic. - ``LINEAR`` : Endpoint traffic shifts to the new fleet in n steps of a configurable size.\n')
    canary_size: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpoint_CapacitySizePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Batch size for the first step to turn on traffic on the new endpoint fleet. ``Value`` must be less than or equal to 50% of the variant's total instance count.\n")
    linear_step_size: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpoint_CapacitySizePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="Batch size for each step to turn on traffic on the new endpoint fleet. ``Value`` must be 10-50% of the variant's total instance count.\n")
    wait_interval_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='The waiting time (in seconds) between incremental steps to turn on traffic on the new endpoint fleet.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-trafficroutingconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    traffic_routing_config_property = sagemaker.CfnEndpoint.TrafficRoutingConfigProperty(\n        type="type",\n\n        # the properties below are optional\n        canary_size=sagemaker.CfnEndpoint.CapacitySizeProperty(\n            type="type",\n            value=123\n        ),\n        linear_step_size=sagemaker.CfnEndpoint.CapacitySizeProperty(\n            type="type",\n            value=123\n        ),\n        wait_interval_in_seconds=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['type', 'canary_size', 'linear_step_size', 'wait_interval_in_seconds']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpoint.TrafficRoutingConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpoint.VariantPropertyProperty
class CfnEndpoint_VariantPropertyPropertyDef(BaseStruct):
    variant_property_type: typing.Optional[str] = pydantic.Field(None, description='The type of variant property. The supported values are:. - ``DesiredInstanceCount`` : Overrides the existing variant instance counts using the `InitialInstanceCount <https://docs.aws.amazon.com/sagemaker/latest/dg/API_ProductionVariant.html#SageMaker-Type-ProductionVariant-InitialInstanceCount>`_ values in the `ProductionVariants <https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateEndpointConfig.html#SageMaker-CreateEndpointConfig-request-ProductionVariants>`_ . - ``DesiredWeight`` : Overrides the existing variant weights using the `InitialVariantWeight <https://docs.aws.amazon.com/sagemaker/latest/dg/API_ProductionVariant.html#SageMaker-Type-ProductionVariant-InitialVariantWeight>`_ values in the `ProductionVariants <https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateEndpointConfig.html#SageMaker-CreateEndpointConfig-request-ProductionVariants>`_ . - ``DataCaptureConfig`` : (Not currently supported.)\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-variantproperty.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    variant_property_property = sagemaker.CfnEndpoint.VariantPropertyProperty(\n        variant_property_type="variantPropertyType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['variant_property_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpoint.VariantPropertyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpointConfig.AsyncInferenceClientConfigProperty
class CfnEndpointConfig_AsyncInferenceClientConfigPropertyDef(BaseStruct):
    max_concurrent_invocations_per_instance: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum number of concurrent requests sent by the SageMaker client to the model container. If no value is provided, SageMaker will choose an optimal value for you.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-asyncinferenceclientconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    async_inference_client_config_property = sagemaker.CfnEndpointConfig.AsyncInferenceClientConfigProperty(\n        max_concurrent_invocations_per_instance=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_concurrent_invocations_per_instance']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpointConfig.AsyncInferenceClientConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpointConfig.AsyncInferenceConfigProperty
class CfnEndpointConfig_AsyncInferenceConfigPropertyDef(BaseStruct):
    output_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_AsyncInferenceOutputConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Specifies the configuration for asynchronous inference invocation outputs.\n')
    client_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_AsyncInferenceClientConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configures the behavior of the client used by SageMaker to interact with the model container during asynchronous inference.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-asyncinferenceconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    async_inference_config_property = sagemaker.CfnEndpointConfig.AsyncInferenceConfigProperty(\n        output_config=sagemaker.CfnEndpointConfig.AsyncInferenceOutputConfigProperty(\n            kms_key_id="kmsKeyId",\n            notification_config=sagemaker.CfnEndpointConfig.AsyncInferenceNotificationConfigProperty(\n                error_topic="errorTopic",\n                include_inference_response_in=["includeInferenceResponseIn"],\n                success_topic="successTopic"\n            ),\n            s3_failure_path="s3FailurePath",\n            s3_output_path="s3OutputPath"\n        ),\n\n        # the properties below are optional\n        client_config=sagemaker.CfnEndpointConfig.AsyncInferenceClientConfigProperty(\n            max_concurrent_invocations_per_instance=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['output_config', 'client_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpointConfig.AsyncInferenceConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpointConfig.AsyncInferenceNotificationConfigProperty
class CfnEndpointConfig_AsyncInferenceNotificationConfigPropertyDef(BaseStruct):
    error_topic: typing.Optional[str] = pydantic.Field(None, description='Amazon SNS topic to post a notification to when an inference fails. If no topic is provided, no notification is sent on failure.\n')
    include_inference_response_in: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='``CfnEndpointConfig.AsyncInferenceNotificationConfigProperty.IncludeInferenceResponseIn``.\n')
    success_topic: typing.Optional[str] = pydantic.Field(None, description='Amazon SNS topic to post a notification to when an inference completes successfully. If no topic is provided, no notification is sent on success.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-asyncinferencenotificationconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    async_inference_notification_config_property = sagemaker.CfnEndpointConfig.AsyncInferenceNotificationConfigProperty(\n        error_topic="errorTopic",\n        include_inference_response_in=["includeInferenceResponseIn"],\n        success_topic="successTopic"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['error_topic', 'include_inference_response_in', 'success_topic']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpointConfig.AsyncInferenceNotificationConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpointConfig.AsyncInferenceOutputConfigProperty
class CfnEndpointConfig_AsyncInferenceOutputConfigPropertyDef(BaseStruct):
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt the asynchronous inference output in Amazon S3.\n')
    notification_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_AsyncInferenceNotificationConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the configuration for notifications of inference results for asynchronous inference.\n')
    s3_failure_path: typing.Optional[str] = pydantic.Field(None, description='``CfnEndpointConfig.AsyncInferenceOutputConfigProperty.S3FailurePath``.\n')
    s3_output_path: typing.Optional[str] = pydantic.Field(None, description='The Amazon S3 location to upload inference responses to.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-asyncinferenceoutputconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    async_inference_output_config_property = sagemaker.CfnEndpointConfig.AsyncInferenceOutputConfigProperty(\n        kms_key_id="kmsKeyId",\n        notification_config=sagemaker.CfnEndpointConfig.AsyncInferenceNotificationConfigProperty(\n            error_topic="errorTopic",\n            include_inference_response_in=["includeInferenceResponseIn"],\n            success_topic="successTopic"\n        ),\n        s3_failure_path="s3FailurePath",\n        s3_output_path="s3OutputPath"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['kms_key_id', 'notification_config', 's3_failure_path', 's3_output_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpointConfig.AsyncInferenceOutputConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpointConfig.CaptureContentTypeHeaderProperty
class CfnEndpointConfig_CaptureContentTypeHeaderPropertyDef(BaseStruct):
    csv_content_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of the CSV content types of the data that the endpoint captures. For the endpoint to capture the data, you must also specify the content type when you invoke the endpoint.\n')
    json_content_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of the JSON content types of the data that the endpoint captures. For the endpoint to capture the data, you must also specify the content type when you invoke the endpoint.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-datacaptureconfig-capturecontenttypeheader.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    capture_content_type_header_property = sagemaker.CfnEndpointConfig.CaptureContentTypeHeaderProperty(\n        csv_content_types=["csvContentTypes"],\n        json_content_types=["jsonContentTypes"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['csv_content_types', 'json_content_types']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpointConfig.CaptureContentTypeHeaderProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpointConfig.CaptureOptionProperty
class CfnEndpointConfig_CaptureOptionPropertyDef(BaseStruct):
    capture_mode: str = pydantic.Field(..., description='Specifies whether the endpoint captures input data or output data.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-captureoption.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    capture_option_property = sagemaker.CfnEndpointConfig.CaptureOptionProperty(\n        capture_mode="captureMode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['capture_mode']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpointConfig.CaptureOptionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpointConfig.ClarifyExplainerConfigProperty
class CfnEndpointConfig_ClarifyExplainerConfigPropertyDef(BaseStruct):
    shap_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_ClarifyShapConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='``CfnEndpointConfig.ClarifyExplainerConfigProperty.ShapConfig``.')
    enable_explanations: typing.Optional[str] = pydantic.Field(None, description='``CfnEndpointConfig.ClarifyExplainerConfigProperty.EnableExplanations``.\n')
    inference_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_ClarifyInferenceConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnEndpointConfig.ClarifyExplainerConfigProperty.InferenceConfig``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyexplainerconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    clarify_explainer_config_property = sagemaker.CfnEndpointConfig.ClarifyExplainerConfigProperty(\n        shap_config=sagemaker.CfnEndpointConfig.ClarifyShapConfigProperty(\n            shap_baseline_config=sagemaker.CfnEndpointConfig.ClarifyShapBaselineConfigProperty(\n                mime_type="mimeType",\n                shap_baseline="shapBaseline",\n                shap_baseline_uri="shapBaselineUri"\n            ),\n\n            # the properties below are optional\n            number_of_samples=123,\n            seed=123,\n            text_config=sagemaker.CfnEndpointConfig.ClarifyTextConfigProperty(\n                granularity="granularity",\n                language="language"\n            ),\n            use_logit=False\n        ),\n\n        # the properties below are optional\n        enable_explanations="enableExplanations",\n        inference_config=sagemaker.CfnEndpointConfig.ClarifyInferenceConfigProperty(\n            content_template="contentTemplate",\n            feature_headers=["featureHeaders"],\n            features_attribute="featuresAttribute",\n            feature_types=["featureTypes"],\n            label_attribute="labelAttribute",\n            label_headers=["labelHeaders"],\n            label_index=123,\n            max_payload_in_mb=123,\n            max_record_count=123,\n            probability_attribute="probabilityAttribute",\n            probability_index=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['shap_config', 'enable_explanations', 'inference_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpointConfig.ClarifyExplainerConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpointConfig.ClarifyInferenceConfigProperty
class CfnEndpointConfig_ClarifyInferenceConfigPropertyDef(BaseStruct):
    content_template: typing.Optional[str] = pydantic.Field(None, description='``CfnEndpointConfig.ClarifyInferenceConfigProperty.ContentTemplate``.')
    feature_headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='``CfnEndpointConfig.ClarifyInferenceConfigProperty.FeatureHeaders``.\n')
    features_attribute: typing.Optional[str] = pydantic.Field(None, description='``CfnEndpointConfig.ClarifyInferenceConfigProperty.FeaturesAttribute``.\n')
    feature_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='``CfnEndpointConfig.ClarifyInferenceConfigProperty.FeatureTypes``.\n')
    label_attribute: typing.Optional[str] = pydantic.Field(None, description='``CfnEndpointConfig.ClarifyInferenceConfigProperty.LabelAttribute``.\n')
    label_headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='``CfnEndpointConfig.ClarifyInferenceConfigProperty.LabelHeaders``.\n')
    label_index: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnEndpointConfig.ClarifyInferenceConfigProperty.LabelIndex``.\n')
    max_payload_in_mb: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnEndpointConfig.ClarifyInferenceConfigProperty.MaxPayloadInMB``.\n')
    max_record_count: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnEndpointConfig.ClarifyInferenceConfigProperty.MaxRecordCount``.\n')
    probability_attribute: typing.Optional[str] = pydantic.Field(None, description='``CfnEndpointConfig.ClarifyInferenceConfigProperty.ProbabilityAttribute``.\n')
    probability_index: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnEndpointConfig.ClarifyInferenceConfigProperty.ProbabilityIndex``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyinferenceconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    clarify_inference_config_property = sagemaker.CfnEndpointConfig.ClarifyInferenceConfigProperty(\n        content_template="contentTemplate",\n        feature_headers=["featureHeaders"],\n        features_attribute="featuresAttribute",\n        feature_types=["featureTypes"],\n        label_attribute="labelAttribute",\n        label_headers=["labelHeaders"],\n        label_index=123,\n        max_payload_in_mb=123,\n        max_record_count=123,\n        probability_attribute="probabilityAttribute",\n        probability_index=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['content_template', 'feature_headers', 'features_attribute', 'feature_types', 'label_attribute', 'label_headers', 'label_index', 'max_payload_in_mb', 'max_record_count', 'probability_attribute', 'probability_index']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpointConfig.ClarifyInferenceConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpointConfig.ClarifyShapBaselineConfigProperty
class CfnEndpointConfig_ClarifyShapBaselineConfigPropertyDef(BaseStruct):
    mime_type: typing.Optional[str] = pydantic.Field(None, description='``CfnEndpointConfig.ClarifyShapBaselineConfigProperty.MimeType``.')
    shap_baseline: typing.Optional[str] = pydantic.Field(None, description='``CfnEndpointConfig.ClarifyShapBaselineConfigProperty.ShapBaseline``.\n')
    shap_baseline_uri: typing.Optional[str] = pydantic.Field(None, description='``CfnEndpointConfig.ClarifyShapBaselineConfigProperty.ShapBaselineUri``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyshapbaselineconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    clarify_shap_baseline_config_property = sagemaker.CfnEndpointConfig.ClarifyShapBaselineConfigProperty(\n        mime_type="mimeType",\n        shap_baseline="shapBaseline",\n        shap_baseline_uri="shapBaselineUri"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['mime_type', 'shap_baseline', 'shap_baseline_uri']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpointConfig.ClarifyShapBaselineConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpointConfig.ClarifyShapConfigProperty
class CfnEndpointConfig_ClarifyShapConfigPropertyDef(BaseStruct):
    shap_baseline_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_ClarifyShapBaselineConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='``CfnEndpointConfig.ClarifyShapConfigProperty.ShapBaselineConfig``.')
    number_of_samples: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnEndpointConfig.ClarifyShapConfigProperty.NumberOfSamples``.\n')
    seed: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnEndpointConfig.ClarifyShapConfigProperty.Seed``.\n')
    text_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_ClarifyTextConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnEndpointConfig.ClarifyShapConfigProperty.TextConfig``.\n')
    use_logit: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnEndpointConfig.ClarifyShapConfigProperty.UseLogit``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifyshapconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    clarify_shap_config_property = sagemaker.CfnEndpointConfig.ClarifyShapConfigProperty(\n        shap_baseline_config=sagemaker.CfnEndpointConfig.ClarifyShapBaselineConfigProperty(\n            mime_type="mimeType",\n            shap_baseline="shapBaseline",\n            shap_baseline_uri="shapBaselineUri"\n        ),\n\n        # the properties below are optional\n        number_of_samples=123,\n        seed=123,\n        text_config=sagemaker.CfnEndpointConfig.ClarifyTextConfigProperty(\n            granularity="granularity",\n            language="language"\n        ),\n        use_logit=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['shap_baseline_config', 'number_of_samples', 'seed', 'text_config', 'use_logit']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpointConfig.ClarifyShapConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpointConfig.ClarifyTextConfigProperty
class CfnEndpointConfig_ClarifyTextConfigPropertyDef(BaseStruct):
    granularity: str = pydantic.Field(..., description='``CfnEndpointConfig.ClarifyTextConfigProperty.Granularity``.')
    language: str = pydantic.Field(..., description='``CfnEndpointConfig.ClarifyTextConfigProperty.Language``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-clarifytextconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    clarify_text_config_property = sagemaker.CfnEndpointConfig.ClarifyTextConfigProperty(\n        granularity="granularity",\n        language="language"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['granularity', 'language']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpointConfig.ClarifyTextConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpointConfig.DataCaptureConfigProperty
class CfnEndpointConfig_DataCaptureConfigPropertyDef(BaseStruct):
    capture_options: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_CaptureOptionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Specifies whether the endpoint captures input data to your model, output data from your model, or both.\n')
    destination_s3_uri: str = pydantic.Field(..., description='The S3 bucket where model monitor stores captured data.\n')
    initial_sampling_percentage: typing.Union[int, float] = pydantic.Field(..., description='The percentage of data to capture.\n')
    capture_content_type_header: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_CaptureContentTypeHeaderPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A list of the JSON and CSV content type that the endpoint captures.\n')
    enable_capture: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Set to ``True`` to enable data capture.\n')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt the captured data at rest using Amazon S3 server-side encryption. The KmsKeyId can be any of the following formats: Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab Key ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab Alias name: alias/ExampleAlias Alias name ARN: arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias If you don\'t provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role\'s account. For more information, see KMS-Managed Encryption Keys (https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html) in the Amazon Simple Storage Service Developer Guide. The KMS key policy must grant permission to the IAM role that you specify in your CreateModel (https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html) request. For more information, see Using Key Policies in AWS KMS (http://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html) in the AWS Key Management Service Developer Guide.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-datacaptureconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    data_capture_config_property = sagemaker.CfnEndpointConfig.DataCaptureConfigProperty(\n        capture_options=[sagemaker.CfnEndpointConfig.CaptureOptionProperty(\n            capture_mode="captureMode"\n        )],\n        destination_s3_uri="destinationS3Uri",\n        initial_sampling_percentage=123,\n\n        # the properties below are optional\n        capture_content_type_header=sagemaker.CfnEndpointConfig.CaptureContentTypeHeaderProperty(\n            csv_content_types=["csvContentTypes"],\n            json_content_types=["jsonContentTypes"]\n        ),\n        enable_capture=False,\n        kms_key_id="kmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['capture_options', 'destination_s3_uri', 'initial_sampling_percentage', 'capture_content_type_header', 'enable_capture', 'kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpointConfig.DataCaptureConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpointConfig.ExplainerConfigProperty
class CfnEndpointConfig_ExplainerConfigPropertyDef(BaseStruct):
    clarify_explainer_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_ClarifyExplainerConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnEndpointConfig.ExplainerConfigProperty.ClarifyExplainerConfig``.')
    _init_params: typing.ClassVar[list[str]] = ['clarify_explainer_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpointConfig.ExplainerConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpointConfig.ProductionVariantProperty
class CfnEndpointConfig_ProductionVariantPropertyDef(BaseStruct):
    initial_variant_weight: typing.Union[int, float] = pydantic.Field(..., description='Determines initial traffic distribution among all of the models that you specify in the endpoint configuration. The traffic to a production variant is determined by the ratio of the ``VariantWeight`` to the sum of all ``VariantWeight`` values across all ProductionVariants. If unspecified, it defaults to 1.0.\n')
    model_name: str = pydantic.Field(..., description='The name of the model that you want to host. This is the name that you specified when creating the model.\n')
    variant_name: str = pydantic.Field(..., description='The name of the production variant.\n')
    accelerator_type: typing.Optional[str] = pydantic.Field(None, description='The size of the Elastic Inference (EI) instance to use for the production variant. EI instances provide on-demand GPU computing for inference. For more information, see `Using Elastic Inference in Amazon SageMaker <https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html>`_ . For more information, see `Using Elastic Inference in Amazon SageMaker <https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html>`_ .\n')
    container_startup_health_check_timeout_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnEndpointConfig.ProductionVariantProperty.ContainerStartupHealthCheckTimeoutInSeconds``.\n')
    enable_ssm_access: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnEndpointConfig.ProductionVariantProperty.EnableSSMAccess``.\n')
    initial_instance_count: typing.Union[int, float, None] = pydantic.Field(None, description='Number of instances to launch initially.\n')
    instance_type: typing.Optional[str] = pydantic.Field(None, description='The ML compute instance type.\n')
    model_data_download_timeout_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnEndpointConfig.ProductionVariantProperty.ModelDataDownloadTimeoutInSeconds``.\n')
    serverless_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_ServerlessConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The serverless configuration for an endpoint. Specifies a serverless endpoint configuration instead of an instance-based endpoint configuration.\n')
    volume_size_in_gb: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnEndpointConfig.ProductionVariantProperty.VolumeSizeInGB``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-productionvariant.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    production_variant_property = sagemaker.CfnEndpointConfig.ProductionVariantProperty(\n        initial_variant_weight=123,\n        model_name="modelName",\n        variant_name="variantName",\n\n        # the properties below are optional\n        accelerator_type="acceleratorType",\n        container_startup_health_check_timeout_in_seconds=123,\n        enable_ssm_access=False,\n        initial_instance_count=123,\n        instance_type="instanceType",\n        model_data_download_timeout_in_seconds=123,\n        serverless_config=sagemaker.CfnEndpointConfig.ServerlessConfigProperty(\n            max_concurrency=123,\n            memory_size_in_mb=123,\n\n            # the properties below are optional\n            provisioned_concurrency=123\n        ),\n        volume_size_in_gb=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['initial_variant_weight', 'model_name', 'variant_name', 'accelerator_type', 'container_startup_health_check_timeout_in_seconds', 'enable_ssm_access', 'initial_instance_count', 'instance_type', 'model_data_download_timeout_in_seconds', 'serverless_config', 'volume_size_in_gb']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpointConfig.ProductionVariantProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpointConfig.ServerlessConfigProperty
class CfnEndpointConfig_ServerlessConfigPropertyDef(BaseStruct):
    max_concurrency: typing.Union[int, float] = pydantic.Field(..., description='The maximum number of concurrent invocations your serverless endpoint can process.\n')
    memory_size_in_mb: typing.Union[int, float] = pydantic.Field(..., description='The memory size of your serverless endpoint. Valid values are in 1 GB increments: 1024 MB, 2048 MB, 3072 MB, 4096 MB, 5120 MB, or 6144 MB.\n')
    provisioned_concurrency: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnEndpointConfig.ServerlessConfigProperty.ProvisionedConcurrency``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpointconfig-productionvariant-serverlessconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    serverless_config_property = sagemaker.CfnEndpointConfig.ServerlessConfigProperty(\n        max_concurrency=123,\n        memory_size_in_mb=123,\n\n        # the properties below are optional\n        provisioned_concurrency=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_concurrency', 'memory_size_in_mb', 'provisioned_concurrency']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpointConfig.ServerlessConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnFeatureGroup.DataCatalogConfigProperty
class CfnFeatureGroup_DataCatalogConfigPropertyDef(BaseStruct):
    catalog: str = pydantic.Field(..., description='The name of the Glue table catalog.\n')
    database: str = pydantic.Field(..., description='The name of the Glue table database.\n')
    table_name: str = pydantic.Field(..., description='The name of the Glue table.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-datacatalogconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    data_catalog_config_property = sagemaker.CfnFeatureGroup.DataCatalogConfigProperty(\n        catalog="catalog",\n        database="database",\n        table_name="tableName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['catalog', 'database', 'table_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnFeatureGroup.DataCatalogConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnFeatureGroup.FeatureDefinitionProperty
class CfnFeatureGroup_FeatureDefinitionPropertyDef(BaseStruct):
    feature_name: str = pydantic.Field(..., description='The name of a feature. The type must be a string. ``FeatureName`` cannot be any of the following: ``is_deleted`` , ``write_time`` , ``api_invocation_time`` .\n')
    feature_type: str = pydantic.Field(..., description='The value type of a feature. Valid values are Integral, Fractional, or String.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-featuredefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    feature_definition_property = sagemaker.CfnFeatureGroup.FeatureDefinitionProperty(\n        feature_name="featureName",\n        feature_type="featureType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['feature_name', 'feature_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnFeatureGroup.FeatureDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnFeatureGroup.OfflineStoreConfigProperty
class CfnFeatureGroup_OfflineStoreConfigPropertyDef(BaseStruct):
    s3_storage_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnFeatureGroup_S3StorageConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The Amazon Simple Storage (Amazon S3) location of ``OfflineStore`` .\n')
    data_catalog_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnFeatureGroup_DataCatalogConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The meta data of the Glue table that is autogenerated when an ``OfflineStore`` is created.\n')
    disable_glue_table_creation: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description="Set to ``True`` to disable the automatic creation of an AWS Glue table when configuring an ``OfflineStore`` . If set to ``False`` , Feature Store will name the ``OfflineStore`` Glue table following `Athena's naming recommendations <https://docs.aws.amazon.com/athena/latest/ug/tables-databases-columns-names.html>`_ . The default value is ``False`` .\n")
    table_format: typing.Optional[str] = pydantic.Field(None, description='``CfnFeatureGroup.OfflineStoreConfigProperty.TableFormat``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-offlinestoreconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    offline_store_config_property = sagemaker.CfnFeatureGroup.OfflineStoreConfigProperty(\n        s3_storage_config=sagemaker.CfnFeatureGroup.S3StorageConfigProperty(\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            kms_key_id="kmsKeyId"\n        ),\n\n        # the properties below are optional\n        data_catalog_config=sagemaker.CfnFeatureGroup.DataCatalogConfigProperty(\n            catalog="catalog",\n            database="database",\n            table_name="tableName"\n        ),\n        disable_glue_table_creation=False,\n        table_format="tableFormat"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_storage_config', 'data_catalog_config', 'disable_glue_table_creation', 'table_format']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnFeatureGroup.OfflineStoreConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnFeatureGroup.OnlineStoreConfigProperty
class CfnFeatureGroup_OnlineStoreConfigPropertyDef(BaseStruct):
    enable_online_store: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Turn ``OnlineStore`` off by specifying ``False`` for the ``EnableOnlineStore`` flag. Turn ``OnlineStore`` on by specifying ``True`` for the ``EnableOnlineStore`` flag. The default value is ``False`` .\n')
    security_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnFeatureGroup_OnlineStoreSecurityConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Use to specify KMS Key ID ( ``KMSKeyId`` ) for at-rest encryption of your ``OnlineStore`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-onlinestoreconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    online_store_config_property = sagemaker.CfnFeatureGroup.OnlineStoreConfigProperty(\n        enable_online_store=False,\n        security_config=sagemaker.CfnFeatureGroup.OnlineStoreSecurityConfigProperty(\n            kms_key_id="kmsKeyId"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enable_online_store', 'security_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnFeatureGroup.OnlineStoreConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnFeatureGroup.OnlineStoreSecurityConfigProperty
class CfnFeatureGroup_OnlineStoreSecurityConfigPropertyDef(BaseStruct):
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The AWS Key Management Service (KMS) key ARN that SageMaker Feature Store uses to encrypt the Amazon S3 objects at rest using Amazon S3 server-side encryption. The caller (either user or IAM role) of ``CreateFeatureGroup`` must have below permissions to the ``OnlineStore`` ``KmsKeyId`` : - ``"kms:Encrypt"`` - ``"kms:Decrypt"`` - ``"kms:DescribeKey"`` - ``"kms:CreateGrant"`` - ``"kms:RetireGrant"`` - ``"kms:ReEncryptFrom"`` - ``"kms:ReEncryptTo"`` - ``"kms:GenerateDataKey"`` - ``"kms:ListAliases"`` - ``"kms:ListGrants"`` - ``"kms:RevokeGrant"`` The caller (either user or IAM role) to all DataPlane operations ( ``PutRecord`` , ``GetRecord`` , ``DeleteRecord`` ) must have the following permissions to the ``KmsKeyId`` : - ``"kms:Decrypt"``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-onlinestoresecurityconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    online_store_security_config_property = sagemaker.CfnFeatureGroup.OnlineStoreSecurityConfigProperty(\n        kms_key_id="kmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnFeatureGroup.OnlineStoreSecurityConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnFeatureGroup.S3StorageConfigProperty
class CfnFeatureGroup_S3StorageConfigPropertyDef(BaseStruct):
    s3_uri: str = pydantic.Field(..., description='The S3 URI, or location in Amazon S3, of ``OfflineStore`` . S3 URIs have a format similar to the following: ``s3://example-bucket/prefix/`` .\n')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The AWS Key Management Service (KMS) key ARN of the key used to encrypt any objects written into the ``OfflineStore`` S3 location. The IAM ``roleARN`` that is passed as a parameter to ``CreateFeatureGroup`` must have below permissions to the ``KmsKeyId`` : - ``"kms:GenerateDataKey"``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-featuregroup-s3storageconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    s3_storage_config_property = sagemaker.CfnFeatureGroup.S3StorageConfigProperty(\n        s3_uri="s3Uri",\n\n        # the properties below are optional\n        kms_key_id="kmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_uri', 'kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnFeatureGroup.S3StorageConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnInferenceExperiment.CaptureContentTypeHeaderProperty
class CfnInferenceExperiment_CaptureContentTypeHeaderPropertyDef(BaseStruct):
    csv_content_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The list of all content type headers that SageMaker will treat as CSV and capture accordingly.\n')
    json_content_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The list of all content type headers that SageMaker will treat as JSON and capture accordingly.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-capturecontenttypeheader.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    capture_content_type_header_property = sagemaker.CfnInferenceExperiment.CaptureContentTypeHeaderProperty(\n        csv_content_types=["csvContentTypes"],\n        json_content_types=["jsonContentTypes"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['csv_content_types', 'json_content_types']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnInferenceExperiment.CaptureContentTypeHeaderProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnInferenceExperiment.DataStorageConfigProperty
class CfnInferenceExperiment_DataStorageConfigPropertyDef(BaseStruct):
    destination: str = pydantic.Field(..., description='The Amazon S3 bucket where the inference request and response data is stored.\n')
    content_type: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnInferenceExperiment_CaptureContentTypeHeaderPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configuration specifying how to treat different headers. If no headers are specified SageMaker will by default base64 encode when capturing the data.\n')
    kms_key: typing.Optional[str] = pydantic.Field(None, description='The AWS Key Management Service key that Amazon SageMaker uses to encrypt captured data at rest using Amazon S3 server-side encryption.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-datastorageconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    data_storage_config_property = sagemaker.CfnInferenceExperiment.DataStorageConfigProperty(\n        destination="destination",\n\n        # the properties below are optional\n        content_type=sagemaker.CfnInferenceExperiment.CaptureContentTypeHeaderProperty(\n            csv_content_types=["csvContentTypes"],\n            json_content_types=["jsonContentTypes"]\n        ),\n        kms_key="kmsKey"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['destination', 'content_type', 'kms_key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnInferenceExperiment.DataStorageConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnInferenceExperiment.EndpointMetadataProperty
class CfnInferenceExperiment_EndpointMetadataPropertyDef(BaseStruct):
    endpoint_name: str = pydantic.Field(..., description='The name of the endpoint.\n')
    endpoint_config_name: typing.Optional[str] = pydantic.Field(None, description='The name of the endpoint configuration.\n')
    endpoint_status: typing.Optional[str] = pydantic.Field(None, description='The status of the endpoint. For possible values of the status of an endpoint, see ` <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-endpointmetadata.html#cfn-sagemaker-inferenceexperiment-endpointmetadata-endpointstatus>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-endpointmetadata.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    endpoint_metadata_property = sagemaker.CfnInferenceExperiment.EndpointMetadataProperty(\n        endpoint_name="endpointName",\n\n        # the properties below are optional\n        endpoint_config_name="endpointConfigName",\n        endpoint_status="endpointStatus"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['endpoint_name', 'endpoint_config_name', 'endpoint_status']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnInferenceExperiment.EndpointMetadataProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnInferenceExperiment.InferenceExperimentScheduleProperty
class CfnInferenceExperiment_InferenceExperimentSchedulePropertyDef(BaseStruct):
    end_time: typing.Optional[str] = pydantic.Field(None, description='The timestamp at which the inference experiment ended or will end.\n')
    start_time: typing.Optional[str] = pydantic.Field(None, description='The timestamp at which the inference experiment started or will start.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-inferenceexperimentschedule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    inference_experiment_schedule_property = sagemaker.CfnInferenceExperiment.InferenceExperimentScheduleProperty(\n        end_time="endTime",\n        start_time="startTime"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['end_time', 'start_time']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnInferenceExperiment.InferenceExperimentScheduleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnInferenceExperiment.ModelInfrastructureConfigProperty
class CfnInferenceExperiment_ModelInfrastructureConfigPropertyDef(BaseStruct):
    infrastructure_type: str = pydantic.Field(..., description='The inference option to which to deploy your model. Possible values are the following:. - ``RealTime`` : Deploy to real-time inference.\n')
    real_time_inference_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnInferenceExperiment_RealTimeInferenceConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The infrastructure configuration for deploying the model to real-time inference.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-modelinfrastructureconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    model_infrastructure_config_property = sagemaker.CfnInferenceExperiment.ModelInfrastructureConfigProperty(\n        infrastructure_type="infrastructureType",\n        real_time_inference_config=sagemaker.CfnInferenceExperiment.RealTimeInferenceConfigProperty(\n            instance_count=123,\n            instance_type="instanceType"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['infrastructure_type', 'real_time_inference_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnInferenceExperiment.ModelInfrastructureConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnInferenceExperiment.ModelVariantConfigProperty
class CfnInferenceExperiment_ModelVariantConfigPropertyDef(BaseStruct):
    infrastructure_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnInferenceExperiment_ModelInfrastructureConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The configuration for the infrastructure that the model will be deployed to.\n')
    model_name: str = pydantic.Field(..., description='The name of the Amazon SageMaker Model entity.\n')
    variant_name: str = pydantic.Field(..., description='The name of the variant.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-modelvariantconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    model_variant_config_property = sagemaker.CfnInferenceExperiment.ModelVariantConfigProperty(\n        infrastructure_config=sagemaker.CfnInferenceExperiment.ModelInfrastructureConfigProperty(\n            infrastructure_type="infrastructureType",\n            real_time_inference_config=sagemaker.CfnInferenceExperiment.RealTimeInferenceConfigProperty(\n                instance_count=123,\n                instance_type="instanceType"\n            )\n        ),\n        model_name="modelName",\n        variant_name="variantName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['infrastructure_config', 'model_name', 'variant_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnInferenceExperiment.ModelVariantConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnInferenceExperiment.RealTimeInferenceConfigProperty
class CfnInferenceExperiment_RealTimeInferenceConfigPropertyDef(BaseStruct):
    instance_count: typing.Union[int, float] = pydantic.Field(..., description='The number of instances of the type specified by ``InstanceType`` .\n')
    instance_type: str = pydantic.Field(..., description='The instance type the model is deployed to.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-realtimeinferenceconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    real_time_inference_config_property = sagemaker.CfnInferenceExperiment.RealTimeInferenceConfigProperty(\n        instance_count=123,\n        instance_type="instanceType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_count', 'instance_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnInferenceExperiment.RealTimeInferenceConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnInferenceExperiment.ShadowModeConfigProperty
class CfnInferenceExperiment_ShadowModeConfigPropertyDef(BaseStruct):
    shadow_model_variants: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnInferenceExperiment_ShadowModelVariantConfigPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='List of shadow variant configurations.\n')
    source_model_variant_name: str = pydantic.Field(..., description='The name of the production variant, which takes all the inference requests.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-shadowmodeconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    shadow_mode_config_property = sagemaker.CfnInferenceExperiment.ShadowModeConfigProperty(\n        shadow_model_variants=[sagemaker.CfnInferenceExperiment.ShadowModelVariantConfigProperty(\n            sampling_percentage=123,\n            shadow_model_variant_name="shadowModelVariantName"\n        )],\n        source_model_variant_name="sourceModelVariantName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['shadow_model_variants', 'source_model_variant_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnInferenceExperiment.ShadowModeConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnInferenceExperiment.ShadowModelVariantConfigProperty
class CfnInferenceExperiment_ShadowModelVariantConfigPropertyDef(BaseStruct):
    sampling_percentage: typing.Union[int, float] = pydantic.Field(..., description='The percentage of inference requests that Amazon SageMaker replicates from the production variant to the shadow variant.\n')
    shadow_model_variant_name: str = pydantic.Field(..., description='The name of the shadow variant.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-inferenceexperiment-shadowmodelvariantconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    shadow_model_variant_config_property = sagemaker.CfnInferenceExperiment.ShadowModelVariantConfigProperty(\n        sampling_percentage=123,\n        shadow_model_variant_name="shadowModelVariantName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['sampling_percentage', 'shadow_model_variant_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnInferenceExperiment.ShadowModelVariantConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModel.ContainerDefinitionProperty
class CfnModel_ContainerDefinitionPropertyDef(BaseStruct):
    container_hostname: typing.Optional[str] = pydantic.Field(None, description="This parameter is ignored for models that contain only a ``PrimaryContainer`` . When a ``ContainerDefinition`` is part of an inference pipeline, the value of the parameter uniquely identifies the container for the purposes of logging and metrics. For information, see `Use Logs and Metrics to Monitor an Inference Pipeline <https://docs.aws.amazon.com/sagemaker/latest/dg/inference-pipeline-logs-metrics.html>`_ . If you don't specify a value for this parameter for a ``ContainerDefinition`` that is part of an inference pipeline, a unique name is automatically assigned based on the position of the ``ContainerDefinition`` in the pipeline. If you specify a value for the ``ContainerHostName`` for any ``ContainerDefinition`` that is part of an inference pipeline, you must specify a value for the ``ContainerHostName`` parameter of every ``ContainerDefinition`` in that pipeline.\n")
    environment: typing.Any = pydantic.Field(None, description='The environment variables to set in the Docker container. Each key and value in the ``Environment`` string to string map can have length of up to 1024. We support up to 16 entries in the map.\n')
    image: typing.Optional[str] = pydantic.Field(None, description='The path where inference code is stored. This can be either in Amazon EC2 Container Registry or in a Docker registry that is accessible from the same VPC that you configure for your endpoint. If you are using your own custom algorithm instead of an algorithm provided by SageMaker, the inference code must meet SageMaker requirements. SageMaker supports both ``registry/repository[:tag]`` and ``registry/repository[@digest]`` image path formats. For more information, see `Using Your Own Algorithms with Amazon SageMaker <https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html>`_ . .. epigraph:: The model artifacts in an Amazon S3 bucket and the Docker image for inference container in Amazon EC2 Container Registry must be in the same region as the model or endpoint you are creating.\n')
    image_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModel_ImageConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For information about storing containers in a private Docker registry, see `Use a Private Docker Registry for Real-Time Inference Containers <https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html>`_ . .. epigraph:: The model artifacts in an Amazon S3 bucket and the Docker image for inference container in Amazon EC2 Container Registry must be in the same region as the model or endpoint you are creating.\n')
    inference_specification_name: typing.Optional[str] = pydantic.Field(None, description='The inference specification name in the model package version.\n')
    mode: typing.Optional[str] = pydantic.Field(None, description='Whether the container hosts a single model or multiple models.\n')
    model_data_url: typing.Optional[str] = pydantic.Field(None, description='The S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix). The S3 path is required for SageMaker built-in algorithms, but not if you use your own algorithms. For more information on built-in algorithms, see `Common Parameters <https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html>`_ . .. epigraph:: The model artifacts must be in an S3 bucket that is in the same region as the model or endpoint you are creating. If you provide a value for this parameter, SageMaker uses AWS Security Token Service to download model artifacts from the S3 path you provide. AWS STS is activated in your AWS account by default. If you previously deactivated AWS STS for a region, you need to reactivate AWS STS for that region. For more information, see `Activating and Deactivating AWS STS in an AWS Region <https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html>`_ in the *AWS Identity and Access Management User Guide* . .. epigraph:: If you use a built-in algorithm to create a model, SageMaker requires that you provide a S3 path to the model artifacts in ``ModelDataUrl`` .\n')
    model_package_name: typing.Optional[str] = pydantic.Field(None, description='The name or Amazon Resource Name (ARN) of the model package to use to create the model.\n')
    multi_model_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModel_MultiModelConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies additional configuration for multi-model endpoints.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-containerdefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    # environment: Any\n\n    container_definition_property = sagemaker.CfnModel.ContainerDefinitionProperty(\n        container_hostname="containerHostname",\n        environment=environment,\n        image="image",\n        image_config=sagemaker.CfnModel.ImageConfigProperty(\n            repository_access_mode="repositoryAccessMode",\n\n            # the properties below are optional\n            repository_auth_config=sagemaker.CfnModel.RepositoryAuthConfigProperty(\n                repository_credentials_provider_arn="repositoryCredentialsProviderArn"\n            )\n        ),\n        inference_specification_name="inferenceSpecificationName",\n        mode="mode",\n        model_data_url="modelDataUrl",\n        model_package_name="modelPackageName",\n        multi_model_config=sagemaker.CfnModel.MultiModelConfigProperty(\n            model_cache_setting="modelCacheSetting"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['container_hostname', 'environment', 'image', 'image_config', 'inference_specification_name', 'mode', 'model_data_url', 'model_package_name', 'multi_model_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModel.ContainerDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModel.ImageConfigProperty
class CfnModel_ImageConfigPropertyDef(BaseStruct):
    repository_access_mode: str = pydantic.Field(..., description='Set this to one of the following values:. - ``Platform`` - The model image is hosted in Amazon ECR. - ``Vpc`` - The model image is hosted in a private Docker registry in your VPC.\n')
    repository_auth_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModel_RepositoryAuthConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='(Optional) Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified ``Vpc`` as the value for the ``RepositoryAccessMode`` field, and the private Docker registry where the model image is hosted requires authentication.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-containerdefinition-imageconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    image_config_property = sagemaker.CfnModel.ImageConfigProperty(\n        repository_access_mode="repositoryAccessMode",\n\n        # the properties below are optional\n        repository_auth_config=sagemaker.CfnModel.RepositoryAuthConfigProperty(\n            repository_credentials_provider_arn="repositoryCredentialsProviderArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['repository_access_mode', 'repository_auth_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModel.ImageConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModel.InferenceExecutionConfigProperty
class CfnModel_InferenceExecutionConfigPropertyDef(BaseStruct):
    mode: str = pydantic.Field(..., description='How containers in a multi-container are run. The following values are valid. - ``Serial`` - Containers run as a serial pipeline. - ``Direct`` - Only the individual container that you specify is run.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-inferenceexecutionconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    inference_execution_config_property = sagemaker.CfnModel.InferenceExecutionConfigProperty(\n        mode="mode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['mode']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModel.InferenceExecutionConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModel.MultiModelConfigProperty
class CfnModel_MultiModelConfigPropertyDef(BaseStruct):
    model_cache_setting: typing.Optional[str] = pydantic.Field(None, description='Whether to cache models for a multi-model endpoint. By default, multi-model endpoints cache models so that a model does not have to be loaded into memory each time it is invoked. Some use cases do not benefit from model caching. For example, if an endpoint hosts a large number of models that are each invoked infrequently, the endpoint might perform better if you disable model caching. To disable model caching, set the value of this parameter to Disabled.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-containerdefinition-multimodelconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    multi_model_config_property = sagemaker.CfnModel.MultiModelConfigProperty(\n        model_cache_setting="modelCacheSetting"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['model_cache_setting']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModel.MultiModelConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModel.RepositoryAuthConfigProperty
class CfnModel_RepositoryAuthConfigPropertyDef(BaseStruct):
    repository_credentials_provider_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of an AWS Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an AWS Lambda function, see `Create a Lambda function with the console <https://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html>`_ in the *AWS Lambda Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-containerdefinition-imageconfig-repositoryauthconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    repository_auth_config_property = sagemaker.CfnModel.RepositoryAuthConfigProperty(\n        repository_credentials_provider_arn="repositoryCredentialsProviderArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['repository_credentials_provider_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModel.RepositoryAuthConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModel.VpcConfigProperty
class CfnModel_VpcConfigPropertyDef(BaseStruct):
    security_group_ids: typing.Sequence[str] = pydantic.Field(..., description='The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the ``Subnets`` field.\n')
    subnets: typing.Sequence[str] = pydantic.Field(..., description='The ID of the subnets in the VPC to which you want to connect your training job or model. For information about the availability of specific instance types, see `Supported Instance Types and Availability Zones <https://docs.aws.amazon.com/sagemaker/latest/dg/instance-types-az.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-model-vpcconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    vpc_config_property = sagemaker.CfnModel.VpcConfigProperty(\n        security_group_ids=["securityGroupIds"],\n        subnets=["subnets"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['security_group_ids', 'subnets']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModel.VpcConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.BatchTransformInputProperty
class CfnModelBiasJobDefinition_BatchTransformInputPropertyDef(BaseStruct):
    data_captured_destination_s3_uri: str = pydantic.Field(..., description='``CfnModelBiasJobDefinition.BatchTransformInputProperty.DataCapturedDestinationS3Uri``.')
    dataset_format: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_DatasetFormatPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='``CfnModelBiasJobDefinition.BatchTransformInputProperty.DatasetFormat``.\n')
    local_path: str = pydantic.Field(..., description='``CfnModelBiasJobDefinition.BatchTransformInputProperty.LocalPath``.\n')
    end_time_offset: typing.Optional[str] = pydantic.Field(None, description='``CfnModelBiasJobDefinition.BatchTransformInputProperty.EndTimeOffset``.\n')
    features_attribute: typing.Optional[str] = pydantic.Field(None, description='``CfnModelBiasJobDefinition.BatchTransformInputProperty.FeaturesAttribute``.\n')
    inference_attribute: typing.Optional[str] = pydantic.Field(None, description='``CfnModelBiasJobDefinition.BatchTransformInputProperty.InferenceAttribute``.\n')
    probability_attribute: typing.Optional[str] = pydantic.Field(None, description='``CfnModelBiasJobDefinition.BatchTransformInputProperty.ProbabilityAttribute``.\n')
    probability_threshold_attribute: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnModelBiasJobDefinition.BatchTransformInputProperty.ProbabilityThresholdAttribute``.\n')
    s3_data_distribution_type: typing.Optional[str] = pydantic.Field(None, description='``CfnModelBiasJobDefinition.BatchTransformInputProperty.S3DataDistributionType``.\n')
    s3_input_mode: typing.Optional[str] = pydantic.Field(None, description='``CfnModelBiasJobDefinition.BatchTransformInputProperty.S3InputMode``.\n')
    start_time_offset: typing.Optional[str] = pydantic.Field(None, description='``CfnModelBiasJobDefinition.BatchTransformInputProperty.StartTimeOffset``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-batchtransforminput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    batch_transform_input_property = sagemaker.CfnModelBiasJobDefinition.BatchTransformInputProperty(\n        data_captured_destination_s3_uri="dataCapturedDestinationS3Uri",\n        dataset_format=sagemaker.CfnModelBiasJobDefinition.DatasetFormatProperty(\n            csv=sagemaker.CfnModelBiasJobDefinition.CsvProperty(\n                header=False\n            ),\n            json=sagemaker.CfnModelBiasJobDefinition.JsonProperty(\n                line=False\n            ),\n            parquet=False\n        ),\n        local_path="localPath",\n\n        # the properties below are optional\n        end_time_offset="endTimeOffset",\n        features_attribute="featuresAttribute",\n        inference_attribute="inferenceAttribute",\n        probability_attribute="probabilityAttribute",\n        probability_threshold_attribute=123,\n        s3_data_distribution_type="s3DataDistributionType",\n        s3_input_mode="s3InputMode",\n        start_time_offset="startTimeOffset"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['data_captured_destination_s3_uri', 'dataset_format', 'local_path', 'end_time_offset', 'features_attribute', 'inference_attribute', 'probability_attribute', 'probability_threshold_attribute', 's3_data_distribution_type', 's3_input_mode', 'start_time_offset']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.BatchTransformInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.ClusterConfigProperty
class CfnModelBiasJobDefinition_ClusterConfigPropertyDef(BaseStruct):
    instance_count: typing.Union[int, float] = pydantic.Field(..., description='The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.\n')
    instance_type: str = pydantic.Field(..., description='The ML compute instance type for the processing job.\n')
    volume_size_in_gb: typing.Union[int, float] = pydantic.Field(..., description='The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.\n')
    volume_kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-clusterconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cluster_config_property = sagemaker.CfnModelBiasJobDefinition.ClusterConfigProperty(\n        instance_count=123,\n        instance_type="instanceType",\n        volume_size_in_gb=123,\n\n        # the properties below are optional\n        volume_kms_key_id="volumeKmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_count', 'instance_type', 'volume_size_in_gb', 'volume_kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.ClusterConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.ConstraintsResourceProperty
class CfnModelBiasJobDefinition_ConstraintsResourcePropertyDef(BaseStruct):
    s3_uri: typing.Optional[str] = pydantic.Field(None, description='The Amazon S3 URI for the constraints resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-constraintsresource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    constraints_resource_property = sagemaker.CfnModelBiasJobDefinition.ConstraintsResourceProperty(\n        s3_uri="s3Uri"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_uri']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.ConstraintsResourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.CsvProperty
class CfnModelBiasJobDefinition_CsvPropertyDef(BaseStruct):
    header: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnModelBiasJobDefinition.CsvProperty.Header``.')
    _init_params: typing.ClassVar[list[str]] = ['header']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.CsvProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.DatasetFormatProperty
class CfnModelBiasJobDefinition_DatasetFormatPropertyDef(BaseStruct):
    csv: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_CsvPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnModelBiasJobDefinition.DatasetFormatProperty.Csv``.')
    json_: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_JsonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnModelBiasJobDefinition.DatasetFormatProperty.Json``.\n', alias='json')
    parquet: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnModelBiasJobDefinition.DatasetFormatProperty.Parquet``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-datasetformat.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    dataset_format_property = sagemaker.CfnModelBiasJobDefinition.DatasetFormatProperty(\n        csv=sagemaker.CfnModelBiasJobDefinition.CsvProperty(\n            header=False\n        ),\n        json=sagemaker.CfnModelBiasJobDefinition.JsonProperty(\n            line=False\n        ),\n        parquet=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['csv', 'json', 'parquet']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.DatasetFormatProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.EndpointInputProperty
class CfnModelBiasJobDefinition_EndpointInputPropertyDef(BaseStruct):
    endpoint_name: str = pydantic.Field(..., description="An endpoint in customer's account which has enabled ``DataCaptureConfig`` enabled.\n")
    local_path: str = pydantic.Field(..., description='Path to the filesystem where the endpoint data is available to the container.\n')
    end_time_offset: typing.Optional[str] = pydantic.Field(None, description='If specified, monitoring jobs substract this time from the end time. For information about using offsets for scheduling monitoring jobs, see `Schedule Model Quality Monitoring Jobs <https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html>`_ .\n')
    features_attribute: typing.Optional[str] = pydantic.Field(None, description='The attributes of the input data that are the input features.\n')
    inference_attribute: typing.Optional[str] = pydantic.Field(None, description='The attribute of the input data that represents the ground truth label.\n')
    probability_attribute: typing.Optional[str] = pydantic.Field(None, description='In a classification problem, the attribute that represents the class probability.\n')
    probability_threshold_attribute: typing.Union[int, float, None] = pydantic.Field(None, description='The threshold for the class probability to be evaluated as a positive result.\n')
    s3_data_distribution_type: typing.Optional[str] = pydantic.Field(None, description='Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defaults to ``FullyReplicated``\n')
    s3_input_mode: typing.Optional[str] = pydantic.Field(None, description='Whether the ``Pipe`` or ``File`` is used as the input mode for transferring data for the monitoring job. ``Pipe`` mode is recommended for large datasets. ``File`` mode is useful for small files that fit in memory. Defaults to ``File`` .\n')
    start_time_offset: typing.Optional[str] = pydantic.Field(None, description='If specified, monitoring jobs substract this time from the start time. For information about using offsets for scheduling monitoring jobs, see `Schedule Model Quality Monitoring Jobs <https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-endpointinput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    endpoint_input_property = sagemaker.CfnModelBiasJobDefinition.EndpointInputProperty(\n        endpoint_name="endpointName",\n        local_path="localPath",\n\n        # the properties below are optional\n        end_time_offset="endTimeOffset",\n        features_attribute="featuresAttribute",\n        inference_attribute="inferenceAttribute",\n        probability_attribute="probabilityAttribute",\n        probability_threshold_attribute=123,\n        s3_data_distribution_type="s3DataDistributionType",\n        s3_input_mode="s3InputMode",\n        start_time_offset="startTimeOffset"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['endpoint_name', 'local_path', 'end_time_offset', 'features_attribute', 'inference_attribute', 'probability_attribute', 'probability_threshold_attribute', 's3_data_distribution_type', 's3_input_mode', 'start_time_offset']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.EndpointInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.JsonProperty
class CfnModelBiasJobDefinition_JsonPropertyDef(BaseStruct):
    line: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnModelBiasJobDefinition.JsonProperty.Line``.')
    _init_params: typing.ClassVar[list[str]] = ['line']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.JsonProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.ModelBiasAppSpecificationProperty
class CfnModelBiasJobDefinition_ModelBiasAppSpecificationPropertyDef(BaseStruct):
    config_uri: str = pydantic.Field(..., description='JSON formatted S3 file that defines bias parameters. For more information on this JSON configuration file, see `Configure bias parameters <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-config-json-monitor-bias-parameters.html>`_ .\n')
    image_uri: str = pydantic.Field(..., description='The container image to be run by the model bias job.\n')
    environment: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='Sets the environment variables in the Docker container.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-modelbiasappspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    model_bias_app_specification_property = sagemaker.CfnModelBiasJobDefinition.ModelBiasAppSpecificationProperty(\n        config_uri="configUri",\n        image_uri="imageUri",\n\n        # the properties below are optional\n        environment={\n            "environment_key": "environment"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['config_uri', 'image_uri', 'environment']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.ModelBiasAppSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.ModelBiasBaselineConfigProperty
class CfnModelBiasJobDefinition_ModelBiasBaselineConfigPropertyDef(BaseStruct):
    baselining_job_name: typing.Optional[str] = pydantic.Field(None, description='The name of the baseline model bias job.\n')
    constraints_resource: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_ConstraintsResourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The constraints resource for a monitoring job.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-modelbiasbaselineconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    model_bias_baseline_config_property = sagemaker.CfnModelBiasJobDefinition.ModelBiasBaselineConfigProperty(\n        baselining_job_name="baseliningJobName",\n        constraints_resource=sagemaker.CfnModelBiasJobDefinition.ConstraintsResourceProperty(\n            s3_uri="s3Uri"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['baselining_job_name', 'constraints_resource']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.ModelBiasBaselineConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.ModelBiasJobInputProperty
class CfnModelBiasJobDefinition_ModelBiasJobInputPropertyDef(BaseStruct):
    ground_truth_s3_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_MonitoringGroundTruthS3InputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Location of ground truth labels to use in model bias job.\n')
    batch_transform_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_BatchTransformInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnModelBiasJobDefinition.ModelBiasJobInputProperty.BatchTransformInput``.\n')
    endpoint_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_EndpointInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Input object for the endpoint.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-modelbiasjobinput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    model_bias_job_input_property = sagemaker.CfnModelBiasJobDefinition.ModelBiasJobInputProperty(\n        ground_truth_s3_input=sagemaker.CfnModelBiasJobDefinition.MonitoringGroundTruthS3InputProperty(\n            s3_uri="s3Uri"\n        ),\n\n        # the properties below are optional\n        batch_transform_input=sagemaker.CfnModelBiasJobDefinition.BatchTransformInputProperty(\n            data_captured_destination_s3_uri="dataCapturedDestinationS3Uri",\n            dataset_format=sagemaker.CfnModelBiasJobDefinition.DatasetFormatProperty(\n                csv=sagemaker.CfnModelBiasJobDefinition.CsvProperty(\n                    header=False\n                ),\n                json=sagemaker.CfnModelBiasJobDefinition.JsonProperty(\n                    line=False\n                ),\n                parquet=False\n            ),\n            local_path="localPath",\n\n            # the properties below are optional\n            end_time_offset="endTimeOffset",\n            features_attribute="featuresAttribute",\n            inference_attribute="inferenceAttribute",\n            probability_attribute="probabilityAttribute",\n            probability_threshold_attribute=123,\n            s3_data_distribution_type="s3DataDistributionType",\n            s3_input_mode="s3InputMode",\n            start_time_offset="startTimeOffset"\n        ),\n        endpoint_input=sagemaker.CfnModelBiasJobDefinition.EndpointInputProperty(\n            endpoint_name="endpointName",\n            local_path="localPath",\n\n            # the properties below are optional\n            end_time_offset="endTimeOffset",\n            features_attribute="featuresAttribute",\n            inference_attribute="inferenceAttribute",\n            probability_attribute="probabilityAttribute",\n            probability_threshold_attribute=123,\n            s3_data_distribution_type="s3DataDistributionType",\n            s3_input_mode="s3InputMode",\n            start_time_offset="startTimeOffset"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ground_truth_s3_input', 'batch_transform_input', 'endpoint_input']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.ModelBiasJobInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.MonitoringGroundTruthS3InputProperty
class CfnModelBiasJobDefinition_MonitoringGroundTruthS3InputPropertyDef(BaseStruct):
    s3_uri: str = pydantic.Field(..., description='The address of the Amazon S3 location of the ground truth labels.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-monitoringgroundtruths3input.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_ground_truth_s3_input_property = sagemaker.CfnModelBiasJobDefinition.MonitoringGroundTruthS3InputProperty(\n        s3_uri="s3Uri"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_uri']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.MonitoringGroundTruthS3InputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.MonitoringOutputConfigProperty
class CfnModelBiasJobDefinition_MonitoringOutputConfigPropertyDef(BaseStruct):
    monitoring_outputs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_MonitoringOutputPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.\n')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-monitoringoutputconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_output_config_property = sagemaker.CfnModelBiasJobDefinition.MonitoringOutputConfigProperty(\n        monitoring_outputs=[sagemaker.CfnModelBiasJobDefinition.MonitoringOutputProperty(\n            s3_output=sagemaker.CfnModelBiasJobDefinition.S3OutputProperty(\n                local_path="localPath",\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                s3_upload_mode="s3UploadMode"\n            )\n        )],\n\n        # the properties below are optional\n        kms_key_id="kmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['monitoring_outputs', 'kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.MonitoringOutputConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.MonitoringOutputProperty
class CfnModelBiasJobDefinition_MonitoringOutputPropertyDef(BaseStruct):
    s3_output: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_S3OutputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The Amazon S3 storage location where the results of a monitoring job are saved.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-monitoringoutput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_output_property = sagemaker.CfnModelBiasJobDefinition.MonitoringOutputProperty(\n        s3_output=sagemaker.CfnModelBiasJobDefinition.S3OutputProperty(\n            local_path="localPath",\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            s3_upload_mode="s3UploadMode"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_output']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.MonitoringOutputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.MonitoringResourcesProperty
class CfnModelBiasJobDefinition_MonitoringResourcesPropertyDef(BaseStruct):
    cluster_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_ClusterConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The configuration for the cluster resources used to run the processing job.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-monitoringresources.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_resources_property = sagemaker.CfnModelBiasJobDefinition.MonitoringResourcesProperty(\n        cluster_config=sagemaker.CfnModelBiasJobDefinition.ClusterConfigProperty(\n            instance_count=123,\n            instance_type="instanceType",\n            volume_size_in_gb=123,\n\n            # the properties below are optional\n            volume_kms_key_id="volumeKmsKeyId"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cluster_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.MonitoringResourcesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.NetworkConfigProperty
class CfnModelBiasJobDefinition_NetworkConfigPropertyDef(BaseStruct):
    enable_inter_container_traffic_encryption: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Whether to encrypt all communications between distributed processing jobs. Choose ``True`` to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.\n')
    enable_network_isolation: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Whether to allow inbound and outbound network calls to and from the containers used for the processing job.\n')
    vpc_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_VpcConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-networkconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    network_config_property = sagemaker.CfnModelBiasJobDefinition.NetworkConfigProperty(\n        enable_inter_container_traffic_encryption=False,\n        enable_network_isolation=False,\n        vpc_config=sagemaker.CfnModelBiasJobDefinition.VpcConfigProperty(\n            security_group_ids=["securityGroupIds"],\n            subnets=["subnets"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enable_inter_container_traffic_encryption', 'enable_network_isolation', 'vpc_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.NetworkConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.S3OutputProperty
class CfnModelBiasJobDefinition_S3OutputPropertyDef(BaseStruct):
    local_path: str = pydantic.Field(..., description='The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. ``LocalPath`` is an absolute path for the output data.\n')
    s3_uri: str = pydantic.Field(..., description='A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.\n')
    s3_upload_mode: typing.Optional[str] = pydantic.Field(None, description='Whether to upload the results of the monitoring job continuously or after the job completes.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-s3output.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    s3_output_property = sagemaker.CfnModelBiasJobDefinition.S3OutputProperty(\n        local_path="localPath",\n        s3_uri="s3Uri",\n\n        # the properties below are optional\n        s3_upload_mode="s3UploadMode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['local_path', 's3_uri', 's3_upload_mode']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.S3OutputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.StoppingConditionProperty
class CfnModelBiasJobDefinition_StoppingConditionPropertyDef(BaseStruct):
    max_runtime_in_seconds: typing.Union[int, float] = pydantic.Field(..., description='The maximum length of time, in seconds, that a training or compilation job can run before it is stopped. For compilation jobs, if the job does not complete during this time, a ``TimeOut`` error is generated. We recommend starting with 900 seconds and increasing as necessary based on your model. For all other jobs, if the job does not complete during this time, SageMaker ends the job. When ``RetryStrategy`` is specified in the job request, ``MaxRuntimeInSeconds`` specifies the maximum time for all of the attempts in total, not each individual attempt. The default value is 1 day. The maximum value is 28 days. The maximum time that a ``TrainingJob`` can run in total, including any time spent publishing metrics or archiving and uploading models after it has been stopped, is 30 days.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-stoppingcondition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    stopping_condition_property = sagemaker.CfnModelBiasJobDefinition.StoppingConditionProperty(\n        max_runtime_in_seconds=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_runtime_in_seconds']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.StoppingConditionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.VpcConfigProperty
class CfnModelBiasJobDefinition_VpcConfigPropertyDef(BaseStruct):
    security_group_ids: typing.Sequence[str] = pydantic.Field(..., description='The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the ``Subnets`` field.\n')
    subnets: typing.Sequence[str] = pydantic.Field(..., description='The ID of the subnets in the VPC to which you want to connect your training job or model. For information about the availability of specific instance types, see `Supported Instance Types and Availability Zones <https://docs.aws.amazon.com/sagemaker/latest/dg/instance-types-az.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelbiasjobdefinition-vpcconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    vpc_config_property = sagemaker.CfnModelBiasJobDefinition.VpcConfigProperty(\n        security_group_ids=["securityGroupIds"],\n        subnets=["subnets"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['security_group_ids', 'subnets']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition.VpcConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.AdditionalInformationProperty
class CfnModelCard_AdditionalInformationPropertyDef(BaseStruct):
    caveats_and_recommendations: typing.Optional[str] = pydantic.Field(None, description='Caveats and recommendations for those who might use this model in their applications.\n')
    custom_details: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='Any additional information to document about the model.\n')
    ethical_considerations: typing.Optional[str] = pydantic.Field(None, description='Any ethical considerations documented by the model card author.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-additionalinformation.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    additional_information_property = sagemaker.CfnModelCard.AdditionalInformationProperty(\n        caveats_and_recommendations="caveatsAndRecommendations",\n        custom_details={\n            "custom_details_key": "customDetails"\n        },\n        ethical_considerations="ethicalConsiderations"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['caveats_and_recommendations', 'custom_details', 'ethical_considerations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.AdditionalInformationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.BusinessDetailsProperty
class CfnModelCard_BusinessDetailsPropertyDef(BaseStruct):
    business_problem: typing.Optional[str] = pydantic.Field(None, description='The specific business problem that the model is trying to solve.\n')
    business_stakeholders: typing.Optional[str] = pydantic.Field(None, description='The relevant stakeholders for the model.\n')
    line_of_business: typing.Optional[str] = pydantic.Field(None, description='The broader business need that the model is serving.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-businessdetails.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    business_details_property = sagemaker.CfnModelCard.BusinessDetailsProperty(\n        business_problem="businessProblem",\n        business_stakeholders="businessStakeholders",\n        line_of_business="lineOfBusiness"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['business_problem', 'business_stakeholders', 'line_of_business']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.BusinessDetailsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.ContainerProperty
class CfnModelCard_ContainerPropertyDef(BaseStruct):
    image: str = pydantic.Field(..., description='``CfnModelCard.ContainerProperty.Image``.')
    model_data_url: typing.Optional[str] = pydantic.Field(None, description='``CfnModelCard.ContainerProperty.ModelDataUrl``.\n')
    nearest_model_name: typing.Optional[str] = pydantic.Field(None, description='``CfnModelCard.ContainerProperty.NearestModelName``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-container.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    container_property = sagemaker.CfnModelCard.ContainerProperty(\n        image="image",\n\n        # the properties below are optional\n        model_data_url="modelDataUrl",\n        nearest_model_name="nearestModelName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['image', 'model_data_url', 'nearest_model_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.ContainerProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.ContentProperty
class CfnModelCard_ContentPropertyDef(BaseStruct):
    additional_information: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_AdditionalInformationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Additional information about the model.\n')
    business_details: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_BusinessDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about how the model supports business goals.\n')
    evaluation_details: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_EvaluationDetailPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="An overview about the model's evaluation.\n")
    intended_uses: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_IntendedUsesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The intended usage of the model.\n')
    model_overview: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_ModelOverviewPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An overview about the model.\n')
    model_package_details: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_ModelPackageDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnModelCard.ContentProperty.ModelPackageDetails``.\n')
    training_details: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_TrainingDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An overview about model training.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-content.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    # value: Any\n\n    content_property = sagemaker.CfnModelCard.ContentProperty(\n        additional_information=sagemaker.CfnModelCard.AdditionalInformationProperty(\n            caveats_and_recommendations="caveatsAndRecommendations",\n            custom_details={\n                "custom_details_key": "customDetails"\n            },\n            ethical_considerations="ethicalConsiderations"\n        ),\n        business_details=sagemaker.CfnModelCard.BusinessDetailsProperty(\n            business_problem="businessProblem",\n            business_stakeholders="businessStakeholders",\n            line_of_business="lineOfBusiness"\n        ),\n        evaluation_details=[sagemaker.CfnModelCard.EvaluationDetailProperty(\n            name="name",\n\n            # the properties below are optional\n            datasets=["datasets"],\n            evaluation_job_arn="evaluationJobArn",\n            evaluation_observation="evaluationObservation",\n            metadata={\n                "metadata_key": "metadata"\n            },\n            metric_groups=[sagemaker.CfnModelCard.MetricGroupProperty(\n                metric_data=[sagemaker.CfnModelCard.MetricDataItemsProperty(\n                    name="name",\n                    type="type",\n                    value=value,\n\n                    # the properties below are optional\n                    notes="notes",\n                    x_axis_name=["xAxisName"],\n                    y_axis_name=["yAxisName"]\n                )],\n                name="name"\n            )]\n        )],\n        intended_uses=sagemaker.CfnModelCard.IntendedUsesProperty(\n            explanations_for_risk_rating="explanationsForRiskRating",\n            factors_affecting_model_efficiency="factorsAffectingModelEfficiency",\n            intended_uses="intendedUses",\n            purpose_of_model="purposeOfModel",\n            risk_rating="riskRating"\n        ),\n        model_overview=sagemaker.CfnModelCard.ModelOverviewProperty(\n            algorithm_type="algorithmType",\n            inference_environment=sagemaker.CfnModelCard.InferenceEnvironmentProperty(\n                container_image=["containerImage"]\n            ),\n            model_artifact=["modelArtifact"],\n            model_creator="modelCreator",\n            model_description="modelDescription",\n            model_id="modelId",\n            model_name="modelName",\n            model_owner="modelOwner",\n            model_version=123,\n            problem_type="problemType"\n        ),\n        model_package_details=sagemaker.CfnModelCard.ModelPackageDetailsProperty(\n            approval_description="approvalDescription",\n            created_by=sagemaker.CfnModelCard.ModelPackageCreatorProperty(\n                user_profile_name="userProfileName"\n            ),\n            domain="domain",\n            inference_specification=sagemaker.CfnModelCard.InferenceSpecificationProperty(\n                containers=[sagemaker.CfnModelCard.ContainerProperty(\n                    image="image",\n\n                    # the properties below are optional\n                    model_data_url="modelDataUrl",\n                    nearest_model_name="nearestModelName"\n                )]\n            ),\n            model_approval_status="modelApprovalStatus",\n            model_package_arn="modelPackageArn",\n            model_package_description="modelPackageDescription",\n            model_package_group_name="modelPackageGroupName",\n            model_package_name="modelPackageName",\n            model_package_status="modelPackageStatus",\n            model_package_version=123,\n            source_algorithms=[sagemaker.CfnModelCard.SourceAlgorithmProperty(\n                algorithm_name="algorithmName",\n\n                # the properties below are optional\n                model_data_url="modelDataUrl"\n            )],\n            task="task"\n        ),\n        training_details=sagemaker.CfnModelCard.TrainingDetailsProperty(\n            objective_function=sagemaker.CfnModelCard.ObjectiveFunctionProperty(\n                function=sagemaker.CfnModelCard.FunctionProperty(\n                    condition="condition",\n                    facet="facet",\n                    function="function"\n                ),\n                notes="notes"\n            ),\n            training_job_details=sagemaker.CfnModelCard.TrainingJobDetailsProperty(\n                hyper_parameters=[sagemaker.CfnModelCard.TrainingHyperParameterProperty(\n                    name="name",\n                    value="value"\n                )],\n                training_arn="trainingArn",\n                training_datasets=["trainingDatasets"],\n                training_environment=sagemaker.CfnModelCard.TrainingEnvironmentProperty(\n                    container_image=["containerImage"]\n                ),\n                training_metrics=[sagemaker.CfnModelCard.TrainingMetricProperty(\n                    name="name",\n                    value=123,\n\n                    # the properties below are optional\n                    notes="notes"\n                )],\n                user_provided_hyper_parameters=[sagemaker.CfnModelCard.TrainingHyperParameterProperty(\n                    name="name",\n                    value="value"\n                )],\n                user_provided_training_metrics=[sagemaker.CfnModelCard.TrainingMetricProperty(\n                    name="name",\n                    value=123,\n\n                    # the properties below are optional\n                    notes="notes"\n                )]\n            ),\n            training_observations="trainingObservations"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['additional_information', 'business_details', 'evaluation_details', 'intended_uses', 'model_overview', 'model_package_details', 'training_details']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.ContentProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.EvaluationDetailProperty
class CfnModelCard_EvaluationDetailPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='The evaluation job name.\n')
    datasets: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The location of the datasets used to evaluate the model.\n')
    evaluation_job_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the evaluation job.\n')
    evaluation_observation: typing.Optional[str] = pydantic.Field(None, description='Any observations made during the model evaluation.\n')
    metadata: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='Additional attributes associated with the evaluation results.\n')
    metric_groups: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_MetricGroupPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An evaluation Metric Group object.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-evaluationdetail.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    # value: Any\n\n    evaluation_detail_property = sagemaker.CfnModelCard.EvaluationDetailProperty(\n        name="name",\n\n        # the properties below are optional\n        datasets=["datasets"],\n        evaluation_job_arn="evaluationJobArn",\n        evaluation_observation="evaluationObservation",\n        metadata={\n            "metadata_key": "metadata"\n        },\n        metric_groups=[sagemaker.CfnModelCard.MetricGroupProperty(\n            metric_data=[sagemaker.CfnModelCard.MetricDataItemsProperty(\n                name="name",\n                type="type",\n                value=value,\n\n                # the properties below are optional\n                notes="notes",\n                x_axis_name=["xAxisName"],\n                y_axis_name=["yAxisName"]\n            )],\n            name="name"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'datasets', 'evaluation_job_arn', 'evaluation_observation', 'metadata', 'metric_groups']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.EvaluationDetailProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.FunctionProperty
class CfnModelCard_FunctionPropertyDef(BaseStruct):
    condition: typing.Optional[str] = pydantic.Field(None, description='An optional description of any conditions of your objective function metric.\n')
    facet: typing.Optional[str] = pydantic.Field(None, description="The metric of the model's objective function. For example, *loss* or *rmse* . The following list shows examples of the values that you can specify for the metric: - ``ACCURACY`` - ``AUC`` - ``LOSS`` - ``MAE`` - ``RMSE``\n")
    function: typing.Optional[str] = pydantic.Field(None, description='The optimization direction of the model\'s objective function. You must specify one of the following values:. - ``Maximize`` - ``Minimize``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-function.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    function_property = sagemaker.CfnModelCard.FunctionProperty(\n        condition="condition",\n        facet="facet",\n        function="function"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['condition', 'facet', 'function']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.FunctionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.InferenceEnvironmentProperty
class CfnModelCard_InferenceEnvironmentPropertyDef(BaseStruct):
    container_image: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The container used to run the inference environment.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-inferenceenvironment.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    inference_environment_property = sagemaker.CfnModelCard.InferenceEnvironmentProperty(\n        container_image=["containerImage"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['container_image']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.InferenceEnvironmentProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.InferenceSpecificationProperty
class CfnModelCard_InferenceSpecificationPropertyDef(BaseStruct):
    containers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_ContainerPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='``CfnModelCard.InferenceSpecificationProperty.Containers``.')
    _init_params: typing.ClassVar[list[str]] = ['containers']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.InferenceSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.IntendedUsesProperty
class CfnModelCard_IntendedUsesPropertyDef(BaseStruct):
    explanations_for_risk_rating: typing.Optional[str] = pydantic.Field(None, description='An explanation of why your organization categorizes the model with its risk rating.\n')
    factors_affecting_model_efficiency: typing.Optional[str] = pydantic.Field(None, description='Factors affecting model efficacy.\n')
    intended_uses: typing.Optional[str] = pydantic.Field(None, description='The intended use cases for the model.\n')
    purpose_of_model: typing.Optional[str] = pydantic.Field(None, description='The general purpose of the model.\n')
    risk_rating: typing.Optional[str] = pydantic.Field(None, description='Your organization\'s risk rating. You can specify one the following values as the risk rating:. - High - Medium - Low - Unknown\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-intendeduses.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    intended_uses_property = sagemaker.CfnModelCard.IntendedUsesProperty(\n        explanations_for_risk_rating="explanationsForRiskRating",\n        factors_affecting_model_efficiency="factorsAffectingModelEfficiency",\n        intended_uses="intendedUses",\n        purpose_of_model="purposeOfModel",\n        risk_rating="riskRating"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['explanations_for_risk_rating', 'factors_affecting_model_efficiency', 'intended_uses', 'purpose_of_model', 'risk_rating']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.IntendedUsesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.MetricDataItemsProperty
class CfnModelCard_MetricDataItemsPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='The names of the metrics.\n')
    type: str = pydantic.Field(..., description='You must specify one of the following data types:. - Bar Chart ``bar_char`` - Boolean ``boolean`` - Linear Graph ``linear_graph`` - Matrix ``matrix`` - Number ``number`` - String ``string``\n')
    value: typing.Any = pydantic.Field(..., description="The datatype of the metric. The metric's *value* must be compatible with the metric's *type* .\n")
    notes: typing.Optional[str] = pydantic.Field(None, description='Any notes to add to the metric.\n')
    x_axis_name: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The name of the x axis.\n')
    y_axis_name: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The name of the y axis.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-metricdataitems.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    # value: Any\n\n    metric_data_items_property = sagemaker.CfnModelCard.MetricDataItemsProperty(\n        name="name",\n        type="type",\n        value=value,\n\n        # the properties below are optional\n        notes="notes",\n        x_axis_name=["xAxisName"],\n        y_axis_name=["yAxisName"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'type', 'value', 'notes', 'x_axis_name', 'y_axis_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.MetricDataItemsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.MetricGroupProperty
class CfnModelCard_MetricGroupPropertyDef(BaseStruct):
    metric_data: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_MetricDataItemsPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='A list of metric objects. The ``MetricDataItems`` list can have one of the following values:. - ``bar_chart_metric`` - ``matrix_metric`` - ``simple_metric`` - ``linear_graph_metric`` For more information about the metric schema, see the definition section of the `model card JSON schema <https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html#model-cards-json-schema>`_ .\n')
    name: str = pydantic.Field(..., description='The metric group name.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-metricgroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    # value: Any\n\n    metric_group_property = sagemaker.CfnModelCard.MetricGroupProperty(\n        metric_data=[sagemaker.CfnModelCard.MetricDataItemsProperty(\n            name="name",\n            type="type",\n            value=value,\n\n            # the properties below are optional\n            notes="notes",\n            x_axis_name=["xAxisName"],\n            y_axis_name=["yAxisName"]\n        )],\n        name="name"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['metric_data', 'name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.MetricGroupProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.ModelOverviewProperty
class CfnModelCard_ModelOverviewPropertyDef(BaseStruct):
    algorithm_type: typing.Optional[str] = pydantic.Field(None, description='The algorithm used to solve the problem.\n')
    inference_environment: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_InferenceEnvironmentPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='An overview about model inference.\n')
    model_artifact: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The location of the model artifact.\n')
    model_creator: typing.Optional[str] = pydantic.Field(None, description='The creator of the model.\n')
    model_description: typing.Optional[str] = pydantic.Field(None, description='A description of the model.\n')
    model_id: typing.Optional[str] = pydantic.Field(None, description='The SageMaker Model ARN or non- SageMaker Model ID.\n')
    model_name: typing.Optional[str] = pydantic.Field(None, description='The name of the model.\n')
    model_owner: typing.Optional[str] = pydantic.Field(None, description='The owner of the model.\n')
    model_version: typing.Union[int, float, None] = pydantic.Field(None, description='The version of the model.\n')
    problem_type: typing.Optional[str] = pydantic.Field(None, description='The problem being solved with the model.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modeloverview.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    model_overview_property = sagemaker.CfnModelCard.ModelOverviewProperty(\n        algorithm_type="algorithmType",\n        inference_environment=sagemaker.CfnModelCard.InferenceEnvironmentProperty(\n            container_image=["containerImage"]\n        ),\n        model_artifact=["modelArtifact"],\n        model_creator="modelCreator",\n        model_description="modelDescription",\n        model_id="modelId",\n        model_name="modelName",\n        model_owner="modelOwner",\n        model_version=123,\n        problem_type="problemType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['algorithm_type', 'inference_environment', 'model_artifact', 'model_creator', 'model_description', 'model_id', 'model_name', 'model_owner', 'model_version', 'problem_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.ModelOverviewProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.ModelPackageCreatorProperty
class CfnModelCard_ModelPackageCreatorPropertyDef(BaseStruct):
    user_profile_name: typing.Optional[str] = pydantic.Field(None, description='``CfnModelCard.ModelPackageCreatorProperty.UserProfileName``.')
    _init_params: typing.ClassVar[list[str]] = ['user_profile_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.ModelPackageCreatorProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.ModelPackageDetailsProperty
class CfnModelCard_ModelPackageDetailsPropertyDef(BaseStruct):
    approval_description: typing.Optional[str] = pydantic.Field(None, description='``CfnModelCard.ModelPackageDetailsProperty.ApprovalDescription``.')
    created_by: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_ModelPackageCreatorPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnModelCard.ModelPackageDetailsProperty.CreatedBy``.\n')
    domain: typing.Optional[str] = pydantic.Field(None, description='``CfnModelCard.ModelPackageDetailsProperty.Domain``.\n')
    inference_specification: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_InferenceSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnModelCard.ModelPackageDetailsProperty.InferenceSpecification``.\n')
    model_approval_status: typing.Optional[str] = pydantic.Field(None, description='``CfnModelCard.ModelPackageDetailsProperty.ModelApprovalStatus``.\n')
    model_package_arn: typing.Optional[str] = pydantic.Field(None, description='``CfnModelCard.ModelPackageDetailsProperty.ModelPackageArn``.\n')
    model_package_description: typing.Optional[str] = pydantic.Field(None, description='``CfnModelCard.ModelPackageDetailsProperty.ModelPackageDescription``.\n')
    model_package_group_name: typing.Optional[str] = pydantic.Field(None, description='``CfnModelCard.ModelPackageDetailsProperty.ModelPackageGroupName``.\n')
    model_package_name: typing.Optional[str] = pydantic.Field(None, description='``CfnModelCard.ModelPackageDetailsProperty.ModelPackageName``.\n')
    model_package_status: typing.Optional[str] = pydantic.Field(None, description='``CfnModelCard.ModelPackageDetailsProperty.ModelPackageStatus``.\n')
    model_package_version: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnModelCard.ModelPackageDetailsProperty.ModelPackageVersion``.\n')
    source_algorithms: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_SourceAlgorithmPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='``CfnModelCard.ModelPackageDetailsProperty.SourceAlgorithms``.\n')
    task: typing.Optional[str] = pydantic.Field(None, description='``CfnModelCard.ModelPackageDetailsProperty.Task``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-modelpackagedetails.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    model_package_details_property = sagemaker.CfnModelCard.ModelPackageDetailsProperty(\n        approval_description="approvalDescription",\n        created_by=sagemaker.CfnModelCard.ModelPackageCreatorProperty(\n            user_profile_name="userProfileName"\n        ),\n        domain="domain",\n        inference_specification=sagemaker.CfnModelCard.InferenceSpecificationProperty(\n            containers=[sagemaker.CfnModelCard.ContainerProperty(\n                image="image",\n\n                # the properties below are optional\n                model_data_url="modelDataUrl",\n                nearest_model_name="nearestModelName"\n            )]\n        ),\n        model_approval_status="modelApprovalStatus",\n        model_package_arn="modelPackageArn",\n        model_package_description="modelPackageDescription",\n        model_package_group_name="modelPackageGroupName",\n        model_package_name="modelPackageName",\n        model_package_status="modelPackageStatus",\n        model_package_version=123,\n        source_algorithms=[sagemaker.CfnModelCard.SourceAlgorithmProperty(\n            algorithm_name="algorithmName",\n\n            # the properties below are optional\n            model_data_url="modelDataUrl"\n        )],\n        task="task"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['approval_description', 'created_by', 'domain', 'inference_specification', 'model_approval_status', 'model_package_arn', 'model_package_description', 'model_package_group_name', 'model_package_name', 'model_package_status', 'model_package_version', 'source_algorithms', 'task']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.ModelPackageDetailsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.ObjectiveFunctionProperty
class CfnModelCard_ObjectiveFunctionPropertyDef(BaseStruct):
    function: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_FunctionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A function object that details optimization direction, metric, and additional descriptions.\n')
    notes: typing.Optional[str] = pydantic.Field(None, description='Notes about the object function, including other considerations for possible objective functions.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-objectivefunction.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    objective_function_property = sagemaker.CfnModelCard.ObjectiveFunctionProperty(\n        function=sagemaker.CfnModelCard.FunctionProperty(\n            condition="condition",\n            facet="facet",\n            function="function"\n        ),\n        notes="notes"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['function', 'notes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.ObjectiveFunctionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.SecurityConfigProperty
class CfnModelCard_SecurityConfigPropertyDef(BaseStruct):
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='A AWS Key Management Service `key ID <https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-id>`_ used to encrypt a model card.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-securityconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    security_config_property = sagemaker.CfnModelCard.SecurityConfigProperty(\n        kms_key_id="kmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.SecurityConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.SourceAlgorithmProperty
class CfnModelCard_SourceAlgorithmPropertyDef(BaseStruct):
    algorithm_name: str = pydantic.Field(..., description='``CfnModelCard.SourceAlgorithmProperty.AlgorithmName``.')
    model_data_url: typing.Optional[str] = pydantic.Field(None, description='``CfnModelCard.SourceAlgorithmProperty.ModelDataUrl``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-sourcealgorithm.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    source_algorithm_property = sagemaker.CfnModelCard.SourceAlgorithmProperty(\n        algorithm_name="algorithmName",\n\n        # the properties below are optional\n        model_data_url="modelDataUrl"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['algorithm_name', 'model_data_url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.SourceAlgorithmProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.TrainingDetailsProperty
class CfnModelCard_TrainingDetailsPropertyDef(BaseStruct):
    objective_function: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_ObjectiveFunctionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The function that is optimized during model training.\n')
    training_job_details: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_TrainingJobDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Details about any associated training jobs.\n')
    training_observations: typing.Optional[str] = pydantic.Field(None, description='Any observations about training.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingdetails.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    training_details_property = sagemaker.CfnModelCard.TrainingDetailsProperty(\n        objective_function=sagemaker.CfnModelCard.ObjectiveFunctionProperty(\n            function=sagemaker.CfnModelCard.FunctionProperty(\n                condition="condition",\n                facet="facet",\n                function="function"\n            ),\n            notes="notes"\n        ),\n        training_job_details=sagemaker.CfnModelCard.TrainingJobDetailsProperty(\n            hyper_parameters=[sagemaker.CfnModelCard.TrainingHyperParameterProperty(\n                name="name",\n                value="value"\n            )],\n            training_arn="trainingArn",\n            training_datasets=["trainingDatasets"],\n            training_environment=sagemaker.CfnModelCard.TrainingEnvironmentProperty(\n                container_image=["containerImage"]\n            ),\n            training_metrics=[sagemaker.CfnModelCard.TrainingMetricProperty(\n                name="name",\n                value=123,\n\n                # the properties below are optional\n                notes="notes"\n            )],\n            user_provided_hyper_parameters=[sagemaker.CfnModelCard.TrainingHyperParameterProperty(\n                name="name",\n                value="value"\n            )],\n            user_provided_training_metrics=[sagemaker.CfnModelCard.TrainingMetricProperty(\n                name="name",\n                value=123,\n\n                # the properties below are optional\n                notes="notes"\n            )]\n        ),\n        training_observations="trainingObservations"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['objective_function', 'training_job_details', 'training_observations']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.TrainingDetailsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.TrainingEnvironmentProperty
class CfnModelCard_TrainingEnvironmentPropertyDef(BaseStruct):
    container_image: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='SageMaker inference image URI.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingenvironment.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    training_environment_property = sagemaker.CfnModelCard.TrainingEnvironmentProperty(\n        container_image=["containerImage"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['container_image']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.TrainingEnvironmentProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.TrainingHyperParameterProperty
class CfnModelCard_TrainingHyperParameterPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='The name of the hyper parameter.\n')
    value: str = pydantic.Field(..., description='The value specified for the hyper parameter.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-traininghyperparameter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    training_hyper_parameter_property = sagemaker.CfnModelCard.TrainingHyperParameterProperty(\n        name="name",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.TrainingHyperParameterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.TrainingJobDetailsProperty
class CfnModelCard_TrainingJobDetailsPropertyDef(BaseStruct):
    hyper_parameters: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_TrainingHyperParameterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The hyper parameters used in the training job.\n')
    training_arn: typing.Optional[str] = pydantic.Field(None, description='The SageMaker training job Amazon Resource Name (ARN).\n')
    training_datasets: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The location of the datasets used to train the model.\n')
    training_environment: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_TrainingEnvironmentPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The SageMaker training job image URI.\n')
    training_metrics: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_TrainingMetricPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The SageMaker training job results.\n')
    user_provided_hyper_parameters: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_TrainingHyperParameterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="Additional hyper parameters that you've specified when training the model.\n")
    user_provided_training_metrics: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_TrainingMetricPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Custom training job results.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingjobdetails.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    training_job_details_property = sagemaker.CfnModelCard.TrainingJobDetailsProperty(\n        hyper_parameters=[sagemaker.CfnModelCard.TrainingHyperParameterProperty(\n            name="name",\n            value="value"\n        )],\n        training_arn="trainingArn",\n        training_datasets=["trainingDatasets"],\n        training_environment=sagemaker.CfnModelCard.TrainingEnvironmentProperty(\n            container_image=["containerImage"]\n        ),\n        training_metrics=[sagemaker.CfnModelCard.TrainingMetricProperty(\n            name="name",\n            value=123,\n\n            # the properties below are optional\n            notes="notes"\n        )],\n        user_provided_hyper_parameters=[sagemaker.CfnModelCard.TrainingHyperParameterProperty(\n            name="name",\n            value="value"\n        )],\n        user_provided_training_metrics=[sagemaker.CfnModelCard.TrainingMetricProperty(\n            name="name",\n            value=123,\n\n            # the properties below are optional\n            notes="notes"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['hyper_parameters', 'training_arn', 'training_datasets', 'training_environment', 'training_metrics', 'user_provided_hyper_parameters', 'user_provided_training_metrics']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.TrainingJobDetailsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.TrainingMetricProperty
class CfnModelCard_TrainingMetricPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='The name of the result from the SageMaker training job.\n')
    value: typing.Union[int, float] = pydantic.Field(..., description='The value of a result from the SageMaker training job.\n')
    notes: typing.Optional[str] = pydantic.Field(None, description='Any additional notes describing the result of the training job.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-trainingmetric.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    training_metric_property = sagemaker.CfnModelCard.TrainingMetricProperty(\n        name="name",\n        value=123,\n\n        # the properties below are optional\n        notes="notes"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'value', 'notes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.TrainingMetricProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard.UserContextProperty
class CfnModelCard_UserContextPropertyDef(BaseStruct):
    domain_id: typing.Optional[str] = pydantic.Field(None, description='The domain associated with the user.\n')
    user_profile_arn: typing.Optional[str] = pydantic.Field(None, description="The Amazon Resource Name (ARN) of the user's profile.\n")
    user_profile_name: typing.Optional[str] = pydantic.Field(None, description='The name of the user\'s profile.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelcard-usercontext.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    user_context_property = sagemaker.CfnModelCard.UserContextProperty(\n        domain_id="domainId",\n        user_profile_arn="userProfileArn",\n        user_profile_name="userProfileName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['domain_id', 'user_profile_arn', 'user_profile_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard.UserContextProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.BatchTransformInputProperty
class CfnModelExplainabilityJobDefinition_BatchTransformInputPropertyDef(BaseStruct):
    data_captured_destination_s3_uri: str = pydantic.Field(..., description='``CfnModelExplainabilityJobDefinition.BatchTransformInputProperty.DataCapturedDestinationS3Uri``.')
    dataset_format: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_DatasetFormatPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='``CfnModelExplainabilityJobDefinition.BatchTransformInputProperty.DatasetFormat``.\n')
    local_path: str = pydantic.Field(..., description='``CfnModelExplainabilityJobDefinition.BatchTransformInputProperty.LocalPath``.\n')
    features_attribute: typing.Optional[str] = pydantic.Field(None, description='``CfnModelExplainabilityJobDefinition.BatchTransformInputProperty.FeaturesAttribute``.\n')
    inference_attribute: typing.Optional[str] = pydantic.Field(None, description='``CfnModelExplainabilityJobDefinition.BatchTransformInputProperty.InferenceAttribute``.\n')
    probability_attribute: typing.Optional[str] = pydantic.Field(None, description='``CfnModelExplainabilityJobDefinition.BatchTransformInputProperty.ProbabilityAttribute``.\n')
    s3_data_distribution_type: typing.Optional[str] = pydantic.Field(None, description='``CfnModelExplainabilityJobDefinition.BatchTransformInputProperty.S3DataDistributionType``.\n')
    s3_input_mode: typing.Optional[str] = pydantic.Field(None, description='``CfnModelExplainabilityJobDefinition.BatchTransformInputProperty.S3InputMode``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-batchtransforminput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    batch_transform_input_property = sagemaker.CfnModelExplainabilityJobDefinition.BatchTransformInputProperty(\n        data_captured_destination_s3_uri="dataCapturedDestinationS3Uri",\n        dataset_format=sagemaker.CfnModelExplainabilityJobDefinition.DatasetFormatProperty(\n            csv=sagemaker.CfnModelExplainabilityJobDefinition.CsvProperty(\n                header=False\n            ),\n            json=sagemaker.CfnModelExplainabilityJobDefinition.JsonProperty(\n                line=False\n            ),\n            parquet=False\n        ),\n        local_path="localPath",\n\n        # the properties below are optional\n        features_attribute="featuresAttribute",\n        inference_attribute="inferenceAttribute",\n        probability_attribute="probabilityAttribute",\n        s3_data_distribution_type="s3DataDistributionType",\n        s3_input_mode="s3InputMode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['data_captured_destination_s3_uri', 'dataset_format', 'local_path', 'features_attribute', 'inference_attribute', 'probability_attribute', 's3_data_distribution_type', 's3_input_mode']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.BatchTransformInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.ClusterConfigProperty
class CfnModelExplainabilityJobDefinition_ClusterConfigPropertyDef(BaseStruct):
    instance_count: typing.Union[int, float] = pydantic.Field(..., description='The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.\n')
    instance_type: str = pydantic.Field(..., description='The ML compute instance type for the processing job.\n')
    volume_size_in_gb: typing.Union[int, float] = pydantic.Field(..., description='The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.\n')
    volume_kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-clusterconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cluster_config_property = sagemaker.CfnModelExplainabilityJobDefinition.ClusterConfigProperty(\n        instance_count=123,\n        instance_type="instanceType",\n        volume_size_in_gb=123,\n\n        # the properties below are optional\n        volume_kms_key_id="volumeKmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_count', 'instance_type', 'volume_size_in_gb', 'volume_kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.ClusterConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.ConstraintsResourceProperty
class CfnModelExplainabilityJobDefinition_ConstraintsResourcePropertyDef(BaseStruct):
    s3_uri: typing.Optional[str] = pydantic.Field(None, description='The Amazon S3 URI for the constraints resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-constraintsresource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    constraints_resource_property = sagemaker.CfnModelExplainabilityJobDefinition.ConstraintsResourceProperty(\n        s3_uri="s3Uri"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_uri']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.ConstraintsResourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.CsvProperty
class CfnModelExplainabilityJobDefinition_CsvPropertyDef(BaseStruct):
    header: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnModelExplainabilityJobDefinition.CsvProperty.Header``.')
    _init_params: typing.ClassVar[list[str]] = ['header']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.CsvProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.DatasetFormatProperty
class CfnModelExplainabilityJobDefinition_DatasetFormatPropertyDef(BaseStruct):
    csv: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_CsvPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnModelExplainabilityJobDefinition.DatasetFormatProperty.Csv``.')
    json_: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_JsonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnModelExplainabilityJobDefinition.DatasetFormatProperty.Json``.\n', alias='json')
    parquet: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnModelExplainabilityJobDefinition.DatasetFormatProperty.Parquet``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-datasetformat.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    dataset_format_property = sagemaker.CfnModelExplainabilityJobDefinition.DatasetFormatProperty(\n        csv=sagemaker.CfnModelExplainabilityJobDefinition.CsvProperty(\n            header=False\n        ),\n        json=sagemaker.CfnModelExplainabilityJobDefinition.JsonProperty(\n            line=False\n        ),\n        parquet=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['csv', 'json', 'parquet']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.DatasetFormatProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.EndpointInputProperty
class CfnModelExplainabilityJobDefinition_EndpointInputPropertyDef(BaseStruct):
    endpoint_name: str = pydantic.Field(..., description="An endpoint in customer's account which has enabled ``DataCaptureConfig`` enabled.\n")
    local_path: str = pydantic.Field(..., description='Path to the filesystem where the endpoint data is available to the container.\n')
    features_attribute: typing.Optional[str] = pydantic.Field(None, description='The attributes of the input data that are the input features.\n')
    inference_attribute: typing.Optional[str] = pydantic.Field(None, description='The attribute of the input data that represents the ground truth label.\n')
    probability_attribute: typing.Optional[str] = pydantic.Field(None, description='In a classification problem, the attribute that represents the class probability.\n')
    s3_data_distribution_type: typing.Optional[str] = pydantic.Field(None, description='Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defaults to ``FullyReplicated``\n')
    s3_input_mode: typing.Optional[str] = pydantic.Field(None, description='Whether the ``Pipe`` or ``File`` is used as the input mode for transferring data for the monitoring job. ``Pipe`` mode is recommended for large datasets. ``File`` mode is useful for small files that fit in memory. Defaults to ``File`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-endpointinput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    endpoint_input_property = sagemaker.CfnModelExplainabilityJobDefinition.EndpointInputProperty(\n        endpoint_name="endpointName",\n        local_path="localPath",\n\n        # the properties below are optional\n        features_attribute="featuresAttribute",\n        inference_attribute="inferenceAttribute",\n        probability_attribute="probabilityAttribute",\n        s3_data_distribution_type="s3DataDistributionType",\n        s3_input_mode="s3InputMode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['endpoint_name', 'local_path', 'features_attribute', 'inference_attribute', 'probability_attribute', 's3_data_distribution_type', 's3_input_mode']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.EndpointInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.JsonProperty
class CfnModelExplainabilityJobDefinition_JsonPropertyDef(BaseStruct):
    line: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnModelExplainabilityJobDefinition.JsonProperty.Line``.')
    _init_params: typing.ClassVar[list[str]] = ['line']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.JsonProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.ModelExplainabilityAppSpecificationProperty
class CfnModelExplainabilityJobDefinition_ModelExplainabilityAppSpecificationPropertyDef(BaseStruct):
    config_uri: str = pydantic.Field(..., description='JSON formatted S3 file that defines explainability parameters. For more information on this JSON configuration file, see `Configure model explainability parameters <https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-config-json-monitor-model-explainability-parameters.html>`_ .\n')
    image_uri: str = pydantic.Field(..., description='The container image to be run by the model explainability job.\n')
    environment: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='Sets the environment variables in the Docker container.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-modelexplainabilityappspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    model_explainability_app_specification_property = sagemaker.CfnModelExplainabilityJobDefinition.ModelExplainabilityAppSpecificationProperty(\n        config_uri="configUri",\n        image_uri="imageUri",\n\n        # the properties below are optional\n        environment={\n            "environment_key": "environment"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['config_uri', 'image_uri', 'environment']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.ModelExplainabilityAppSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.ModelExplainabilityBaselineConfigProperty
class CfnModelExplainabilityJobDefinition_ModelExplainabilityBaselineConfigPropertyDef(BaseStruct):
    baselining_job_name: typing.Optional[str] = pydantic.Field(None, description='The name of the baseline model explainability job.\n')
    constraints_resource: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_ConstraintsResourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The constraints resource for a model explainability job.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-modelexplainabilitybaselineconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    model_explainability_baseline_config_property = sagemaker.CfnModelExplainabilityJobDefinition.ModelExplainabilityBaselineConfigProperty(\n        baselining_job_name="baseliningJobName",\n        constraints_resource=sagemaker.CfnModelExplainabilityJobDefinition.ConstraintsResourceProperty(\n            s3_uri="s3Uri"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['baselining_job_name', 'constraints_resource']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.ModelExplainabilityBaselineConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.ModelExplainabilityJobInputProperty
class CfnModelExplainabilityJobDefinition_ModelExplainabilityJobInputPropertyDef(BaseStruct):
    batch_transform_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_BatchTransformInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnModelExplainabilityJobDefinition.ModelExplainabilityJobInputProperty.BatchTransformInput``.\n')
    endpoint_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_EndpointInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnModelExplainabilityJobDefinition.ModelExplainabilityJobInputProperty.EndpointInput``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-modelexplainabilityjobinput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    model_explainability_job_input_property = sagemaker.CfnModelExplainabilityJobDefinition.ModelExplainabilityJobInputProperty(\n        batch_transform_input=sagemaker.CfnModelExplainabilityJobDefinition.BatchTransformInputProperty(\n            data_captured_destination_s3_uri="dataCapturedDestinationS3Uri",\n            dataset_format=sagemaker.CfnModelExplainabilityJobDefinition.DatasetFormatProperty(\n                csv=sagemaker.CfnModelExplainabilityJobDefinition.CsvProperty(\n                    header=False\n                ),\n                json=sagemaker.CfnModelExplainabilityJobDefinition.JsonProperty(\n                    line=False\n                ),\n                parquet=False\n            ),\n            local_path="localPath",\n\n            # the properties below are optional\n            features_attribute="featuresAttribute",\n            inference_attribute="inferenceAttribute",\n            probability_attribute="probabilityAttribute",\n            s3_data_distribution_type="s3DataDistributionType",\n            s3_input_mode="s3InputMode"\n        ),\n        endpoint_input=sagemaker.CfnModelExplainabilityJobDefinition.EndpointInputProperty(\n            endpoint_name="endpointName",\n            local_path="localPath",\n\n            # the properties below are optional\n            features_attribute="featuresAttribute",\n            inference_attribute="inferenceAttribute",\n            probability_attribute="probabilityAttribute",\n            s3_data_distribution_type="s3DataDistributionType",\n            s3_input_mode="s3InputMode"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['batch_transform_input', 'endpoint_input']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.ModelExplainabilityJobInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.MonitoringOutputConfigProperty
class CfnModelExplainabilityJobDefinition_MonitoringOutputConfigPropertyDef(BaseStruct):
    monitoring_outputs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_MonitoringOutputPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.\n')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-monitoringoutputconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_output_config_property = sagemaker.CfnModelExplainabilityJobDefinition.MonitoringOutputConfigProperty(\n        monitoring_outputs=[sagemaker.CfnModelExplainabilityJobDefinition.MonitoringOutputProperty(\n            s3_output=sagemaker.CfnModelExplainabilityJobDefinition.S3OutputProperty(\n                local_path="localPath",\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                s3_upload_mode="s3UploadMode"\n            )\n        )],\n\n        # the properties below are optional\n        kms_key_id="kmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['monitoring_outputs', 'kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.MonitoringOutputConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.MonitoringOutputProperty
class CfnModelExplainabilityJobDefinition_MonitoringOutputPropertyDef(BaseStruct):
    s3_output: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_S3OutputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The Amazon S3 storage location where the results of a monitoring job are saved.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-monitoringoutput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_output_property = sagemaker.CfnModelExplainabilityJobDefinition.MonitoringOutputProperty(\n        s3_output=sagemaker.CfnModelExplainabilityJobDefinition.S3OutputProperty(\n            local_path="localPath",\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            s3_upload_mode="s3UploadMode"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_output']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.MonitoringOutputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.MonitoringResourcesProperty
class CfnModelExplainabilityJobDefinition_MonitoringResourcesPropertyDef(BaseStruct):
    cluster_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_ClusterConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The configuration for the cluster resources used to run the processing job.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-monitoringresources.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_resources_property = sagemaker.CfnModelExplainabilityJobDefinition.MonitoringResourcesProperty(\n        cluster_config=sagemaker.CfnModelExplainabilityJobDefinition.ClusterConfigProperty(\n            instance_count=123,\n            instance_type="instanceType",\n            volume_size_in_gb=123,\n\n            # the properties below are optional\n            volume_kms_key_id="volumeKmsKeyId"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cluster_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.MonitoringResourcesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.NetworkConfigProperty
class CfnModelExplainabilityJobDefinition_NetworkConfigPropertyDef(BaseStruct):
    enable_inter_container_traffic_encryption: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Whether to encrypt all communications between distributed processing jobs. Choose ``True`` to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.\n')
    enable_network_isolation: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Whether to allow inbound and outbound network calls to and from the containers used for the processing job.\n')
    vpc_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_VpcConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-networkconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    network_config_property = sagemaker.CfnModelExplainabilityJobDefinition.NetworkConfigProperty(\n        enable_inter_container_traffic_encryption=False,\n        enable_network_isolation=False,\n        vpc_config=sagemaker.CfnModelExplainabilityJobDefinition.VpcConfigProperty(\n            security_group_ids=["securityGroupIds"],\n            subnets=["subnets"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enable_inter_container_traffic_encryption', 'enable_network_isolation', 'vpc_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.NetworkConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.S3OutputProperty
class CfnModelExplainabilityJobDefinition_S3OutputPropertyDef(BaseStruct):
    local_path: str = pydantic.Field(..., description='The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.\n')
    s3_uri: str = pydantic.Field(..., description='A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.\n')
    s3_upload_mode: typing.Optional[str] = pydantic.Field(None, description='Whether to upload the results of the monitoring job continuously or after the job completes.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-s3output.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    s3_output_property = sagemaker.CfnModelExplainabilityJobDefinition.S3OutputProperty(\n        local_path="localPath",\n        s3_uri="s3Uri",\n\n        # the properties below are optional\n        s3_upload_mode="s3UploadMode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['local_path', 's3_uri', 's3_upload_mode']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.S3OutputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.StoppingConditionProperty
class CfnModelExplainabilityJobDefinition_StoppingConditionPropertyDef(BaseStruct):
    max_runtime_in_seconds: typing.Union[int, float] = pydantic.Field(..., description='The maximum length of time, in seconds, that a training or compilation job can run before it is stopped. For compilation jobs, if the job does not complete during this time, a ``TimeOut`` error is generated. We recommend starting with 900 seconds and increasing as necessary based on your model. For all other jobs, if the job does not complete during this time, SageMaker ends the job. When ``RetryStrategy`` is specified in the job request, ``MaxRuntimeInSeconds`` specifies the maximum time for all of the attempts in total, not each individual attempt. The default value is 1 day. The maximum value is 28 days. The maximum time that a ``TrainingJob`` can run in total, including any time spent publishing metrics or archiving and uploading models after it has been stopped, is 30 days.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-stoppingcondition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    stopping_condition_property = sagemaker.CfnModelExplainabilityJobDefinition.StoppingConditionProperty(\n        max_runtime_in_seconds=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_runtime_in_seconds']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.StoppingConditionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.VpcConfigProperty
class CfnModelExplainabilityJobDefinition_VpcConfigPropertyDef(BaseStruct):
    security_group_ids: typing.Sequence[str] = pydantic.Field(..., description='The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the ``Subnets`` field.\n')
    subnets: typing.Sequence[str] = pydantic.Field(..., description='The ID of the subnets in the VPC to which you want to connect your training job or model. For information about the availability of specific instance types, see `Supported Instance Types and Availability Zones <https://docs.aws.amazon.com/sagemaker/latest/dg/instance-types-az.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelexplainabilityjobdefinition-vpcconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    vpc_config_property = sagemaker.CfnModelExplainabilityJobDefinition.VpcConfigProperty(\n        security_group_ids=["securityGroupIds"],\n        subnets=["subnets"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['security_group_ids', 'subnets']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition.VpcConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.AdditionalInferenceSpecificationDefinitionProperty
class CfnModelPackage_AdditionalInferenceSpecificationDefinitionPropertyDef(BaseStruct):
    containers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ModelPackageContainerDefinitionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The Amazon ECR registry path of the Docker image that contains the inference code.\n')
    name: str = pydantic.Field(..., description='A unique name to identify the additional inference specification. The name must be unique within the list of your additional inference specifications for a particular model package.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the additional Inference specification.\n')
    supported_content_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The supported MIME types for the input data.\n')
    supported_realtime_inference_instance_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of the instance types that are used to generate inferences in real-time.\n')
    supported_response_mime_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The supported MIME types for the output data.\n')
    supported_transform_instance_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-additionalinferencespecificationdefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    # model_input: Any\n\n    additional_inference_specification_definition_property = sagemaker.CfnModelPackage.AdditionalInferenceSpecificationDefinitionProperty(\n        containers=[sagemaker.CfnModelPackage.ModelPackageContainerDefinitionProperty(\n            image="image",\n\n            # the properties below are optional\n            container_hostname="containerHostname",\n            environment={\n                "environment_key": "environment"\n            },\n            framework="framework",\n            framework_version="frameworkVersion",\n            image_digest="imageDigest",\n            model_data_url="modelDataUrl",\n            model_input=model_input,\n            nearest_model_name="nearestModelName",\n            product_id="productId"\n        )],\n        name="name",\n\n        # the properties below are optional\n        description="description",\n        supported_content_types=["supportedContentTypes"],\n        supported_realtime_inference_instance_types=["supportedRealtimeInferenceInstanceTypes"],\n        supported_response_mime_types=["supportedResponseMimeTypes"],\n        supported_transform_instance_types=["supportedTransformInstanceTypes"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['containers', 'name', 'description', 'supported_content_types', 'supported_realtime_inference_instance_types', 'supported_response_mime_types', 'supported_transform_instance_types']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.AdditionalInferenceSpecificationDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.BiasProperty
class CfnModelPackage_BiasPropertyDef(BaseStruct):
    post_training_report: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The post-training bias report for a model.\n')
    pre_training_report: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The pre-training bias report for a model.\n')
    report: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The bias report for a model.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-bias.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    bias_property = sagemaker.CfnModelPackage.BiasProperty(\n        post_training_report=sagemaker.CfnModelPackage.MetricsSourceProperty(\n            content_type="contentType",\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            content_digest="contentDigest"\n        ),\n        pre_training_report=sagemaker.CfnModelPackage.MetricsSourceProperty(\n            content_type="contentType",\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            content_digest="contentDigest"\n        ),\n        report=sagemaker.CfnModelPackage.MetricsSourceProperty(\n            content_type="contentType",\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            content_digest="contentDigest"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['post_training_report', 'pre_training_report', 'report']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.BiasProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.DataSourceProperty
class CfnModelPackage_DataSourcePropertyDef(BaseStruct):
    s3_data_source: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_S3DataSourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The S3 location of the data source that is associated with a channel.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-datasource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    data_source_property = sagemaker.CfnModelPackage.DataSourceProperty(\n        s3_data_source=sagemaker.CfnModelPackage.S3DataSourceProperty(\n            s3_data_type="s3DataType",\n            s3_uri="s3Uri"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_data_source']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.DataSourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.DriftCheckBaselinesProperty
class CfnModelPackage_DriftCheckBaselinesPropertyDef(BaseStruct):
    bias: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_DriftCheckBiasPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Represents the drift check bias baselines that can be used when the model monitor is set using the model package.\n')
    explainability: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_DriftCheckExplainabilityPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Represents the drift check explainability baselines that can be used when the model monitor is set using the model package.\n')
    model_data_quality: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_DriftCheckModelDataQualityPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Represents the drift check model data quality baselines that can be used when the model monitor is set using the model package.\n')
    model_quality: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_DriftCheckModelQualityPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Represents the drift check model quality baselines that can be used when the model monitor is set using the model package.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckbaselines.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    drift_check_baselines_property = sagemaker.CfnModelPackage.DriftCheckBaselinesProperty(\n        bias=sagemaker.CfnModelPackage.DriftCheckBiasProperty(\n            config_file=sagemaker.CfnModelPackage.FileSourceProperty(\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                content_digest="contentDigest",\n                content_type="contentType"\n            ),\n            post_training_constraints=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                content_type="contentType",\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                content_digest="contentDigest"\n            ),\n            pre_training_constraints=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                content_type="contentType",\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                content_digest="contentDigest"\n            )\n        ),\n        explainability=sagemaker.CfnModelPackage.DriftCheckExplainabilityProperty(\n            config_file=sagemaker.CfnModelPackage.FileSourceProperty(\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                content_digest="contentDigest",\n                content_type="contentType"\n            ),\n            constraints=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                content_type="contentType",\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                content_digest="contentDigest"\n            )\n        ),\n        model_data_quality=sagemaker.CfnModelPackage.DriftCheckModelDataQualityProperty(\n            constraints=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                content_type="contentType",\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                content_digest="contentDigest"\n            ),\n            statistics=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                content_type="contentType",\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                content_digest="contentDigest"\n            )\n        ),\n        model_quality=sagemaker.CfnModelPackage.DriftCheckModelQualityProperty(\n            constraints=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                content_type="contentType",\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                content_digest="contentDigest"\n            ),\n            statistics=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                content_type="contentType",\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                content_digest="contentDigest"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bias', 'explainability', 'model_data_quality', 'model_quality']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.DriftCheckBaselinesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.DriftCheckBiasProperty
class CfnModelPackage_DriftCheckBiasPropertyDef(BaseStruct):
    config_file: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_FileSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The bias config file for a model.\n')
    post_training_constraints: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The post-training constraints.\n')
    pre_training_constraints: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The pre-training constraints.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckbias.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    drift_check_bias_property = sagemaker.CfnModelPackage.DriftCheckBiasProperty(\n        config_file=sagemaker.CfnModelPackage.FileSourceProperty(\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            content_digest="contentDigest",\n            content_type="contentType"\n        ),\n        post_training_constraints=sagemaker.CfnModelPackage.MetricsSourceProperty(\n            content_type="contentType",\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            content_digest="contentDigest"\n        ),\n        pre_training_constraints=sagemaker.CfnModelPackage.MetricsSourceProperty(\n            content_type="contentType",\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            content_digest="contentDigest"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['config_file', 'post_training_constraints', 'pre_training_constraints']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.DriftCheckBiasProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.DriftCheckExplainabilityProperty
class CfnModelPackage_DriftCheckExplainabilityPropertyDef(BaseStruct):
    config_file: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_FileSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The explainability config file for the model.\n')
    constraints: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The drift check explainability constraints.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckexplainability.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    drift_check_explainability_property = sagemaker.CfnModelPackage.DriftCheckExplainabilityProperty(\n        config_file=sagemaker.CfnModelPackage.FileSourceProperty(\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            content_digest="contentDigest",\n            content_type="contentType"\n        ),\n        constraints=sagemaker.CfnModelPackage.MetricsSourceProperty(\n            content_type="contentType",\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            content_digest="contentDigest"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['config_file', 'constraints']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.DriftCheckExplainabilityProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.DriftCheckModelDataQualityProperty
class CfnModelPackage_DriftCheckModelDataQualityPropertyDef(BaseStruct):
    constraints: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The drift check model data quality constraints.\n')
    statistics: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The drift check model data quality statistics.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckmodeldataquality.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    drift_check_model_data_quality_property = sagemaker.CfnModelPackage.DriftCheckModelDataQualityProperty(\n        constraints=sagemaker.CfnModelPackage.MetricsSourceProperty(\n            content_type="contentType",\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            content_digest="contentDigest"\n        ),\n        statistics=sagemaker.CfnModelPackage.MetricsSourceProperty(\n            content_type="contentType",\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            content_digest="contentDigest"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['constraints', 'statistics']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.DriftCheckModelDataQualityProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.DriftCheckModelQualityProperty
class CfnModelPackage_DriftCheckModelQualityPropertyDef(BaseStruct):
    constraints: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The drift check model quality constraints.\n')
    statistics: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The drift check model quality statistics.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-driftcheckmodelquality.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    drift_check_model_quality_property = sagemaker.CfnModelPackage.DriftCheckModelQualityProperty(\n        constraints=sagemaker.CfnModelPackage.MetricsSourceProperty(\n            content_type="contentType",\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            content_digest="contentDigest"\n        ),\n        statistics=sagemaker.CfnModelPackage.MetricsSourceProperty(\n            content_type="contentType",\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            content_digest="contentDigest"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['constraints', 'statistics']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.DriftCheckModelQualityProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.ExplainabilityProperty
class CfnModelPackage_ExplainabilityPropertyDef(BaseStruct):
    report: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The explainability report for a model.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-explainability.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    explainability_property = sagemaker.CfnModelPackage.ExplainabilityProperty(\n        report=sagemaker.CfnModelPackage.MetricsSourceProperty(\n            content_type="contentType",\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            content_digest="contentDigest"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['report']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.ExplainabilityProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.FileSourceProperty
class CfnModelPackage_FileSourcePropertyDef(BaseStruct):
    s3_uri: str = pydantic.Field(..., description='The Amazon S3 URI for the file source.\n')
    content_digest: typing.Optional[str] = pydantic.Field(None, description='The digest of the file source.\n')
    content_type: typing.Optional[str] = pydantic.Field(None, description='The type of content stored in the file source.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-filesource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    file_source_property = sagemaker.CfnModelPackage.FileSourceProperty(\n        s3_uri="s3Uri",\n\n        # the properties below are optional\n        content_digest="contentDigest",\n        content_type="contentType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_uri', 'content_digest', 'content_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.FileSourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.InferenceSpecificationProperty
class CfnModelPackage_InferenceSpecificationPropertyDef(BaseStruct):
    containers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ModelPackageContainerDefinitionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The Amazon ECR registry path of the Docker image that contains the inference code.\n')
    supported_content_types: typing.Sequence[str] = pydantic.Field(..., description='The supported MIME types for the input data.\n')
    supported_response_mime_types: typing.Sequence[str] = pydantic.Field(..., description='The supported MIME types for the output data.\n')
    supported_realtime_inference_instance_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of the instance types that are used to generate inferences in real-time. This parameter is required for unversioned models, and optional for versioned models.\n')
    supported_transform_instance_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed. This parameter is required for unversioned models, and optional for versioned models.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-inferencespecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    # model_input: Any\n\n    inference_specification_property = sagemaker.CfnModelPackage.InferenceSpecificationProperty(\n        containers=[sagemaker.CfnModelPackage.ModelPackageContainerDefinitionProperty(\n            image="image",\n\n            # the properties below are optional\n            container_hostname="containerHostname",\n            environment={\n                "environment_key": "environment"\n            },\n            framework="framework",\n            framework_version="frameworkVersion",\n            image_digest="imageDigest",\n            model_data_url="modelDataUrl",\n            model_input=model_input,\n            nearest_model_name="nearestModelName",\n            product_id="productId"\n        )],\n        supported_content_types=["supportedContentTypes"],\n        supported_response_mime_types=["supportedResponseMimeTypes"],\n\n        # the properties below are optional\n        supported_realtime_inference_instance_types=["supportedRealtimeInferenceInstanceTypes"],\n        supported_transform_instance_types=["supportedTransformInstanceTypes"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['containers', 'supported_content_types', 'supported_response_mime_types', 'supported_realtime_inference_instance_types', 'supported_transform_instance_types']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.InferenceSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.MetadataPropertiesProperty
class CfnModelPackage_MetadataPropertiesPropertyDef(BaseStruct):
    commit_id: typing.Optional[str] = pydantic.Field(None, description='The commit ID.\n')
    generated_by: typing.Optional[str] = pydantic.Field(None, description='The entity this entity was generated by.\n')
    project_id: typing.Optional[str] = pydantic.Field(None, description='The project ID.\n')
    repository: typing.Optional[str] = pydantic.Field(None, description='The repository.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-metadataproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    metadata_properties_property = sagemaker.CfnModelPackage.MetadataPropertiesProperty(\n        commit_id="commitId",\n        generated_by="generatedBy",\n        project_id="projectId",\n        repository="repository"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['commit_id', 'generated_by', 'project_id', 'repository']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.MetadataPropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.MetricsSourceProperty
class CfnModelPackage_MetricsSourcePropertyDef(BaseStruct):
    content_type: str = pydantic.Field(..., description='The metric source content type.\n')
    s3_uri: str = pydantic.Field(..., description='The S3 URI for the metrics source.\n')
    content_digest: typing.Optional[str] = pydantic.Field(None, description='The hash key used for the metrics source.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-metricssource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    metrics_source_property = sagemaker.CfnModelPackage.MetricsSourceProperty(\n        content_type="contentType",\n        s3_uri="s3Uri",\n\n        # the properties below are optional\n        content_digest="contentDigest"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['content_type', 's3_uri', 'content_digest']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.MetricsSourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.ModelDataQualityProperty
class CfnModelPackage_ModelDataQualityPropertyDef(BaseStruct):
    constraints: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Data quality constraints for a model.\n')
    statistics: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Data quality statistics for a model.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modeldataquality.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    model_data_quality_property = sagemaker.CfnModelPackage.ModelDataQualityProperty(\n        constraints=sagemaker.CfnModelPackage.MetricsSourceProperty(\n            content_type="contentType",\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            content_digest="contentDigest"\n        ),\n        statistics=sagemaker.CfnModelPackage.MetricsSourceProperty(\n            content_type="contentType",\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            content_digest="contentDigest"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['constraints', 'statistics']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.ModelDataQualityProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.ModelInputProperty
class CfnModelPackage_ModelInputPropertyDef(BaseStruct):
    data_input_config: str = pydantic.Field(..., description='The input configuration object for the model.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelinput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    model_input_property = sagemaker.CfnModelPackage.ModelInputProperty(\n        data_input_config="dataInputConfig"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['data_input_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.ModelInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.ModelMetricsProperty
class CfnModelPackage_ModelMetricsPropertyDef(BaseStruct):
    bias: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_BiasPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Metrics that measure bais in a model.\n')
    explainability: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ExplainabilityPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Metrics that help explain a model.\n')
    model_data_quality: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ModelDataQualityPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Metrics that measure the quality of the input data for a model.\n')
    model_quality: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ModelQualityPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Metrics that measure the quality of a model.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelmetrics.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    model_metrics_property = sagemaker.CfnModelPackage.ModelMetricsProperty(\n        bias=sagemaker.CfnModelPackage.BiasProperty(\n            post_training_report=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                content_type="contentType",\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                content_digest="contentDigest"\n            ),\n            pre_training_report=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                content_type="contentType",\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                content_digest="contentDigest"\n            ),\n            report=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                content_type="contentType",\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                content_digest="contentDigest"\n            )\n        ),\n        explainability=sagemaker.CfnModelPackage.ExplainabilityProperty(\n            report=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                content_type="contentType",\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                content_digest="contentDigest"\n            )\n        ),\n        model_data_quality=sagemaker.CfnModelPackage.ModelDataQualityProperty(\n            constraints=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                content_type="contentType",\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                content_digest="contentDigest"\n            ),\n            statistics=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                content_type="contentType",\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                content_digest="contentDigest"\n            )\n        ),\n        model_quality=sagemaker.CfnModelPackage.ModelQualityProperty(\n            constraints=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                content_type="contentType",\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                content_digest="contentDigest"\n            ),\n            statistics=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                content_type="contentType",\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                content_digest="contentDigest"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bias', 'explainability', 'model_data_quality', 'model_quality']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.ModelMetricsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.ModelPackageContainerDefinitionProperty
class CfnModelPackage_ModelPackageContainerDefinitionPropertyDef(BaseStruct):
    image: str = pydantic.Field(..., description='The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored. If you are using your own custom algorithm instead of an algorithm provided by SageMaker, the inference code must meet SageMaker requirements. SageMaker supports both ``registry/repository[:tag]`` and ``registry/repository[@digest]`` image path formats. For more information, see `Using Your Own Algorithms with Amazon SageMaker <https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html>`_ .\n')
    container_hostname: typing.Optional[str] = pydantic.Field(None, description='The DNS host name for the Docker container.\n')
    environment: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='The environment variables to set in the Docker container. Each key and value in the ``Environment`` string to string map can have length of up to 1024. We support up to 16 entries in the map.\n')
    framework: typing.Optional[str] = pydantic.Field(None, description='The machine learning framework of the model package container image.\n')
    framework_version: typing.Optional[str] = pydantic.Field(None, description='The framework version of the Model Package Container Image.\n')
    image_digest: typing.Optional[str] = pydantic.Field(None, description='An MD5 hash of the training algorithm that identifies the Docker image used for training.\n')
    model_data_url: typing.Optional[str] = pydantic.Field(None, description='The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single ``gzip`` compressed tar archive ( ``.tar.gz`` suffix). .. epigraph:: The model artifacts must be in an S3 bucket that is in the same region as the model package.\n')
    model_input: typing.Any = pydantic.Field(None, description='A structure with Model Input details.\n')
    nearest_model_name: typing.Optional[str] = pydantic.Field(None, description='The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model. You can find a list of benchmarked models by calling ``ListModelMetadata`` .\n')
    product_id: typing.Optional[str] = pydantic.Field(None, description='The AWS Marketplace product ID of the model package.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelpackagecontainerdefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    # model_input: Any\n\n    model_package_container_definition_property = sagemaker.CfnModelPackage.ModelPackageContainerDefinitionProperty(\n        image="image",\n\n        # the properties below are optional\n        container_hostname="containerHostname",\n        environment={\n            "environment_key": "environment"\n        },\n        framework="framework",\n        framework_version="frameworkVersion",\n        image_digest="imageDigest",\n        model_data_url="modelDataUrl",\n        model_input=model_input,\n        nearest_model_name="nearestModelName",\n        product_id="productId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['image', 'container_hostname', 'environment', 'framework', 'framework_version', 'image_digest', 'model_data_url', 'model_input', 'nearest_model_name', 'product_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.ModelPackageContainerDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.ModelPackageStatusDetailsProperty
class CfnModelPackage_ModelPackageStatusDetailsPropertyDef(BaseStruct):
    validation_statuses: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ModelPackageStatusItemPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The validation status of the model package.\n')
    image_scan_statuses: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ModelPackageStatusItemPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The status of the scan of the Docker image container for the model package.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelpackagestatusdetails.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    model_package_status_details_property = sagemaker.CfnModelPackage.ModelPackageStatusDetailsProperty(\n        validation_statuses=[sagemaker.CfnModelPackage.ModelPackageStatusItemProperty(\n            name="name",\n            status="status",\n\n            # the properties below are optional\n            failure_reason="failureReason"\n        )],\n\n        # the properties below are optional\n        image_scan_statuses=[sagemaker.CfnModelPackage.ModelPackageStatusItemProperty(\n            name="name",\n            status="status",\n\n            # the properties below are optional\n            failure_reason="failureReason"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['validation_statuses', 'image_scan_statuses']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.ModelPackageStatusDetailsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.ModelPackageStatusItemProperty
class CfnModelPackage_ModelPackageStatusItemPropertyDef(BaseStruct):
    name: str = pydantic.Field(..., description='The name of the model package for which the overall status is being reported.\n')
    status: str = pydantic.Field(..., description='The current status.\n')
    failure_reason: typing.Optional[str] = pydantic.Field(None, description='if the overall status is ``Failed`` , the reason for the failure.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelpackagestatusitem.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    model_package_status_item_property = sagemaker.CfnModelPackage.ModelPackageStatusItemProperty(\n        name="name",\n        status="status",\n\n        # the properties below are optional\n        failure_reason="failureReason"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['name', 'status', 'failure_reason']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.ModelPackageStatusItemProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.ModelQualityProperty
class CfnModelPackage_ModelQualityPropertyDef(BaseStruct):
    constraints: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Model quality constraints.\n')
    statistics: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Model quality statistics.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-modelquality.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    model_quality_property = sagemaker.CfnModelPackage.ModelQualityProperty(\n        constraints=sagemaker.CfnModelPackage.MetricsSourceProperty(\n            content_type="contentType",\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            content_digest="contentDigest"\n        ),\n        statistics=sagemaker.CfnModelPackage.MetricsSourceProperty(\n            content_type="contentType",\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            content_digest="contentDigest"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['constraints', 'statistics']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.ModelQualityProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.S3DataSourceProperty
class CfnModelPackage_S3DataSourcePropertyDef(BaseStruct):
    s3_data_type: str = pydantic.Field(..., description="If you choose ``S3Prefix`` , ``S3Uri`` identifies a key name prefix. SageMaker uses all objects that match the specified key name prefix for model training. If you choose ``ManifestFile`` , ``S3Uri`` identifies an object that is a manifest file containing a list of object keys that you want SageMaker to use for model training. If you choose ``AugmentedManifestFile`` , S3Uri identifies an object that is an augmented manifest file in JSON lines format. This file contains the data you want to use for model training. ``AugmentedManifestFile`` can only be used if the Channel's input mode is ``Pipe`` .\n")
    s3_uri: str = pydantic.Field(..., description='Depending on the value specified for the ``S3DataType`` , identifies either a key name prefix or a manifest. For example: - A key name prefix might look like this: ``s3://bucketname/exampleprefix`` - A manifest might look like this: ``s3://bucketname/example.manifest`` A manifest is an S3 object which is a JSON file consisting of an array of elements. The first element is a prefix which is followed by one or more suffixes. SageMaker appends the suffix elements to the prefix to get a full set of ``S3Uri`` . Note that the prefix must be a valid non-empty ``S3Uri`` that precludes users from specifying a manifest whose individual ``S3Uri`` is sourced from different S3 buckets. The following code example shows a valid manifest format: ``[ {"prefix": "s3://customer_bucket/some/prefix/"},`` ``"relative/path/to/custdata-1",`` ``"relative/path/custdata-2",`` ``...`` ``"relative/path/custdata-N"`` ``]`` This JSON is equivalent to the following ``S3Uri`` list: ``s3://customer_bucket/some/prefix/relative/path/to/custdata-1`` ``s3://customer_bucket/some/prefix/relative/path/custdata-2`` ``...`` ``s3://customer_bucket/some/prefix/relative/path/custdata-N`` The complete set of ``S3Uri`` in this manifest is the input data for the channel for this data source. The object that each ``S3Uri`` points to must be readable by the IAM role that SageMaker uses to perform tasks on your behalf. Your input bucket must be located in same AWS region as your training job.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-s3datasource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    s3_data_source_property = sagemaker.CfnModelPackage.S3DataSourceProperty(\n        s3_data_type="s3DataType",\n        s3_uri="s3Uri"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_data_type', 's3_uri']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.S3DataSourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.SourceAlgorithmProperty
class CfnModelPackage_SourceAlgorithmPropertyDef(BaseStruct):
    algorithm_name: str = pydantic.Field(..., description='The name of an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your SageMaker account or an algorithm in AWS Marketplace that you are subscribed to.\n')
    model_data_url: typing.Optional[str] = pydantic.Field(None, description='The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single ``gzip`` compressed tar archive ( ``.tar.gz`` suffix). .. epigraph:: The model artifacts must be in an S3 bucket that is in the same AWS region as the algorithm.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-sourcealgorithm.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    source_algorithm_property = sagemaker.CfnModelPackage.SourceAlgorithmProperty(\n        algorithm_name="algorithmName",\n\n        # the properties below are optional\n        model_data_url="modelDataUrl"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['algorithm_name', 'model_data_url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.SourceAlgorithmProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.SourceAlgorithmSpecificationProperty
class CfnModelPackage_SourceAlgorithmSpecificationPropertyDef(BaseStruct):
    source_algorithms: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_SourceAlgorithmPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='A list of the algorithms that were used to create a model package.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-sourcealgorithmspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    source_algorithm_specification_property = sagemaker.CfnModelPackage.SourceAlgorithmSpecificationProperty(\n        source_algorithms=[sagemaker.CfnModelPackage.SourceAlgorithmProperty(\n            algorithm_name="algorithmName",\n\n            # the properties below are optional\n            model_data_url="modelDataUrl"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['source_algorithms']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.SourceAlgorithmSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.TransformInputProperty
class CfnModelPackage_TransformInputPropertyDef(BaseStruct):
    data_source: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_DataSourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Describes the location of the channel data, which is, the S3 location of the input data that the model can consume.\n')
    compression_type: typing.Optional[str] = pydantic.Field(None, description='If your transform data is compressed, specify the compression type. Amazon SageMaker automatically decompresses the data for the transform job accordingly. The default value is ``None`` .\n')
    content_type: typing.Optional[str] = pydantic.Field(None, description='The multipurpose internet mail extension (MIME) type of the data. Amazon SageMaker uses the MIME type with each http call to transfer data to the transform job.\n')
    split_type: typing.Optional[str] = pydantic.Field(None, description='The method to use to split the transform job\'s data files into smaller batches. Splitting is necessary when the total size of each object is too large to fit in a single request. You can also use data splitting to improve performance by processing multiple concurrent mini-batches. The default value for ``SplitType`` is ``None`` , which indicates that input data files are not split, and request payloads contain the entire contents of an input object. Set the value of this parameter to ``Line`` to split records on a newline character boundary. ``SplitType`` also supports a number of record-oriented binary data formats. Currently, the supported record formats are: - RecordIO - TFRecord When splitting is enabled, the size of a mini-batch depends on the values of the ``BatchStrategy`` and ``MaxPayloadInMB`` parameters. When the value of ``BatchStrategy`` is ``MultiRecord`` , Amazon SageMaker sends the maximum number of records in each request, up to the ``MaxPayloadInMB`` limit. If the value of ``BatchStrategy`` is ``SingleRecord`` , Amazon SageMaker sends individual records in each request. .. epigraph:: Some data formats represent a record as a binary payload wrapped with extra padding bytes. When splitting is applied to a binary data format, padding is removed if the value of ``BatchStrategy`` is set to ``SingleRecord`` . Padding is not removed if the value of ``BatchStrategy`` is set to ``MultiRecord`` . For more information about ``RecordIO`` , see `Create a Dataset Using RecordIO <https://docs.aws.amazon.com/https://mxnet.apache.org/api/faq/recordio>`_ in the MXNet documentation. For more information about ``TFRecord`` , see `Consuming TFRecord data <https://docs.aws.amazon.com/https://www.tensorflow.org/guide/data#consuming_tfrecord_data>`_ in the TensorFlow documentation.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transforminput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    transform_input_property = sagemaker.CfnModelPackage.TransformInputProperty(\n        data_source=sagemaker.CfnModelPackage.DataSourceProperty(\n            s3_data_source=sagemaker.CfnModelPackage.S3DataSourceProperty(\n                s3_data_type="s3DataType",\n                s3_uri="s3Uri"\n            )\n        ),\n\n        # the properties below are optional\n        compression_type="compressionType",\n        content_type="contentType",\n        split_type="splitType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['data_source', 'compression_type', 'content_type', 'split_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.TransformInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.TransformJobDefinitionProperty
class CfnModelPackage_TransformJobDefinitionPropertyDef(BaseStruct):
    transform_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_TransformInputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A description of the input source and the way the transform job consumes it.\n')
    transform_output: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_TransformOutputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the transform job.\n')
    transform_resources: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_TransformResourcesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Identifies the ML compute instances for the transform job.\n')
    batch_strategy: typing.Optional[str] = pydantic.Field(None, description='A string that determines the number of records included in a single mini-batch. ``SingleRecord`` means only one record is used per mini-batch. ``MultiRecord`` means a mini-batch is set to contain as many records that can fit within the ``MaxPayloadInMB`` limit.\n')
    environment: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='The environment variables to set in the Docker container. We support up to 16 key and values entries in the map.\n')
    max_concurrent_transforms: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum number of parallel requests that can be sent to each instance in a transform job. The default value is 1.\n')
    max_payload_in_mb: typing.Union[int, float, None] = pydantic.Field(None, description='The maximum payload size allowed, in MB. A payload is the data portion of a record (without metadata).\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transformjobdefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    transform_job_definition_property = sagemaker.CfnModelPackage.TransformJobDefinitionProperty(\n        transform_input=sagemaker.CfnModelPackage.TransformInputProperty(\n            data_source=sagemaker.CfnModelPackage.DataSourceProperty(\n                s3_data_source=sagemaker.CfnModelPackage.S3DataSourceProperty(\n                    s3_data_type="s3DataType",\n                    s3_uri="s3Uri"\n                )\n            ),\n\n            # the properties below are optional\n            compression_type="compressionType",\n            content_type="contentType",\n            split_type="splitType"\n        ),\n        transform_output=sagemaker.CfnModelPackage.TransformOutputProperty(\n            s3_output_path="s3OutputPath",\n\n            # the properties below are optional\n            accept="accept",\n            assemble_with="assembleWith",\n            kms_key_id="kmsKeyId"\n        ),\n        transform_resources=sagemaker.CfnModelPackage.TransformResourcesProperty(\n            instance_count=123,\n            instance_type="instanceType",\n\n            # the properties below are optional\n            volume_kms_key_id="volumeKmsKeyId"\n        ),\n\n        # the properties below are optional\n        batch_strategy="batchStrategy",\n        environment={\n            "environment_key": "environment"\n        },\n        max_concurrent_transforms=123,\n        max_payload_in_mb=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['transform_input', 'transform_output', 'transform_resources', 'batch_strategy', 'environment', 'max_concurrent_transforms', 'max_payload_in_mb']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.TransformJobDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.TransformOutputProperty
class CfnModelPackage_TransformOutputPropertyDef(BaseStruct):
    s3_output_path: str = pydantic.Field(..., description="The Amazon S3 path where you want Amazon SageMaker to store the results of the transform job. For example, ``s3://bucket-name/key-name-prefix`` . For every S3 object used as input for the transform job, batch transform stores the transformed data with an . ``out`` suffix in a corresponding subfolder in the location in the output prefix. For example, for the input data stored at ``s3://bucket-name/input-name-prefix/dataset01/data.csv`` , batch transform stores the transformed data at ``s3://bucket-name/output-name-prefix/input-name-prefix/data.csv.out`` . Batch transform doesn't upload partially processed objects. For an input S3 object that contains multiple records, it creates an . ``out`` file only if the transform job succeeds on the entire file. When the input contains multiple S3 objects, the batch transform job processes the listed S3 objects and uploads only the output for successfully processed objects. If any object fails in the transform job batch transform marks the job as failed to prompt investigation.\n")
    accept: typing.Optional[str] = pydantic.Field(None, description='The MIME type used to specify the output data. Amazon SageMaker uses the MIME type with each http call to transfer data from the transform job.\n')
    assemble_with: typing.Optional[str] = pydantic.Field(None, description='Defines how to assemble the results of the transform job as a single S3 object. Choose a format that is most convenient to you. To concatenate the results in binary format, specify ``None`` . To add a newline character at the end of every transformed record, specify ``Line`` .\n')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption. The ``KmsKeyId`` can be any of the following formats: - Key ID: ``1234abcd-12ab-34cd-56ef-1234567890ab`` - Key ARN: ``arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab`` - Alias name: ``alias/ExampleAlias`` - Alias name ARN: ``arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias`` If you don\'t provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role\'s account. For more information, see `KMS-Managed Encryption Keys <https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html>`_ in the *Amazon Simple Storage Service Developer Guide.* The KMS key policy must grant permission to the IAM role that you specify in your `CreateModel <https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html>`_ request. For more information, see `Using Key Policies in AWS KMS <https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html>`_ in the *AWS Key Management Service Developer Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transformoutput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    transform_output_property = sagemaker.CfnModelPackage.TransformOutputProperty(\n        s3_output_path="s3OutputPath",\n\n        # the properties below are optional\n        accept="accept",\n        assemble_with="assembleWith",\n        kms_key_id="kmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_output_path', 'accept', 'assemble_with', 'kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.TransformOutputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.TransformResourcesProperty
class CfnModelPackage_TransformResourcesPropertyDef(BaseStruct):
    instance_count: typing.Union[int, float] = pydantic.Field(..., description='The number of ML compute instances to use in the transform job. The default value is ``1`` , and the maximum is ``100`` . For distributed transform jobs, specify a value greater than ``1`` .\n')
    instance_type: str = pydantic.Field(..., description='The ML compute instance type for the transform job. If you are using built-in algorithms to transform moderately sized datasets, we recommend using ml.m4.xlarge or ``ml.m5.large`` instance types.\n')
    volume_kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt model data on the storage volume attached to the ML compute instance(s) that run the batch transform job. .. epigraph:: Certain Nitro-based instances include local storage, dependent on the instance type. Local storage volumes are encrypted using a hardware module on the instance. You can\'t request a ``VolumeKmsKeyId`` when using an instance type with local storage. For a list of instance types that support local instance storage, see `Instance Store Volumes <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes>`_ . For more information about local instance storage encryption, see `SSD Instance Store Volumes <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html>`_ . The ``VolumeKmsKeyId`` can be any of the following formats: - Key ID: ``1234abcd-12ab-34cd-56ef-1234567890ab`` - Key ARN: ``arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab`` - Alias name: ``alias/ExampleAlias`` - Alias name ARN: ``arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-transformresources.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    transform_resources_property = sagemaker.CfnModelPackage.TransformResourcesProperty(\n        instance_count=123,\n        instance_type="instanceType",\n\n        # the properties below are optional\n        volume_kms_key_id="volumeKmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_count', 'instance_type', 'volume_kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.TransformResourcesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.UserContextProperty
class CfnModelPackage_UserContextPropertyDef(BaseStruct):
    domain_id: typing.Optional[str] = pydantic.Field(None, description='The domain associated with the user.\n')
    user_profile_arn: typing.Optional[str] = pydantic.Field(None, description="The Amazon Resource Name (ARN) of the user's profile.\n")
    user_profile_name: typing.Optional[str] = pydantic.Field(None, description='The name of the user\'s profile.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-usercontext.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    user_context_property = sagemaker.CfnModelPackage.UserContextProperty(\n        domain_id="domainId",\n        user_profile_arn="userProfileArn",\n        user_profile_name="userProfileName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['domain_id', 'user_profile_arn', 'user_profile_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.UserContextProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.ValidationProfileProperty
class CfnModelPackage_ValidationProfilePropertyDef(BaseStruct):
    profile_name: str = pydantic.Field(..., description='The name of the profile for the model package.\n')
    transform_job_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_TransformJobDefinitionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The ``TransformJobDefinition`` object that describes the transform job used for the validation of the model package.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-validationprofile.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    validation_profile_property = sagemaker.CfnModelPackage.ValidationProfileProperty(\n        profile_name="profileName",\n        transform_job_definition=sagemaker.CfnModelPackage.TransformJobDefinitionProperty(\n            transform_input=sagemaker.CfnModelPackage.TransformInputProperty(\n                data_source=sagemaker.CfnModelPackage.DataSourceProperty(\n                    s3_data_source=sagemaker.CfnModelPackage.S3DataSourceProperty(\n                        s3_data_type="s3DataType",\n                        s3_uri="s3Uri"\n                    )\n                ),\n\n                # the properties below are optional\n                compression_type="compressionType",\n                content_type="contentType",\n                split_type="splitType"\n            ),\n            transform_output=sagemaker.CfnModelPackage.TransformOutputProperty(\n                s3_output_path="s3OutputPath",\n\n                # the properties below are optional\n                accept="accept",\n                assemble_with="assembleWith",\n                kms_key_id="kmsKeyId"\n            ),\n            transform_resources=sagemaker.CfnModelPackage.TransformResourcesProperty(\n                instance_count=123,\n                instance_type="instanceType",\n\n                # the properties below are optional\n                volume_kms_key_id="volumeKmsKeyId"\n            ),\n\n            # the properties below are optional\n            batch_strategy="batchStrategy",\n            environment={\n                "environment_key": "environment"\n            },\n            max_concurrent_transforms=123,\n            max_payload_in_mb=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['profile_name', 'transform_job_definition']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.ValidationProfileProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage.ValidationSpecificationProperty
class CfnModelPackage_ValidationSpecificationPropertyDef(BaseStruct):
    validation_profiles: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ValidationProfilePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='An array of ``ModelPackageValidationProfile`` objects, each of which specifies a batch transform job that SageMaker runs to validate your model package.\n')
    validation_role: str = pydantic.Field(..., description='The IAM roles to be used for the validation of the model package.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelpackage-validationspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    validation_specification_property = sagemaker.CfnModelPackage.ValidationSpecificationProperty(\n        validation_profiles=[sagemaker.CfnModelPackage.ValidationProfileProperty(\n            profile_name="profileName",\n            transform_job_definition=sagemaker.CfnModelPackage.TransformJobDefinitionProperty(\n                transform_input=sagemaker.CfnModelPackage.TransformInputProperty(\n                    data_source=sagemaker.CfnModelPackage.DataSourceProperty(\n                        s3_data_source=sagemaker.CfnModelPackage.S3DataSourceProperty(\n                            s3_data_type="s3DataType",\n                            s3_uri="s3Uri"\n                        )\n                    ),\n\n                    # the properties below are optional\n                    compression_type="compressionType",\n                    content_type="contentType",\n                    split_type="splitType"\n                ),\n                transform_output=sagemaker.CfnModelPackage.TransformOutputProperty(\n                    s3_output_path="s3OutputPath",\n\n                    # the properties below are optional\n                    accept="accept",\n                    assemble_with="assembleWith",\n                    kms_key_id="kmsKeyId"\n                ),\n                transform_resources=sagemaker.CfnModelPackage.TransformResourcesProperty(\n                    instance_count=123,\n                    instance_type="instanceType",\n\n                    # the properties below are optional\n                    volume_kms_key_id="volumeKmsKeyId"\n                ),\n\n                # the properties below are optional\n                batch_strategy="batchStrategy",\n                environment={\n                    "environment_key": "environment"\n                },\n                max_concurrent_transforms=123,\n                max_payload_in_mb=123\n            )\n        )],\n        validation_role="validationRole"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['validation_profiles', 'validation_role']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage.ValidationSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.BatchTransformInputProperty
class CfnModelQualityJobDefinition_BatchTransformInputPropertyDef(BaseStruct):
    data_captured_destination_s3_uri: str = pydantic.Field(..., description='``CfnModelQualityJobDefinition.BatchTransformInputProperty.DataCapturedDestinationS3Uri``.')
    dataset_format: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_DatasetFormatPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='``CfnModelQualityJobDefinition.BatchTransformInputProperty.DatasetFormat``.\n')
    local_path: str = pydantic.Field(..., description='``CfnModelQualityJobDefinition.BatchTransformInputProperty.LocalPath``.\n')
    end_time_offset: typing.Optional[str] = pydantic.Field(None, description='``CfnModelQualityJobDefinition.BatchTransformInputProperty.EndTimeOffset``.\n')
    inference_attribute: typing.Optional[str] = pydantic.Field(None, description='``CfnModelQualityJobDefinition.BatchTransformInputProperty.InferenceAttribute``.\n')
    probability_attribute: typing.Optional[str] = pydantic.Field(None, description='``CfnModelQualityJobDefinition.BatchTransformInputProperty.ProbabilityAttribute``.\n')
    probability_threshold_attribute: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnModelQualityJobDefinition.BatchTransformInputProperty.ProbabilityThresholdAttribute``.\n')
    s3_data_distribution_type: typing.Optional[str] = pydantic.Field(None, description='``CfnModelQualityJobDefinition.BatchTransformInputProperty.S3DataDistributionType``.\n')
    s3_input_mode: typing.Optional[str] = pydantic.Field(None, description='``CfnModelQualityJobDefinition.BatchTransformInputProperty.S3InputMode``.\n')
    start_time_offset: typing.Optional[str] = pydantic.Field(None, description='``CfnModelQualityJobDefinition.BatchTransformInputProperty.StartTimeOffset``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-batchtransforminput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    batch_transform_input_property = sagemaker.CfnModelQualityJobDefinition.BatchTransformInputProperty(\n        data_captured_destination_s3_uri="dataCapturedDestinationS3Uri",\n        dataset_format=sagemaker.CfnModelQualityJobDefinition.DatasetFormatProperty(\n            csv=sagemaker.CfnModelQualityJobDefinition.CsvProperty(\n                header=False\n            ),\n            json=sagemaker.CfnModelQualityJobDefinition.JsonProperty(\n                line=False\n            ),\n            parquet=False\n        ),\n        local_path="localPath",\n\n        # the properties below are optional\n        end_time_offset="endTimeOffset",\n        inference_attribute="inferenceAttribute",\n        probability_attribute="probabilityAttribute",\n        probability_threshold_attribute=123,\n        s3_data_distribution_type="s3DataDistributionType",\n        s3_input_mode="s3InputMode",\n        start_time_offset="startTimeOffset"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['data_captured_destination_s3_uri', 'dataset_format', 'local_path', 'end_time_offset', 'inference_attribute', 'probability_attribute', 'probability_threshold_attribute', 's3_data_distribution_type', 's3_input_mode', 'start_time_offset']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.BatchTransformInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.ClusterConfigProperty
class CfnModelQualityJobDefinition_ClusterConfigPropertyDef(BaseStruct):
    instance_count: typing.Union[int, float] = pydantic.Field(..., description='The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.\n')
    instance_type: str = pydantic.Field(..., description='The ML compute instance type for the processing job.\n')
    volume_size_in_gb: typing.Union[int, float] = pydantic.Field(..., description='The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.\n')
    volume_kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-clusterconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cluster_config_property = sagemaker.CfnModelQualityJobDefinition.ClusterConfigProperty(\n        instance_count=123,\n        instance_type="instanceType",\n        volume_size_in_gb=123,\n\n        # the properties below are optional\n        volume_kms_key_id="volumeKmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_count', 'instance_type', 'volume_size_in_gb', 'volume_kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.ClusterConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.ConstraintsResourceProperty
class CfnModelQualityJobDefinition_ConstraintsResourcePropertyDef(BaseStruct):
    s3_uri: typing.Optional[str] = pydantic.Field(None, description='The Amazon S3 URI for the constraints resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-constraintsresource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    constraints_resource_property = sagemaker.CfnModelQualityJobDefinition.ConstraintsResourceProperty(\n        s3_uri="s3Uri"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_uri']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.ConstraintsResourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.CsvProperty
class CfnModelQualityJobDefinition_CsvPropertyDef(BaseStruct):
    header: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnModelQualityJobDefinition.CsvProperty.Header``.')
    _init_params: typing.ClassVar[list[str]] = ['header']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.CsvProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.DatasetFormatProperty
class CfnModelQualityJobDefinition_DatasetFormatPropertyDef(BaseStruct):
    csv: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_CsvPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnModelQualityJobDefinition.DatasetFormatProperty.Csv``.')
    json_: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_JsonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnModelQualityJobDefinition.DatasetFormatProperty.Json``.\n', alias='json')
    parquet: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnModelQualityJobDefinition.DatasetFormatProperty.Parquet``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-datasetformat.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    dataset_format_property = sagemaker.CfnModelQualityJobDefinition.DatasetFormatProperty(\n        csv=sagemaker.CfnModelQualityJobDefinition.CsvProperty(\n            header=False\n        ),\n        json=sagemaker.CfnModelQualityJobDefinition.JsonProperty(\n            line=False\n        ),\n        parquet=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['csv', 'json', 'parquet']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.DatasetFormatProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.EndpointInputProperty
class CfnModelQualityJobDefinition_EndpointInputPropertyDef(BaseStruct):
    endpoint_name: str = pydantic.Field(..., description="An endpoint in customer's account which has enabled ``DataCaptureConfig`` enabled.\n")
    local_path: str = pydantic.Field(..., description='Path to the filesystem where the endpoint data is available to the container.\n')
    end_time_offset: typing.Optional[str] = pydantic.Field(None, description='If specified, monitoring jobs substract this time from the end time. For information about using offsets for scheduling monitoring jobs, see `Schedule Model Quality Monitoring Jobs <https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html>`_ .\n')
    inference_attribute: typing.Optional[str] = pydantic.Field(None, description='The attribute of the input data that represents the ground truth label.\n')
    probability_attribute: typing.Optional[str] = pydantic.Field(None, description='In a classification problem, the attribute that represents the class probability.\n')
    probability_threshold_attribute: typing.Union[int, float, None] = pydantic.Field(None, description='The threshold for the class probability to be evaluated as a positive result.\n')
    s3_data_distribution_type: typing.Optional[str] = pydantic.Field(None, description='Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defaults to ``FullyReplicated``\n')
    s3_input_mode: typing.Optional[str] = pydantic.Field(None, description='Whether the ``Pipe`` or ``File`` is used as the input mode for transferring data for the monitoring job. ``Pipe`` mode is recommended for large datasets. ``File`` mode is useful for small files that fit in memory. Defaults to ``File`` .\n')
    start_time_offset: typing.Optional[str] = pydantic.Field(None, description='If specified, monitoring jobs substract this time from the start time. For information about using offsets for scheduling monitoring jobs, see `Schedule Model Quality Monitoring Jobs <https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-endpointinput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    endpoint_input_property = sagemaker.CfnModelQualityJobDefinition.EndpointInputProperty(\n        endpoint_name="endpointName",\n        local_path="localPath",\n\n        # the properties below are optional\n        end_time_offset="endTimeOffset",\n        inference_attribute="inferenceAttribute",\n        probability_attribute="probabilityAttribute",\n        probability_threshold_attribute=123,\n        s3_data_distribution_type="s3DataDistributionType",\n        s3_input_mode="s3InputMode",\n        start_time_offset="startTimeOffset"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['endpoint_name', 'local_path', 'end_time_offset', 'inference_attribute', 'probability_attribute', 'probability_threshold_attribute', 's3_data_distribution_type', 's3_input_mode', 'start_time_offset']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.EndpointInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.JsonProperty
class CfnModelQualityJobDefinition_JsonPropertyDef(BaseStruct):
    line: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnModelQualityJobDefinition.JsonProperty.Line``.')
    _init_params: typing.ClassVar[list[str]] = ['line']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.JsonProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.ModelQualityAppSpecificationProperty
class CfnModelQualityJobDefinition_ModelQualityAppSpecificationPropertyDef(BaseStruct):
    image_uri: str = pydantic.Field(..., description='The address of the container image that the monitoring job runs.\n')
    problem_type: str = pydantic.Field(..., description='The machine learning problem type of the model that the monitoring job monitors.\n')
    container_arguments: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='An array of arguments for the container used to run the monitoring job.\n')
    container_entrypoint: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Specifies the entrypoint for a container that the monitoring job runs.\n')
    environment: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='Sets the environment variables in the container that the monitoring job runs.\n')
    post_analytics_processor_source_uri: typing.Optional[str] = pydantic.Field(None, description='An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.\n')
    record_preprocessor_source_uri: typing.Optional[str] = pydantic.Field(None, description='An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-modelqualityappspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    model_quality_app_specification_property = sagemaker.CfnModelQualityJobDefinition.ModelQualityAppSpecificationProperty(\n        image_uri="imageUri",\n        problem_type="problemType",\n\n        # the properties below are optional\n        container_arguments=["containerArguments"],\n        container_entrypoint=["containerEntrypoint"],\n        environment={\n            "environment_key": "environment"\n        },\n        post_analytics_processor_source_uri="postAnalyticsProcessorSourceUri",\n        record_preprocessor_source_uri="recordPreprocessorSourceUri"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['image_uri', 'problem_type', 'container_arguments', 'container_entrypoint', 'environment', 'post_analytics_processor_source_uri', 'record_preprocessor_source_uri']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.ModelQualityAppSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.ModelQualityBaselineConfigProperty
class CfnModelQualityJobDefinition_ModelQualityBaselineConfigPropertyDef(BaseStruct):
    baselining_job_name: typing.Optional[str] = pydantic.Field(None, description='The name of the job that performs baselining for the monitoring job.\n')
    constraints_resource: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_ConstraintsResourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The constraints resource for a monitoring job.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-modelqualitybaselineconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    model_quality_baseline_config_property = sagemaker.CfnModelQualityJobDefinition.ModelQualityBaselineConfigProperty(\n        baselining_job_name="baseliningJobName",\n        constraints_resource=sagemaker.CfnModelQualityJobDefinition.ConstraintsResourceProperty(\n            s3_uri="s3Uri"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['baselining_job_name', 'constraints_resource']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.ModelQualityBaselineConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.ModelQualityJobInputProperty
class CfnModelQualityJobDefinition_ModelQualityJobInputPropertyDef(BaseStruct):
    ground_truth_s3_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_MonitoringGroundTruthS3InputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The ground truth label provided for the model.\n')
    batch_transform_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_BatchTransformInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnModelQualityJobDefinition.ModelQualityJobInputProperty.BatchTransformInput``.\n')
    endpoint_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_EndpointInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Input object for the endpoint.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-modelqualityjobinput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    model_quality_job_input_property = sagemaker.CfnModelQualityJobDefinition.ModelQualityJobInputProperty(\n        ground_truth_s3_input=sagemaker.CfnModelQualityJobDefinition.MonitoringGroundTruthS3InputProperty(\n            s3_uri="s3Uri"\n        ),\n\n        # the properties below are optional\n        batch_transform_input=sagemaker.CfnModelQualityJobDefinition.BatchTransformInputProperty(\n            data_captured_destination_s3_uri="dataCapturedDestinationS3Uri",\n            dataset_format=sagemaker.CfnModelQualityJobDefinition.DatasetFormatProperty(\n                csv=sagemaker.CfnModelQualityJobDefinition.CsvProperty(\n                    header=False\n                ),\n                json=sagemaker.CfnModelQualityJobDefinition.JsonProperty(\n                    line=False\n                ),\n                parquet=False\n            ),\n            local_path="localPath",\n\n            # the properties below are optional\n            end_time_offset="endTimeOffset",\n            inference_attribute="inferenceAttribute",\n            probability_attribute="probabilityAttribute",\n            probability_threshold_attribute=123,\n            s3_data_distribution_type="s3DataDistributionType",\n            s3_input_mode="s3InputMode",\n            start_time_offset="startTimeOffset"\n        ),\n        endpoint_input=sagemaker.CfnModelQualityJobDefinition.EndpointInputProperty(\n            endpoint_name="endpointName",\n            local_path="localPath",\n\n            # the properties below are optional\n            end_time_offset="endTimeOffset",\n            inference_attribute="inferenceAttribute",\n            probability_attribute="probabilityAttribute",\n            probability_threshold_attribute=123,\n            s3_data_distribution_type="s3DataDistributionType",\n            s3_input_mode="s3InputMode",\n            start_time_offset="startTimeOffset"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ground_truth_s3_input', 'batch_transform_input', 'endpoint_input']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.ModelQualityJobInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.MonitoringGroundTruthS3InputProperty
class CfnModelQualityJobDefinition_MonitoringGroundTruthS3InputPropertyDef(BaseStruct):
    s3_uri: str = pydantic.Field(..., description='The address of the Amazon S3 location of the ground truth labels.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-monitoringgroundtruths3input.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_ground_truth_s3_input_property = sagemaker.CfnModelQualityJobDefinition.MonitoringGroundTruthS3InputProperty(\n        s3_uri="s3Uri"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_uri']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.MonitoringGroundTruthS3InputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.MonitoringOutputConfigProperty
class CfnModelQualityJobDefinition_MonitoringOutputConfigPropertyDef(BaseStruct):
    monitoring_outputs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_MonitoringOutputPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.\n')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-monitoringoutputconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_output_config_property = sagemaker.CfnModelQualityJobDefinition.MonitoringOutputConfigProperty(\n        monitoring_outputs=[sagemaker.CfnModelQualityJobDefinition.MonitoringOutputProperty(\n            s3_output=sagemaker.CfnModelQualityJobDefinition.S3OutputProperty(\n                local_path="localPath",\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                s3_upload_mode="s3UploadMode"\n            )\n        )],\n\n        # the properties below are optional\n        kms_key_id="kmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['monitoring_outputs', 'kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.MonitoringOutputConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.MonitoringOutputProperty
class CfnModelQualityJobDefinition_MonitoringOutputPropertyDef(BaseStruct):
    s3_output: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_S3OutputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The Amazon S3 storage location where the results of a monitoring job are saved.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-monitoringoutput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_output_property = sagemaker.CfnModelQualityJobDefinition.MonitoringOutputProperty(\n        s3_output=sagemaker.CfnModelQualityJobDefinition.S3OutputProperty(\n            local_path="localPath",\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            s3_upload_mode="s3UploadMode"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_output']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.MonitoringOutputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.MonitoringResourcesProperty
class CfnModelQualityJobDefinition_MonitoringResourcesPropertyDef(BaseStruct):
    cluster_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_ClusterConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The configuration for the cluster resources used to run the processing job.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-monitoringresources.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_resources_property = sagemaker.CfnModelQualityJobDefinition.MonitoringResourcesProperty(\n        cluster_config=sagemaker.CfnModelQualityJobDefinition.ClusterConfigProperty(\n            instance_count=123,\n            instance_type="instanceType",\n            volume_size_in_gb=123,\n\n            # the properties below are optional\n            volume_kms_key_id="volumeKmsKeyId"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cluster_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.MonitoringResourcesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.NetworkConfigProperty
class CfnModelQualityJobDefinition_NetworkConfigPropertyDef(BaseStruct):
    enable_inter_container_traffic_encryption: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Whether to encrypt all communications between distributed processing jobs. Choose ``True`` to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.\n')
    enable_network_isolation: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Whether to allow inbound and outbound network calls to and from the containers used for the processing job.\n')
    vpc_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_VpcConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-networkconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    network_config_property = sagemaker.CfnModelQualityJobDefinition.NetworkConfigProperty(\n        enable_inter_container_traffic_encryption=False,\n        enable_network_isolation=False,\n        vpc_config=sagemaker.CfnModelQualityJobDefinition.VpcConfigProperty(\n            security_group_ids=["securityGroupIds"],\n            subnets=["subnets"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enable_inter_container_traffic_encryption', 'enable_network_isolation', 'vpc_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.NetworkConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.S3OutputProperty
class CfnModelQualityJobDefinition_S3OutputPropertyDef(BaseStruct):
    local_path: str = pydantic.Field(..., description='The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.\n')
    s3_uri: str = pydantic.Field(..., description='A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.\n')
    s3_upload_mode: typing.Optional[str] = pydantic.Field(None, description='Whether to upload the results of the monitoring job continuously or after the job completes.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-s3output.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    s3_output_property = sagemaker.CfnModelQualityJobDefinition.S3OutputProperty(\n        local_path="localPath",\n        s3_uri="s3Uri",\n\n        # the properties below are optional\n        s3_upload_mode="s3UploadMode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['local_path', 's3_uri', 's3_upload_mode']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.S3OutputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.StoppingConditionProperty
class CfnModelQualityJobDefinition_StoppingConditionPropertyDef(BaseStruct):
    max_runtime_in_seconds: typing.Union[int, float] = pydantic.Field(..., description='The maximum length of time, in seconds, that a training or compilation job can run before it is stopped. For compilation jobs, if the job does not complete during this time, a ``TimeOut`` error is generated. We recommend starting with 900 seconds and increasing as necessary based on your model. For all other jobs, if the job does not complete during this time, SageMaker ends the job. When ``RetryStrategy`` is specified in the job request, ``MaxRuntimeInSeconds`` specifies the maximum time for all of the attempts in total, not each individual attempt. The default value is 1 day. The maximum value is 28 days. The maximum time that a ``TrainingJob`` can run in total, including any time spent publishing metrics or archiving and uploading models after it has been stopped, is 30 days.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-stoppingcondition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    stopping_condition_property = sagemaker.CfnModelQualityJobDefinition.StoppingConditionProperty(\n        max_runtime_in_seconds=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_runtime_in_seconds']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.StoppingConditionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.VpcConfigProperty
class CfnModelQualityJobDefinition_VpcConfigPropertyDef(BaseStruct):
    security_group_ids: typing.Sequence[str] = pydantic.Field(..., description='The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the ``Subnets`` field.\n')
    subnets: typing.Sequence[str] = pydantic.Field(..., description='The ID of the subnets in the VPC to which you want to connect your training job or model. For information about the availability of specific instance types, see `Supported Instance Types and Availability Zones <https://docs.aws.amazon.com/sagemaker/latest/dg/instance-types-az.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-modelqualityjobdefinition-vpcconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    vpc_config_property = sagemaker.CfnModelQualityJobDefinition.VpcConfigProperty(\n        security_group_ids=["securityGroupIds"],\n        subnets=["subnets"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['security_group_ids', 'subnets']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition.VpcConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.BaselineConfigProperty
class CfnMonitoringSchedule_BaselineConfigPropertyDef(BaseStruct):
    constraints_resource: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_ConstraintsResourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The Amazon S3 URI for the constraints resource.\n')
    statistics_resource: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_StatisticsResourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The baseline statistics file in Amazon S3 that the current monitoring job should be validated against.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-baselineconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    baseline_config_property = sagemaker.CfnMonitoringSchedule.BaselineConfigProperty(\n        constraints_resource=sagemaker.CfnMonitoringSchedule.ConstraintsResourceProperty(\n            s3_uri="s3Uri"\n        ),\n        statistics_resource=sagemaker.CfnMonitoringSchedule.StatisticsResourceProperty(\n            s3_uri="s3Uri"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['constraints_resource', 'statistics_resource']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.BaselineConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.BatchTransformInputProperty
class CfnMonitoringSchedule_BatchTransformInputPropertyDef(BaseStruct):
    data_captured_destination_s3_uri: str = pydantic.Field(..., description='``CfnMonitoringSchedule.BatchTransformInputProperty.DataCapturedDestinationS3Uri``.')
    dataset_format: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_DatasetFormatPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='``CfnMonitoringSchedule.BatchTransformInputProperty.DatasetFormat``.\n')
    local_path: str = pydantic.Field(..., description='``CfnMonitoringSchedule.BatchTransformInputProperty.LocalPath``.\n')
    s3_data_distribution_type: typing.Optional[str] = pydantic.Field(None, description='``CfnMonitoringSchedule.BatchTransformInputProperty.S3DataDistributionType``.\n')
    s3_input_mode: typing.Optional[str] = pydantic.Field(None, description='``CfnMonitoringSchedule.BatchTransformInputProperty.S3InputMode``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-batchtransforminput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    batch_transform_input_property = sagemaker.CfnMonitoringSchedule.BatchTransformInputProperty(\n        data_captured_destination_s3_uri="dataCapturedDestinationS3Uri",\n        dataset_format=sagemaker.CfnMonitoringSchedule.DatasetFormatProperty(\n            csv=sagemaker.CfnMonitoringSchedule.CsvProperty(\n                header=False\n            ),\n            json=sagemaker.CfnMonitoringSchedule.JsonProperty(\n                line=False\n            ),\n            parquet=False\n        ),\n        local_path="localPath",\n\n        # the properties below are optional\n        s3_data_distribution_type="s3DataDistributionType",\n        s3_input_mode="s3InputMode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['data_captured_destination_s3_uri', 'dataset_format', 'local_path', 's3_data_distribution_type', 's3_input_mode']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.BatchTransformInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.ClusterConfigProperty
class CfnMonitoringSchedule_ClusterConfigPropertyDef(BaseStruct):
    instance_count: typing.Union[int, float] = pydantic.Field(..., description='The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.\n')
    instance_type: str = pydantic.Field(..., description='The ML compute instance type for the processing job.\n')
    volume_size_in_gb: typing.Union[int, float] = pydantic.Field(..., description='The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.\n')
    volume_kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-clusterconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cluster_config_property = sagemaker.CfnMonitoringSchedule.ClusterConfigProperty(\n        instance_count=123,\n        instance_type="instanceType",\n        volume_size_in_gb=123,\n\n        # the properties below are optional\n        volume_kms_key_id="volumeKmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_count', 'instance_type', 'volume_size_in_gb', 'volume_kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.ClusterConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.ConstraintsResourceProperty
class CfnMonitoringSchedule_ConstraintsResourcePropertyDef(BaseStruct):
    s3_uri: typing.Optional[str] = pydantic.Field(None, description='The Amazon S3 URI for the constraints resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-constraintsresource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    constraints_resource_property = sagemaker.CfnMonitoringSchedule.ConstraintsResourceProperty(\n        s3_uri="s3Uri"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_uri']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.ConstraintsResourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.CsvProperty
class CfnMonitoringSchedule_CsvPropertyDef(BaseStruct):
    header: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnMonitoringSchedule.CsvProperty.Header``.')
    _init_params: typing.ClassVar[list[str]] = ['header']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.CsvProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.DatasetFormatProperty
class CfnMonitoringSchedule_DatasetFormatPropertyDef(BaseStruct):
    csv: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_CsvPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnMonitoringSchedule.DatasetFormatProperty.Csv``.')
    json_: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_JsonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnMonitoringSchedule.DatasetFormatProperty.Json``.\n', alias='json')
    parquet: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnMonitoringSchedule.DatasetFormatProperty.Parquet``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-datasetformat.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    dataset_format_property = sagemaker.CfnMonitoringSchedule.DatasetFormatProperty(\n        csv=sagemaker.CfnMonitoringSchedule.CsvProperty(\n            header=False\n        ),\n        json=sagemaker.CfnMonitoringSchedule.JsonProperty(\n            line=False\n        ),\n        parquet=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['csv', 'json', 'parquet']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.DatasetFormatProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.EndpointInputProperty
class CfnMonitoringSchedule_EndpointInputPropertyDef(BaseStruct):
    endpoint_name: str = pydantic.Field(..., description="An endpoint in customer's account which has enabled ``DataCaptureConfig`` enabled.\n")
    local_path: str = pydantic.Field(..., description='Path to the filesystem where the endpoint data is available to the container.\n')
    s3_data_distribution_type: typing.Optional[str] = pydantic.Field(None, description='Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defaults to ``FullyReplicated``\n')
    s3_input_mode: typing.Optional[str] = pydantic.Field(None, description='Whether the ``Pipe`` or ``File`` is used as the input mode for transferring data for the monitoring job. ``Pipe`` mode is recommended for large datasets. ``File`` mode is useful for small files that fit in memory. Defaults to ``File`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-endpointinput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    endpoint_input_property = sagemaker.CfnMonitoringSchedule.EndpointInputProperty(\n        endpoint_name="endpointName",\n        local_path="localPath",\n\n        # the properties below are optional\n        s3_data_distribution_type="s3DataDistributionType",\n        s3_input_mode="s3InputMode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['endpoint_name', 'local_path', 's3_data_distribution_type', 's3_input_mode']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.EndpointInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.JsonProperty
class CfnMonitoringSchedule_JsonPropertyDef(BaseStruct):
    line: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnMonitoringSchedule.JsonProperty.Line``.')
    _init_params: typing.ClassVar[list[str]] = ['line']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.JsonProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.MonitoringAppSpecificationProperty
class CfnMonitoringSchedule_MonitoringAppSpecificationPropertyDef(BaseStruct):
    image_uri: str = pydantic.Field(..., description='The container image to be run by the monitoring job.\n')
    container_arguments: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='An array of arguments for the container used to run the monitoring job.\n')
    container_entrypoint: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Specifies the entrypoint for a container used to run the monitoring job.\n')
    post_analytics_processor_source_uri: typing.Optional[str] = pydantic.Field(None, description='An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.\n')
    record_preprocessor_source_uri: typing.Optional[str] = pydantic.Field(None, description='An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flatted json so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringappspecification.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_app_specification_property = sagemaker.CfnMonitoringSchedule.MonitoringAppSpecificationProperty(\n        image_uri="imageUri",\n\n        # the properties below are optional\n        container_arguments=["containerArguments"],\n        container_entrypoint=["containerEntrypoint"],\n        post_analytics_processor_source_uri="postAnalyticsProcessorSourceUri",\n        record_preprocessor_source_uri="recordPreprocessorSourceUri"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['image_uri', 'container_arguments', 'container_entrypoint', 'post_analytics_processor_source_uri', 'record_preprocessor_source_uri']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.MonitoringAppSpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.MonitoringExecutionSummaryProperty
class CfnMonitoringSchedule_MonitoringExecutionSummaryPropertyDef(BaseStruct):
    creation_time: str = pydantic.Field(..., description='The time at which the monitoring job was created.\n')
    last_modified_time: str = pydantic.Field(..., description='A timestamp that indicates the last time the monitoring job was modified.\n')
    monitoring_execution_status: str = pydantic.Field(..., description='The status of the monitoring job.\n')
    monitoring_schedule_name: str = pydantic.Field(..., description='The name of the monitoring schedule.\n')
    scheduled_time: str = pydantic.Field(..., description='The time the monitoring job was scheduled.\n')
    endpoint_name: typing.Optional[str] = pydantic.Field(None, description='The name of the endpoint used to run the monitoring job.\n')
    failure_reason: typing.Optional[str] = pydantic.Field(None, description='Contains the reason a monitoring job failed, if it failed.\n')
    processing_job_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the monitoring job.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringexecutionsummary.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_execution_summary_property = sagemaker.CfnMonitoringSchedule.MonitoringExecutionSummaryProperty(\n        creation_time="creationTime",\n        last_modified_time="lastModifiedTime",\n        monitoring_execution_status="monitoringExecutionStatus",\n        monitoring_schedule_name="monitoringScheduleName",\n        scheduled_time="scheduledTime",\n\n        # the properties below are optional\n        endpoint_name="endpointName",\n        failure_reason="failureReason",\n        processing_job_arn="processingJobArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['creation_time', 'last_modified_time', 'monitoring_execution_status', 'monitoring_schedule_name', 'scheduled_time', 'endpoint_name', 'failure_reason', 'processing_job_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.MonitoringExecutionSummaryProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.MonitoringInputProperty
class CfnMonitoringSchedule_MonitoringInputPropertyDef(BaseStruct):
    batch_transform_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_BatchTransformInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnMonitoringSchedule.MonitoringInputProperty.BatchTransformInput``.\n')
    endpoint_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_EndpointInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The endpoint for a monitoring job.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringinput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_input_property = sagemaker.CfnMonitoringSchedule.MonitoringInputProperty(\n        batch_transform_input=sagemaker.CfnMonitoringSchedule.BatchTransformInputProperty(\n            data_captured_destination_s3_uri="dataCapturedDestinationS3Uri",\n            dataset_format=sagemaker.CfnMonitoringSchedule.DatasetFormatProperty(\n                csv=sagemaker.CfnMonitoringSchedule.CsvProperty(\n                    header=False\n                ),\n                json=sagemaker.CfnMonitoringSchedule.JsonProperty(\n                    line=False\n                ),\n                parquet=False\n            ),\n            local_path="localPath",\n\n            # the properties below are optional\n            s3_data_distribution_type="s3DataDistributionType",\n            s3_input_mode="s3InputMode"\n        ),\n        endpoint_input=sagemaker.CfnMonitoringSchedule.EndpointInputProperty(\n            endpoint_name="endpointName",\n            local_path="localPath",\n\n            # the properties below are optional\n            s3_data_distribution_type="s3DataDistributionType",\n            s3_input_mode="s3InputMode"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['batch_transform_input', 'endpoint_input']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.MonitoringInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.MonitoringJobDefinitionProperty
class CfnMonitoringSchedule_MonitoringJobDefinitionPropertyDef(BaseStruct):
    monitoring_app_specification: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_MonitoringAppSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Configures the monitoring job to run a specified Docker container image.\n')
    monitoring_inputs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_MonitoringInputPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The array of inputs for the monitoring job. Currently we support monitoring an Amazon SageMaker Endpoint.\n')
    monitoring_output_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_MonitoringOutputConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The array of outputs from the monitoring job to be uploaded to Amazon Simple Storage Service (Amazon S3).\n')
    monitoring_resources: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_MonitoringResourcesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Identifies the resources, ML compute instances, and ML storage volumes to deploy for a monitoring job. In distributed processing, you specify more than one instance.\n')
    role_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.\n')
    baseline_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_BaselineConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Baseline configuration used to validate that the data conforms to the specified constraints and statistics.\n')
    environment: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='Sets the environment variables in the Docker container.\n')
    network_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_NetworkConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies networking options for an monitoring job.\n')
    stopping_condition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_StoppingConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies a time limit for how long the monitoring job is allowed to run.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringjobdefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_job_definition_property = sagemaker.CfnMonitoringSchedule.MonitoringJobDefinitionProperty(\n        monitoring_app_specification=sagemaker.CfnMonitoringSchedule.MonitoringAppSpecificationProperty(\n            image_uri="imageUri",\n\n            # the properties below are optional\n            container_arguments=["containerArguments"],\n            container_entrypoint=["containerEntrypoint"],\n            post_analytics_processor_source_uri="postAnalyticsProcessorSourceUri",\n            record_preprocessor_source_uri="recordPreprocessorSourceUri"\n        ),\n        monitoring_inputs=[sagemaker.CfnMonitoringSchedule.MonitoringInputProperty(\n            batch_transform_input=sagemaker.CfnMonitoringSchedule.BatchTransformInputProperty(\n                data_captured_destination_s3_uri="dataCapturedDestinationS3Uri",\n                dataset_format=sagemaker.CfnMonitoringSchedule.DatasetFormatProperty(\n                    csv=sagemaker.CfnMonitoringSchedule.CsvProperty(\n                        header=False\n                    ),\n                    json=sagemaker.CfnMonitoringSchedule.JsonProperty(\n                        line=False\n                    ),\n                    parquet=False\n                ),\n                local_path="localPath",\n\n                # the properties below are optional\n                s3_data_distribution_type="s3DataDistributionType",\n                s3_input_mode="s3InputMode"\n            ),\n            endpoint_input=sagemaker.CfnMonitoringSchedule.EndpointInputProperty(\n                endpoint_name="endpointName",\n                local_path="localPath",\n\n                # the properties below are optional\n                s3_data_distribution_type="s3DataDistributionType",\n                s3_input_mode="s3InputMode"\n            )\n        )],\n        monitoring_output_config=sagemaker.CfnMonitoringSchedule.MonitoringOutputConfigProperty(\n            monitoring_outputs=[sagemaker.CfnMonitoringSchedule.MonitoringOutputProperty(\n                s3_output=sagemaker.CfnMonitoringSchedule.S3OutputProperty(\n                    local_path="localPath",\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    s3_upload_mode="s3UploadMode"\n                )\n            )],\n\n            # the properties below are optional\n            kms_key_id="kmsKeyId"\n        ),\n        monitoring_resources=sagemaker.CfnMonitoringSchedule.MonitoringResourcesProperty(\n            cluster_config=sagemaker.CfnMonitoringSchedule.ClusterConfigProperty(\n                instance_count=123,\n                instance_type="instanceType",\n                volume_size_in_gb=123,\n\n                # the properties below are optional\n                volume_kms_key_id="volumeKmsKeyId"\n            )\n        ),\n        role_arn="roleArn",\n\n        # the properties below are optional\n        baseline_config=sagemaker.CfnMonitoringSchedule.BaselineConfigProperty(\n            constraints_resource=sagemaker.CfnMonitoringSchedule.ConstraintsResourceProperty(\n                s3_uri="s3Uri"\n            ),\n            statistics_resource=sagemaker.CfnMonitoringSchedule.StatisticsResourceProperty(\n                s3_uri="s3Uri"\n            )\n        ),\n        environment={\n            "environment_key": "environment"\n        },\n        network_config=sagemaker.CfnMonitoringSchedule.NetworkConfigProperty(\n            enable_inter_container_traffic_encryption=False,\n            enable_network_isolation=False,\n            vpc_config=sagemaker.CfnMonitoringSchedule.VpcConfigProperty(\n                security_group_ids=["securityGroupIds"],\n                subnets=["subnets"]\n            )\n        ),\n        stopping_condition=sagemaker.CfnMonitoringSchedule.StoppingConditionProperty(\n            max_runtime_in_seconds=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['monitoring_app_specification', 'monitoring_inputs', 'monitoring_output_config', 'monitoring_resources', 'role_arn', 'baseline_config', 'environment', 'network_config', 'stopping_condition']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.MonitoringJobDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.MonitoringOutputConfigProperty
class CfnMonitoringSchedule_MonitoringOutputConfigPropertyDef(BaseStruct):
    monitoring_outputs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_MonitoringOutputPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.\n')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The AWS Key Management Service ( AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringoutputconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_output_config_property = sagemaker.CfnMonitoringSchedule.MonitoringOutputConfigProperty(\n        monitoring_outputs=[sagemaker.CfnMonitoringSchedule.MonitoringOutputProperty(\n            s3_output=sagemaker.CfnMonitoringSchedule.S3OutputProperty(\n                local_path="localPath",\n                s3_uri="s3Uri",\n\n                # the properties below are optional\n                s3_upload_mode="s3UploadMode"\n            )\n        )],\n\n        # the properties below are optional\n        kms_key_id="kmsKeyId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['monitoring_outputs', 'kms_key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.MonitoringOutputConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.MonitoringOutputProperty
class CfnMonitoringSchedule_MonitoringOutputPropertyDef(BaseStruct):
    s3_output: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_S3OutputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The Amazon S3 storage location where the results of a monitoring job are saved.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringoutput.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_output_property = sagemaker.CfnMonitoringSchedule.MonitoringOutputProperty(\n        s3_output=sagemaker.CfnMonitoringSchedule.S3OutputProperty(\n            local_path="localPath",\n            s3_uri="s3Uri",\n\n            # the properties below are optional\n            s3_upload_mode="s3UploadMode"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_output']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.MonitoringOutputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.MonitoringResourcesProperty
class CfnMonitoringSchedule_MonitoringResourcesPropertyDef(BaseStruct):
    cluster_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_ClusterConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The configuration for the cluster resources used to run the processing job.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringresources.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_resources_property = sagemaker.CfnMonitoringSchedule.MonitoringResourcesProperty(\n        cluster_config=sagemaker.CfnMonitoringSchedule.ClusterConfigProperty(\n            instance_count=123,\n            instance_type="instanceType",\n            volume_size_in_gb=123,\n\n            # the properties below are optional\n            volume_kms_key_id="volumeKmsKeyId"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cluster_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.MonitoringResourcesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.MonitoringScheduleConfigProperty
class CfnMonitoringSchedule_MonitoringScheduleConfigPropertyDef(BaseStruct):
    monitoring_job_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_MonitoringJobDefinitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Defines the monitoring job.\n')
    monitoring_job_definition_name: typing.Optional[str] = pydantic.Field(None, description='The name of the monitoring job definition to schedule.\n')
    monitoring_type: typing.Optional[str] = pydantic.Field(None, description='The type of the monitoring job definition to schedule.\n')
    schedule_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_ScheduleConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configures the monitoring schedule.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-monitoringscheduleconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    monitoring_schedule_config_property = sagemaker.CfnMonitoringSchedule.MonitoringScheduleConfigProperty(\n        monitoring_job_definition=sagemaker.CfnMonitoringSchedule.MonitoringJobDefinitionProperty(\n            monitoring_app_specification=sagemaker.CfnMonitoringSchedule.MonitoringAppSpecificationProperty(\n                image_uri="imageUri",\n\n                # the properties below are optional\n                container_arguments=["containerArguments"],\n                container_entrypoint=["containerEntrypoint"],\n                post_analytics_processor_source_uri="postAnalyticsProcessorSourceUri",\n                record_preprocessor_source_uri="recordPreprocessorSourceUri"\n            ),\n            monitoring_inputs=[sagemaker.CfnMonitoringSchedule.MonitoringInputProperty(\n                batch_transform_input=sagemaker.CfnMonitoringSchedule.BatchTransformInputProperty(\n                    data_captured_destination_s3_uri="dataCapturedDestinationS3Uri",\n                    dataset_format=sagemaker.CfnMonitoringSchedule.DatasetFormatProperty(\n                        csv=sagemaker.CfnMonitoringSchedule.CsvProperty(\n                            header=False\n                        ),\n                        json=sagemaker.CfnMonitoringSchedule.JsonProperty(\n                            line=False\n                        ),\n                        parquet=False\n                    ),\n                    local_path="localPath",\n\n                    # the properties below are optional\n                    s3_data_distribution_type="s3DataDistributionType",\n                    s3_input_mode="s3InputMode"\n                ),\n                endpoint_input=sagemaker.CfnMonitoringSchedule.EndpointInputProperty(\n                    endpoint_name="endpointName",\n                    local_path="localPath",\n\n                    # the properties below are optional\n                    s3_data_distribution_type="s3DataDistributionType",\n                    s3_input_mode="s3InputMode"\n                )\n            )],\n            monitoring_output_config=sagemaker.CfnMonitoringSchedule.MonitoringOutputConfigProperty(\n                monitoring_outputs=[sagemaker.CfnMonitoringSchedule.MonitoringOutputProperty(\n                    s3_output=sagemaker.CfnMonitoringSchedule.S3OutputProperty(\n                        local_path="localPath",\n                        s3_uri="s3Uri",\n\n                        # the properties below are optional\n                        s3_upload_mode="s3UploadMode"\n                    )\n                )],\n\n                # the properties below are optional\n                kms_key_id="kmsKeyId"\n            ),\n            monitoring_resources=sagemaker.CfnMonitoringSchedule.MonitoringResourcesProperty(\n                cluster_config=sagemaker.CfnMonitoringSchedule.ClusterConfigProperty(\n                    instance_count=123,\n                    instance_type="instanceType",\n                    volume_size_in_gb=123,\n\n                    # the properties below are optional\n                    volume_kms_key_id="volumeKmsKeyId"\n                )\n            ),\n            role_arn="roleArn",\n\n            # the properties below are optional\n            baseline_config=sagemaker.CfnMonitoringSchedule.BaselineConfigProperty(\n                constraints_resource=sagemaker.CfnMonitoringSchedule.ConstraintsResourceProperty(\n                    s3_uri="s3Uri"\n                ),\n                statistics_resource=sagemaker.CfnMonitoringSchedule.StatisticsResourceProperty(\n                    s3_uri="s3Uri"\n                )\n            ),\n            environment={\n                "environment_key": "environment"\n            },\n            network_config=sagemaker.CfnMonitoringSchedule.NetworkConfigProperty(\n                enable_inter_container_traffic_encryption=False,\n                enable_network_isolation=False,\n                vpc_config=sagemaker.CfnMonitoringSchedule.VpcConfigProperty(\n                    security_group_ids=["securityGroupIds"],\n                    subnets=["subnets"]\n                )\n            ),\n            stopping_condition=sagemaker.CfnMonitoringSchedule.StoppingConditionProperty(\n                max_runtime_in_seconds=123\n            )\n        ),\n        monitoring_job_definition_name="monitoringJobDefinitionName",\n        monitoring_type="monitoringType",\n        schedule_config=sagemaker.CfnMonitoringSchedule.ScheduleConfigProperty(\n            schedule_expression="scheduleExpression"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['monitoring_job_definition', 'monitoring_job_definition_name', 'monitoring_type', 'schedule_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.MonitoringScheduleConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.NetworkConfigProperty
class CfnMonitoringSchedule_NetworkConfigPropertyDef(BaseStruct):
    enable_inter_container_traffic_encryption: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Whether to encrypt all communications between distributed processing jobs. Choose ``True`` to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.\n')
    enable_network_isolation: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Whether to allow inbound and outbound network calls to and from the containers used for the processing job.\n')
    vpc_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_VpcConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies a VPC that your training jobs and hosted models have access to. Control access to and from your training and model containers by configuring the VPC. For more information, see `Protect Endpoints by Using an Amazon Virtual Private Cloud <https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html>`_ and `Protect Training Jobs by Using an Amazon Virtual Private Cloud <https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-networkconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    network_config_property = sagemaker.CfnMonitoringSchedule.NetworkConfigProperty(\n        enable_inter_container_traffic_encryption=False,\n        enable_network_isolation=False,\n        vpc_config=sagemaker.CfnMonitoringSchedule.VpcConfigProperty(\n            security_group_ids=["securityGroupIds"],\n            subnets=["subnets"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enable_inter_container_traffic_encryption', 'enable_network_isolation', 'vpc_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.NetworkConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.S3OutputProperty
class CfnMonitoringSchedule_S3OutputPropertyDef(BaseStruct):
    local_path: str = pydantic.Field(..., description='The local path to the S3 storage location where SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.\n')
    s3_uri: str = pydantic.Field(..., description='A URI that identifies the S3 storage location where SageMaker saves the results of a monitoring job.\n')
    s3_upload_mode: typing.Optional[str] = pydantic.Field(None, description='Whether to upload the results of the monitoring job continuously or after the job completes.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-s3output.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    s3_output_property = sagemaker.CfnMonitoringSchedule.S3OutputProperty(\n        local_path="localPath",\n        s3_uri="s3Uri",\n\n        # the properties below are optional\n        s3_upload_mode="s3UploadMode"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['local_path', 's3_uri', 's3_upload_mode']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.S3OutputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.ScheduleConfigProperty
class CfnMonitoringSchedule_ScheduleConfigPropertyDef(BaseStruct):
    schedule_expression: str = pydantic.Field(..., description='A cron expression that describes details about the monitoring schedule. Currently the only supported cron expressions are: - If you want to set the job to start every hour, please use the following: ``Hourly: cron(0 * ? * * *)`` - If you want to start the job daily: ``cron(0 [00-23] ? * * *)`` For example, the following are valid cron expressions: - Daily at noon UTC: ``cron(0 12 ? * * *)`` - Daily at midnight UTC: ``cron(0 0 ? * * *)`` To support running every 6, 12 hours, the following are also supported: ``cron(0 [00-23]/[01-24] ? * * *)`` For example, the following are valid cron expressions: - Every 12 hours, starting at 5pm UTC: ``cron(0 17/12 ? * * *)`` - Every two hours starting at midnight: ``cron(0 0/2 ? * * *)`` .. epigraph:: - Even though the cron expression is set to start at 5PM UTC, note that there could be a delay of 0-20 minutes from the actual requested time to run the execution. - We recommend that if you would like a daily schedule, you do not provide this parameter. Amazon SageMaker will pick a time for running every day.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-scheduleconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    schedule_config_property = sagemaker.CfnMonitoringSchedule.ScheduleConfigProperty(\n        schedule_expression="scheduleExpression"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['schedule_expression']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.ScheduleConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.StatisticsResourceProperty
class CfnMonitoringSchedule_StatisticsResourcePropertyDef(BaseStruct):
    s3_uri: typing.Optional[str] = pydantic.Field(None, description='The S3 URI for the statistics resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-statisticsresource.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    statistics_resource_property = sagemaker.CfnMonitoringSchedule.StatisticsResourceProperty(\n        s3_uri="s3Uri"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_uri']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.StatisticsResourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.StoppingConditionProperty
class CfnMonitoringSchedule_StoppingConditionPropertyDef(BaseStruct):
    max_runtime_in_seconds: typing.Union[int, float] = pydantic.Field(..., description='The maximum length of time, in seconds, that a training or compilation job can run before it is stopped. For compilation jobs, if the job does not complete during this time, a ``TimeOut`` error is generated. We recommend starting with 900 seconds and increasing as necessary based on your model. For all other jobs, if the job does not complete during this time, SageMaker ends the job. When ``RetryStrategy`` is specified in the job request, ``MaxRuntimeInSeconds`` specifies the maximum time for all of the attempts in total, not each individual attempt. The default value is 1 day. The maximum value is 28 days. The maximum time that a ``TrainingJob`` can run in total, including any time spent publishing metrics or archiving and uploading models after it has been stopped, is 30 days.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-stoppingcondition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    stopping_condition_property = sagemaker.CfnMonitoringSchedule.StoppingConditionProperty(\n        max_runtime_in_seconds=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_runtime_in_seconds']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.StoppingConditionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule.VpcConfigProperty
class CfnMonitoringSchedule_VpcConfigPropertyDef(BaseStruct):
    security_group_ids: typing.Sequence[str] = pydantic.Field(..., description='The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the ``Subnets`` field.\n')
    subnets: typing.Sequence[str] = pydantic.Field(..., description='The ID of the subnets in the VPC to which you want to connect your training job or model. For information about the availability of specific instance types, see `Supported Instance Types and Availability Zones <https://docs.aws.amazon.com/sagemaker/latest/dg/instance-types-az.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-monitoringschedule-vpcconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    vpc_config_property = sagemaker.CfnMonitoringSchedule.VpcConfigProperty(\n        security_group_ids=["securityGroupIds"],\n        subnets=["subnets"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['security_group_ids', 'subnets']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule.VpcConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnNotebookInstance.InstanceMetadataServiceConfigurationProperty
class CfnNotebookInstance_InstanceMetadataServiceConfigurationPropertyDef(BaseStruct):
    minimum_instance_metadata_service_version: str = pydantic.Field(..., description='Indicates the minimum IMDS version that the notebook instance supports. When passed as part of ``CreateNotebookInstance`` , if no value is selected, then it defaults to IMDSv1. This means that both IMDSv1 and IMDSv2 are supported. If passed as part of ``UpdateNotebookInstance`` , there is no default.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-notebookinstance-instancemetadataserviceconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    instance_metadata_service_configuration_property = sagemaker.CfnNotebookInstance.InstanceMetadataServiceConfigurationProperty(\n        minimum_instance_metadata_service_version="minimumInstanceMetadataServiceVersion"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['minimum_instance_metadata_service_version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnNotebookInstance.InstanceMetadataServiceConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHookProperty
class CfnNotebookInstanceLifecycleConfig_NotebookInstanceLifecycleHookPropertyDef(BaseStruct):
    content: typing.Optional[str] = pydantic.Field(None, description='A base64-encoded string that contains a shell script for a notebook instance lifecycle configuration.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-notebookinstancelifecycleconfig-notebookinstancelifecyclehook.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    notebook_instance_lifecycle_hook_property = sagemaker.CfnNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHookProperty(\n        content="content"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['content']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHookProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnPipeline.ParallelismConfigurationProperty
class CfnPipeline_ParallelismConfigurationPropertyDef(BaseStruct):
    max_parallel_execution_steps: typing.Union[int, float] = pydantic.Field(..., description='The max number of steps that can be executed in parallel.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-pipeline-parallelismconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    parallelism_configuration_property = sagemaker.CfnPipeline.ParallelismConfigurationProperty(\n        max_parallel_execution_steps=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['max_parallel_execution_steps']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnPipeline.ParallelismConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnPipeline.PipelineDefinitionProperty
class CfnPipeline_PipelineDefinitionPropertyDef(BaseStruct):
    pipeline_definition_body: typing.Optional[str] = pydantic.Field(None, description='``CfnPipeline.PipelineDefinitionProperty.PipelineDefinitionBody``.')
    pipeline_definition_s3_location: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnPipeline_S3LocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnPipeline.PipelineDefinitionProperty.PipelineDefinitionS3Location``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-pipeline-pipelinedefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    pipeline_definition_property = sagemaker.CfnPipeline.PipelineDefinitionProperty(\n        pipeline_definition_body="pipelineDefinitionBody",\n        pipeline_definition_s3_location=sagemaker.CfnPipeline.S3LocationProperty(\n            bucket="bucket",\n            key="key",\n\n            # the properties below are optional\n            e_tag="eTag",\n            version="version"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['pipeline_definition_body', 'pipeline_definition_s3_location']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnPipeline.PipelineDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnPipeline.S3LocationProperty
class CfnPipeline_S3LocationPropertyDef(BaseStruct):
    bucket: str = pydantic.Field(..., description='``CfnPipeline.S3LocationProperty.Bucket``.')
    key: str = pydantic.Field(..., description='``CfnPipeline.S3LocationProperty.Key``.\n')
    e_tag: typing.Optional[str] = pydantic.Field(None, description='``CfnPipeline.S3LocationProperty.ETag``.\n')
    version: typing.Optional[str] = pydantic.Field(None, description='``CfnPipeline.S3LocationProperty.Version``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-pipeline-s3location.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    s3_location_property = sagemaker.CfnPipeline.S3LocationProperty(\n        bucket="bucket",\n        key="key",\n\n        # the properties below are optional\n        e_tag="eTag",\n        version="version"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket', 'key', 'e_tag', 'version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnPipeline.S3LocationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnProject.ProvisioningParameterProperty
class CfnProject_ProvisioningParameterPropertyDef(BaseStruct):
    key: str = pydantic.Field(..., description='The key that identifies a provisioning parameter.\n')
    value: str = pydantic.Field(..., description='The value of the provisioning parameter.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-project-provisioningparameter.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    provisioning_parameter_property = sagemaker.CfnProject.ProvisioningParameterProperty(\n        key="key",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnProject.ProvisioningParameterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnProject.ServiceCatalogProvisionedProductDetailsProperty
class CfnProject_ServiceCatalogProvisionedProductDetailsPropertyDef(BaseStruct):
    provisioned_product_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the provisioned product.\n')
    provisioned_product_status_message: typing.Optional[str] = pydantic.Field(None, description='The current status of the product. - ``AVAILABLE`` - Stable state, ready to perform any operation. The most recent operation succeeded and completed. - ``UNDER_CHANGE`` - Transitive state. Operations performed might not have valid results. Wait for an AVAILABLE status before performing operations. - ``TAINTED`` - Stable state, ready to perform any operation. The stack has completed the requested operation but is not exactly what was requested. For example, a request to update to a new version failed and the stack rolled back to the current version. - ``ERROR`` - An unexpected error occurred. The provisioned product exists but the stack is not running. For example, CloudFormation received a parameter value that was not valid and could not launch the stack. - ``PLAN_IN_PROGRESS`` - Transitive state. The plan operations were performed to provision a new product, but resources have not yet been created. After reviewing the list of resources to be created, execute the plan. Wait for an AVAILABLE status before performing operations.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-project-servicecatalogprovisionedproductdetails.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    service_catalog_provisioned_product_details_property = sagemaker.CfnProject.ServiceCatalogProvisionedProductDetailsProperty(\n        provisioned_product_id="provisionedProductId",\n        provisioned_product_status_message="provisionedProductStatusMessage"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['provisioned_product_id', 'provisioned_product_status_message']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnProject.ServiceCatalogProvisionedProductDetailsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnProject.ServiceCatalogProvisioningDetailsProperty
class CfnProject_ServiceCatalogProvisioningDetailsPropertyDef(BaseStruct):
    product_id: str = pydantic.Field(..., description='The ID of the product to provision.\n')
    path_id: typing.Optional[str] = pydantic.Field(None, description='The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path.\n')
    provisioning_artifact_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the provisioning artifact.\n')
    provisioning_parameters: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnProject_ProvisioningParameterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of key value pairs that you specify when you provision a product.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-project-servicecatalogprovisioningdetails.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    service_catalog_provisioning_details_property = sagemaker.CfnProject.ServiceCatalogProvisioningDetailsProperty(\n        product_id="productId",\n\n        # the properties below are optional\n        path_id="pathId",\n        provisioning_artifact_id="provisioningArtifactId",\n        provisioning_parameters=[sagemaker.CfnProject.ProvisioningParameterProperty(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['product_id', 'path_id', 'provisioning_artifact_id', 'provisioning_parameters']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnProject.ServiceCatalogProvisioningDetailsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnSpace.CustomImageProperty
class CfnSpace_CustomImagePropertyDef(BaseStruct):
    app_image_config_name: str = pydantic.Field(..., description='The name of the AppImageConfig.\n')
    image_name: str = pydantic.Field(..., description='The name of the CustomImage. Must be unique to your account.\n')
    image_version_number: typing.Union[int, float, None] = pydantic.Field(None, description='The version number of the CustomImage.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-space-customimage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    custom_image_property = sagemaker.CfnSpace.CustomImageProperty(\n        app_image_config_name="appImageConfigName",\n        image_name="imageName",\n\n        # the properties below are optional\n        image_version_number=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['app_image_config_name', 'image_name', 'image_version_number']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnSpace.CustomImageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnSpace.JupyterServerAppSettingsProperty
class CfnSpace_JupyterServerAppSettingsPropertyDef(BaseStruct):
    default_resource_spec: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnSpace_ResourceSpecPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the JupyterServer app. If you use the ``LifecycleConfigArns`` parameter, then this parameter is also required.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-space-jupyterserverappsettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    jupyter_server_app_settings_property = sagemaker.CfnSpace.JupyterServerAppSettingsProperty(\n        default_resource_spec=sagemaker.CfnSpace.ResourceSpecProperty(\n            instance_type="instanceType",\n            sage_maker_image_arn="sageMakerImageArn",\n            sage_maker_image_version_arn="sageMakerImageVersionArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['default_resource_spec']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnSpace.JupyterServerAppSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnSpace.KernelGatewayAppSettingsProperty
class CfnSpace_KernelGatewayAppSettingsPropertyDef(BaseStruct):
    custom_images: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnSpace_CustomImagePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of custom SageMaker images that are configured to run as a KernelGateway app.\n')
    default_resource_spec: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnSpace_ResourceSpecPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app. .. epigraph:: The Amazon SageMaker Studio UI does not use the default instance type value set here. The default instance type set here is used when Apps are created using the AWS Command Line Interface or AWS CloudFormation and the instance type parameter value is not passed.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-space-kernelgatewayappsettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    kernel_gateway_app_settings_property = sagemaker.CfnSpace.KernelGatewayAppSettingsProperty(\n        custom_images=[sagemaker.CfnSpace.CustomImageProperty(\n            app_image_config_name="appImageConfigName",\n            image_name="imageName",\n\n            # the properties below are optional\n            image_version_number=123\n        )],\n        default_resource_spec=sagemaker.CfnSpace.ResourceSpecProperty(\n            instance_type="instanceType",\n            sage_maker_image_arn="sageMakerImageArn",\n            sage_maker_image_version_arn="sageMakerImageVersionArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['custom_images', 'default_resource_spec']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnSpace.KernelGatewayAppSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnSpace.ResourceSpecProperty
class CfnSpace_ResourceSpecPropertyDef(BaseStruct):
    instance_type: typing.Optional[str] = pydantic.Field(None, description='The instance type that the image version runs on. .. epigraph:: *JupyterServer apps* only support the ``system`` value. For *KernelGateway apps* , the ``system`` value is translated to ``ml.t3.medium`` . KernelGateway apps also support all other values for available instance types.\n')
    sage_maker_image_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the SageMaker image that the image version belongs to.\n')
    sage_maker_image_version_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the image version created on the instance.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-space-resourcespec.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    resource_spec_property = sagemaker.CfnSpace.ResourceSpecProperty(\n        instance_type="instanceType",\n        sage_maker_image_arn="sageMakerImageArn",\n        sage_maker_image_version_arn="sageMakerImageVersionArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_type', 'sage_maker_image_arn', 'sage_maker_image_version_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnSpace.ResourceSpecProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnSpace.SpaceSettingsProperty
class CfnSpace_SpaceSettingsPropertyDef(BaseStruct):
    jupyter_server_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnSpace_JupyterServerAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The JupyterServer app settings.\n')
    kernel_gateway_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnSpace_KernelGatewayAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The KernelGateway app settings.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-space-spacesettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    space_settings_property = sagemaker.CfnSpace.SpaceSettingsProperty(\n        jupyter_server_app_settings=sagemaker.CfnSpace.JupyterServerAppSettingsProperty(\n            default_resource_spec=sagemaker.CfnSpace.ResourceSpecProperty(\n                instance_type="instanceType",\n                sage_maker_image_arn="sageMakerImageArn",\n                sage_maker_image_version_arn="sageMakerImageVersionArn"\n            )\n        ),\n        kernel_gateway_app_settings=sagemaker.CfnSpace.KernelGatewayAppSettingsProperty(\n            custom_images=[sagemaker.CfnSpace.CustomImageProperty(\n                app_image_config_name="appImageConfigName",\n                image_name="imageName",\n\n                # the properties below are optional\n                image_version_number=123\n            )],\n            default_resource_spec=sagemaker.CfnSpace.ResourceSpecProperty(\n                instance_type="instanceType",\n                sage_maker_image_arn="sageMakerImageArn",\n                sage_maker_image_version_arn="sageMakerImageVersionArn"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['jupyter_server_app_settings', 'kernel_gateway_app_settings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnSpace.SpaceSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnUserProfile.CustomImageProperty
class CfnUserProfile_CustomImagePropertyDef(BaseStruct):
    app_image_config_name: str = pydantic.Field(..., description='The name of the AppImageConfig.\n')
    image_name: str = pydantic.Field(..., description='The name of the CustomImage. Must be unique to your account.\n')
    image_version_number: typing.Union[int, float, None] = pydantic.Field(None, description='The version number of the CustomImage.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-customimage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    custom_image_property = sagemaker.CfnUserProfile.CustomImageProperty(\n        app_image_config_name="appImageConfigName",\n        image_name="imageName",\n\n        # the properties below are optional\n        image_version_number=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['app_image_config_name', 'image_name', 'image_version_number']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnUserProfile.CustomImageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnUserProfile.JupyterServerAppSettingsProperty
class CfnUserProfile_JupyterServerAppSettingsPropertyDef(BaseStruct):
    default_resource_spec: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnUserProfile_ResourceSpecPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the JupyterServer app.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-jupyterserverappsettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    jupyter_server_app_settings_property = sagemaker.CfnUserProfile.JupyterServerAppSettingsProperty(\n        default_resource_spec=sagemaker.CfnUserProfile.ResourceSpecProperty(\n            instance_type="instanceType",\n            sage_maker_image_arn="sageMakerImageArn",\n            sage_maker_image_version_arn="sageMakerImageVersionArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['default_resource_spec']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnUserProfile.JupyterServerAppSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnUserProfile.KernelGatewayAppSettingsProperty
class CfnUserProfile_KernelGatewayAppSettingsPropertyDef(BaseStruct):
    custom_images: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnUserProfile_CustomImagePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of custom SageMaker images that are configured to run as a KernelGateway app.\n')
    default_resource_spec: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnUserProfile_ResourceSpecPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app. .. epigraph:: The Amazon SageMaker Studio UI does not use the default instance type value set here. The default instance type set here is used when Apps are created using the AWS Command Line Interface or AWS CloudFormation and the instance type parameter value is not passed.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-kernelgatewayappsettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    kernel_gateway_app_settings_property = sagemaker.CfnUserProfile.KernelGatewayAppSettingsProperty(\n        custom_images=[sagemaker.CfnUserProfile.CustomImageProperty(\n            app_image_config_name="appImageConfigName",\n            image_name="imageName",\n\n            # the properties below are optional\n            image_version_number=123\n        )],\n        default_resource_spec=sagemaker.CfnUserProfile.ResourceSpecProperty(\n            instance_type="instanceType",\n            sage_maker_image_arn="sageMakerImageArn",\n            sage_maker_image_version_arn="sageMakerImageVersionArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['custom_images', 'default_resource_spec']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnUserProfile.KernelGatewayAppSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnUserProfile.ResourceSpecProperty
class CfnUserProfile_ResourceSpecPropertyDef(BaseStruct):
    instance_type: typing.Optional[str] = pydantic.Field(None, description='The instance type that the image version runs on. .. epigraph:: *JupyterServer apps* only support the ``system`` value. For *KernelGateway apps* , the ``system`` value is translated to ``ml.t3.medium`` . KernelGateway apps also support all other values for available instance types.\n')
    sage_maker_image_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the SageMaker image that the image version belongs to.\n')
    sage_maker_image_version_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN of the image version created on the instance.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-resourcespec.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    resource_spec_property = sagemaker.CfnUserProfile.ResourceSpecProperty(\n        instance_type="instanceType",\n        sage_maker_image_arn="sageMakerImageArn",\n        sage_maker_image_version_arn="sageMakerImageVersionArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_type', 'sage_maker_image_arn', 'sage_maker_image_version_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnUserProfile.ResourceSpecProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnUserProfile.RStudioServerProAppSettingsProperty
class CfnUserProfile_RStudioServerProAppSettingsPropertyDef(BaseStruct):
    access_status: typing.Optional[str] = pydantic.Field(None, description='Indicates whether the current user has access to the ``RStudioServerPro`` app.\n')
    user_group: typing.Optional[str] = pydantic.Field(None, description='The level of permissions that the user has within the ``RStudioServerPro`` app. This value defaults to ``User``. The ``Admin`` value allows the user access to the RStudio Administrative Dashboard.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-rstudioserverproappsettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    r_studio_server_pro_app_settings_property = sagemaker.CfnUserProfile.RStudioServerProAppSettingsProperty(\n        access_status="accessStatus",\n        user_group="userGroup"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['access_status', 'user_group']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnUserProfile.RStudioServerProAppSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnUserProfile.SharingSettingsProperty
class CfnUserProfile_SharingSettingsPropertyDef(BaseStruct):
    notebook_output_option: typing.Optional[str] = pydantic.Field(None, description='Whether to include the notebook cell output when sharing the notebook. The default is ``Disabled`` .\n')
    s3_kms_key_id: typing.Optional[str] = pydantic.Field(None, description='When ``NotebookOutputOption`` is ``Allowed`` , the AWS Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.\n')
    s3_output_path: typing.Optional[str] = pydantic.Field(None, description='When ``NotebookOutputOption`` is ``Allowed`` , the Amazon S3 bucket used to store the shared notebook snapshots.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-sharingsettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    sharing_settings_property = sagemaker.CfnUserProfile.SharingSettingsProperty(\n        notebook_output_option="notebookOutputOption",\n        s3_kms_key_id="s3KmsKeyId",\n        s3_output_path="s3OutputPath"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['notebook_output_option', 's3_kms_key_id', 's3_output_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnUserProfile.SharingSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnUserProfile.UserSettingsProperty
class CfnUserProfile_UserSettingsPropertyDef(BaseStruct):
    execution_role: typing.Optional[str] = pydantic.Field(None, description='The execution role for the user.\n')
    jupyter_server_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnUserProfile_JupyterServerAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description="The Jupyter server's app settings.\n")
    kernel_gateway_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnUserProfile_KernelGatewayAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The kernel gateway app settings.\n')
    r_studio_server_pro_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnUserProfile_RStudioServerProAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A collection of settings that configure user interaction with the ``RStudioServerPro`` app.\n')
    security_groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The security groups for the Amazon Virtual Private Cloud (VPC) that Studio uses for communication. Optional when the ``CreateDomain.AppNetworkAccessType`` parameter is set to ``PublicInternetOnly`` . Required when the ``CreateDomain.AppNetworkAccessType`` parameter is set to ``VpcOnly`` , unless specified as part of the ``DefaultUserSettings`` for the domain. Amazon SageMaker adds a security group to allow NFS traffic from SageMaker Studio. Therefore, the number of security groups that you can specify is one less than the maximum number shown.\n')
    sharing_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnUserProfile_SharingSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies options for sharing SageMaker Studio notebooks.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-userprofile-usersettings.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    user_settings_property = sagemaker.CfnUserProfile.UserSettingsProperty(\n        execution_role="executionRole",\n        jupyter_server_app_settings=sagemaker.CfnUserProfile.JupyterServerAppSettingsProperty(\n            default_resource_spec=sagemaker.CfnUserProfile.ResourceSpecProperty(\n                instance_type="instanceType",\n                sage_maker_image_arn="sageMakerImageArn",\n                sage_maker_image_version_arn="sageMakerImageVersionArn"\n            )\n        ),\n        kernel_gateway_app_settings=sagemaker.CfnUserProfile.KernelGatewayAppSettingsProperty(\n            custom_images=[sagemaker.CfnUserProfile.CustomImageProperty(\n                app_image_config_name="appImageConfigName",\n                image_name="imageName",\n\n                # the properties below are optional\n                image_version_number=123\n            )],\n            default_resource_spec=sagemaker.CfnUserProfile.ResourceSpecProperty(\n                instance_type="instanceType",\n                sage_maker_image_arn="sageMakerImageArn",\n                sage_maker_image_version_arn="sageMakerImageVersionArn"\n            )\n        ),\n        r_studio_server_pro_app_settings=sagemaker.CfnUserProfile.RStudioServerProAppSettingsProperty(\n            access_status="accessStatus",\n            user_group="userGroup"\n        ),\n        security_groups=["securityGroups"],\n        sharing_settings=sagemaker.CfnUserProfile.SharingSettingsProperty(\n            notebook_output_option="notebookOutputOption",\n            s3_kms_key_id="s3KmsKeyId",\n            s3_output_path="s3OutputPath"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['execution_role', 'jupyter_server_app_settings', 'kernel_gateway_app_settings', 'r_studio_server_pro_app_settings', 'security_groups', 'sharing_settings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnUserProfile.UserSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnWorkteam.CognitoMemberDefinitionProperty
class CfnWorkteam_CognitoMemberDefinitionPropertyDef(BaseStruct):
    cognito_client_id: str = pydantic.Field(..., description='An identifier for an application client. You must create the app client ID using Amazon Cognito.\n')
    cognito_user_group: str = pydantic.Field(..., description='An identifier for a user group.\n')
    cognito_user_pool: str = pydantic.Field(..., description='An identifier for a user pool. The user pool must be in the same region as the service that you are calling.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-workteam-cognitomemberdefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cognito_member_definition_property = sagemaker.CfnWorkteam.CognitoMemberDefinitionProperty(\n        cognito_client_id="cognitoClientId",\n        cognito_user_group="cognitoUserGroup",\n        cognito_user_pool="cognitoUserPool"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cognito_client_id', 'cognito_user_group', 'cognito_user_pool']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnWorkteam.CognitoMemberDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnWorkteam.MemberDefinitionProperty
class CfnWorkteam_MemberDefinitionPropertyDef(BaseStruct):
    cognito_member_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnWorkteam_CognitoMemberDefinitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The Amazon Cognito user group that is part of the work team.\n')
    oidc_member_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnWorkteam_OidcMemberDefinitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A list user groups that exist in your OIDC Identity Provider (IdP). One to ten groups can be used to create a single private work team. When you add a user group to the list of ``Groups`` , you can add that user group to one or more private work teams. If you add a user group to a private work team, all workers in that user group are added to the work team.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-workteam-memberdefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    member_definition_property = sagemaker.CfnWorkteam.MemberDefinitionProperty(\n        cognito_member_definition=sagemaker.CfnWorkteam.CognitoMemberDefinitionProperty(\n            cognito_client_id="cognitoClientId",\n            cognito_user_group="cognitoUserGroup",\n            cognito_user_pool="cognitoUserPool"\n        ),\n        oidc_member_definition=sagemaker.CfnWorkteam.OidcMemberDefinitionProperty(\n            oidc_groups=["oidcGroups"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cognito_member_definition', 'oidc_member_definition']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnWorkteam.MemberDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnWorkteam.NotificationConfigurationProperty
class CfnWorkteam_NotificationConfigurationPropertyDef(BaseStruct):
    notification_topic_arn: str = pydantic.Field(..., description='The ARN for the Amazon SNS topic to which notifications should be published.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-workteam-notificationconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    notification_configuration_property = sagemaker.CfnWorkteam.NotificationConfigurationProperty(\n        notification_topic_arn="notificationTopicArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['notification_topic_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnWorkteam.NotificationConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnWorkteam.OidcMemberDefinitionProperty
class CfnWorkteam_OidcMemberDefinitionPropertyDef(BaseStruct):
    oidc_groups: typing.Sequence[str] = pydantic.Field(..., description='``CfnWorkteam.OidcMemberDefinitionProperty.OidcGroups``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-workteam-oidcmemberdefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    oidc_member_definition_property = sagemaker.CfnWorkteam.OidcMemberDefinitionProperty(\n        oidc_groups=["oidcGroups"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['oidc_groups']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnWorkteam.OidcMemberDefinitionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnApp
class CfnAppDef(BaseCfnResource):
    app_name: str = pydantic.Field(..., description='The name of the app.\n')
    app_type: str = pydantic.Field(..., description='The type of app. *Allowed Values* : ``JupyterServer | KernelGateway | RSessionGateway | RStudioServerPro | TensorBoard | Canvas``\n')
    domain_id: str = pydantic.Field(..., description='The domain ID.\n')
    user_profile_name: str = pydantic.Field(..., description='The user profile name.\n')
    resource_spec: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnApp_ResourceSpecPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the ARNs of a SageMaker image and SageMaker image version, and the instance type that the version runs on.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['app_name', 'app_type', 'domain_id', 'user_profile_name', 'resource_spec', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ResourceSpecProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnApp'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnAppDefConfig] = pydantic.Field(None)


class CfnAppDefConfig(pydantic.BaseModel):
    ResourceSpecProperty: typing.Optional[list[CfnAppDefResourcespecpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnAppDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnAppDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnAppDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnAppDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnAppDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnAppDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnAppDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnAppDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnAppDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnAppDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnAppDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnAppDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnAppDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnAppDefResourcespecpropertyParams(pydantic.BaseModel):
    instance_type: typing.Optional[str] = pydantic.Field(None, description='')
    sage_maker_image_arn: typing.Optional[str] = pydantic.Field(None, description='')
    sage_maker_image_version_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAppDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnAppDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAppDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnAppDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAppDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnAppDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnAppDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnAppDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnAppDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnAppDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAppDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnAppDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnAppDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAppDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnAppImageConfig
class CfnAppImageConfigDef(BaseCfnResource):
    app_image_config_name: str = pydantic.Field(..., description='The name of the AppImageConfig. Must be unique to your account.\n')
    kernel_gateway_image_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnAppImageConfig_KernelGatewayImageConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for the file system and kernels in the SageMaker image.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['app_image_config_name', 'kernel_gateway_image_config', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['FileSystemConfigProperty', 'KernelGatewayImageConfigProperty', 'KernelSpecProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnAppImageConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnAppImageConfigDefConfig] = pydantic.Field(None)


class CfnAppImageConfigDefConfig(pydantic.BaseModel):
    FileSystemConfigProperty: typing.Optional[list[CfnAppImageConfigDefFilesystemconfigpropertyParams]] = pydantic.Field(None, description='')
    KernelGatewayImageConfigProperty: typing.Optional[list[CfnAppImageConfigDefKernelgatewayimageconfigpropertyParams]] = pydantic.Field(None, description='')
    KernelSpecProperty: typing.Optional[list[CfnAppImageConfigDefKernelspecpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnAppImageConfigDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnAppImageConfigDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnAppImageConfigDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnAppImageConfigDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnAppImageConfigDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnAppImageConfigDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnAppImageConfigDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnAppImageConfigDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnAppImageConfigDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnAppImageConfigDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnAppImageConfigDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnAppImageConfigDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnAppImageConfigDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnAppImageConfigDefFilesystemconfigpropertyParams(pydantic.BaseModel):
    default_gid: typing.Union[int, float, None] = pydantic.Field(None, description='')
    default_uid: typing.Union[int, float, None] = pydantic.Field(None, description='')
    mount_path: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAppImageConfigDefKernelgatewayimageconfigpropertyParams(pydantic.BaseModel):
    kernel_specs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnAppImageConfig_KernelSpecPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    file_system_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnAppImageConfig_FileSystemConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnAppImageConfigDefKernelspecpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    display_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnAppImageConfigDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnAppImageConfigDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAppImageConfigDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnAppImageConfigDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAppImageConfigDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnAppImageConfigDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnAppImageConfigDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnAppImageConfigDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnAppImageConfigDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnAppImageConfigDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnAppImageConfigDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnAppImageConfigDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnAppImageConfigDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnAppImageConfigDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnCodeRepository
class CfnCodeRepositoryDef(BaseCfnResource):
    git_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnCodeRepository_GitConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Configuration details for the Git repository, including the URL where it is located and the ARN of the AWS Secrets Manager secret that contains the credentials used to access the repository.\n')
    code_repository_name: typing.Optional[str] = pydantic.Field(None, description='The name of the Git repository.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='List of tags for Code Repository.')
    _init_params: typing.ClassVar[list[str]] = ['git_config', 'code_repository_name', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['GitConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnCodeRepository'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnCodeRepositoryDefConfig] = pydantic.Field(None)


class CfnCodeRepositoryDefConfig(pydantic.BaseModel):
    GitConfigProperty: typing.Optional[list[CfnCodeRepositoryDefGitconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnCodeRepositoryDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnCodeRepositoryDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnCodeRepositoryDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnCodeRepositoryDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnCodeRepositoryDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnCodeRepositoryDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnCodeRepositoryDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnCodeRepositoryDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnCodeRepositoryDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnCodeRepositoryDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnCodeRepositoryDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnCodeRepositoryDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnCodeRepositoryDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnCodeRepositoryDefGitconfigpropertyParams(pydantic.BaseModel):
    repository_url: str = pydantic.Field(..., description='')
    branch: typing.Optional[str] = pydantic.Field(None, description='')
    secret_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnCodeRepositoryDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnCodeRepositoryDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCodeRepositoryDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnCodeRepositoryDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCodeRepositoryDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnCodeRepositoryDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnCodeRepositoryDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnCodeRepositoryDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnCodeRepositoryDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnCodeRepositoryDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnCodeRepositoryDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnCodeRepositoryDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnCodeRepositoryDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnCodeRepositoryDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition
class CfnDataQualityJobDefinitionDef(BaseCfnResource):
    data_quality_app_specification: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_DataQualityAppSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Specifies the container that runs the monitoring job.\n')
    data_quality_job_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_DataQualityJobInputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A list of inputs for the monitoring job. Currently endpoints are supported as monitoring inputs.\n')
    data_quality_job_output_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_MonitoringOutputConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The output configuration for monitoring jobs.\n')
    job_resources: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_MonitoringResourcesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Identifies the resources to deploy for a monitoring job.\n')
    role_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.\n')
    data_quality_baseline_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_DataQualityBaselineConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configures the constraints and baselines for the monitoring job.\n')
    endpoint_name: typing.Optional[str] = pydantic.Field(None, description='``AWS::SageMaker::DataQualityJobDefinition.EndpointName``.\n')
    job_definition_name: typing.Optional[str] = pydantic.Field(None, description='The name for the monitoring job definition.\n')
    network_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_NetworkConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies networking configuration for the monitoring job.\n')
    stopping_condition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_StoppingConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A time limit for how long the monitoring job is allowed to run before stopping.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['data_quality_app_specification', 'data_quality_job_input', 'data_quality_job_output_config', 'job_resources', 'role_arn', 'data_quality_baseline_config', 'endpoint_name', 'job_definition_name', 'network_config', 'stopping_condition', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['BatchTransformInputProperty', 'ClusterConfigProperty', 'ConstraintsResourceProperty', 'CsvProperty', 'DataQualityAppSpecificationProperty', 'DataQualityBaselineConfigProperty', 'DataQualityJobInputProperty', 'DatasetFormatProperty', 'EndpointInputProperty', 'JsonProperty', 'MonitoringOutputConfigProperty', 'MonitoringOutputProperty', 'MonitoringResourcesProperty', 'NetworkConfigProperty', 'S3OutputProperty', 'StatisticsResourceProperty', 'StoppingConditionProperty', 'VpcConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDataQualityJobDefinition'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnDataQualityJobDefinitionDefConfig] = pydantic.Field(None)


class CfnDataQualityJobDefinitionDefConfig(pydantic.BaseModel):
    BatchTransformInputProperty: typing.Optional[list[CfnDataQualityJobDefinitionDefBatchtransforminputpropertyParams]] = pydantic.Field(None, description='')
    ClusterConfigProperty: typing.Optional[list[CfnDataQualityJobDefinitionDefClusterconfigpropertyParams]] = pydantic.Field(None, description='')
    ConstraintsResourceProperty: typing.Optional[list[CfnDataQualityJobDefinitionDefConstraintsresourcepropertyParams]] = pydantic.Field(None, description='')
    CsvProperty: typing.Optional[list[CfnDataQualityJobDefinitionDefCsvpropertyParams]] = pydantic.Field(None, description='')
    DataQualityAppSpecificationProperty: typing.Optional[list[CfnDataQualityJobDefinitionDefDataqualityappspecificationpropertyParams]] = pydantic.Field(None, description='')
    DataQualityBaselineConfigProperty: typing.Optional[list[CfnDataQualityJobDefinitionDefDataqualitybaselineconfigpropertyParams]] = pydantic.Field(None, description='')
    DataQualityJobInputProperty: typing.Optional[list[CfnDataQualityJobDefinitionDefDataqualityjobinputpropertyParams]] = pydantic.Field(None, description='')
    DatasetFormatProperty: typing.Optional[list[CfnDataQualityJobDefinitionDefDatasetformatpropertyParams]] = pydantic.Field(None, description='')
    EndpointInputProperty: typing.Optional[list[CfnDataQualityJobDefinitionDefEndpointinputpropertyParams]] = pydantic.Field(None, description='')
    JsonProperty: typing.Optional[list[CfnDataQualityJobDefinitionDefJsonpropertyParams]] = pydantic.Field(None, description='')
    MonitoringOutputConfigProperty: typing.Optional[list[CfnDataQualityJobDefinitionDefMonitoringoutputconfigpropertyParams]] = pydantic.Field(None, description='')
    MonitoringOutputProperty: typing.Optional[list[CfnDataQualityJobDefinitionDefMonitoringoutputpropertyParams]] = pydantic.Field(None, description='')
    MonitoringResourcesProperty: typing.Optional[list[CfnDataQualityJobDefinitionDefMonitoringresourcespropertyParams]] = pydantic.Field(None, description='')
    NetworkConfigProperty: typing.Optional[list[CfnDataQualityJobDefinitionDefNetworkconfigpropertyParams]] = pydantic.Field(None, description='')
    S3OutputProperty: typing.Optional[list[CfnDataQualityJobDefinitionDefS3OutputpropertyParams]] = pydantic.Field(None, description='')
    StatisticsResourceProperty: typing.Optional[list[CfnDataQualityJobDefinitionDefStatisticsresourcepropertyParams]] = pydantic.Field(None, description='')
    StoppingConditionProperty: typing.Optional[list[CfnDataQualityJobDefinitionDefStoppingconditionpropertyParams]] = pydantic.Field(None, description='')
    VpcConfigProperty: typing.Optional[list[CfnDataQualityJobDefinitionDefVpcconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnDataQualityJobDefinitionDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnDataQualityJobDefinitionDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnDataQualityJobDefinitionDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnDataQualityJobDefinitionDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnDataQualityJobDefinitionDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnDataQualityJobDefinitionDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnDataQualityJobDefinitionDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnDataQualityJobDefinitionDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnDataQualityJobDefinitionDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnDataQualityJobDefinitionDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnDataQualityJobDefinitionDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnDataQualityJobDefinitionDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnDataQualityJobDefinitionDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnDataQualityJobDefinitionDefBatchtransforminputpropertyParams(pydantic.BaseModel):
    data_captured_destination_s3_uri: str = pydantic.Field(..., description='')
    dataset_format: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_DatasetFormatPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    local_path: str = pydantic.Field(..., description='')
    s3_data_distribution_type: typing.Optional[str] = pydantic.Field(None, description='')
    s3_input_mode: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataQualityJobDefinitionDefClusterconfigpropertyParams(pydantic.BaseModel):
    instance_count: typing.Union[int, float] = pydantic.Field(..., description='')
    instance_type: str = pydantic.Field(..., description='')
    volume_size_in_gb: typing.Union[int, float] = pydantic.Field(..., description='')
    volume_kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataQualityJobDefinitionDefConstraintsresourcepropertyParams(pydantic.BaseModel):
    s3_uri: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataQualityJobDefinitionDefCsvpropertyParams(pydantic.BaseModel):
    header: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnDataQualityJobDefinitionDefDataqualityappspecificationpropertyParams(pydantic.BaseModel):
    image_uri: str = pydantic.Field(..., description='')
    container_arguments: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    container_entrypoint: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    environment: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    post_analytics_processor_source_uri: typing.Optional[str] = pydantic.Field(None, description='')
    record_preprocessor_source_uri: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataQualityJobDefinitionDefDataqualitybaselineconfigpropertyParams(pydantic.BaseModel):
    baselining_job_name: typing.Optional[str] = pydantic.Field(None, description='')
    constraints_resource: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_ConstraintsResourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    statistics_resource: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_StatisticsResourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataQualityJobDefinitionDefDataqualityjobinputpropertyParams(pydantic.BaseModel):
    batch_transform_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_BatchTransformInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    endpoint_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_EndpointInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataQualityJobDefinitionDefDatasetformatpropertyParams(pydantic.BaseModel):
    csv: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_CsvPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    json_: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_JsonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='', alias='json')
    parquet: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnDataQualityJobDefinitionDefEndpointinputpropertyParams(pydantic.BaseModel):
    endpoint_name: str = pydantic.Field(..., description='')
    local_path: str = pydantic.Field(..., description='')
    s3_data_distribution_type: typing.Optional[str] = pydantic.Field(None, description='')
    s3_input_mode: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataQualityJobDefinitionDefJsonpropertyParams(pydantic.BaseModel):
    line: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnDataQualityJobDefinitionDefMonitoringoutputconfigpropertyParams(pydantic.BaseModel):
    monitoring_outputs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_MonitoringOutputPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataQualityJobDefinitionDefMonitoringoutputpropertyParams(pydantic.BaseModel):
    s3_output: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_S3OutputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnDataQualityJobDefinitionDefMonitoringresourcespropertyParams(pydantic.BaseModel):
    cluster_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_ClusterConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnDataQualityJobDefinitionDefNetworkconfigpropertyParams(pydantic.BaseModel):
    enable_inter_container_traffic_encryption: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    enable_network_isolation: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    vpc_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_VpcConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDataQualityJobDefinitionDefS3OutputpropertyParams(pydantic.BaseModel):
    local_path: str = pydantic.Field(..., description='')
    s3_uri: str = pydantic.Field(..., description='')
    s3_upload_mode: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataQualityJobDefinitionDefStatisticsresourcepropertyParams(pydantic.BaseModel):
    s3_uri: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDataQualityJobDefinitionDefStoppingconditionpropertyParams(pydantic.BaseModel):
    max_runtime_in_seconds: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnDataQualityJobDefinitionDefVpcconfigpropertyParams(pydantic.BaseModel):
    security_group_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    subnets: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnDataQualityJobDefinitionDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDataQualityJobDefinitionDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDataQualityJobDefinitionDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDataQualityJobDefinitionDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDataQualityJobDefinitionDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDataQualityJobDefinitionDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDataQualityJobDefinitionDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDataQualityJobDefinitionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDataQualityJobDefinitionDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDataQualityJobDefinitionDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDataQualityJobDefinitionDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnDataQualityJobDefinitionDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDataQualityJobDefinitionDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDataQualityJobDefinitionDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnDevice
class CfnDeviceDef(BaseCfnResource):
    device_fleet_name: str = pydantic.Field(..., description='The name of the fleet the device belongs to.\n')
    device: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDevice_DevicePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Edge device you want to create.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs that contain metadata to help you categorize and organize your devices. Each tag consists of a key and a value, both of which you define.')
    _init_params: typing.ClassVar[list[str]] = ['device_fleet_name', 'device', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['DeviceProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDevice'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnDeviceDefConfig] = pydantic.Field(None)


class CfnDeviceDefConfig(pydantic.BaseModel):
    DeviceProperty: typing.Optional[list[CfnDeviceDefDevicepropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnDeviceDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnDeviceDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnDeviceDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnDeviceDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnDeviceDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnDeviceDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnDeviceDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnDeviceDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnDeviceDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnDeviceDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnDeviceDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnDeviceDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnDeviceDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnDeviceDefDevicepropertyParams(pydantic.BaseModel):
    device_name: str = pydantic.Field(..., description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    iot_thing_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDeviceDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDeviceDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDeviceDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDeviceDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDeviceDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDeviceDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDeviceDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDeviceDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDeviceDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDeviceDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDeviceDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnDeviceDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDeviceDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDeviceDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnDeviceFleet
class CfnDeviceFleetDef(BaseCfnResource):
    device_fleet_name: str = pydantic.Field(..., description='Name of the device fleet.\n')
    output_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDeviceFleet_EdgeOutputConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The output configuration for storing sample data collected by the fleet.\n')
    role_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) that has access to AWS Internet of Things (IoT).\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the fleet.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs that contain metadata to help you categorize and organize your device fleets. Each tag consists of a key and a value, both of which you define.')
    _init_params: typing.ClassVar[list[str]] = ['device_fleet_name', 'output_config', 'role_arn', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['EdgeOutputConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDeviceFleet'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnDeviceFleetDefConfig] = pydantic.Field(None)


class CfnDeviceFleetDefConfig(pydantic.BaseModel):
    EdgeOutputConfigProperty: typing.Optional[list[CfnDeviceFleetDefEdgeoutputconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnDeviceFleetDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnDeviceFleetDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnDeviceFleetDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnDeviceFleetDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnDeviceFleetDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnDeviceFleetDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnDeviceFleetDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnDeviceFleetDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnDeviceFleetDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnDeviceFleetDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnDeviceFleetDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnDeviceFleetDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnDeviceFleetDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnDeviceFleetDefEdgeoutputconfigpropertyParams(pydantic.BaseModel):
    s3_output_location: str = pydantic.Field(..., description='')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDeviceFleetDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDeviceFleetDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDeviceFleetDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDeviceFleetDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDeviceFleetDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDeviceFleetDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDeviceFleetDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDeviceFleetDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDeviceFleetDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDeviceFleetDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDeviceFleetDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnDeviceFleetDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDeviceFleetDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDeviceFleetDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnDomain
class CfnDomainDef(BaseCfnResource):
    auth_mode: str = pydantic.Field(..., description='The mode of authentication that members use to access the Domain. *Valid Values* : ``SSO | IAM``\n')
    default_user_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_UserSettingsPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The default user settings.\n')
    domain_name: str = pydantic.Field(..., description='The domain name.\n')
    subnet_ids: typing.Sequence[str] = pydantic.Field(..., description='The VPC subnets that Studio uses for communication. *Length Constraints* : Maximum length of 32. *Array members* : Minimum number of 1 item. Maximum number of 16 items. *Pattern* : ``[-0-9a-zA-Z]+``\n')
    vpc_id: str = pydantic.Field(..., description='The ID of the Amazon Virtual Private Cloud (Amazon VPC) that Studio uses for communication. *Length Constraints* : Maximum length of 32. *Pattern* : ``[-0-9a-zA-Z]+``\n')
    app_network_access_type: typing.Optional[str] = pydantic.Field(None, description='Specifies the VPC used for non-EFS traffic. The default value is ``PublicInternetOnly`` . - ``PublicInternetOnly`` - Non-EFS traffic is through a VPC managed by Amazon SageMaker , which allows direct internet access - ``VpcOnly`` - All Studio traffic is through the specified VPC and subnets *Valid Values* : ``PublicInternetOnly | VpcOnly``\n')
    app_security_group_management: typing.Optional[str] = pydantic.Field(None, description='The entity that creates and manages the required security groups for inter-app communication in ``VpcOnly`` mode. Required when ``CreateDomain.AppNetworkAccessType`` is ``VpcOnly`` and ``DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn`` is provided. If setting up the domain for use with RStudio, this value must be set to ``Service`` . *Allowed Values* : ``Service`` | ``Customer``\n')
    default_space_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_DefaultSpaceSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::SageMaker::Domain.DefaultSpaceSettings``.\n')
    domain_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_DomainSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A collection of settings that apply to the ``SageMaker Domain`` . These settings are specified through the ``CreateDomain`` API call.\n')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='SageMaker uses AWS KMS to encrypt the EFS volume attached to the Domain with an AWS managed customer master key (CMK) by default. For more control, specify a customer managed CMK. *Length Constraints* : Maximum length of 2048. *Pattern* : ``.*``\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Tags to associated with the Domain. Each tag consists of a key and an optional value. Tag keys must be unique per resource. Tags are searchable using the Search API. Tags that you specify for the Domain are also added to all apps that are launched in the Domain. *Array members* : Minimum number of 0 items. Maximum number of 50 items.')
    _init_params: typing.ClassVar[list[str]] = ['auth_mode', 'default_user_settings', 'domain_name', 'subnet_ids', 'vpc_id', 'app_network_access_type', 'app_security_group_management', 'default_space_settings', 'domain_settings', 'kms_key_id', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['CustomImageProperty', 'DefaultSpaceSettingsProperty', 'DomainSettingsProperty', 'JupyterServerAppSettingsProperty', 'KernelGatewayAppSettingsProperty', 'RSessionAppSettingsProperty', 'RStudioServerProAppSettingsProperty', 'RStudioServerProDomainSettingsProperty', 'ResourceSpecProperty', 'SharingSettingsProperty', 'UserSettingsProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDomain'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnDomainDefConfig] = pydantic.Field(None)


class CfnDomainDefConfig(pydantic.BaseModel):
    CustomImageProperty: typing.Optional[list[CfnDomainDefCustomimagepropertyParams]] = pydantic.Field(None, description='')
    DefaultSpaceSettingsProperty: typing.Optional[list[CfnDomainDefDefaultspacesettingspropertyParams]] = pydantic.Field(None, description='')
    DomainSettingsProperty: typing.Optional[list[CfnDomainDefDomainsettingspropertyParams]] = pydantic.Field(None, description='')
    JupyterServerAppSettingsProperty: typing.Optional[list[CfnDomainDefJupyterserverappsettingspropertyParams]] = pydantic.Field(None, description='')
    KernelGatewayAppSettingsProperty: typing.Optional[list[CfnDomainDefKernelgatewayappsettingspropertyParams]] = pydantic.Field(None, description='')
    RSessionAppSettingsProperty: typing.Optional[list[CfnDomainDefRsessionappsettingspropertyParams]] = pydantic.Field(None, description='')
    RStudioServerProAppSettingsProperty: typing.Optional[list[CfnDomainDefRstudioserverproappsettingspropertyParams]] = pydantic.Field(None, description='')
    RStudioServerProDomainSettingsProperty: typing.Optional[list[CfnDomainDefRstudioserverprodomainsettingspropertyParams]] = pydantic.Field(None, description='')
    ResourceSpecProperty: typing.Optional[list[CfnDomainDefResourcespecpropertyParams]] = pydantic.Field(None, description='')
    SharingSettingsProperty: typing.Optional[list[CfnDomainDefSharingsettingspropertyParams]] = pydantic.Field(None, description='')
    UserSettingsProperty: typing.Optional[list[CfnDomainDefUsersettingspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnDomainDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnDomainDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnDomainDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnDomainDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnDomainDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnDomainDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnDomainDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnDomainDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnDomainDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnDomainDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnDomainDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnDomainDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnDomainDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnDomainDefCustomimagepropertyParams(pydantic.BaseModel):
    app_image_config_name: str = pydantic.Field(..., description='')
    image_name: str = pydantic.Field(..., description='')
    image_version_number: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnDomainDefDefaultspacesettingspropertyParams(pydantic.BaseModel):
    execution_role: str = pydantic.Field(..., description='')
    jupyter_server_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_JupyterServerAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    kernel_gateway_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_KernelGatewayAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    security_groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnDomainDefDomainsettingspropertyParams(pydantic.BaseModel):
    r_studio_server_pro_domain_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_RStudioServerProDomainSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    security_group_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnDomainDefJupyterserverappsettingspropertyParams(pydantic.BaseModel):
    default_resource_spec: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_ResourceSpecPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDomainDefKernelgatewayappsettingspropertyParams(pydantic.BaseModel):
    custom_images: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_CustomImagePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    default_resource_spec: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_ResourceSpecPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDomainDefRsessionappsettingspropertyParams(pydantic.BaseModel):
    custom_images: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_CustomImagePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    default_resource_spec: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_ResourceSpecPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDomainDefRstudioserverproappsettingspropertyParams(pydantic.BaseModel):
    access_status: typing.Optional[str] = pydantic.Field(None, description='')
    user_group: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDomainDefRstudioserverprodomainsettingspropertyParams(pydantic.BaseModel):
    domain_execution_role_arn: str = pydantic.Field(..., description='')
    default_resource_spec: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_ResourceSpecPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    r_studio_connect_url: typing.Optional[str] = pydantic.Field(None, description='')
    r_studio_package_manager_url: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDomainDefResourcespecpropertyParams(pydantic.BaseModel):
    instance_type: typing.Optional[str] = pydantic.Field(None, description='')
    lifecycle_config_arn: typing.Optional[str] = pydantic.Field(None, description='')
    sage_maker_image_arn: typing.Optional[str] = pydantic.Field(None, description='')
    sage_maker_image_version_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDomainDefSharingsettingspropertyParams(pydantic.BaseModel):
    notebook_output_option: typing.Optional[str] = pydantic.Field(None, description='')
    s3_kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    s3_output_path: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnDomainDefUsersettingspropertyParams(pydantic.BaseModel):
    execution_role: str = pydantic.Field(..., description='')
    jupyter_server_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_JupyterServerAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    kernel_gateway_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_KernelGatewayAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    r_session_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_RSessionAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    r_studio_server_pro_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_RStudioServerProAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    security_groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    sharing_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_SharingSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnDomainDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnDomainDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDomainDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnDomainDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDomainDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnDomainDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnDomainDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnDomainDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnDomainDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnDomainDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnDomainDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnDomainDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnDomainDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnDomainDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpoint
class CfnEndpointDef(BaseCfnResource):
    endpoint_config_name: str = pydantic.Field(..., description='The name of the `AWS::SageMaker::EndpointConfig <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html>`_ resource that specifies the configuration for the endpoint. For more information, see `CreateEndpointConfig <https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateEndpointConfig.html>`_ .\n')
    deployment_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpoint_DeploymentConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.\n')
    endpoint_name: typing.Optional[str] = pydantic.Field(None, description='The name of the endpoint.The name must be unique within an AWS Region in your AWS account. The name is case-insensitive in ``CreateEndpoint`` , but the case is preserved and must be matched in ` <https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_runtime_InvokeEndpoint.html>`_ .\n')
    exclude_retained_variant_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpoint_VariantPropertyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="When you are updating endpoint resources with `RetainAllVariantProperties <https://docs.aws.amazon.com/sagemaker/latest/dg/API_UpdateEndpoint.html#SageMaker-UpdateEndpoint-request-RetainAllVariantProperties>`_ whose value is set to ``true`` , ``ExcludeRetainedVariantProperties`` specifies the list of type `VariantProperty <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-variantproperty.html>`_ to override with the values provided by ``EndpointConfig`` . If you don't specify a value for ``ExcludeAllVariantProperties`` , no variant properties are overridden. Don't use this property when creating new endpoint resources or when ``RetainAllVariantProperties`` is set to ``false`` .\n")
    retain_all_variant_properties: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='When updating endpoint resources, enables or disables the retention of variant properties, such as the instance count or the variant weight. To retain the variant properties of an endpoint when updating it, set ``RetainAllVariantProperties`` to ``true`` . To use the variant properties specified in a new ``EndpointConfig`` call when updating an endpoint, set ``RetainAllVariantProperties`` to ``false`` . Use this property only when updating endpoint resources, not when creating new endpoint resources.\n')
    retain_deployment_config: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Specifies whether to reuse the last deployment configuration. The default value is false (the configuration is not reused).\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs to apply to this resource. For more information, see `Resource Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ and `Using Cost Allocation Tags <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what>`_ in the *AWS Billing and Cost Management User Guide* .')
    _init_params: typing.ClassVar[list[str]] = ['endpoint_config_name', 'deployment_config', 'endpoint_name', 'exclude_retained_variant_properties', 'retain_all_variant_properties', 'retain_deployment_config', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AlarmProperty', 'AutoRollbackConfigProperty', 'BlueGreenUpdatePolicyProperty', 'CapacitySizeProperty', 'DeploymentConfigProperty', 'TrafficRoutingConfigProperty', 'VariantPropertyProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpoint'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnEndpointDefConfig] = pydantic.Field(None)


class CfnEndpointDefConfig(pydantic.BaseModel):
    AlarmProperty: typing.Optional[list[CfnEndpointDefAlarmpropertyParams]] = pydantic.Field(None, description='')
    AutoRollbackConfigProperty: typing.Optional[list[CfnEndpointDefAutorollbackconfigpropertyParams]] = pydantic.Field(None, description='')
    BlueGreenUpdatePolicyProperty: typing.Optional[list[CfnEndpointDefBluegreenupdatepolicypropertyParams]] = pydantic.Field(None, description='')
    CapacitySizeProperty: typing.Optional[list[CfnEndpointDefCapacitysizepropertyParams]] = pydantic.Field(None, description='')
    DeploymentConfigProperty: typing.Optional[list[CfnEndpointDefDeploymentconfigpropertyParams]] = pydantic.Field(None, description='')
    TrafficRoutingConfigProperty: typing.Optional[list[CfnEndpointDefTrafficroutingconfigpropertyParams]] = pydantic.Field(None, description='')
    VariantPropertyProperty: typing.Optional[list[CfnEndpointDefVariantpropertypropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnEndpointDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnEndpointDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnEndpointDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnEndpointDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnEndpointDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnEndpointDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnEndpointDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnEndpointDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnEndpointDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnEndpointDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnEndpointDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnEndpointDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnEndpointDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnEndpointDefAlarmpropertyParams(pydantic.BaseModel):
    alarm_name: str = pydantic.Field(..., description='')
    ...

class CfnEndpointDefAutorollbackconfigpropertyParams(pydantic.BaseModel):
    alarms: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpoint_AlarmPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnEndpointDefBluegreenupdatepolicypropertyParams(pydantic.BaseModel):
    traffic_routing_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpoint_TrafficRoutingConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    maximum_execution_timeout_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    termination_wait_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnEndpointDefCapacitysizepropertyParams(pydantic.BaseModel):
    type: str = pydantic.Field(..., description='')
    value: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnEndpointDefDeploymentconfigpropertyParams(pydantic.BaseModel):
    blue_green_update_policy: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpoint_BlueGreenUpdatePolicyPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    auto_rollback_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpoint_AutoRollbackConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnEndpointDefTrafficroutingconfigpropertyParams(pydantic.BaseModel):
    type: str = pydantic.Field(..., description='')
    canary_size: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpoint_CapacitySizePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    linear_step_size: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpoint_CapacitySizePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    wait_interval_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnEndpointDefVariantpropertypropertyParams(pydantic.BaseModel):
    variant_property_type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEndpointDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnEndpointDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEndpointDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnEndpointDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEndpointDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnEndpointDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnEndpointDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnEndpointDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnEndpointDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnEndpointDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEndpointDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnEndpointDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnEndpointDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEndpointDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpointConfig
class CfnEndpointConfigDef(BaseCfnResource):
    production_variants: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_ProductionVariantPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='A list of ``ProductionVariant`` objects, one for each model that you want to host at this endpoint.\n')
    async_inference_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_AsyncInferenceConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies configuration for how an endpoint performs asynchronous inference.\n')
    data_capture_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_DataCaptureConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies how to capture endpoint data for model monitor. The data capture configuration applies to all production variants hosted at the endpoint.\n')
    endpoint_config_name: typing.Optional[str] = pydantic.Field(None, description='The name of the endpoint configuration.\n')
    explainer_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_ExplainerConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::SageMaker::EndpointConfig.ExplainerConfig``.\n')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description="The Amazon Resource Name (ARN) of an AWS Key Management Service key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the endpoint. - Key ID: ``1234abcd-12ab-34cd-56ef-1234567890ab`` - Key ARN: ``arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab`` - Alias name: ``alias/ExampleAlias`` - Alias name ARN: ``arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias`` The KMS key policy must grant permission to the IAM role that you specify in your ``CreateEndpoint`` , ``UpdateEndpoint`` requests. For more information, refer to the AWS Key Management Service section `Using Key Policies in AWS KMS <https://docs.aws.amazon.com//kms/latest/developerguide/key-policies.html>`_ .. epigraph:: Certain Nitro-based instances include local storage, dependent on the instance type. Local storage volumes are encrypted using a hardware module on the instance. You can't request a ``KmsKeyId`` when using an instance type with local storage. If any of the models that you specify in the ``ProductionVariants`` parameter use nitro-based instances with local storage, do not specify a value for the ``KmsKeyId`` parameter. If you specify a value for ``KmsKeyId`` when using any nitro-based instances with local storage, the call to ``CreateEndpointConfig`` fails. For a list of instance types that support local instance storage, see `Instance Store Volumes <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes>`_ . For more information about local instance storage encryption, see `SSD Instance Store Volumes <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html>`_ .\n")
    shadow_production_variants: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_ProductionVariantPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Array of ``ProductionVariant`` objects. There is one for each model that you want to host at this endpoint in shadow mode with production traffic replicated from the model specified on ``ProductionVariants`` . If you use this field, you can only specify one variant for ``ProductionVariants`` and one variant for ``ShadowProductionVariants`` .\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs to apply to this resource. For more information, see `Resource Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ and `Using Cost Allocation Tags <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['production_variants', 'async_inference_config', 'data_capture_config', 'endpoint_config_name', 'explainer_config', 'kms_key_id', 'shadow_production_variants', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AsyncInferenceClientConfigProperty', 'AsyncInferenceConfigProperty', 'AsyncInferenceNotificationConfigProperty', 'AsyncInferenceOutputConfigProperty', 'CaptureContentTypeHeaderProperty', 'CaptureOptionProperty', 'ClarifyExplainerConfigProperty', 'ClarifyInferenceConfigProperty', 'ClarifyShapBaselineConfigProperty', 'ClarifyShapConfigProperty', 'ClarifyTextConfigProperty', 'DataCaptureConfigProperty', 'ExplainerConfigProperty', 'ProductionVariantProperty', 'ServerlessConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpointConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnEndpointConfigDefConfig] = pydantic.Field(None)


class CfnEndpointConfigDefConfig(pydantic.BaseModel):
    AsyncInferenceClientConfigProperty: typing.Optional[list[CfnEndpointConfigDefAsyncinferenceclientconfigpropertyParams]] = pydantic.Field(None, description='')
    AsyncInferenceConfigProperty: typing.Optional[list[CfnEndpointConfigDefAsyncinferenceconfigpropertyParams]] = pydantic.Field(None, description='')
    AsyncInferenceNotificationConfigProperty: typing.Optional[list[CfnEndpointConfigDefAsyncinferencenotificationconfigpropertyParams]] = pydantic.Field(None, description='')
    AsyncInferenceOutputConfigProperty: typing.Optional[list[CfnEndpointConfigDefAsyncinferenceoutputconfigpropertyParams]] = pydantic.Field(None, description='')
    CaptureContentTypeHeaderProperty: typing.Optional[list[CfnEndpointConfigDefCapturecontenttypeheaderpropertyParams]] = pydantic.Field(None, description='')
    CaptureOptionProperty: typing.Optional[list[CfnEndpointConfigDefCaptureoptionpropertyParams]] = pydantic.Field(None, description='')
    ClarifyExplainerConfigProperty: typing.Optional[list[CfnEndpointConfigDefClarifyexplainerconfigpropertyParams]] = pydantic.Field(None, description='')
    ClarifyInferenceConfigProperty: typing.Optional[list[CfnEndpointConfigDefClarifyinferenceconfigpropertyParams]] = pydantic.Field(None, description='')
    ClarifyShapBaselineConfigProperty: typing.Optional[list[CfnEndpointConfigDefClarifyshapbaselineconfigpropertyParams]] = pydantic.Field(None, description='')
    ClarifyShapConfigProperty: typing.Optional[list[CfnEndpointConfigDefClarifyshapconfigpropertyParams]] = pydantic.Field(None, description='')
    ClarifyTextConfigProperty: typing.Optional[list[CfnEndpointConfigDefClarifytextconfigpropertyParams]] = pydantic.Field(None, description='')
    DataCaptureConfigProperty: typing.Optional[list[CfnEndpointConfigDefDatacaptureconfigpropertyParams]] = pydantic.Field(None, description='')
    ExplainerConfigProperty: typing.Optional[list[CfnEndpointConfigDefExplainerconfigpropertyParams]] = pydantic.Field(None, description='')
    ProductionVariantProperty: typing.Optional[list[CfnEndpointConfigDefProductionvariantpropertyParams]] = pydantic.Field(None, description='')
    ServerlessConfigProperty: typing.Optional[list[CfnEndpointConfigDefServerlessconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnEndpointConfigDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnEndpointConfigDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnEndpointConfigDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnEndpointConfigDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnEndpointConfigDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnEndpointConfigDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnEndpointConfigDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnEndpointConfigDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnEndpointConfigDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnEndpointConfigDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnEndpointConfigDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnEndpointConfigDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnEndpointConfigDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnEndpointConfigDefAsyncinferenceclientconfigpropertyParams(pydantic.BaseModel):
    max_concurrent_invocations_per_instance: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnEndpointConfigDefAsyncinferenceconfigpropertyParams(pydantic.BaseModel):
    output_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_AsyncInferenceOutputConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    client_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_AsyncInferenceClientConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnEndpointConfigDefAsyncinferencenotificationconfigpropertyParams(pydantic.BaseModel):
    error_topic: typing.Optional[str] = pydantic.Field(None, description='')
    include_inference_response_in: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    success_topic: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEndpointConfigDefAsyncinferenceoutputconfigpropertyParams(pydantic.BaseModel):
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    notification_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_AsyncInferenceNotificationConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    s3_failure_path: typing.Optional[str] = pydantic.Field(None, description='')
    s3_output_path: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEndpointConfigDefCapturecontenttypeheaderpropertyParams(pydantic.BaseModel):
    csv_content_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    json_content_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnEndpointConfigDefCaptureoptionpropertyParams(pydantic.BaseModel):
    capture_mode: str = pydantic.Field(..., description='')
    ...

class CfnEndpointConfigDefClarifyexplainerconfigpropertyParams(pydantic.BaseModel):
    shap_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_ClarifyShapConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    enable_explanations: typing.Optional[str] = pydantic.Field(None, description='')
    inference_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_ClarifyInferenceConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnEndpointConfigDefClarifyinferenceconfigpropertyParams(pydantic.BaseModel):
    content_template: typing.Optional[str] = pydantic.Field(None, description='')
    feature_headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    features_attribute: typing.Optional[str] = pydantic.Field(None, description='')
    feature_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    label_attribute: typing.Optional[str] = pydantic.Field(None, description='')
    label_headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    label_index: typing.Union[int, float, None] = pydantic.Field(None, description='')
    max_payload_in_mb: typing.Union[int, float, None] = pydantic.Field(None, description='')
    max_record_count: typing.Union[int, float, None] = pydantic.Field(None, description='')
    probability_attribute: typing.Optional[str] = pydantic.Field(None, description='')
    probability_index: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnEndpointConfigDefClarifyshapbaselineconfigpropertyParams(pydantic.BaseModel):
    mime_type: typing.Optional[str] = pydantic.Field(None, description='')
    shap_baseline: typing.Optional[str] = pydantic.Field(None, description='')
    shap_baseline_uri: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEndpointConfigDefClarifyshapconfigpropertyParams(pydantic.BaseModel):
    shap_baseline_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_ClarifyShapBaselineConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    number_of_samples: typing.Union[int, float, None] = pydantic.Field(None, description='')
    seed: typing.Union[int, float, None] = pydantic.Field(None, description='')
    text_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_ClarifyTextConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    use_logit: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnEndpointConfigDefClarifytextconfigpropertyParams(pydantic.BaseModel):
    granularity: str = pydantic.Field(..., description='')
    language: str = pydantic.Field(..., description='')
    ...

class CfnEndpointConfigDefDatacaptureconfigpropertyParams(pydantic.BaseModel):
    capture_options: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_CaptureOptionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    destination_s3_uri: str = pydantic.Field(..., description='')
    initial_sampling_percentage: typing.Union[int, float] = pydantic.Field(..., description='')
    capture_content_type_header: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_CaptureContentTypeHeaderPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    enable_capture: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnEndpointConfigDefExplainerconfigpropertyParams(pydantic.BaseModel):
    clarify_explainer_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_ClarifyExplainerConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnEndpointConfigDefProductionvariantpropertyParams(pydantic.BaseModel):
    initial_variant_weight: typing.Union[int, float] = pydantic.Field(..., description='')
    model_name: str = pydantic.Field(..., description='')
    variant_name: str = pydantic.Field(..., description='')
    accelerator_type: typing.Optional[str] = pydantic.Field(None, description='')
    container_startup_health_check_timeout_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    enable_ssm_access: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    initial_instance_count: typing.Union[int, float, None] = pydantic.Field(None, description='')
    instance_type: typing.Optional[str] = pydantic.Field(None, description='')
    model_data_download_timeout_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    serverless_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_ServerlessConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    volume_size_in_gb: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnEndpointConfigDefServerlessconfigpropertyParams(pydantic.BaseModel):
    max_concurrency: typing.Union[int, float] = pydantic.Field(..., description='')
    memory_size_in_mb: typing.Union[int, float] = pydantic.Field(..., description='')
    provisioned_concurrency: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnEndpointConfigDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnEndpointConfigDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEndpointConfigDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnEndpointConfigDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEndpointConfigDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnEndpointConfigDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnEndpointConfigDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnEndpointConfigDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnEndpointConfigDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnEndpointConfigDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnEndpointConfigDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnEndpointConfigDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnEndpointConfigDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnEndpointConfigDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnFeatureGroup
class CfnFeatureGroupDef(BaseCfnResource):
    event_time_feature_name: str = pydantic.Field(..., description='The name of the feature that stores the ``EventTime`` of a Record in a ``FeatureGroup`` . A ``EventTime`` is point in time when a new event occurs that corresponds to the creation or update of a ``Record`` in ``FeatureGroup`` . All ``Records`` in the ``FeatureGroup`` must have a corresponding ``EventTime`` .\n')
    feature_definitions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnFeatureGroup_FeatureDefinitionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='A list of ``Feature`` s. Each ``Feature`` must include a ``FeatureName`` and a ``FeatureType`` . Valid ``FeatureType`` s are ``Integral`` , ``Fractional`` and ``String`` . ``FeatureName`` s cannot be any of the following: ``is_deleted`` , ``write_time`` , ``api_invocation_time`` . You can create up to 2,500 ``FeatureDefinition`` s per ``FeatureGroup`` .\n')
    feature_group_name: str = pydantic.Field(..., description='The name of the ``FeatureGroup`` .\n')
    record_identifier_feature_name: str = pydantic.Field(..., description='The name of the ``Feature`` whose value uniquely identifies a ``Record`` defined in the ``FeatureGroup`` ``FeatureDefinitions`` .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A free form description of a ``FeatureGroup`` .\n')
    offline_store_config: typing.Any = pydantic.Field(None, description='The configuration of an ``OfflineStore`` .\n')
    online_store_config: typing.Any = pydantic.Field(None, description='The configuration of an ``OnlineStore`` .\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the IAM execution role used to create the feature group.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Tags used to define a ``FeatureGroup`` .')
    _init_params: typing.ClassVar[list[str]] = ['event_time_feature_name', 'feature_definitions', 'feature_group_name', 'record_identifier_feature_name', 'description', 'offline_store_config', 'online_store_config', 'role_arn', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['DataCatalogConfigProperty', 'FeatureDefinitionProperty', 'OfflineStoreConfigProperty', 'OnlineStoreConfigProperty', 'OnlineStoreSecurityConfigProperty', 'S3StorageConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnFeatureGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnFeatureGroupDefConfig] = pydantic.Field(None)


class CfnFeatureGroupDefConfig(pydantic.BaseModel):
    DataCatalogConfigProperty: typing.Optional[list[CfnFeatureGroupDefDatacatalogconfigpropertyParams]] = pydantic.Field(None, description='')
    FeatureDefinitionProperty: typing.Optional[list[CfnFeatureGroupDefFeaturedefinitionpropertyParams]] = pydantic.Field(None, description='')
    OfflineStoreConfigProperty: typing.Optional[list[CfnFeatureGroupDefOfflinestoreconfigpropertyParams]] = pydantic.Field(None, description='')
    OnlineStoreConfigProperty: typing.Optional[list[CfnFeatureGroupDefOnlinestoreconfigpropertyParams]] = pydantic.Field(None, description='')
    OnlineStoreSecurityConfigProperty: typing.Optional[list[CfnFeatureGroupDefOnlinestoresecurityconfigpropertyParams]] = pydantic.Field(None, description='')
    S3StorageConfigProperty: typing.Optional[list[CfnFeatureGroupDefS3StorageconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnFeatureGroupDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnFeatureGroupDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnFeatureGroupDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnFeatureGroupDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnFeatureGroupDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnFeatureGroupDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnFeatureGroupDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnFeatureGroupDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnFeatureGroupDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnFeatureGroupDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnFeatureGroupDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnFeatureGroupDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnFeatureGroupDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnFeatureGroupDefDatacatalogconfigpropertyParams(pydantic.BaseModel):
    catalog: str = pydantic.Field(..., description='')
    database: str = pydantic.Field(..., description='')
    table_name: str = pydantic.Field(..., description='')
    ...

class CfnFeatureGroupDefFeaturedefinitionpropertyParams(pydantic.BaseModel):
    feature_name: str = pydantic.Field(..., description='')
    feature_type: str = pydantic.Field(..., description='')
    ...

class CfnFeatureGroupDefOfflinestoreconfigpropertyParams(pydantic.BaseModel):
    s3_storage_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnFeatureGroup_S3StorageConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    data_catalog_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnFeatureGroup_DataCatalogConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    disable_glue_table_creation: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    table_format: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFeatureGroupDefOnlinestoreconfigpropertyParams(pydantic.BaseModel):
    enable_online_store: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    security_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnFeatureGroup_OnlineStoreSecurityConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFeatureGroupDefOnlinestoresecurityconfigpropertyParams(pydantic.BaseModel):
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFeatureGroupDefS3StorageconfigpropertyParams(pydantic.BaseModel):
    s3_uri: str = pydantic.Field(..., description='')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFeatureGroupDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnFeatureGroupDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFeatureGroupDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnFeatureGroupDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFeatureGroupDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnFeatureGroupDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnFeatureGroupDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnFeatureGroupDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnFeatureGroupDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnFeatureGroupDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFeatureGroupDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnFeatureGroupDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnFeatureGroupDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFeatureGroupDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnImage
class CfnImageDef(BaseCfnResource):
    image_name: str = pydantic.Field(..., description='The name of the Image. Must be unique by region in your account. *Length Constraints* : Minimum length of 1. Maximum length of 63. *Pattern* : ``^[a-zA-Z0-9]([-.]?[a-zA-Z0-9]){0,62}$``\n')
    image_role_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf. *Length Constraints* : Minimum length of 20. Maximum length of 2048. *Pattern* : ``^arn:aws[a-z\\-]*:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$``\n')
    image_description: typing.Optional[str] = pydantic.Field(None, description='The description of the image. *Length Constraints* : Minimum length of 1. Maximum length of 512. *Pattern* : ``.*``\n')
    image_display_name: typing.Optional[str] = pydantic.Field(None, description='The display name of the image. *Length Constraints* : Minimum length of 1. Maximum length of 128. *Pattern* : ``^\\S(.*\\S)?$``\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs to apply to this resource. *Array Members* : Minimum number of 0 items. Maximum number of 50 items.')
    _init_params: typing.ClassVar[list[str]] = ['image_name', 'image_role_arn', 'image_description', 'image_display_name', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnImage'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnImageDefConfig] = pydantic.Field(None)


class CfnImageDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnImageDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnImageDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnImageDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnImageDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnImageDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnImageDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnImageDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnImageDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnImageDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnImageDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnImageDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnImageDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnImageDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnImageDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnImageDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnImageDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnImageDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnImageDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnImageDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnImageDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnImageDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnImageDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnImageDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnImageDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnImageDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnImageDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnImageDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnImageVersion
class CfnImageVersionDef(BaseCfnResource):
    base_image: str = pydantic.Field(..., description='The container image that the SageMaker image version is based on. *Length Constraints* : Minimum length of 1. Maximum length of 255. *Pattern* : ``.*``\n')
    image_name: str = pydantic.Field(..., description='The name of the parent image. *Length Constraints* : Minimum length of 1. Maximum length of 63. *Pattern* : ``^[a-zA-Z0-9]([-.]?[a-zA-Z0-9]){0,62}$``')
    _init_params: typing.ClassVar[list[str]] = ['base_image', 'image_name']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnImageVersion'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnImageVersionDefConfig] = pydantic.Field(None)


class CfnImageVersionDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnImageVersionDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnImageVersionDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnImageVersionDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnImageVersionDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnImageVersionDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnImageVersionDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnImageVersionDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnImageVersionDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnImageVersionDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnImageVersionDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnImageVersionDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnImageVersionDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnImageVersionDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnImageVersionDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnImageVersionDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnImageVersionDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnImageVersionDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnImageVersionDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnImageVersionDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnImageVersionDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnImageVersionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnImageVersionDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnImageVersionDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnImageVersionDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnImageVersionDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnImageVersionDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnImageVersionDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnInferenceExperiment
class CfnInferenceExperimentDef(BaseCfnResource):
    endpoint_name: str = pydantic.Field(..., description='The name of the endpoint.\n')
    model_variants: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnInferenceExperiment_ModelVariantConfigPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='An array of ``ModelVariantConfigSummary`` objects. There is one for each variant in the inference experiment. Each ``ModelVariantConfigSummary`` object in the array describes the infrastructure configuration for deploying the corresponding variant.\n')
    name: str = pydantic.Field(..., description='The name of the inference experiment.\n')
    role_arn: str = pydantic.Field(..., description='The ARN of the IAM role that Amazon SageMaker can assume to access model artifacts and container images, and manage Amazon SageMaker Inference endpoints for model deployment.\n')
    type: str = pydantic.Field(..., description='The type of the inference experiment.\n')
    data_storage_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnInferenceExperiment_DataStorageConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The Amazon S3 location and configuration for storing inference request and response data.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the inference experiment.\n')
    desired_state: typing.Optional[str] = pydantic.Field(None, description='The desired state of the experiment after stopping. The possible states are the following:. - ``Completed`` : The experiment completed successfully - ``Cancelled`` : The experiment was canceled\n')
    kms_key: typing.Optional[str] = pydantic.Field(None, description='The AWS Key Management Service key that Amazon SageMaker uses to encrypt captured data at rest using Amazon S3 server-side encryption.\n')
    schedule: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnInferenceExperiment_InferenceExperimentSchedulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The duration for which the inference experiment ran or will run. The maximum duration that you can set for an inference experiment is 30 days.\n')
    shadow_mode_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnInferenceExperiment_ShadowModeConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration of ``ShadowMode`` inference experiment type, which shows the production variant that takes all the inference requests, and the shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant it also shows the percentage of requests that Amazon SageMaker replicates.\n')
    status_reason: typing.Optional[str] = pydantic.Field(None, description='The error message for the inference experiment status result.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['endpoint_name', 'model_variants', 'name', 'role_arn', 'type', 'data_storage_config', 'description', 'desired_state', 'kms_key', 'schedule', 'shadow_mode_config', 'status_reason', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['CaptureContentTypeHeaderProperty', 'DataStorageConfigProperty', 'EndpointMetadataProperty', 'InferenceExperimentScheduleProperty', 'ModelInfrastructureConfigProperty', 'ModelVariantConfigProperty', 'RealTimeInferenceConfigProperty', 'ShadowModeConfigProperty', 'ShadowModelVariantConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnInferenceExperiment'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnInferenceExperimentDefConfig] = pydantic.Field(None)


class CfnInferenceExperimentDefConfig(pydantic.BaseModel):
    CaptureContentTypeHeaderProperty: typing.Optional[list[CfnInferenceExperimentDefCapturecontenttypeheaderpropertyParams]] = pydantic.Field(None, description='')
    DataStorageConfigProperty: typing.Optional[list[CfnInferenceExperimentDefDatastorageconfigpropertyParams]] = pydantic.Field(None, description='')
    EndpointMetadataProperty: typing.Optional[list[CfnInferenceExperimentDefEndpointmetadatapropertyParams]] = pydantic.Field(None, description='')
    InferenceExperimentScheduleProperty: typing.Optional[list[CfnInferenceExperimentDefInferenceexperimentschedulepropertyParams]] = pydantic.Field(None, description='')
    ModelInfrastructureConfigProperty: typing.Optional[list[CfnInferenceExperimentDefModelinfrastructureconfigpropertyParams]] = pydantic.Field(None, description='')
    ModelVariantConfigProperty: typing.Optional[list[CfnInferenceExperimentDefModelvariantconfigpropertyParams]] = pydantic.Field(None, description='')
    RealTimeInferenceConfigProperty: typing.Optional[list[CfnInferenceExperimentDefRealtimeinferenceconfigpropertyParams]] = pydantic.Field(None, description='')
    ShadowModeConfigProperty: typing.Optional[list[CfnInferenceExperimentDefShadowmodeconfigpropertyParams]] = pydantic.Field(None, description='')
    ShadowModelVariantConfigProperty: typing.Optional[list[CfnInferenceExperimentDefShadowmodelvariantconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnInferenceExperimentDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnInferenceExperimentDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnInferenceExperimentDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnInferenceExperimentDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnInferenceExperimentDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnInferenceExperimentDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnInferenceExperimentDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnInferenceExperimentDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnInferenceExperimentDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnInferenceExperimentDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnInferenceExperimentDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnInferenceExperimentDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnInferenceExperimentDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnInferenceExperimentDefCapturecontenttypeheaderpropertyParams(pydantic.BaseModel):
    csv_content_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    json_content_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnInferenceExperimentDefDatastorageconfigpropertyParams(pydantic.BaseModel):
    destination: str = pydantic.Field(..., description='')
    content_type: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnInferenceExperiment_CaptureContentTypeHeaderPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    kms_key: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnInferenceExperimentDefEndpointmetadatapropertyParams(pydantic.BaseModel):
    endpoint_name: str = pydantic.Field(..., description='')
    endpoint_config_name: typing.Optional[str] = pydantic.Field(None, description='')
    endpoint_status: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnInferenceExperimentDefInferenceexperimentschedulepropertyParams(pydantic.BaseModel):
    end_time: typing.Optional[str] = pydantic.Field(None, description='')
    start_time: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnInferenceExperimentDefModelinfrastructureconfigpropertyParams(pydantic.BaseModel):
    infrastructure_type: str = pydantic.Field(..., description='')
    real_time_inference_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnInferenceExperiment_RealTimeInferenceConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnInferenceExperimentDefModelvariantconfigpropertyParams(pydantic.BaseModel):
    infrastructure_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnInferenceExperiment_ModelInfrastructureConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    model_name: str = pydantic.Field(..., description='')
    variant_name: str = pydantic.Field(..., description='')
    ...

class CfnInferenceExperimentDefRealtimeinferenceconfigpropertyParams(pydantic.BaseModel):
    instance_count: typing.Union[int, float] = pydantic.Field(..., description='')
    instance_type: str = pydantic.Field(..., description='')
    ...

class CfnInferenceExperimentDefShadowmodeconfigpropertyParams(pydantic.BaseModel):
    shadow_model_variants: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnInferenceExperiment_ShadowModelVariantConfigPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    source_model_variant_name: str = pydantic.Field(..., description='')
    ...

class CfnInferenceExperimentDefShadowmodelvariantconfigpropertyParams(pydantic.BaseModel):
    sampling_percentage: typing.Union[int, float] = pydantic.Field(..., description='')
    shadow_model_variant_name: str = pydantic.Field(..., description='')
    ...

class CfnInferenceExperimentDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnInferenceExperimentDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnInferenceExperimentDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnInferenceExperimentDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnInferenceExperimentDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnInferenceExperimentDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnInferenceExperimentDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnInferenceExperimentDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnInferenceExperimentDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnInferenceExperimentDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnInferenceExperimentDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnInferenceExperimentDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnInferenceExperimentDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnInferenceExperimentDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnModel
class CfnModelDef(BaseCfnResource):
    execution_role_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the IAM role that SageMaker can assume to access model artifacts and docker image for deployment on ML compute instances or for batch transform jobs. Deploying on ML compute instances is part of model hosting. For more information, see `SageMaker Roles <https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html>`_ . .. epigraph:: To be able to pass this role to SageMaker, the caller of this API must have the ``iam:PassRole`` permission.\n')
    containers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModel_ContainerDefinitionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Specifies the containers in the inference pipeline.\n')
    enable_network_isolation: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Isolates the model container. No inbound or outbound network calls can be made to or from the model container.\n')
    inference_execution_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModel_InferenceExecutionConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies details of how containers in a multi-container endpoint are called.\n')
    model_name: typing.Optional[str] = pydantic.Field(None, description='The name of the new model.\n')
    primary_container: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModel_ContainerDefinitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The location of the primary docker image containing inference code, associated artifacts, and custom environment map that the inference code uses when the model is deployed for predictions.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs to apply to this resource. For more information, see `Resource Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ and `Using Cost Allocation Tags <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what>`_ in the *AWS Billing and Cost Management User Guide* .\n')
    vpc_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModel_VpcConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A `VpcConfig <https://docs.aws.amazon.com/sagemaker/latest/dg/API_VpcConfig.html>`_ object that specifies the VPC that you want your model to connect to. Control access to and from your model container by configuring the VPC. ``VpcConfig`` is used in hosting services and in batch transform. For more information, see `Protect Endpoints by Using an Amazon Virtual Private Cloud <https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html>`_ and `Protect Data in Batch Transform Jobs by Using an Amazon Virtual Private Cloud <https://docs.aws.amazon.com/sagemaker/latest/dg/batch-vpc.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['execution_role_arn', 'containers', 'enable_network_isolation', 'inference_execution_config', 'model_name', 'primary_container', 'tags', 'vpc_config']
    _method_names: typing.ClassVar[list[str]] = ['ContainerDefinitionProperty', 'ImageConfigProperty', 'InferenceExecutionConfigProperty', 'MultiModelConfigProperty', 'RepositoryAuthConfigProperty', 'VpcConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModel'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnModelDefConfig] = pydantic.Field(None)


class CfnModelDefConfig(pydantic.BaseModel):
    ContainerDefinitionProperty: typing.Optional[list[CfnModelDefContainerdefinitionpropertyParams]] = pydantic.Field(None, description='')
    ImageConfigProperty: typing.Optional[list[CfnModelDefImageconfigpropertyParams]] = pydantic.Field(None, description='')
    InferenceExecutionConfigProperty: typing.Optional[list[CfnModelDefInferenceexecutionconfigpropertyParams]] = pydantic.Field(None, description='')
    MultiModelConfigProperty: typing.Optional[list[CfnModelDefMultimodelconfigpropertyParams]] = pydantic.Field(None, description='')
    RepositoryAuthConfigProperty: typing.Optional[list[CfnModelDefRepositoryauthconfigpropertyParams]] = pydantic.Field(None, description='')
    VpcConfigProperty: typing.Optional[list[CfnModelDefVpcconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnModelDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnModelDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnModelDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnModelDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnModelDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnModelDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnModelDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnModelDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnModelDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnModelDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnModelDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnModelDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnModelDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnModelDefContainerdefinitionpropertyParams(pydantic.BaseModel):
    container_hostname: typing.Optional[str] = pydantic.Field(None, description='')
    environment: typing.Any = pydantic.Field(None, description='')
    image: typing.Optional[str] = pydantic.Field(None, description='')
    image_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModel_ImageConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    inference_specification_name: typing.Optional[str] = pydantic.Field(None, description='')
    mode: typing.Optional[str] = pydantic.Field(None, description='')
    model_data_url: typing.Optional[str] = pydantic.Field(None, description='')
    model_package_name: typing.Optional[str] = pydantic.Field(None, description='')
    multi_model_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModel_MultiModelConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelDefImageconfigpropertyParams(pydantic.BaseModel):
    repository_access_mode: str = pydantic.Field(..., description='')
    repository_auth_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModel_RepositoryAuthConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelDefInferenceexecutionconfigpropertyParams(pydantic.BaseModel):
    mode: str = pydantic.Field(..., description='')
    ...

class CfnModelDefMultimodelconfigpropertyParams(pydantic.BaseModel):
    model_cache_setting: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelDefRepositoryauthconfigpropertyParams(pydantic.BaseModel):
    repository_credentials_provider_arn: str = pydantic.Field(..., description='')
    ...

class CfnModelDefVpcconfigpropertyParams(pydantic.BaseModel):
    security_group_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    subnets: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnModelDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnModelDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnModelDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnModelDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnModelDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnModelDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnModelDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnModelDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnModelDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnModelDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnModelDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnModelDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnModelDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnModelDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition
class CfnModelBiasJobDefinitionDef(BaseCfnResource):
    job_resources: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_MonitoringResourcesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Identifies the resources to deploy for a monitoring job.\n')
    model_bias_app_specification: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_ModelBiasAppSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Configures the model bias job to run a specified Docker container image.\n')
    model_bias_job_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_ModelBiasJobInputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Inputs for the model bias job.\n')
    model_bias_job_output_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_MonitoringOutputConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The output configuration for monitoring jobs.\n')
    role_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.\n')
    endpoint_name: typing.Optional[str] = pydantic.Field(None, description='``AWS::SageMaker::ModelBiasJobDefinition.EndpointName``.\n')
    job_definition_name: typing.Optional[str] = pydantic.Field(None, description='The name of the bias job definition. The name must be unique within an AWS Region in the AWS account.\n')
    model_bias_baseline_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_ModelBiasBaselineConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The baseline configuration for a model bias job.\n')
    network_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_NetworkConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Networking options for a model bias job.\n')
    stopping_condition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_StoppingConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A time limit for how long the monitoring job is allowed to run before stopping.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['job_resources', 'model_bias_app_specification', 'model_bias_job_input', 'model_bias_job_output_config', 'role_arn', 'endpoint_name', 'job_definition_name', 'model_bias_baseline_config', 'network_config', 'stopping_condition', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['BatchTransformInputProperty', 'ClusterConfigProperty', 'ConstraintsResourceProperty', 'CsvProperty', 'DatasetFormatProperty', 'EndpointInputProperty', 'JsonProperty', 'ModelBiasAppSpecificationProperty', 'ModelBiasBaselineConfigProperty', 'ModelBiasJobInputProperty', 'MonitoringGroundTruthS3InputProperty', 'MonitoringOutputConfigProperty', 'MonitoringOutputProperty', 'MonitoringResourcesProperty', 'NetworkConfigProperty', 'S3OutputProperty', 'StoppingConditionProperty', 'VpcConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelBiasJobDefinition'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnModelBiasJobDefinitionDefConfig] = pydantic.Field(None)


class CfnModelBiasJobDefinitionDefConfig(pydantic.BaseModel):
    BatchTransformInputProperty: typing.Optional[list[CfnModelBiasJobDefinitionDefBatchtransforminputpropertyParams]] = pydantic.Field(None, description='')
    ClusterConfigProperty: typing.Optional[list[CfnModelBiasJobDefinitionDefClusterconfigpropertyParams]] = pydantic.Field(None, description='')
    ConstraintsResourceProperty: typing.Optional[list[CfnModelBiasJobDefinitionDefConstraintsresourcepropertyParams]] = pydantic.Field(None, description='')
    CsvProperty: typing.Optional[list[CfnModelBiasJobDefinitionDefCsvpropertyParams]] = pydantic.Field(None, description='')
    DatasetFormatProperty: typing.Optional[list[CfnModelBiasJobDefinitionDefDatasetformatpropertyParams]] = pydantic.Field(None, description='')
    EndpointInputProperty: typing.Optional[list[CfnModelBiasJobDefinitionDefEndpointinputpropertyParams]] = pydantic.Field(None, description='')
    JsonProperty: typing.Optional[list[CfnModelBiasJobDefinitionDefJsonpropertyParams]] = pydantic.Field(None, description='')
    ModelBiasAppSpecificationProperty: typing.Optional[list[CfnModelBiasJobDefinitionDefModelbiasappspecificationpropertyParams]] = pydantic.Field(None, description='')
    ModelBiasBaselineConfigProperty: typing.Optional[list[CfnModelBiasJobDefinitionDefModelbiasbaselineconfigpropertyParams]] = pydantic.Field(None, description='')
    ModelBiasJobInputProperty: typing.Optional[list[CfnModelBiasJobDefinitionDefModelbiasjobinputpropertyParams]] = pydantic.Field(None, description='')
    MonitoringGroundTruthS3InputProperty: typing.Optional[list[CfnModelBiasJobDefinitionDefMonitoringgroundtruths3InputpropertyParams]] = pydantic.Field(None, description='')
    MonitoringOutputConfigProperty: typing.Optional[list[CfnModelBiasJobDefinitionDefMonitoringoutputconfigpropertyParams]] = pydantic.Field(None, description='')
    MonitoringOutputProperty: typing.Optional[list[CfnModelBiasJobDefinitionDefMonitoringoutputpropertyParams]] = pydantic.Field(None, description='')
    MonitoringResourcesProperty: typing.Optional[list[CfnModelBiasJobDefinitionDefMonitoringresourcespropertyParams]] = pydantic.Field(None, description='')
    NetworkConfigProperty: typing.Optional[list[CfnModelBiasJobDefinitionDefNetworkconfigpropertyParams]] = pydantic.Field(None, description='')
    S3OutputProperty: typing.Optional[list[CfnModelBiasJobDefinitionDefS3OutputpropertyParams]] = pydantic.Field(None, description='')
    StoppingConditionProperty: typing.Optional[list[CfnModelBiasJobDefinitionDefStoppingconditionpropertyParams]] = pydantic.Field(None, description='')
    VpcConfigProperty: typing.Optional[list[CfnModelBiasJobDefinitionDefVpcconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnModelBiasJobDefinitionDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnModelBiasJobDefinitionDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnModelBiasJobDefinitionDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnModelBiasJobDefinitionDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnModelBiasJobDefinitionDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnModelBiasJobDefinitionDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnModelBiasJobDefinitionDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnModelBiasJobDefinitionDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnModelBiasJobDefinitionDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnModelBiasJobDefinitionDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnModelBiasJobDefinitionDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnModelBiasJobDefinitionDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnModelBiasJobDefinitionDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnModelBiasJobDefinitionDefBatchtransforminputpropertyParams(pydantic.BaseModel):
    data_captured_destination_s3_uri: str = pydantic.Field(..., description='')
    dataset_format: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_DatasetFormatPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    local_path: str = pydantic.Field(..., description='')
    end_time_offset: typing.Optional[str] = pydantic.Field(None, description='')
    features_attribute: typing.Optional[str] = pydantic.Field(None, description='')
    inference_attribute: typing.Optional[str] = pydantic.Field(None, description='')
    probability_attribute: typing.Optional[str] = pydantic.Field(None, description='')
    probability_threshold_attribute: typing.Union[int, float, None] = pydantic.Field(None, description='')
    s3_data_distribution_type: typing.Optional[str] = pydantic.Field(None, description='')
    s3_input_mode: typing.Optional[str] = pydantic.Field(None, description='')
    start_time_offset: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelBiasJobDefinitionDefClusterconfigpropertyParams(pydantic.BaseModel):
    instance_count: typing.Union[int, float] = pydantic.Field(..., description='')
    instance_type: str = pydantic.Field(..., description='')
    volume_size_in_gb: typing.Union[int, float] = pydantic.Field(..., description='')
    volume_kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelBiasJobDefinitionDefConstraintsresourcepropertyParams(pydantic.BaseModel):
    s3_uri: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelBiasJobDefinitionDefCsvpropertyParams(pydantic.BaseModel):
    header: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnModelBiasJobDefinitionDefDatasetformatpropertyParams(pydantic.BaseModel):
    csv: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_CsvPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    json_: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_JsonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='', alias='json')
    parquet: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnModelBiasJobDefinitionDefEndpointinputpropertyParams(pydantic.BaseModel):
    endpoint_name: str = pydantic.Field(..., description='')
    local_path: str = pydantic.Field(..., description='')
    end_time_offset: typing.Optional[str] = pydantic.Field(None, description='')
    features_attribute: typing.Optional[str] = pydantic.Field(None, description='')
    inference_attribute: typing.Optional[str] = pydantic.Field(None, description='')
    probability_attribute: typing.Optional[str] = pydantic.Field(None, description='')
    probability_threshold_attribute: typing.Union[int, float, None] = pydantic.Field(None, description='')
    s3_data_distribution_type: typing.Optional[str] = pydantic.Field(None, description='')
    s3_input_mode: typing.Optional[str] = pydantic.Field(None, description='')
    start_time_offset: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelBiasJobDefinitionDefJsonpropertyParams(pydantic.BaseModel):
    line: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnModelBiasJobDefinitionDefModelbiasappspecificationpropertyParams(pydantic.BaseModel):
    config_uri: str = pydantic.Field(..., description='')
    image_uri: str = pydantic.Field(..., description='')
    environment: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    ...

class CfnModelBiasJobDefinitionDefModelbiasbaselineconfigpropertyParams(pydantic.BaseModel):
    baselining_job_name: typing.Optional[str] = pydantic.Field(None, description='')
    constraints_resource: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_ConstraintsResourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelBiasJobDefinitionDefModelbiasjobinputpropertyParams(pydantic.BaseModel):
    ground_truth_s3_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_MonitoringGroundTruthS3InputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    batch_transform_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_BatchTransformInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    endpoint_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_EndpointInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelBiasJobDefinitionDefMonitoringgroundtruths3InputpropertyParams(pydantic.BaseModel):
    s3_uri: str = pydantic.Field(..., description='')
    ...

class CfnModelBiasJobDefinitionDefMonitoringoutputconfigpropertyParams(pydantic.BaseModel):
    monitoring_outputs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_MonitoringOutputPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelBiasJobDefinitionDefMonitoringoutputpropertyParams(pydantic.BaseModel):
    s3_output: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_S3OutputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnModelBiasJobDefinitionDefMonitoringresourcespropertyParams(pydantic.BaseModel):
    cluster_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_ClusterConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnModelBiasJobDefinitionDefNetworkconfigpropertyParams(pydantic.BaseModel):
    enable_inter_container_traffic_encryption: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    enable_network_isolation: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    vpc_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_VpcConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelBiasJobDefinitionDefS3OutputpropertyParams(pydantic.BaseModel):
    local_path: str = pydantic.Field(..., description='')
    s3_uri: str = pydantic.Field(..., description='')
    s3_upload_mode: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelBiasJobDefinitionDefStoppingconditionpropertyParams(pydantic.BaseModel):
    max_runtime_in_seconds: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnModelBiasJobDefinitionDefVpcconfigpropertyParams(pydantic.BaseModel):
    security_group_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    subnets: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnModelBiasJobDefinitionDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnModelBiasJobDefinitionDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnModelBiasJobDefinitionDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnModelBiasJobDefinitionDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnModelBiasJobDefinitionDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnModelBiasJobDefinitionDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnModelBiasJobDefinitionDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnModelBiasJobDefinitionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnModelBiasJobDefinitionDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnModelBiasJobDefinitionDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnModelBiasJobDefinitionDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnModelBiasJobDefinitionDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnModelBiasJobDefinitionDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnModelBiasJobDefinitionDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCard
class CfnModelCardDef(BaseCfnResource):
    content: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_ContentPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The content of the model card. Content uses the `model card JSON schema <https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html#model-cards-json-schema>`_ .\n')
    model_card_name: str = pydantic.Field(..., description='The unique name of the model card.\n')
    model_card_status: str = pydantic.Field(..., description='The approval status of the model card within your organization. Different organizations might have different criteria for model card review and approval. - ``Draft`` : The model card is a work in progress. - ``PendingReview`` : The model card is pending review. - ``Approved`` : The model card is approved. - ``Archived`` : The model card is archived. No more updates should be made to the model card, but it can still be exported.\n')
    created_by: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_UserContextPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the user who created or modified one or more of the following:. - Experiment - Trial - Trial component - Lineage group - Project - Model Card\n')
    last_modified_by: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_UserContextPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::SageMaker::ModelCard.LastModifiedBy``.\n')
    security_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_SecurityConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The security configuration used to protect model card data.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Key-value pairs used to manage metadata for the model card.')
    _init_params: typing.ClassVar[list[str]] = ['content', 'model_card_name', 'model_card_status', 'created_by', 'last_modified_by', 'security_config', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AdditionalInformationProperty', 'BusinessDetailsProperty', 'ContainerProperty', 'ContentProperty', 'EvaluationDetailProperty', 'FunctionProperty', 'InferenceEnvironmentProperty', 'InferenceSpecificationProperty', 'IntendedUsesProperty', 'MetricDataItemsProperty', 'MetricGroupProperty', 'ModelOverviewProperty', 'ModelPackageCreatorProperty', 'ModelPackageDetailsProperty', 'ObjectiveFunctionProperty', 'SecurityConfigProperty', 'SourceAlgorithmProperty', 'TrainingDetailsProperty', 'TrainingEnvironmentProperty', 'TrainingHyperParameterProperty', 'TrainingJobDetailsProperty', 'TrainingMetricProperty', 'UserContextProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCard'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnModelCardDefConfig] = pydantic.Field(None)


class CfnModelCardDefConfig(pydantic.BaseModel):
    AdditionalInformationProperty: typing.Optional[list[CfnModelCardDefAdditionalinformationpropertyParams]] = pydantic.Field(None, description='')
    BusinessDetailsProperty: typing.Optional[list[CfnModelCardDefBusinessdetailspropertyParams]] = pydantic.Field(None, description='')
    ContainerProperty: typing.Optional[list[CfnModelCardDefContainerpropertyParams]] = pydantic.Field(None, description='')
    ContentProperty: typing.Optional[list[CfnModelCardDefContentpropertyParams]] = pydantic.Field(None, description='')
    EvaluationDetailProperty: typing.Optional[list[CfnModelCardDefEvaluationdetailpropertyParams]] = pydantic.Field(None, description='')
    FunctionProperty: typing.Optional[list[CfnModelCardDefFunctionpropertyParams]] = pydantic.Field(None, description='')
    InferenceEnvironmentProperty: typing.Optional[list[CfnModelCardDefInferenceenvironmentpropertyParams]] = pydantic.Field(None, description='')
    InferenceSpecificationProperty: typing.Optional[list[CfnModelCardDefInferencespecificationpropertyParams]] = pydantic.Field(None, description='')
    IntendedUsesProperty: typing.Optional[list[CfnModelCardDefIntendedusespropertyParams]] = pydantic.Field(None, description='')
    MetricDataItemsProperty: typing.Optional[list[CfnModelCardDefMetricdataitemspropertyParams]] = pydantic.Field(None, description='')
    MetricGroupProperty: typing.Optional[list[CfnModelCardDefMetricgrouppropertyParams]] = pydantic.Field(None, description='')
    ModelOverviewProperty: typing.Optional[list[CfnModelCardDefModeloverviewpropertyParams]] = pydantic.Field(None, description='')
    ModelPackageCreatorProperty: typing.Optional[list[CfnModelCardDefModelpackagecreatorpropertyParams]] = pydantic.Field(None, description='')
    ModelPackageDetailsProperty: typing.Optional[list[CfnModelCardDefModelpackagedetailspropertyParams]] = pydantic.Field(None, description='')
    ObjectiveFunctionProperty: typing.Optional[list[CfnModelCardDefObjectivefunctionpropertyParams]] = pydantic.Field(None, description='')
    SecurityConfigProperty: typing.Optional[list[CfnModelCardDefSecurityconfigpropertyParams]] = pydantic.Field(None, description='')
    SourceAlgorithmProperty: typing.Optional[list[CfnModelCardDefSourcealgorithmpropertyParams]] = pydantic.Field(None, description='')
    TrainingDetailsProperty: typing.Optional[list[CfnModelCardDefTrainingdetailspropertyParams]] = pydantic.Field(None, description='')
    TrainingEnvironmentProperty: typing.Optional[list[CfnModelCardDefTrainingenvironmentpropertyParams]] = pydantic.Field(None, description='')
    TrainingHyperParameterProperty: typing.Optional[list[CfnModelCardDefTraininghyperparameterpropertyParams]] = pydantic.Field(None, description='')
    TrainingJobDetailsProperty: typing.Optional[list[CfnModelCardDefTrainingjobdetailspropertyParams]] = pydantic.Field(None, description='')
    TrainingMetricProperty: typing.Optional[list[CfnModelCardDefTrainingmetricpropertyParams]] = pydantic.Field(None, description='')
    UserContextProperty: typing.Optional[list[CfnModelCardDefUsercontextpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnModelCardDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnModelCardDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnModelCardDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnModelCardDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnModelCardDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnModelCardDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnModelCardDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnModelCardDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnModelCardDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnModelCardDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnModelCardDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnModelCardDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnModelCardDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnModelCardDefAdditionalinformationpropertyParams(pydantic.BaseModel):
    caveats_and_recommendations: typing.Optional[str] = pydantic.Field(None, description='')
    custom_details: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    ethical_considerations: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelCardDefBusinessdetailspropertyParams(pydantic.BaseModel):
    business_problem: typing.Optional[str] = pydantic.Field(None, description='')
    business_stakeholders: typing.Optional[str] = pydantic.Field(None, description='')
    line_of_business: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelCardDefContainerpropertyParams(pydantic.BaseModel):
    image: str = pydantic.Field(..., description='')
    model_data_url: typing.Optional[str] = pydantic.Field(None, description='')
    nearest_model_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelCardDefContentpropertyParams(pydantic.BaseModel):
    additional_information: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_AdditionalInformationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    business_details: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_BusinessDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    evaluation_details: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_EvaluationDetailPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    intended_uses: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_IntendedUsesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    model_overview: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_ModelOverviewPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    model_package_details: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_ModelPackageDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    training_details: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_TrainingDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelCardDefEvaluationdetailpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    datasets: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    evaluation_job_arn: typing.Optional[str] = pydantic.Field(None, description='')
    evaluation_observation: typing.Optional[str] = pydantic.Field(None, description='')
    metadata: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    metric_groups: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_MetricGroupPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnModelCardDefFunctionpropertyParams(pydantic.BaseModel):
    condition: typing.Optional[str] = pydantic.Field(None, description='')
    facet: typing.Optional[str] = pydantic.Field(None, description='')
    function: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelCardDefInferenceenvironmentpropertyParams(pydantic.BaseModel):
    container_image: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnModelCardDefInferencespecificationpropertyParams(pydantic.BaseModel):
    containers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_ContainerPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnModelCardDefIntendedusespropertyParams(pydantic.BaseModel):
    explanations_for_risk_rating: typing.Optional[str] = pydantic.Field(None, description='')
    factors_affecting_model_efficiency: typing.Optional[str] = pydantic.Field(None, description='')
    intended_uses: typing.Optional[str] = pydantic.Field(None, description='')
    purpose_of_model: typing.Optional[str] = pydantic.Field(None, description='')
    risk_rating: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelCardDefMetricdataitemspropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    type: str = pydantic.Field(..., description='')
    value: typing.Any = pydantic.Field(..., description='')
    notes: typing.Optional[str] = pydantic.Field(None, description='')
    x_axis_name: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    y_axis_name: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnModelCardDefMetricgrouppropertyParams(pydantic.BaseModel):
    metric_data: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_MetricDataItemsPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    ...

class CfnModelCardDefModeloverviewpropertyParams(pydantic.BaseModel):
    algorithm_type: typing.Optional[str] = pydantic.Field(None, description='')
    inference_environment: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_InferenceEnvironmentPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    model_artifact: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    model_creator: typing.Optional[str] = pydantic.Field(None, description='')
    model_description: typing.Optional[str] = pydantic.Field(None, description='')
    model_id: typing.Optional[str] = pydantic.Field(None, description='')
    model_name: typing.Optional[str] = pydantic.Field(None, description='')
    model_owner: typing.Optional[str] = pydantic.Field(None, description='')
    model_version: typing.Union[int, float, None] = pydantic.Field(None, description='')
    problem_type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelCardDefModelpackagecreatorpropertyParams(pydantic.BaseModel):
    user_profile_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelCardDefModelpackagedetailspropertyParams(pydantic.BaseModel):
    approval_description: typing.Optional[str] = pydantic.Field(None, description='')
    created_by: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_ModelPackageCreatorPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    domain: typing.Optional[str] = pydantic.Field(None, description='')
    inference_specification: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_InferenceSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    model_approval_status: typing.Optional[str] = pydantic.Field(None, description='')
    model_package_arn: typing.Optional[str] = pydantic.Field(None, description='')
    model_package_description: typing.Optional[str] = pydantic.Field(None, description='')
    model_package_group_name: typing.Optional[str] = pydantic.Field(None, description='')
    model_package_name: typing.Optional[str] = pydantic.Field(None, description='')
    model_package_status: typing.Optional[str] = pydantic.Field(None, description='')
    model_package_version: typing.Union[int, float, None] = pydantic.Field(None, description='')
    source_algorithms: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_SourceAlgorithmPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    task: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelCardDefObjectivefunctionpropertyParams(pydantic.BaseModel):
    function: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_FunctionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    notes: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelCardDefSecurityconfigpropertyParams(pydantic.BaseModel):
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelCardDefSourcealgorithmpropertyParams(pydantic.BaseModel):
    algorithm_name: str = pydantic.Field(..., description='')
    model_data_url: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelCardDefTrainingdetailspropertyParams(pydantic.BaseModel):
    objective_function: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_ObjectiveFunctionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    training_job_details: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_TrainingJobDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    training_observations: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelCardDefTrainingenvironmentpropertyParams(pydantic.BaseModel):
    container_image: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnModelCardDefTraininghyperparameterpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnModelCardDefTrainingjobdetailspropertyParams(pydantic.BaseModel):
    hyper_parameters: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_TrainingHyperParameterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    training_arn: typing.Optional[str] = pydantic.Field(None, description='')
    training_datasets: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    training_environment: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_TrainingEnvironmentPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    training_metrics: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_TrainingMetricPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    user_provided_hyper_parameters: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_TrainingHyperParameterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    user_provided_training_metrics: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_TrainingMetricPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnModelCardDefTrainingmetricpropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    value: typing.Union[int, float] = pydantic.Field(..., description='')
    notes: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelCardDefUsercontextpropertyParams(pydantic.BaseModel):
    domain_id: typing.Optional[str] = pydantic.Field(None, description='')
    user_profile_arn: typing.Optional[str] = pydantic.Field(None, description='')
    user_profile_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelCardDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnModelCardDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnModelCardDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnModelCardDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnModelCardDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnModelCardDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnModelCardDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnModelCardDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnModelCardDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnModelCardDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnModelCardDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnModelCardDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnModelCardDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnModelCardDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition
class CfnModelExplainabilityJobDefinitionDef(BaseCfnResource):
    job_resources: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_MonitoringResourcesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Identifies the resources to deploy for a monitoring job.\n')
    model_explainability_app_specification: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_ModelExplainabilityAppSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Configures the model explainability job to run a specified Docker container image.\n')
    model_explainability_job_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_ModelExplainabilityJobInputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Inputs for the model explainability job.\n')
    model_explainability_job_output_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_MonitoringOutputConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The output configuration for monitoring jobs.\n')
    role_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.\n')
    endpoint_name: typing.Optional[str] = pydantic.Field(None, description='``AWS::SageMaker::ModelExplainabilityJobDefinition.EndpointName``.\n')
    job_definition_name: typing.Optional[str] = pydantic.Field(None, description='The name of the model explainability job definition. The name must be unique within an AWS Region in the AWS account.\n')
    model_explainability_baseline_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_ModelExplainabilityBaselineConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The baseline configuration for a model explainability job.\n')
    network_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_NetworkConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Networking options for a model explainability job.\n')
    stopping_condition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_StoppingConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A time limit for how long the monitoring job is allowed to run before stopping.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['job_resources', 'model_explainability_app_specification', 'model_explainability_job_input', 'model_explainability_job_output_config', 'role_arn', 'endpoint_name', 'job_definition_name', 'model_explainability_baseline_config', 'network_config', 'stopping_condition', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['BatchTransformInputProperty', 'ClusterConfigProperty', 'ConstraintsResourceProperty', 'CsvProperty', 'DatasetFormatProperty', 'EndpointInputProperty', 'JsonProperty', 'ModelExplainabilityAppSpecificationProperty', 'ModelExplainabilityBaselineConfigProperty', 'ModelExplainabilityJobInputProperty', 'MonitoringOutputConfigProperty', 'MonitoringOutputProperty', 'MonitoringResourcesProperty', 'NetworkConfigProperty', 'S3OutputProperty', 'StoppingConditionProperty', 'VpcConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinition'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnModelExplainabilityJobDefinitionDefConfig] = pydantic.Field(None)


class CfnModelExplainabilityJobDefinitionDefConfig(pydantic.BaseModel):
    BatchTransformInputProperty: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefBatchtransforminputpropertyParams]] = pydantic.Field(None, description='')
    ClusterConfigProperty: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefClusterconfigpropertyParams]] = pydantic.Field(None, description='')
    ConstraintsResourceProperty: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefConstraintsresourcepropertyParams]] = pydantic.Field(None, description='')
    CsvProperty: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefCsvpropertyParams]] = pydantic.Field(None, description='')
    DatasetFormatProperty: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefDatasetformatpropertyParams]] = pydantic.Field(None, description='')
    EndpointInputProperty: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefEndpointinputpropertyParams]] = pydantic.Field(None, description='')
    JsonProperty: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefJsonpropertyParams]] = pydantic.Field(None, description='')
    ModelExplainabilityAppSpecificationProperty: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefModelexplainabilityappspecificationpropertyParams]] = pydantic.Field(None, description='')
    ModelExplainabilityBaselineConfigProperty: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefModelexplainabilitybaselineconfigpropertyParams]] = pydantic.Field(None, description='')
    ModelExplainabilityJobInputProperty: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefModelexplainabilityjobinputpropertyParams]] = pydantic.Field(None, description='')
    MonitoringOutputConfigProperty: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefMonitoringoutputconfigpropertyParams]] = pydantic.Field(None, description='')
    MonitoringOutputProperty: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefMonitoringoutputpropertyParams]] = pydantic.Field(None, description='')
    MonitoringResourcesProperty: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefMonitoringresourcespropertyParams]] = pydantic.Field(None, description='')
    NetworkConfigProperty: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefNetworkconfigpropertyParams]] = pydantic.Field(None, description='')
    S3OutputProperty: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefS3OutputpropertyParams]] = pydantic.Field(None, description='')
    StoppingConditionProperty: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefStoppingconditionpropertyParams]] = pydantic.Field(None, description='')
    VpcConfigProperty: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefVpcconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnModelExplainabilityJobDefinitionDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnModelExplainabilityJobDefinitionDefBatchtransforminputpropertyParams(pydantic.BaseModel):
    data_captured_destination_s3_uri: str = pydantic.Field(..., description='')
    dataset_format: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_DatasetFormatPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    local_path: str = pydantic.Field(..., description='')
    features_attribute: typing.Optional[str] = pydantic.Field(None, description='')
    inference_attribute: typing.Optional[str] = pydantic.Field(None, description='')
    probability_attribute: typing.Optional[str] = pydantic.Field(None, description='')
    s3_data_distribution_type: typing.Optional[str] = pydantic.Field(None, description='')
    s3_input_mode: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelExplainabilityJobDefinitionDefClusterconfigpropertyParams(pydantic.BaseModel):
    instance_count: typing.Union[int, float] = pydantic.Field(..., description='')
    instance_type: str = pydantic.Field(..., description='')
    volume_size_in_gb: typing.Union[int, float] = pydantic.Field(..., description='')
    volume_kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelExplainabilityJobDefinitionDefConstraintsresourcepropertyParams(pydantic.BaseModel):
    s3_uri: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelExplainabilityJobDefinitionDefCsvpropertyParams(pydantic.BaseModel):
    header: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnModelExplainabilityJobDefinitionDefDatasetformatpropertyParams(pydantic.BaseModel):
    csv: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_CsvPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    json_: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_JsonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='', alias='json')
    parquet: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnModelExplainabilityJobDefinitionDefEndpointinputpropertyParams(pydantic.BaseModel):
    endpoint_name: str = pydantic.Field(..., description='')
    local_path: str = pydantic.Field(..., description='')
    features_attribute: typing.Optional[str] = pydantic.Field(None, description='')
    inference_attribute: typing.Optional[str] = pydantic.Field(None, description='')
    probability_attribute: typing.Optional[str] = pydantic.Field(None, description='')
    s3_data_distribution_type: typing.Optional[str] = pydantic.Field(None, description='')
    s3_input_mode: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelExplainabilityJobDefinitionDefJsonpropertyParams(pydantic.BaseModel):
    line: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnModelExplainabilityJobDefinitionDefModelexplainabilityappspecificationpropertyParams(pydantic.BaseModel):
    config_uri: str = pydantic.Field(..., description='')
    image_uri: str = pydantic.Field(..., description='')
    environment: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    ...

class CfnModelExplainabilityJobDefinitionDefModelexplainabilitybaselineconfigpropertyParams(pydantic.BaseModel):
    baselining_job_name: typing.Optional[str] = pydantic.Field(None, description='')
    constraints_resource: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_ConstraintsResourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelExplainabilityJobDefinitionDefModelexplainabilityjobinputpropertyParams(pydantic.BaseModel):
    batch_transform_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_BatchTransformInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    endpoint_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_EndpointInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelExplainabilityJobDefinitionDefMonitoringoutputconfigpropertyParams(pydantic.BaseModel):
    monitoring_outputs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_MonitoringOutputPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelExplainabilityJobDefinitionDefMonitoringoutputpropertyParams(pydantic.BaseModel):
    s3_output: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_S3OutputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnModelExplainabilityJobDefinitionDefMonitoringresourcespropertyParams(pydantic.BaseModel):
    cluster_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_ClusterConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnModelExplainabilityJobDefinitionDefNetworkconfigpropertyParams(pydantic.BaseModel):
    enable_inter_container_traffic_encryption: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    enable_network_isolation: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    vpc_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_VpcConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelExplainabilityJobDefinitionDefS3OutputpropertyParams(pydantic.BaseModel):
    local_path: str = pydantic.Field(..., description='')
    s3_uri: str = pydantic.Field(..., description='')
    s3_upload_mode: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelExplainabilityJobDefinitionDefStoppingconditionpropertyParams(pydantic.BaseModel):
    max_runtime_in_seconds: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnModelExplainabilityJobDefinitionDefVpcconfigpropertyParams(pydantic.BaseModel):
    security_group_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    subnets: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnModelExplainabilityJobDefinitionDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnModelExplainabilityJobDefinitionDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnModelExplainabilityJobDefinitionDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnModelExplainabilityJobDefinitionDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnModelExplainabilityJobDefinitionDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnModelExplainabilityJobDefinitionDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnModelExplainabilityJobDefinitionDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnModelExplainabilityJobDefinitionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnModelExplainabilityJobDefinitionDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnModelExplainabilityJobDefinitionDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnModelExplainabilityJobDefinitionDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnModelExplainabilityJobDefinitionDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnModelExplainabilityJobDefinitionDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnModelExplainabilityJobDefinitionDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackage
class CfnModelPackageDef(BaseCfnResource):
    additional_inference_specification_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_AdditionalInferenceSpecificationDefinitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A structure of additional Inference Specification. Additional Inference Specification specifies details about inference jobs that can be run with models based on this model package\n')
    additional_inference_specifications: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_AdditionalInferenceSpecificationDefinitionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An array of additional Inference Specification objects.\n')
    additional_inference_specifications_to_add: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_AdditionalInferenceSpecificationDefinitionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An array of additional Inference Specification objects to be added to the existing array. The total number of additional Inference Specification objects cannot exceed 15. Each additional Inference Specification object specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts.\n')
    approval_description: typing.Optional[str] = pydantic.Field(None, description='A description provided when the model approval is set.\n')
    certify_for_marketplace: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Whether the model package is to be certified to be listed on AWS Marketplace. For information about listing model packages on AWS Marketplace, see `List Your Algorithm or Model Package on AWS Marketplace <https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-mkt-list.html>`_ .\n')
    client_token: typing.Optional[str] = pydantic.Field(None, description='A unique token that guarantees that the call to this API is idempotent.\n')
    created_by: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_UserContextPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.\n')
    customer_metadata_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='The metadata properties for the model package.\n')
    domain: typing.Optional[str] = pydantic.Field(None, description='The machine learning domain of your model package and its components. Common machine learning domains include computer vision and natural language processing.\n')
    drift_check_baselines: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_DriftCheckBaselinesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Represents the drift check baselines that can be used when the model monitor is set using the model package.\n')
    environment: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='The environment variables to set in the Docker container. Each key and value in the ``Environment`` string to string map can have length of up to 1024. We support up to 16 entries in the map.\n')
    inference_specification: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_InferenceSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Defines how to perform inference generation after a training job is run.\n')
    last_modified_by: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_UserContextPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.\n')
    last_modified_time: typing.Optional[str] = pydantic.Field(None, description='The last time the model package was modified.\n')
    metadata_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetadataPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Metadata properties of the tracking entity, trial, or trial component.\n')
    model_approval_status: typing.Optional[str] = pydantic.Field(None, description='The approval status of the model. This can be one of the following values. - ``APPROVED`` - The model is approved - ``REJECTED`` - The model is rejected. - ``PENDING_MANUAL_APPROVAL`` - The model is waiting for manual approval.\n')
    model_metrics: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ModelMetricsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Metrics for the model.\n')
    model_package_description: typing.Optional[str] = pydantic.Field(None, description='The description of the model package.\n')
    model_package_group_name: typing.Optional[str] = pydantic.Field(None, description='The model group to which the model belongs.\n')
    model_package_name: typing.Optional[str] = pydantic.Field(None, description='The name of the model.\n')
    model_package_status_details: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ModelPackageStatusDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the validation and image scan statuses of the model package.\n')
    model_package_status_item: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ModelPackageStatusItemPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Represents the overall status of a model package.\n')
    model_package_version: typing.Union[int, float, None] = pydantic.Field(None, description='The version number of a versioned model.\n')
    sample_payload_url: typing.Optional[str] = pydantic.Field(None, description='The Amazon Simple Storage Service path where the sample payload are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).\n')
    source_algorithm_specification: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_SourceAlgorithmSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A list of algorithms that were used to create a model package.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of the tags associated with the model package. For more information, see `Tagging AWS resources <https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html>`_ in the *AWS General Reference Guide* .\n')
    task: typing.Optional[str] = pydantic.Field(None, description='The machine learning task your model package accomplishes. Common machine learning tasks include object detection and image classification.\n')
    validation_specification: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ValidationSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies batch transform jobs that SageMaker runs to validate your model package.')
    _init_params: typing.ClassVar[list[str]] = ['additional_inference_specification_definition', 'additional_inference_specifications', 'additional_inference_specifications_to_add', 'approval_description', 'certify_for_marketplace', 'client_token', 'created_by', 'customer_metadata_properties', 'domain', 'drift_check_baselines', 'environment', 'inference_specification', 'last_modified_by', 'last_modified_time', 'metadata_properties', 'model_approval_status', 'model_metrics', 'model_package_description', 'model_package_group_name', 'model_package_name', 'model_package_status_details', 'model_package_status_item', 'model_package_version', 'sample_payload_url', 'source_algorithm_specification', 'tags', 'task', 'validation_specification']
    _method_names: typing.ClassVar[list[str]] = ['AdditionalInferenceSpecificationDefinitionProperty', 'BiasProperty', 'DataSourceProperty', 'DriftCheckBaselinesProperty', 'DriftCheckBiasProperty', 'DriftCheckExplainabilityProperty', 'DriftCheckModelDataQualityProperty', 'DriftCheckModelQualityProperty', 'ExplainabilityProperty', 'FileSourceProperty', 'InferenceSpecificationProperty', 'MetadataPropertiesProperty', 'MetricsSourceProperty', 'ModelDataQualityProperty', 'ModelInputProperty', 'ModelMetricsProperty', 'ModelPackageContainerDefinitionProperty', 'ModelPackageStatusDetailsProperty', 'ModelPackageStatusItemProperty', 'ModelQualityProperty', 'S3DataSourceProperty', 'SourceAlgorithmProperty', 'SourceAlgorithmSpecificationProperty', 'TransformInputProperty', 'TransformJobDefinitionProperty', 'TransformOutputProperty', 'TransformResourcesProperty', 'UserContextProperty', 'ValidationProfileProperty', 'ValidationSpecificationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackage'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnModelPackageDefConfig] = pydantic.Field(None)


class CfnModelPackageDefConfig(pydantic.BaseModel):
    AdditionalInferenceSpecificationDefinitionProperty: typing.Optional[list[CfnModelPackageDefAdditionalinferencespecificationdefinitionpropertyParams]] = pydantic.Field(None, description='')
    BiasProperty: typing.Optional[list[CfnModelPackageDefBiaspropertyParams]] = pydantic.Field(None, description='')
    DataSourceProperty: typing.Optional[list[CfnModelPackageDefDatasourcepropertyParams]] = pydantic.Field(None, description='')
    DriftCheckBaselinesProperty: typing.Optional[list[CfnModelPackageDefDriftcheckbaselinespropertyParams]] = pydantic.Field(None, description='')
    DriftCheckBiasProperty: typing.Optional[list[CfnModelPackageDefDriftcheckbiaspropertyParams]] = pydantic.Field(None, description='')
    DriftCheckExplainabilityProperty: typing.Optional[list[CfnModelPackageDefDriftcheckexplainabilitypropertyParams]] = pydantic.Field(None, description='')
    DriftCheckModelDataQualityProperty: typing.Optional[list[CfnModelPackageDefDriftcheckmodeldataqualitypropertyParams]] = pydantic.Field(None, description='')
    DriftCheckModelQualityProperty: typing.Optional[list[CfnModelPackageDefDriftcheckmodelqualitypropertyParams]] = pydantic.Field(None, description='')
    ExplainabilityProperty: typing.Optional[list[CfnModelPackageDefExplainabilitypropertyParams]] = pydantic.Field(None, description='')
    FileSourceProperty: typing.Optional[list[CfnModelPackageDefFilesourcepropertyParams]] = pydantic.Field(None, description='')
    InferenceSpecificationProperty: typing.Optional[list[CfnModelPackageDefInferencespecificationpropertyParams]] = pydantic.Field(None, description='')
    MetadataPropertiesProperty: typing.Optional[list[CfnModelPackageDefMetadatapropertiespropertyParams]] = pydantic.Field(None, description='')
    MetricsSourceProperty: typing.Optional[list[CfnModelPackageDefMetricssourcepropertyParams]] = pydantic.Field(None, description='')
    ModelDataQualityProperty: typing.Optional[list[CfnModelPackageDefModeldataqualitypropertyParams]] = pydantic.Field(None, description='')
    ModelInputProperty: typing.Optional[list[CfnModelPackageDefModelinputpropertyParams]] = pydantic.Field(None, description='')
    ModelMetricsProperty: typing.Optional[list[CfnModelPackageDefModelmetricspropertyParams]] = pydantic.Field(None, description='')
    ModelPackageContainerDefinitionProperty: typing.Optional[list[CfnModelPackageDefModelpackagecontainerdefinitionpropertyParams]] = pydantic.Field(None, description='')
    ModelPackageStatusDetailsProperty: typing.Optional[list[CfnModelPackageDefModelpackagestatusdetailspropertyParams]] = pydantic.Field(None, description='')
    ModelPackageStatusItemProperty: typing.Optional[list[CfnModelPackageDefModelpackagestatusitempropertyParams]] = pydantic.Field(None, description='')
    ModelQualityProperty: typing.Optional[list[CfnModelPackageDefModelqualitypropertyParams]] = pydantic.Field(None, description='')
    S3DataSourceProperty: typing.Optional[list[CfnModelPackageDefS3DatasourcepropertyParams]] = pydantic.Field(None, description='')
    SourceAlgorithmProperty: typing.Optional[list[CfnModelPackageDefSourcealgorithmpropertyParams]] = pydantic.Field(None, description='')
    SourceAlgorithmSpecificationProperty: typing.Optional[list[CfnModelPackageDefSourcealgorithmspecificationpropertyParams]] = pydantic.Field(None, description='')
    TransformInputProperty: typing.Optional[list[CfnModelPackageDefTransforminputpropertyParams]] = pydantic.Field(None, description='')
    TransformJobDefinitionProperty: typing.Optional[list[CfnModelPackageDefTransformjobdefinitionpropertyParams]] = pydantic.Field(None, description='')
    TransformOutputProperty: typing.Optional[list[CfnModelPackageDefTransformoutputpropertyParams]] = pydantic.Field(None, description='')
    TransformResourcesProperty: typing.Optional[list[CfnModelPackageDefTransformresourcespropertyParams]] = pydantic.Field(None, description='')
    UserContextProperty: typing.Optional[list[CfnModelPackageDefUsercontextpropertyParams]] = pydantic.Field(None, description='')
    ValidationProfileProperty: typing.Optional[list[CfnModelPackageDefValidationprofilepropertyParams]] = pydantic.Field(None, description='')
    ValidationSpecificationProperty: typing.Optional[list[CfnModelPackageDefValidationspecificationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnModelPackageDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnModelPackageDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnModelPackageDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnModelPackageDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnModelPackageDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnModelPackageDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnModelPackageDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnModelPackageDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnModelPackageDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnModelPackageDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnModelPackageDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnModelPackageDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnModelPackageDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnModelPackageDefAdditionalinferencespecificationdefinitionpropertyParams(pydantic.BaseModel):
    containers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ModelPackageContainerDefinitionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    name: str = pydantic.Field(..., description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    supported_content_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    supported_realtime_inference_instance_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    supported_response_mime_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    supported_transform_instance_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefBiaspropertyParams(pydantic.BaseModel):
    post_training_report: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    pre_training_report: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    report: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefDatasourcepropertyParams(pydantic.BaseModel):
    s3_data_source: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_S3DataSourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnModelPackageDefDriftcheckbaselinespropertyParams(pydantic.BaseModel):
    bias: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_DriftCheckBiasPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    explainability: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_DriftCheckExplainabilityPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    model_data_quality: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_DriftCheckModelDataQualityPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    model_quality: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_DriftCheckModelQualityPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefDriftcheckbiaspropertyParams(pydantic.BaseModel):
    config_file: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_FileSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    post_training_constraints: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    pre_training_constraints: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefDriftcheckexplainabilitypropertyParams(pydantic.BaseModel):
    config_file: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_FileSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    constraints: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefDriftcheckmodeldataqualitypropertyParams(pydantic.BaseModel):
    constraints: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    statistics: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefDriftcheckmodelqualitypropertyParams(pydantic.BaseModel):
    constraints: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    statistics: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefExplainabilitypropertyParams(pydantic.BaseModel):
    report: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefFilesourcepropertyParams(pydantic.BaseModel):
    s3_uri: str = pydantic.Field(..., description='')
    content_digest: typing.Optional[str] = pydantic.Field(None, description='')
    content_type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefInferencespecificationpropertyParams(pydantic.BaseModel):
    containers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ModelPackageContainerDefinitionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    supported_content_types: typing.Sequence[str] = pydantic.Field(..., description='')
    supported_response_mime_types: typing.Sequence[str] = pydantic.Field(..., description='')
    supported_realtime_inference_instance_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    supported_transform_instance_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefMetadatapropertiespropertyParams(pydantic.BaseModel):
    commit_id: typing.Optional[str] = pydantic.Field(None, description='')
    generated_by: typing.Optional[str] = pydantic.Field(None, description='')
    project_id: typing.Optional[str] = pydantic.Field(None, description='')
    repository: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefMetricssourcepropertyParams(pydantic.BaseModel):
    content_type: str = pydantic.Field(..., description='')
    s3_uri: str = pydantic.Field(..., description='')
    content_digest: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefModeldataqualitypropertyParams(pydantic.BaseModel):
    constraints: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    statistics: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefModelinputpropertyParams(pydantic.BaseModel):
    data_input_config: str = pydantic.Field(..., description='')
    ...

class CfnModelPackageDefModelmetricspropertyParams(pydantic.BaseModel):
    bias: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_BiasPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    explainability: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ExplainabilityPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    model_data_quality: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ModelDataQualityPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    model_quality: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ModelQualityPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefModelpackagecontainerdefinitionpropertyParams(pydantic.BaseModel):
    image: str = pydantic.Field(..., description='')
    container_hostname: typing.Optional[str] = pydantic.Field(None, description='')
    environment: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    framework: typing.Optional[str] = pydantic.Field(None, description='')
    framework_version: typing.Optional[str] = pydantic.Field(None, description='')
    image_digest: typing.Optional[str] = pydantic.Field(None, description='')
    model_data_url: typing.Optional[str] = pydantic.Field(None, description='')
    model_input: typing.Any = pydantic.Field(None, description='')
    nearest_model_name: typing.Optional[str] = pydantic.Field(None, description='')
    product_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefModelpackagestatusdetailspropertyParams(pydantic.BaseModel):
    validation_statuses: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ModelPackageStatusItemPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    image_scan_statuses: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ModelPackageStatusItemPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefModelpackagestatusitempropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    status: str = pydantic.Field(..., description='')
    failure_reason: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefModelqualitypropertyParams(pydantic.BaseModel):
    constraints: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    statistics: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetricsSourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefS3DatasourcepropertyParams(pydantic.BaseModel):
    s3_data_type: str = pydantic.Field(..., description='')
    s3_uri: str = pydantic.Field(..., description='')
    ...

class CfnModelPackageDefSourcealgorithmpropertyParams(pydantic.BaseModel):
    algorithm_name: str = pydantic.Field(..., description='')
    model_data_url: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefSourcealgorithmspecificationpropertyParams(pydantic.BaseModel):
    source_algorithms: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_SourceAlgorithmPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnModelPackageDefTransforminputpropertyParams(pydantic.BaseModel):
    data_source: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_DataSourcePropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    compression_type: typing.Optional[str] = pydantic.Field(None, description='')
    content_type: typing.Optional[str] = pydantic.Field(None, description='')
    split_type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefTransformjobdefinitionpropertyParams(pydantic.BaseModel):
    transform_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_TransformInputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    transform_output: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_TransformOutputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    transform_resources: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_TransformResourcesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    batch_strategy: typing.Optional[str] = pydantic.Field(None, description='')
    environment: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    max_concurrent_transforms: typing.Union[int, float, None] = pydantic.Field(None, description='')
    max_payload_in_mb: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefTransformoutputpropertyParams(pydantic.BaseModel):
    s3_output_path: str = pydantic.Field(..., description='')
    accept: typing.Optional[str] = pydantic.Field(None, description='')
    assemble_with: typing.Optional[str] = pydantic.Field(None, description='')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefTransformresourcespropertyParams(pydantic.BaseModel):
    instance_count: typing.Union[int, float] = pydantic.Field(..., description='')
    instance_type: str = pydantic.Field(..., description='')
    volume_kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefUsercontextpropertyParams(pydantic.BaseModel):
    domain_id: typing.Optional[str] = pydantic.Field(None, description='')
    user_profile_arn: typing.Optional[str] = pydantic.Field(None, description='')
    user_profile_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelPackageDefValidationprofilepropertyParams(pydantic.BaseModel):
    profile_name: str = pydantic.Field(..., description='')
    transform_job_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_TransformJobDefinitionPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnModelPackageDefValidationspecificationpropertyParams(pydantic.BaseModel):
    validation_profiles: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ValidationProfilePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    validation_role: str = pydantic.Field(..., description='')
    ...

class CfnModelPackageDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnModelPackageDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnModelPackageDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnModelPackageDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnModelPackageDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnModelPackageDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnModelPackageDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnModelPackageDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnModelPackageDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnModelPackageDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnModelPackageDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnModelPackageDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnModelPackageDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnModelPackageDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackageGroup
class CfnModelPackageGroupDef(BaseCfnResource):
    model_package_group_name: str = pydantic.Field(..., description='The name of the model group.\n')
    model_package_group_description: typing.Optional[str] = pydantic.Field(None, description='The description for the model group.\n')
    model_package_group_policy: typing.Any = pydantic.Field(None, description='A resouce policy to control access to a model group. For information about resoure policies, see `Identity-based policies and resource-based policies <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html>`_ in the *AWS Identity and Access Management User Guide.* .\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['model_package_group_name', 'model_package_group_description', 'model_package_group_policy', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackageGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnModelPackageGroupDefConfig] = pydantic.Field(None)


class CfnModelPackageGroupDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[CfnModelPackageGroupDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnModelPackageGroupDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnModelPackageGroupDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnModelPackageGroupDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnModelPackageGroupDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnModelPackageGroupDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnModelPackageGroupDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnModelPackageGroupDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnModelPackageGroupDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnModelPackageGroupDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnModelPackageGroupDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnModelPackageGroupDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnModelPackageGroupDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnModelPackageGroupDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnModelPackageGroupDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnModelPackageGroupDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnModelPackageGroupDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnModelPackageGroupDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnModelPackageGroupDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnModelPackageGroupDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnModelPackageGroupDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnModelPackageGroupDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnModelPackageGroupDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnModelPackageGroupDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnModelPackageGroupDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnModelPackageGroupDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnModelPackageGroupDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition
class CfnModelQualityJobDefinitionDef(BaseCfnResource):
    job_resources: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_MonitoringResourcesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Identifies the resources to deploy for a monitoring job.\n')
    model_quality_app_specification: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_ModelQualityAppSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Container image configuration object for the monitoring job.\n')
    model_quality_job_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_ModelQualityJobInputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A list of the inputs that are monitored. Currently endpoints are supported.\n')
    model_quality_job_output_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_MonitoringOutputConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The output configuration for monitoring jobs.\n')
    role_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.\n')
    endpoint_name: typing.Optional[str] = pydantic.Field(None, description='``AWS::SageMaker::ModelQualityJobDefinition.EndpointName``.\n')
    job_definition_name: typing.Optional[str] = pydantic.Field(None, description='The name of the monitoring job definition.\n')
    model_quality_baseline_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_ModelQualityBaselineConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the constraints and baselines for the monitoring job.\n')
    network_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_NetworkConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the network configuration for the monitoring job.\n')
    stopping_condition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_StoppingConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A time limit for how long the monitoring job is allowed to run before stopping.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['job_resources', 'model_quality_app_specification', 'model_quality_job_input', 'model_quality_job_output_config', 'role_arn', 'endpoint_name', 'job_definition_name', 'model_quality_baseline_config', 'network_config', 'stopping_condition', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['BatchTransformInputProperty', 'ClusterConfigProperty', 'ConstraintsResourceProperty', 'CsvProperty', 'DatasetFormatProperty', 'EndpointInputProperty', 'JsonProperty', 'ModelQualityAppSpecificationProperty', 'ModelQualityBaselineConfigProperty', 'ModelQualityJobInputProperty', 'MonitoringGroundTruthS3InputProperty', 'MonitoringOutputConfigProperty', 'MonitoringOutputProperty', 'MonitoringResourcesProperty', 'NetworkConfigProperty', 'S3OutputProperty', 'StoppingConditionProperty', 'VpcConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelQualityJobDefinition'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnModelQualityJobDefinitionDefConfig] = pydantic.Field(None)


class CfnModelQualityJobDefinitionDefConfig(pydantic.BaseModel):
    BatchTransformInputProperty: typing.Optional[list[CfnModelQualityJobDefinitionDefBatchtransforminputpropertyParams]] = pydantic.Field(None, description='')
    ClusterConfigProperty: typing.Optional[list[CfnModelQualityJobDefinitionDefClusterconfigpropertyParams]] = pydantic.Field(None, description='')
    ConstraintsResourceProperty: typing.Optional[list[CfnModelQualityJobDefinitionDefConstraintsresourcepropertyParams]] = pydantic.Field(None, description='')
    CsvProperty: typing.Optional[list[CfnModelQualityJobDefinitionDefCsvpropertyParams]] = pydantic.Field(None, description='')
    DatasetFormatProperty: typing.Optional[list[CfnModelQualityJobDefinitionDefDatasetformatpropertyParams]] = pydantic.Field(None, description='')
    EndpointInputProperty: typing.Optional[list[CfnModelQualityJobDefinitionDefEndpointinputpropertyParams]] = pydantic.Field(None, description='')
    JsonProperty: typing.Optional[list[CfnModelQualityJobDefinitionDefJsonpropertyParams]] = pydantic.Field(None, description='')
    ModelQualityAppSpecificationProperty: typing.Optional[list[CfnModelQualityJobDefinitionDefModelqualityappspecificationpropertyParams]] = pydantic.Field(None, description='')
    ModelQualityBaselineConfigProperty: typing.Optional[list[CfnModelQualityJobDefinitionDefModelqualitybaselineconfigpropertyParams]] = pydantic.Field(None, description='')
    ModelQualityJobInputProperty: typing.Optional[list[CfnModelQualityJobDefinitionDefModelqualityjobinputpropertyParams]] = pydantic.Field(None, description='')
    MonitoringGroundTruthS3InputProperty: typing.Optional[list[CfnModelQualityJobDefinitionDefMonitoringgroundtruths3InputpropertyParams]] = pydantic.Field(None, description='')
    MonitoringOutputConfigProperty: typing.Optional[list[CfnModelQualityJobDefinitionDefMonitoringoutputconfigpropertyParams]] = pydantic.Field(None, description='')
    MonitoringOutputProperty: typing.Optional[list[CfnModelQualityJobDefinitionDefMonitoringoutputpropertyParams]] = pydantic.Field(None, description='')
    MonitoringResourcesProperty: typing.Optional[list[CfnModelQualityJobDefinitionDefMonitoringresourcespropertyParams]] = pydantic.Field(None, description='')
    NetworkConfigProperty: typing.Optional[list[CfnModelQualityJobDefinitionDefNetworkconfigpropertyParams]] = pydantic.Field(None, description='')
    S3OutputProperty: typing.Optional[list[CfnModelQualityJobDefinitionDefS3OutputpropertyParams]] = pydantic.Field(None, description='')
    StoppingConditionProperty: typing.Optional[list[CfnModelQualityJobDefinitionDefStoppingconditionpropertyParams]] = pydantic.Field(None, description='')
    VpcConfigProperty: typing.Optional[list[CfnModelQualityJobDefinitionDefVpcconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnModelQualityJobDefinitionDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnModelQualityJobDefinitionDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnModelQualityJobDefinitionDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnModelQualityJobDefinitionDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnModelQualityJobDefinitionDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnModelQualityJobDefinitionDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnModelQualityJobDefinitionDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnModelQualityJobDefinitionDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnModelQualityJobDefinitionDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnModelQualityJobDefinitionDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnModelQualityJobDefinitionDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnModelQualityJobDefinitionDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnModelQualityJobDefinitionDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnModelQualityJobDefinitionDefBatchtransforminputpropertyParams(pydantic.BaseModel):
    data_captured_destination_s3_uri: str = pydantic.Field(..., description='')
    dataset_format: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_DatasetFormatPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    local_path: str = pydantic.Field(..., description='')
    end_time_offset: typing.Optional[str] = pydantic.Field(None, description='')
    inference_attribute: typing.Optional[str] = pydantic.Field(None, description='')
    probability_attribute: typing.Optional[str] = pydantic.Field(None, description='')
    probability_threshold_attribute: typing.Union[int, float, None] = pydantic.Field(None, description='')
    s3_data_distribution_type: typing.Optional[str] = pydantic.Field(None, description='')
    s3_input_mode: typing.Optional[str] = pydantic.Field(None, description='')
    start_time_offset: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelQualityJobDefinitionDefClusterconfigpropertyParams(pydantic.BaseModel):
    instance_count: typing.Union[int, float] = pydantic.Field(..., description='')
    instance_type: str = pydantic.Field(..., description='')
    volume_size_in_gb: typing.Union[int, float] = pydantic.Field(..., description='')
    volume_kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelQualityJobDefinitionDefConstraintsresourcepropertyParams(pydantic.BaseModel):
    s3_uri: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelQualityJobDefinitionDefCsvpropertyParams(pydantic.BaseModel):
    header: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnModelQualityJobDefinitionDefDatasetformatpropertyParams(pydantic.BaseModel):
    csv: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_CsvPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    json_: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_JsonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='', alias='json')
    parquet: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnModelQualityJobDefinitionDefEndpointinputpropertyParams(pydantic.BaseModel):
    endpoint_name: str = pydantic.Field(..., description='')
    local_path: str = pydantic.Field(..., description='')
    end_time_offset: typing.Optional[str] = pydantic.Field(None, description='')
    inference_attribute: typing.Optional[str] = pydantic.Field(None, description='')
    probability_attribute: typing.Optional[str] = pydantic.Field(None, description='')
    probability_threshold_attribute: typing.Union[int, float, None] = pydantic.Field(None, description='')
    s3_data_distribution_type: typing.Optional[str] = pydantic.Field(None, description='')
    s3_input_mode: typing.Optional[str] = pydantic.Field(None, description='')
    start_time_offset: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelQualityJobDefinitionDefJsonpropertyParams(pydantic.BaseModel):
    line: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnModelQualityJobDefinitionDefModelqualityappspecificationpropertyParams(pydantic.BaseModel):
    image_uri: str = pydantic.Field(..., description='')
    problem_type: str = pydantic.Field(..., description='')
    container_arguments: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    container_entrypoint: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    environment: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    post_analytics_processor_source_uri: typing.Optional[str] = pydantic.Field(None, description='')
    record_preprocessor_source_uri: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelQualityJobDefinitionDefModelqualitybaselineconfigpropertyParams(pydantic.BaseModel):
    baselining_job_name: typing.Optional[str] = pydantic.Field(None, description='')
    constraints_resource: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_ConstraintsResourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelQualityJobDefinitionDefModelqualityjobinputpropertyParams(pydantic.BaseModel):
    ground_truth_s3_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_MonitoringGroundTruthS3InputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    batch_transform_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_BatchTransformInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    endpoint_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_EndpointInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelQualityJobDefinitionDefMonitoringgroundtruths3InputpropertyParams(pydantic.BaseModel):
    s3_uri: str = pydantic.Field(..., description='')
    ...

class CfnModelQualityJobDefinitionDefMonitoringoutputconfigpropertyParams(pydantic.BaseModel):
    monitoring_outputs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_MonitoringOutputPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelQualityJobDefinitionDefMonitoringoutputpropertyParams(pydantic.BaseModel):
    s3_output: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_S3OutputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnModelQualityJobDefinitionDefMonitoringresourcespropertyParams(pydantic.BaseModel):
    cluster_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_ClusterConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnModelQualityJobDefinitionDefNetworkconfigpropertyParams(pydantic.BaseModel):
    enable_inter_container_traffic_encryption: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    enable_network_isolation: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    vpc_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_VpcConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnModelQualityJobDefinitionDefS3OutputpropertyParams(pydantic.BaseModel):
    local_path: str = pydantic.Field(..., description='')
    s3_uri: str = pydantic.Field(..., description='')
    s3_upload_mode: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnModelQualityJobDefinitionDefStoppingconditionpropertyParams(pydantic.BaseModel):
    max_runtime_in_seconds: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnModelQualityJobDefinitionDefVpcconfigpropertyParams(pydantic.BaseModel):
    security_group_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    subnets: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnModelQualityJobDefinitionDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnModelQualityJobDefinitionDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnModelQualityJobDefinitionDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnModelQualityJobDefinitionDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnModelQualityJobDefinitionDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnModelQualityJobDefinitionDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnModelQualityJobDefinitionDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnModelQualityJobDefinitionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnModelQualityJobDefinitionDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnModelQualityJobDefinitionDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnModelQualityJobDefinitionDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnModelQualityJobDefinitionDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnModelQualityJobDefinitionDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnModelQualityJobDefinitionDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringSchedule
class CfnMonitoringScheduleDef(BaseCfnResource):
    monitoring_schedule_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_MonitoringScheduleConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The configuration object that specifies the monitoring schedule and defines the monitoring job.\n')
    monitoring_schedule_name: str = pydantic.Field(..., description='The name of the monitoring schedule.\n')
    endpoint_name: typing.Optional[str] = pydantic.Field(None, description='The name of the endpoint using the monitoring schedule.\n')
    failure_reason: typing.Optional[str] = pydantic.Field(None, description='Contains the reason a monitoring job failed, if it failed.\n')
    last_monitoring_execution_summary: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_MonitoringExecutionSummaryPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes metadata on the last execution to run, if there was one.\n')
    monitoring_schedule_status: typing.Optional[str] = pydantic.Field(None, description='The status of the monitoring schedule.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['monitoring_schedule_config', 'monitoring_schedule_name', 'endpoint_name', 'failure_reason', 'last_monitoring_execution_summary', 'monitoring_schedule_status', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['BaselineConfigProperty', 'BatchTransformInputProperty', 'ClusterConfigProperty', 'ConstraintsResourceProperty', 'CsvProperty', 'DatasetFormatProperty', 'EndpointInputProperty', 'JsonProperty', 'MonitoringAppSpecificationProperty', 'MonitoringExecutionSummaryProperty', 'MonitoringInputProperty', 'MonitoringJobDefinitionProperty', 'MonitoringOutputConfigProperty', 'MonitoringOutputProperty', 'MonitoringResourcesProperty', 'MonitoringScheduleConfigProperty', 'NetworkConfigProperty', 'S3OutputProperty', 'ScheduleConfigProperty', 'StatisticsResourceProperty', 'StoppingConditionProperty', 'VpcConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringSchedule'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnMonitoringScheduleDefConfig] = pydantic.Field(None)


class CfnMonitoringScheduleDefConfig(pydantic.BaseModel):
    BaselineConfigProperty: typing.Optional[list[CfnMonitoringScheduleDefBaselineconfigpropertyParams]] = pydantic.Field(None, description='')
    BatchTransformInputProperty: typing.Optional[list[CfnMonitoringScheduleDefBatchtransforminputpropertyParams]] = pydantic.Field(None, description='')
    ClusterConfigProperty: typing.Optional[list[CfnMonitoringScheduleDefClusterconfigpropertyParams]] = pydantic.Field(None, description='')
    ConstraintsResourceProperty: typing.Optional[list[CfnMonitoringScheduleDefConstraintsresourcepropertyParams]] = pydantic.Field(None, description='')
    CsvProperty: typing.Optional[list[CfnMonitoringScheduleDefCsvpropertyParams]] = pydantic.Field(None, description='')
    DatasetFormatProperty: typing.Optional[list[CfnMonitoringScheduleDefDatasetformatpropertyParams]] = pydantic.Field(None, description='')
    EndpointInputProperty: typing.Optional[list[CfnMonitoringScheduleDefEndpointinputpropertyParams]] = pydantic.Field(None, description='')
    JsonProperty: typing.Optional[list[CfnMonitoringScheduleDefJsonpropertyParams]] = pydantic.Field(None, description='')
    MonitoringAppSpecificationProperty: typing.Optional[list[CfnMonitoringScheduleDefMonitoringappspecificationpropertyParams]] = pydantic.Field(None, description='')
    MonitoringExecutionSummaryProperty: typing.Optional[list[CfnMonitoringScheduleDefMonitoringexecutionsummarypropertyParams]] = pydantic.Field(None, description='')
    MonitoringInputProperty: typing.Optional[list[CfnMonitoringScheduleDefMonitoringinputpropertyParams]] = pydantic.Field(None, description='')
    MonitoringJobDefinitionProperty: typing.Optional[list[CfnMonitoringScheduleDefMonitoringjobdefinitionpropertyParams]] = pydantic.Field(None, description='')
    MonitoringOutputConfigProperty: typing.Optional[list[CfnMonitoringScheduleDefMonitoringoutputconfigpropertyParams]] = pydantic.Field(None, description='')
    MonitoringOutputProperty: typing.Optional[list[CfnMonitoringScheduleDefMonitoringoutputpropertyParams]] = pydantic.Field(None, description='')
    MonitoringResourcesProperty: typing.Optional[list[CfnMonitoringScheduleDefMonitoringresourcespropertyParams]] = pydantic.Field(None, description='')
    MonitoringScheduleConfigProperty: typing.Optional[list[CfnMonitoringScheduleDefMonitoringscheduleconfigpropertyParams]] = pydantic.Field(None, description='')
    NetworkConfigProperty: typing.Optional[list[CfnMonitoringScheduleDefNetworkconfigpropertyParams]] = pydantic.Field(None, description='')
    S3OutputProperty: typing.Optional[list[CfnMonitoringScheduleDefS3OutputpropertyParams]] = pydantic.Field(None, description='')
    ScheduleConfigProperty: typing.Optional[list[CfnMonitoringScheduleDefScheduleconfigpropertyParams]] = pydantic.Field(None, description='')
    StatisticsResourceProperty: typing.Optional[list[CfnMonitoringScheduleDefStatisticsresourcepropertyParams]] = pydantic.Field(None, description='')
    StoppingConditionProperty: typing.Optional[list[CfnMonitoringScheduleDefStoppingconditionpropertyParams]] = pydantic.Field(None, description='')
    VpcConfigProperty: typing.Optional[list[CfnMonitoringScheduleDefVpcconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnMonitoringScheduleDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnMonitoringScheduleDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnMonitoringScheduleDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnMonitoringScheduleDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnMonitoringScheduleDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnMonitoringScheduleDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnMonitoringScheduleDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnMonitoringScheduleDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnMonitoringScheduleDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnMonitoringScheduleDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnMonitoringScheduleDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnMonitoringScheduleDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnMonitoringScheduleDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnMonitoringScheduleDefBaselineconfigpropertyParams(pydantic.BaseModel):
    constraints_resource: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_ConstraintsResourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    statistics_resource: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_StatisticsResourcePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnMonitoringScheduleDefBatchtransforminputpropertyParams(pydantic.BaseModel):
    data_captured_destination_s3_uri: str = pydantic.Field(..., description='')
    dataset_format: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_DatasetFormatPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    local_path: str = pydantic.Field(..., description='')
    s3_data_distribution_type: typing.Optional[str] = pydantic.Field(None, description='')
    s3_input_mode: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnMonitoringScheduleDefClusterconfigpropertyParams(pydantic.BaseModel):
    instance_count: typing.Union[int, float] = pydantic.Field(..., description='')
    instance_type: str = pydantic.Field(..., description='')
    volume_size_in_gb: typing.Union[int, float] = pydantic.Field(..., description='')
    volume_kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnMonitoringScheduleDefConstraintsresourcepropertyParams(pydantic.BaseModel):
    s3_uri: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnMonitoringScheduleDefCsvpropertyParams(pydantic.BaseModel):
    header: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnMonitoringScheduleDefDatasetformatpropertyParams(pydantic.BaseModel):
    csv: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_CsvPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    json_: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_JsonPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='', alias='json')
    parquet: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnMonitoringScheduleDefEndpointinputpropertyParams(pydantic.BaseModel):
    endpoint_name: str = pydantic.Field(..., description='')
    local_path: str = pydantic.Field(..., description='')
    s3_data_distribution_type: typing.Optional[str] = pydantic.Field(None, description='')
    s3_input_mode: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnMonitoringScheduleDefJsonpropertyParams(pydantic.BaseModel):
    line: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnMonitoringScheduleDefMonitoringappspecificationpropertyParams(pydantic.BaseModel):
    image_uri: str = pydantic.Field(..., description='')
    container_arguments: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    container_entrypoint: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    post_analytics_processor_source_uri: typing.Optional[str] = pydantic.Field(None, description='')
    record_preprocessor_source_uri: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnMonitoringScheduleDefMonitoringexecutionsummarypropertyParams(pydantic.BaseModel):
    creation_time: str = pydantic.Field(..., description='')
    last_modified_time: str = pydantic.Field(..., description='')
    monitoring_execution_status: str = pydantic.Field(..., description='')
    monitoring_schedule_name: str = pydantic.Field(..., description='')
    scheduled_time: str = pydantic.Field(..., description='')
    endpoint_name: typing.Optional[str] = pydantic.Field(None, description='')
    failure_reason: typing.Optional[str] = pydantic.Field(None, description='')
    processing_job_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnMonitoringScheduleDefMonitoringinputpropertyParams(pydantic.BaseModel):
    batch_transform_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_BatchTransformInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    endpoint_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_EndpointInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnMonitoringScheduleDefMonitoringjobdefinitionpropertyParams(pydantic.BaseModel):
    monitoring_app_specification: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_MonitoringAppSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    monitoring_inputs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_MonitoringInputPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    monitoring_output_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_MonitoringOutputConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    monitoring_resources: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_MonitoringResourcesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    role_arn: str = pydantic.Field(..., description='')
    baseline_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_BaselineConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    environment: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    network_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_NetworkConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    stopping_condition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_StoppingConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnMonitoringScheduleDefMonitoringoutputconfigpropertyParams(pydantic.BaseModel):
    monitoring_outputs: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_MonitoringOutputPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnMonitoringScheduleDefMonitoringoutputpropertyParams(pydantic.BaseModel):
    s3_output: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_S3OutputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnMonitoringScheduleDefMonitoringresourcespropertyParams(pydantic.BaseModel):
    cluster_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_ClusterConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnMonitoringScheduleDefMonitoringscheduleconfigpropertyParams(pydantic.BaseModel):
    monitoring_job_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_MonitoringJobDefinitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    monitoring_job_definition_name: typing.Optional[str] = pydantic.Field(None, description='')
    monitoring_type: typing.Optional[str] = pydantic.Field(None, description='')
    schedule_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_ScheduleConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnMonitoringScheduleDefNetworkconfigpropertyParams(pydantic.BaseModel):
    enable_inter_container_traffic_encryption: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    enable_network_isolation: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    vpc_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_VpcConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnMonitoringScheduleDefS3OutputpropertyParams(pydantic.BaseModel):
    local_path: str = pydantic.Field(..., description='')
    s3_uri: str = pydantic.Field(..., description='')
    s3_upload_mode: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnMonitoringScheduleDefScheduleconfigpropertyParams(pydantic.BaseModel):
    schedule_expression: str = pydantic.Field(..., description='')
    ...

class CfnMonitoringScheduleDefStatisticsresourcepropertyParams(pydantic.BaseModel):
    s3_uri: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnMonitoringScheduleDefStoppingconditionpropertyParams(pydantic.BaseModel):
    max_runtime_in_seconds: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnMonitoringScheduleDefVpcconfigpropertyParams(pydantic.BaseModel):
    security_group_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    subnets: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnMonitoringScheduleDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnMonitoringScheduleDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnMonitoringScheduleDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnMonitoringScheduleDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnMonitoringScheduleDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnMonitoringScheduleDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnMonitoringScheduleDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnMonitoringScheduleDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnMonitoringScheduleDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnMonitoringScheduleDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnMonitoringScheduleDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnMonitoringScheduleDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnMonitoringScheduleDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnMonitoringScheduleDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnNotebookInstance
class CfnNotebookInstanceDef(BaseCfnResource):
    instance_type: str = pydantic.Field(..., description='The type of ML compute instance to launch for the notebook instance. .. epigraph:: Expect some interruption of service if this parameter is changed as CloudFormation stops a notebook instance and starts it up again to update it.\n')
    role_arn: str = pydantic.Field(..., description='When you send any requests to AWS resources from the notebook instance, SageMaker assumes this role to perform tasks on your behalf. You must grant this role necessary permissions so SageMaker can perform these tasks. The policy must allow the SageMaker service principal (sagemaker.amazonaws.com) permissions to assume this role. For more information, see `SageMaker Roles <https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html>`_ . .. epigraph:: To be able to pass this role to SageMaker, the caller of this API must have the ``iam:PassRole`` permission.\n')
    accelerator_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of Amazon Elastic Inference (EI) instance types to associate with the notebook instance. Currently, only one instance type can be associated with a notebook instance. For more information, see `Using Elastic Inference in Amazon SageMaker <https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html>`_ . *Valid Values:* ``ml.eia1.medium | ml.eia1.large | ml.eia1.xlarge | ml.eia2.medium | ml.eia2.large | ml.eia2.xlarge`` .\n')
    additional_code_repositories: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='An array of up to three Git repositories associated with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in `AWS CodeCommit <https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html>`_ or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see `Associating Git Repositories with SageMaker Notebook Instances <https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html>`_ .\n')
    default_code_repository: typing.Optional[str] = pydantic.Field(None, description='The Git repository associated with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in `AWS CodeCommit <https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html>`_ or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see `Associating Git Repositories with SageMaker Notebook Instances <https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html>`_ .\n')
    direct_internet_access: typing.Optional[str] = pydantic.Field(None, description='Sets whether SageMaker provides internet access to the notebook instance. If you set this to ``Disabled`` this notebook instance is able to access resources only in your VPC, and is not be able to connect to SageMaker training and endpoint services unless you configure a NAT Gateway in your VPC. For more information, see `Notebook Instances Are Internet-Enabled by Default <https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access>`_ . You can set the value of this parameter to ``Disabled`` only if you set a value for the ``SubnetId`` parameter.\n')
    instance_metadata_service_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnNotebookInstance_InstanceMetadataServiceConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information on the IMDS configuration of the notebook instance.\n')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of a AWS Key Management Service key that SageMaker uses to encrypt data on the storage volume attached to your notebook instance. The KMS key you provide must be enabled. For information, see `Enabling and Disabling Keys <https://docs.aws.amazon.com/kms/latest/developerguide/enabling-keys.html>`_ in the *AWS Key Management Service Developer Guide* .\n')
    lifecycle_config_name: typing.Optional[str] = pydantic.Field(None, description='The name of a lifecycle configuration to associate with the notebook instance. For information about lifecycle configurations, see `Customize a Notebook Instance <https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html>`_ in the *Amazon SageMaker Developer Guide* .\n')
    notebook_instance_name: typing.Optional[str] = pydantic.Field(None, description='The name of the new notebook instance.\n')
    platform_identifier: typing.Optional[str] = pydantic.Field(None, description='The platform identifier of the notebook instance runtime environment.\n')
    root_access: typing.Optional[str] = pydantic.Field(None, description='Whether root access is enabled or disabled for users of the notebook instance. The default value is ``Enabled`` . .. epigraph:: Lifecycle configurations need root access to be able to set up a notebook instance. Because of this, lifecycle configurations associated with a notebook instance always run with root access even if you disable root access for users.\n')
    security_group_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The VPC security group IDs, in the form sg-xxxxxxxx. The security groups must be for the same VPC as specified in the subnet.\n')
    subnet_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the subnet in a VPC to which you would like to have a connectivity from your ML compute instance.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs to apply to this resource. For more information, see `Resource Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ and `Using Cost Allocation Tags <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what>`_ . You can add tags later by using the ``CreateTags`` API.\n')
    volume_size_in_gb: typing.Union[int, float, None] = pydantic.Field(None, description='The size, in GB, of the ML storage volume to attach to the notebook instance. The default value is 5 GB. .. epigraph:: Expect some interruption of service if this parameter is changed as CloudFormation stops a notebook instance and starts it up again to update it.')
    _init_params: typing.ClassVar[list[str]] = ['instance_type', 'role_arn', 'accelerator_types', 'additional_code_repositories', 'default_code_repository', 'direct_internet_access', 'instance_metadata_service_configuration', 'kms_key_id', 'lifecycle_config_name', 'notebook_instance_name', 'platform_identifier', 'root_access', 'security_group_ids', 'subnet_id', 'tags', 'volume_size_in_gb']
    _method_names: typing.ClassVar[list[str]] = ['InstanceMetadataServiceConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnNotebookInstance'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnNotebookInstanceDefConfig] = pydantic.Field(None)


class CfnNotebookInstanceDefConfig(pydantic.BaseModel):
    InstanceMetadataServiceConfigurationProperty: typing.Optional[list[CfnNotebookInstanceDefInstancemetadataserviceconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnNotebookInstanceDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnNotebookInstanceDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnNotebookInstanceDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnNotebookInstanceDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnNotebookInstanceDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnNotebookInstanceDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnNotebookInstanceDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnNotebookInstanceDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnNotebookInstanceDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnNotebookInstanceDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnNotebookInstanceDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnNotebookInstanceDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnNotebookInstanceDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnNotebookInstanceDefInstancemetadataserviceconfigurationpropertyParams(pydantic.BaseModel):
    minimum_instance_metadata_service_version: str = pydantic.Field(..., description='')
    ...

class CfnNotebookInstanceDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnNotebookInstanceDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnNotebookInstanceDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnNotebookInstanceDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnNotebookInstanceDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnNotebookInstanceDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnNotebookInstanceDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnNotebookInstanceDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnNotebookInstanceDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnNotebookInstanceDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnNotebookInstanceDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnNotebookInstanceDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnNotebookInstanceDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnNotebookInstanceDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnNotebookInstanceLifecycleConfig
class CfnNotebookInstanceLifecycleConfigDef(BaseCfnResource):
    notebook_instance_lifecycle_config_name: typing.Optional[str] = pydantic.Field(None, description='The name of the lifecycle configuration.\n')
    on_create: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnNotebookInstanceLifecycleConfig_NotebookInstanceLifecycleHookPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A shell script that runs only once, when you create a notebook instance. The shell script must be a base64-encoded string.\n')
    on_start: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnNotebookInstanceLifecycleConfig_NotebookInstanceLifecycleHookPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A shell script that runs every time you start a notebook instance, including when you create the notebook instance. The shell script must be a base64-encoded string.')
    _init_params: typing.ClassVar[list[str]] = ['notebook_instance_lifecycle_config_name', 'on_create', 'on_start']
    _method_names: typing.ClassVar[list[str]] = ['NotebookInstanceLifecycleHookProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnNotebookInstanceLifecycleConfig'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnNotebookInstanceLifecycleConfigDefConfig] = pydantic.Field(None)


class CfnNotebookInstanceLifecycleConfigDefConfig(pydantic.BaseModel):
    NotebookInstanceLifecycleHookProperty: typing.Optional[list[CfnNotebookInstanceLifecycleConfigDefNotebookinstancelifecyclehookpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnNotebookInstanceLifecycleConfigDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnNotebookInstanceLifecycleConfigDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnNotebookInstanceLifecycleConfigDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnNotebookInstanceLifecycleConfigDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnNotebookInstanceLifecycleConfigDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnNotebookInstanceLifecycleConfigDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnNotebookInstanceLifecycleConfigDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnNotebookInstanceLifecycleConfigDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnNotebookInstanceLifecycleConfigDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnNotebookInstanceLifecycleConfigDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnNotebookInstanceLifecycleConfigDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnNotebookInstanceLifecycleConfigDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnNotebookInstanceLifecycleConfigDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnNotebookInstanceLifecycleConfigDefNotebookinstancelifecyclehookpropertyParams(pydantic.BaseModel):
    content: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnNotebookInstanceLifecycleConfigDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnNotebookInstanceLifecycleConfigDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnNotebookInstanceLifecycleConfigDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnNotebookInstanceLifecycleConfigDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnNotebookInstanceLifecycleConfigDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnNotebookInstanceLifecycleConfigDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnNotebookInstanceLifecycleConfigDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnNotebookInstanceLifecycleConfigDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnNotebookInstanceLifecycleConfigDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnNotebookInstanceLifecycleConfigDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnNotebookInstanceLifecycleConfigDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnNotebookInstanceLifecycleConfigDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnNotebookInstanceLifecycleConfigDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnNotebookInstanceLifecycleConfigDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnPipeline
class CfnPipelineDef(BaseCfnResource):
    pipeline_definition: typing.Any = pydantic.Field(..., description='The definition of the pipeline. This can be either a JSON string or an Amazon S3 location.\n')
    pipeline_name: str = pydantic.Field(..., description='The name of the pipeline.\n')
    role_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the IAM role used to execute the pipeline.\n')
    parallelism_configuration: typing.Any = pydantic.Field(None, description='``AWS::SageMaker::Pipeline.ParallelismConfiguration``.\n')
    pipeline_description: typing.Optional[str] = pydantic.Field(None, description='The description of the pipeline.\n')
    pipeline_display_name: typing.Optional[str] = pydantic.Field(None, description='The display name of the pipeline.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags of the pipeline.')
    _init_params: typing.ClassVar[list[str]] = ['pipeline_definition', 'pipeline_name', 'role_arn', 'parallelism_configuration', 'pipeline_description', 'pipeline_display_name', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ParallelismConfigurationProperty', 'PipelineDefinitionProperty', 'S3LocationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnPipeline'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnPipelineDefConfig] = pydantic.Field(None)


class CfnPipelineDefConfig(pydantic.BaseModel):
    ParallelismConfigurationProperty: typing.Optional[list[CfnPipelineDefParallelismconfigurationpropertyParams]] = pydantic.Field(None, description='')
    PipelineDefinitionProperty: typing.Optional[list[CfnPipelineDefPipelinedefinitionpropertyParams]] = pydantic.Field(None, description='')
    S3LocationProperty: typing.Optional[list[CfnPipelineDefS3LocationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnPipelineDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnPipelineDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnPipelineDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnPipelineDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnPipelineDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnPipelineDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnPipelineDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnPipelineDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnPipelineDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnPipelineDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnPipelineDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnPipelineDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnPipelineDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnPipelineDefParallelismconfigurationpropertyParams(pydantic.BaseModel):
    max_parallel_execution_steps: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnPipelineDefPipelinedefinitionpropertyParams(pydantic.BaseModel):
    pipeline_definition_body: typing.Optional[str] = pydantic.Field(None, description='')
    pipeline_definition_s3_location: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnPipeline_S3LocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnPipelineDefS3LocationpropertyParams(pydantic.BaseModel):
    bucket: str = pydantic.Field(..., description='')
    key: str = pydantic.Field(..., description='')
    e_tag: typing.Optional[str] = pydantic.Field(None, description='')
    version: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnPipelineDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnPipelineDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPipelineDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnPipelineDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPipelineDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnPipelineDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnPipelineDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnPipelineDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnPipelineDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnPipelineDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnPipelineDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnPipelineDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnPipelineDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnPipelineDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnProject
class CfnProjectDef(BaseCfnResource):
    project_name: str = pydantic.Field(..., description='The name of the project.\n')
    service_catalog_provisioning_details: typing.Any = pydantic.Field(..., description='The product ID and provisioning artifact ID to provision a service catalog. For information, see `What is AWS Service Catalog <https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html>`_ .\n')
    project_description: typing.Optional[str] = pydantic.Field(None, description='The description of the project.\n')
    service_catalog_provisioned_product_details: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnProject_ServiceCatalogProvisionedProductDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::SageMaker::Project.ServiceCatalogProvisionedProductDetails``.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs to apply to this resource. For more information, see `Resource Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ and `Using Cost Allocation Tags <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what>`_ in the *AWS Billing and Cost Management User Guide* .')
    _init_params: typing.ClassVar[list[str]] = ['project_name', 'service_catalog_provisioning_details', 'project_description', 'service_catalog_provisioned_product_details', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['ProvisioningParameterProperty', 'ServiceCatalogProvisionedProductDetailsProperty', 'ServiceCatalogProvisioningDetailsProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnProject'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnProjectDefConfig] = pydantic.Field(None)


class CfnProjectDefConfig(pydantic.BaseModel):
    ProvisioningParameterProperty: typing.Optional[list[CfnProjectDefProvisioningparameterpropertyParams]] = pydantic.Field(None, description='')
    ServiceCatalogProvisionedProductDetailsProperty: typing.Optional[list[CfnProjectDefServicecatalogprovisionedproductdetailspropertyParams]] = pydantic.Field(None, description='')
    ServiceCatalogProvisioningDetailsProperty: typing.Optional[list[CfnProjectDefServicecatalogprovisioningdetailspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnProjectDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnProjectDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnProjectDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnProjectDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnProjectDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnProjectDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnProjectDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnProjectDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnProjectDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnProjectDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnProjectDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnProjectDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnProjectDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnProjectDefProvisioningparameterpropertyParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnProjectDefServicecatalogprovisionedproductdetailspropertyParams(pydantic.BaseModel):
    provisioned_product_id: typing.Optional[str] = pydantic.Field(None, description='')
    provisioned_product_status_message: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnProjectDefServicecatalogprovisioningdetailspropertyParams(pydantic.BaseModel):
    product_id: str = pydantic.Field(..., description='')
    path_id: typing.Optional[str] = pydantic.Field(None, description='')
    provisioning_artifact_id: typing.Optional[str] = pydantic.Field(None, description='')
    provisioning_parameters: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnProject_ProvisioningParameterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnProjectDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnProjectDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnProjectDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnProjectDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnProjectDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnProjectDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnProjectDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnProjectDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnProjectDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnProjectDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnProjectDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnProjectDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnProjectDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnProjectDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnSpace
class CfnSpaceDef(BaseCfnResource):
    domain_id: str = pydantic.Field(..., description='The ID of the associated Domain.\n')
    space_name: str = pydantic.Field(..., description='The name of the space.\n')
    space_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnSpace_SpaceSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A collection of space settings.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .')
    _init_params: typing.ClassVar[list[str]] = ['domain_id', 'space_name', 'space_settings', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['CustomImageProperty', 'JupyterServerAppSettingsProperty', 'KernelGatewayAppSettingsProperty', 'ResourceSpecProperty', 'SpaceSettingsProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnSpace'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnSpaceDefConfig] = pydantic.Field(None)


class CfnSpaceDefConfig(pydantic.BaseModel):
    CustomImageProperty: typing.Optional[list[CfnSpaceDefCustomimagepropertyParams]] = pydantic.Field(None, description='')
    JupyterServerAppSettingsProperty: typing.Optional[list[CfnSpaceDefJupyterserverappsettingspropertyParams]] = pydantic.Field(None, description='')
    KernelGatewayAppSettingsProperty: typing.Optional[list[CfnSpaceDefKernelgatewayappsettingspropertyParams]] = pydantic.Field(None, description='')
    ResourceSpecProperty: typing.Optional[list[CfnSpaceDefResourcespecpropertyParams]] = pydantic.Field(None, description='')
    SpaceSettingsProperty: typing.Optional[list[CfnSpaceDefSpacesettingspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnSpaceDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnSpaceDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnSpaceDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnSpaceDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnSpaceDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnSpaceDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnSpaceDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnSpaceDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnSpaceDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnSpaceDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnSpaceDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnSpaceDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnSpaceDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnSpaceDefCustomimagepropertyParams(pydantic.BaseModel):
    app_image_config_name: str = pydantic.Field(..., description='')
    image_name: str = pydantic.Field(..., description='')
    image_version_number: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnSpaceDefJupyterserverappsettingspropertyParams(pydantic.BaseModel):
    default_resource_spec: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnSpace_ResourceSpecPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnSpaceDefKernelgatewayappsettingspropertyParams(pydantic.BaseModel):
    custom_images: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnSpace_CustomImagePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    default_resource_spec: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnSpace_ResourceSpecPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnSpaceDefResourcespecpropertyParams(pydantic.BaseModel):
    instance_type: typing.Optional[str] = pydantic.Field(None, description='')
    sage_maker_image_arn: typing.Optional[str] = pydantic.Field(None, description='')
    sage_maker_image_version_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnSpaceDefSpacesettingspropertyParams(pydantic.BaseModel):
    jupyter_server_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnSpace_JupyterServerAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    kernel_gateway_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnSpace_KernelGatewayAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnSpaceDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnSpaceDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSpaceDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnSpaceDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSpaceDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnSpaceDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnSpaceDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnSpaceDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnSpaceDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnSpaceDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSpaceDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnSpaceDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnSpaceDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSpaceDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnUserProfile
class CfnUserProfileDef(BaseCfnResource):
    domain_id: str = pydantic.Field(..., description='The domain ID.\n')
    user_profile_name: str = pydantic.Field(..., description='The user profile name.\n')
    single_sign_on_user_identifier: typing.Optional[str] = pydantic.Field(None, description='A specifier for the type of value specified in SingleSignOnUserValue. Currently, the only supported value is "UserName". If the Domain\'s AuthMode is IAM Identity Center , this field is required. If the Domain\'s AuthMode is not IAM Identity Center , this field cannot be specified.\n')
    single_sign_on_user_value: typing.Optional[str] = pydantic.Field(None, description="The username of the associated AWS Single Sign-On User for this UserProfile. If the Domain's AuthMode is IAM Identity Center , this field is required, and must match a valid username of a user in your directory. If the Domain's AuthMode is not IAM Identity Center , this field cannot be specified.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. Tags that you specify for the User Profile are also added to all apps that the User Profile launches. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n')
    user_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnUserProfile_UserSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A collection of settings that apply to users of Amazon SageMaker Studio.')
    _init_params: typing.ClassVar[list[str]] = ['domain_id', 'user_profile_name', 'single_sign_on_user_identifier', 'single_sign_on_user_value', 'tags', 'user_settings']
    _method_names: typing.ClassVar[list[str]] = ['CustomImageProperty', 'JupyterServerAppSettingsProperty', 'KernelGatewayAppSettingsProperty', 'RStudioServerProAppSettingsProperty', 'ResourceSpecProperty', 'SharingSettingsProperty', 'UserSettingsProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnUserProfile'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnUserProfileDefConfig] = pydantic.Field(None)


class CfnUserProfileDefConfig(pydantic.BaseModel):
    CustomImageProperty: typing.Optional[list[CfnUserProfileDefCustomimagepropertyParams]] = pydantic.Field(None, description='')
    JupyterServerAppSettingsProperty: typing.Optional[list[CfnUserProfileDefJupyterserverappsettingspropertyParams]] = pydantic.Field(None, description='')
    KernelGatewayAppSettingsProperty: typing.Optional[list[CfnUserProfileDefKernelgatewayappsettingspropertyParams]] = pydantic.Field(None, description='')
    RStudioServerProAppSettingsProperty: typing.Optional[list[CfnUserProfileDefRstudioserverproappsettingspropertyParams]] = pydantic.Field(None, description='')
    ResourceSpecProperty: typing.Optional[list[CfnUserProfileDefResourcespecpropertyParams]] = pydantic.Field(None, description='')
    SharingSettingsProperty: typing.Optional[list[CfnUserProfileDefSharingsettingspropertyParams]] = pydantic.Field(None, description='')
    UserSettingsProperty: typing.Optional[list[CfnUserProfileDefUsersettingspropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnUserProfileDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnUserProfileDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnUserProfileDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnUserProfileDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnUserProfileDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnUserProfileDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnUserProfileDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnUserProfileDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnUserProfileDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnUserProfileDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnUserProfileDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnUserProfileDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnUserProfileDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnUserProfileDefCustomimagepropertyParams(pydantic.BaseModel):
    app_image_config_name: str = pydantic.Field(..., description='')
    image_name: str = pydantic.Field(..., description='')
    image_version_number: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnUserProfileDefJupyterserverappsettingspropertyParams(pydantic.BaseModel):
    default_resource_spec: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnUserProfile_ResourceSpecPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnUserProfileDefKernelgatewayappsettingspropertyParams(pydantic.BaseModel):
    custom_images: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnUserProfile_CustomImagePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    default_resource_spec: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnUserProfile_ResourceSpecPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnUserProfileDefRstudioserverproappsettingspropertyParams(pydantic.BaseModel):
    access_status: typing.Optional[str] = pydantic.Field(None, description='')
    user_group: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserProfileDefResourcespecpropertyParams(pydantic.BaseModel):
    instance_type: typing.Optional[str] = pydantic.Field(None, description='')
    sage_maker_image_arn: typing.Optional[str] = pydantic.Field(None, description='')
    sage_maker_image_version_arn: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserProfileDefSharingsettingspropertyParams(pydantic.BaseModel):
    notebook_output_option: typing.Optional[str] = pydantic.Field(None, description='')
    s3_kms_key_id: typing.Optional[str] = pydantic.Field(None, description='')
    s3_output_path: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnUserProfileDefUsersettingspropertyParams(pydantic.BaseModel):
    execution_role: typing.Optional[str] = pydantic.Field(None, description='')
    jupyter_server_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnUserProfile_JupyterServerAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    kernel_gateway_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnUserProfile_KernelGatewayAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    r_studio_server_pro_app_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnUserProfile_RStudioServerProAppSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    security_groups: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    sharing_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnUserProfile_SharingSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnUserProfileDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnUserProfileDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserProfileDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnUserProfileDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserProfileDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnUserProfileDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnUserProfileDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnUserProfileDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnUserProfileDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnUserProfileDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnUserProfileDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnUserProfileDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnUserProfileDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnUserProfileDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnWorkteam
class CfnWorkteamDef(BaseCfnResource):
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the work team.\n')
    member_definitions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnWorkteam_MemberDefinitionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of ``MemberDefinition`` objects that contains objects that identify the workers that make up the work team. Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use ``CognitoMemberDefinition`` . For workforces created using your own OIDC identity provider (IdP) use ``OidcMemberDefinition`` .\n')
    notification_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnWorkteam_NotificationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configures SNS notifications of available or expiring work items for work teams.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs.\n')
    workforce_name: typing.Optional[str] = pydantic.Field(None, description='``AWS::SageMaker::Workteam.WorkforceName``.\n')
    workteam_name: typing.Optional[str] = pydantic.Field(None, description='The name of the work team.')
    _init_params: typing.ClassVar[list[str]] = ['description', 'member_definitions', 'notification_configuration', 'tags', 'workforce_name', 'workteam_name']
    _method_names: typing.ClassVar[list[str]] = ['CognitoMemberDefinitionProperty', 'MemberDefinitionProperty', 'NotificationConfigurationProperty', 'OidcMemberDefinitionProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnWorkteam'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnWorkteamDefConfig] = pydantic.Field(None)


class CfnWorkteamDefConfig(pydantic.BaseModel):
    CognitoMemberDefinitionProperty: typing.Optional[list[CfnWorkteamDefCognitomemberdefinitionpropertyParams]] = pydantic.Field(None, description='')
    MemberDefinitionProperty: typing.Optional[list[CfnWorkteamDefMemberdefinitionpropertyParams]] = pydantic.Field(None, description='')
    NotificationConfigurationProperty: typing.Optional[list[CfnWorkteamDefNotificationconfigurationpropertyParams]] = pydantic.Field(None, description='')
    OidcMemberDefinitionProperty: typing.Optional[list[CfnWorkteamDefOidcmemberdefinitionpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnWorkteamDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnWorkteamDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnWorkteamDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnWorkteamDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnWorkteamDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnWorkteamDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnWorkteamDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnWorkteamDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnWorkteamDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnWorkteamDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnWorkteamDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnWorkteamDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnWorkteamDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnWorkteamDefCognitomemberdefinitionpropertyParams(pydantic.BaseModel):
    cognito_client_id: str = pydantic.Field(..., description='')
    cognito_user_group: str = pydantic.Field(..., description='')
    cognito_user_pool: str = pydantic.Field(..., description='')
    ...

class CfnWorkteamDefMemberdefinitionpropertyParams(pydantic.BaseModel):
    cognito_member_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnWorkteam_CognitoMemberDefinitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    oidc_member_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnWorkteam_OidcMemberDefinitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnWorkteamDefNotificationconfigurationpropertyParams(pydantic.BaseModel):
    notification_topic_arn: str = pydantic.Field(..., description='')
    ...

class CfnWorkteamDefOidcmemberdefinitionpropertyParams(pydantic.BaseModel):
    oidc_groups: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnWorkteamDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnWorkteamDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnWorkteamDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnWorkteamDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnWorkteamDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnWorkteamDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnWorkteamDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnWorkteamDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnWorkteamDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnWorkteamDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnWorkteamDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnWorkteamDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnWorkteamDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnWorkteamDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sagemaker.CfnAppImageConfigProps
class CfnAppImageConfigPropsDef(BaseCfnProperty):
    app_image_config_name: str = pydantic.Field(..., description='The name of the AppImageConfig. Must be unique to your account.\n')
    kernel_gateway_image_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnAppImageConfig_KernelGatewayImageConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for the file system and kernels in the SageMaker image.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-appimageconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cfn_app_image_config_props = sagemaker.CfnAppImageConfigProps(\n        app_image_config_name="appImageConfigName",\n\n        # the properties below are optional\n        kernel_gateway_image_config=sagemaker.CfnAppImageConfig.KernelGatewayImageConfigProperty(\n            kernel_specs=[sagemaker.CfnAppImageConfig.KernelSpecProperty(\n                name="name",\n\n                # the properties below are optional\n                display_name="displayName"\n            )],\n\n            # the properties below are optional\n            file_system_config=sagemaker.CfnAppImageConfig.FileSystemConfigProperty(\n                default_gid=123,\n                default_uid=123,\n                mount_path="mountPath"\n            )\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['app_image_config_name', 'kernel_gateway_image_config', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnAppImageConfigProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnAppProps
class CfnAppPropsDef(BaseCfnProperty):
    app_name: str = pydantic.Field(..., description='The name of the app.\n')
    app_type: str = pydantic.Field(..., description='The type of app. *Allowed Values* : ``JupyterServer | KernelGateway | RSessionGateway | RStudioServerPro | TensorBoard | Canvas``\n')
    domain_id: str = pydantic.Field(..., description='The domain ID.\n')
    user_profile_name: str = pydantic.Field(..., description='The user profile name.\n')
    resource_spec: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnApp_ResourceSpecPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the ARNs of a SageMaker image and SageMaker image version, and the instance type that the version runs on.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-app.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cfn_app_props = sagemaker.CfnAppProps(\n        app_name="appName",\n        app_type="appType",\n        domain_id="domainId",\n        user_profile_name="userProfileName",\n\n        # the properties below are optional\n        resource_spec=sagemaker.CfnApp.ResourceSpecProperty(\n            instance_type="instanceType",\n            sage_maker_image_arn="sageMakerImageArn",\n            sage_maker_image_version_arn="sageMakerImageVersionArn"\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['app_name', 'app_type', 'domain_id', 'user_profile_name', 'resource_spec', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnAppProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnCodeRepositoryProps
class CfnCodeRepositoryPropsDef(BaseCfnProperty):
    git_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnCodeRepository_GitConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Configuration details for the Git repository, including the URL where it is located and the ARN of the AWS Secrets Manager secret that contains the credentials used to access the repository.\n')
    code_repository_name: typing.Optional[str] = pydantic.Field(None, description='The name of the Git repository.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='List of tags for Code Repository.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-coderepository.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cfn_code_repository_props = sagemaker.CfnCodeRepositoryProps(\n        git_config=sagemaker.CfnCodeRepository.GitConfigProperty(\n            repository_url="repositoryUrl",\n\n            # the properties below are optional\n            branch="branch",\n            secret_arn="secretArn"\n        ),\n\n        # the properties below are optional\n        code_repository_name="codeRepositoryName",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['git_config', 'code_repository_name', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnCodeRepositoryProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDataQualityJobDefinitionProps
class CfnDataQualityJobDefinitionPropsDef(BaseCfnProperty):
    data_quality_app_specification: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_DataQualityAppSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Specifies the container that runs the monitoring job.\n')
    data_quality_job_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_DataQualityJobInputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A list of inputs for the monitoring job. Currently endpoints are supported as monitoring inputs.\n')
    data_quality_job_output_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_MonitoringOutputConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The output configuration for monitoring jobs.\n')
    job_resources: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_MonitoringResourcesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Identifies the resources to deploy for a monitoring job.\n')
    role_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.\n')
    data_quality_baseline_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_DataQualityBaselineConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configures the constraints and baselines for the monitoring job.\n')
    endpoint_name: typing.Optional[str] = pydantic.Field(None, description='``AWS::SageMaker::DataQualityJobDefinition.EndpointName``.\n')
    job_definition_name: typing.Optional[str] = pydantic.Field(None, description='The name for the monitoring job definition.\n')
    network_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_NetworkConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies networking configuration for the monitoring job.\n')
    stopping_condition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDataQualityJobDefinition_StoppingConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A time limit for how long the monitoring job is allowed to run before stopping.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-dataqualityjobdefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cfn_data_quality_job_definition_props = sagemaker.CfnDataQualityJobDefinitionProps(\n        data_quality_app_specification=sagemaker.CfnDataQualityJobDefinition.DataQualityAppSpecificationProperty(\n            image_uri="imageUri",\n\n            # the properties below are optional\n            container_arguments=["containerArguments"],\n            container_entrypoint=["containerEntrypoint"],\n            environment={\n                "environment_key": "environment"\n            },\n            post_analytics_processor_source_uri="postAnalyticsProcessorSourceUri",\n            record_preprocessor_source_uri="recordPreprocessorSourceUri"\n        ),\n        data_quality_job_input=sagemaker.CfnDataQualityJobDefinition.DataQualityJobInputProperty(\n            batch_transform_input=sagemaker.CfnDataQualityJobDefinition.BatchTransformInputProperty(\n                data_captured_destination_s3_uri="dataCapturedDestinationS3Uri",\n                dataset_format=sagemaker.CfnDataQualityJobDefinition.DatasetFormatProperty(\n                    csv=sagemaker.CfnDataQualityJobDefinition.CsvProperty(\n                        header=False\n                    ),\n                    json=sagemaker.CfnDataQualityJobDefinition.JsonProperty(\n                        line=False\n                    ),\n                    parquet=False\n                ),\n                local_path="localPath",\n\n                # the properties below are optional\n                s3_data_distribution_type="s3DataDistributionType",\n                s3_input_mode="s3InputMode"\n            ),\n            endpoint_input=sagemaker.CfnDataQualityJobDefinition.EndpointInputProperty(\n                endpoint_name="endpointName",\n                local_path="localPath",\n\n                # the properties below are optional\n                s3_data_distribution_type="s3DataDistributionType",\n                s3_input_mode="s3InputMode"\n            )\n        ),\n        data_quality_job_output_config=sagemaker.CfnDataQualityJobDefinition.MonitoringOutputConfigProperty(\n            monitoring_outputs=[sagemaker.CfnDataQualityJobDefinition.MonitoringOutputProperty(\n                s3_output=sagemaker.CfnDataQualityJobDefinition.S3OutputProperty(\n                    local_path="localPath",\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    s3_upload_mode="s3UploadMode"\n                )\n            )],\n\n            # the properties below are optional\n            kms_key_id="kmsKeyId"\n        ),\n        job_resources=sagemaker.CfnDataQualityJobDefinition.MonitoringResourcesProperty(\n            cluster_config=sagemaker.CfnDataQualityJobDefinition.ClusterConfigProperty(\n                instance_count=123,\n                instance_type="instanceType",\n                volume_size_in_gb=123,\n\n                # the properties below are optional\n                volume_kms_key_id="volumeKmsKeyId"\n            )\n        ),\n        role_arn="roleArn",\n\n        # the properties below are optional\n        data_quality_baseline_config=sagemaker.CfnDataQualityJobDefinition.DataQualityBaselineConfigProperty(\n            baselining_job_name="baseliningJobName",\n            constraints_resource=sagemaker.CfnDataQualityJobDefinition.ConstraintsResourceProperty(\n                s3_uri="s3Uri"\n            ),\n            statistics_resource=sagemaker.CfnDataQualityJobDefinition.StatisticsResourceProperty(\n                s3_uri="s3Uri"\n            )\n        ),\n        endpoint_name="endpointName",\n        job_definition_name="jobDefinitionName",\n        network_config=sagemaker.CfnDataQualityJobDefinition.NetworkConfigProperty(\n            enable_inter_container_traffic_encryption=False,\n            enable_network_isolation=False,\n            vpc_config=sagemaker.CfnDataQualityJobDefinition.VpcConfigProperty(\n                security_group_ids=["securityGroupIds"],\n                subnets=["subnets"]\n            )\n        ),\n        stopping_condition=sagemaker.CfnDataQualityJobDefinition.StoppingConditionProperty(\n            max_runtime_in_seconds=123\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['data_quality_app_specification', 'data_quality_job_input', 'data_quality_job_output_config', 'job_resources', 'role_arn', 'data_quality_baseline_config', 'endpoint_name', 'job_definition_name', 'network_config', 'stopping_condition', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDataQualityJobDefinitionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDeviceFleetProps
class CfnDeviceFleetPropsDef(BaseCfnProperty):
    device_fleet_name: str = pydantic.Field(..., description='Name of the device fleet.\n')
    output_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDeviceFleet_EdgeOutputConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The output configuration for storing sample data collected by the fleet.\n')
    role_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) that has access to AWS Internet of Things (IoT).\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the fleet.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs that contain metadata to help you categorize and organize your device fleets. Each tag consists of a key and a value, both of which you define.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-devicefleet.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cfn_device_fleet_props = sagemaker.CfnDeviceFleetProps(\n        device_fleet_name="deviceFleetName",\n        output_config=sagemaker.CfnDeviceFleet.EdgeOutputConfigProperty(\n            s3_output_location="s3OutputLocation",\n\n            # the properties below are optional\n            kms_key_id="kmsKeyId"\n        ),\n        role_arn="roleArn",\n\n        # the properties below are optional\n        description="description",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['device_fleet_name', 'output_config', 'role_arn', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDeviceFleetProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDeviceProps
class CfnDevicePropsDef(BaseCfnProperty):
    device_fleet_name: str = pydantic.Field(..., description='The name of the fleet the device belongs to.\n')
    device: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDevice_DevicePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Edge device you want to create.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs that contain metadata to help you categorize and organize your devices. Each tag consists of a key and a value, both of which you define.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-device.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cfn_device_props = sagemaker.CfnDeviceProps(\n        device_fleet_name="deviceFleetName",\n\n        # the properties below are optional\n        device=sagemaker.CfnDevice.DeviceProperty(\n            device_name="deviceName",\n\n            # the properties below are optional\n            description="description",\n            iot_thing_name="iotThingName"\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['device_fleet_name', 'device', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDeviceProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnDomainProps
class CfnDomainPropsDef(BaseCfnProperty):
    auth_mode: str = pydantic.Field(..., description='The mode of authentication that members use to access the Domain. *Valid Values* : ``SSO | IAM``\n')
    default_user_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_UserSettingsPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The default user settings.\n')
    domain_name: str = pydantic.Field(..., description='The domain name.\n')
    subnet_ids: typing.Sequence[str] = pydantic.Field(..., description='The VPC subnets that Studio uses for communication. *Length Constraints* : Maximum length of 32. *Array members* : Minimum number of 1 item. Maximum number of 16 items. *Pattern* : ``[-0-9a-zA-Z]+``\n')
    vpc_id: str = pydantic.Field(..., description='The ID of the Amazon Virtual Private Cloud (Amazon VPC) that Studio uses for communication. *Length Constraints* : Maximum length of 32. *Pattern* : ``[-0-9a-zA-Z]+``\n')
    app_network_access_type: typing.Optional[str] = pydantic.Field(None, description='Specifies the VPC used for non-EFS traffic. The default value is ``PublicInternetOnly`` . - ``PublicInternetOnly`` - Non-EFS traffic is through a VPC managed by Amazon SageMaker , which allows direct internet access - ``VpcOnly`` - All Studio traffic is through the specified VPC and subnets *Valid Values* : ``PublicInternetOnly | VpcOnly``\n')
    app_security_group_management: typing.Optional[str] = pydantic.Field(None, description='The entity that creates and manages the required security groups for inter-app communication in ``VpcOnly`` mode. Required when ``CreateDomain.AppNetworkAccessType`` is ``VpcOnly`` and ``DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn`` is provided. If setting up the domain for use with RStudio, this value must be set to ``Service`` . *Allowed Values* : ``Service`` | ``Customer``\n')
    default_space_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_DefaultSpaceSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::SageMaker::Domain.DefaultSpaceSettings``.\n')
    domain_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnDomain_DomainSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A collection of settings that apply to the ``SageMaker Domain`` . These settings are specified through the ``CreateDomain`` API call.\n')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='SageMaker uses AWS KMS to encrypt the EFS volume attached to the Domain with an AWS managed customer master key (CMK) by default. For more control, specify a customer managed CMK. *Length Constraints* : Maximum length of 2048. *Pattern* : ``.*``\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Tags to associated with the Domain. Each tag consists of a key and an optional value. Tag keys must be unique per resource. Tags are searchable using the Search API. Tags that you specify for the Domain are also added to all apps that are launched in the Domain. *Array members* : Minimum number of 0 items. Maximum number of 50 items.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-domain.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cfn_domain_props = sagemaker.CfnDomainProps(\n        auth_mode="authMode",\n        default_user_settings=sagemaker.CfnDomain.UserSettingsProperty(\n            execution_role="executionRole",\n\n            # the properties below are optional\n            jupyter_server_app_settings=sagemaker.CfnDomain.JupyterServerAppSettingsProperty(\n                default_resource_spec=sagemaker.CfnDomain.ResourceSpecProperty(\n                    instance_type="instanceType",\n                    lifecycle_config_arn="lifecycleConfigArn",\n                    sage_maker_image_arn="sageMakerImageArn",\n                    sage_maker_image_version_arn="sageMakerImageVersionArn"\n                )\n            ),\n            kernel_gateway_app_settings=sagemaker.CfnDomain.KernelGatewayAppSettingsProperty(\n                custom_images=[sagemaker.CfnDomain.CustomImageProperty(\n                    app_image_config_name="appImageConfigName",\n                    image_name="imageName",\n\n                    # the properties below are optional\n                    image_version_number=123\n                )],\n                default_resource_spec=sagemaker.CfnDomain.ResourceSpecProperty(\n                    instance_type="instanceType",\n                    lifecycle_config_arn="lifecycleConfigArn",\n                    sage_maker_image_arn="sageMakerImageArn",\n                    sage_maker_image_version_arn="sageMakerImageVersionArn"\n                )\n            ),\n            r_session_app_settings=sagemaker.CfnDomain.RSessionAppSettingsProperty(\n                custom_images=[sagemaker.CfnDomain.CustomImageProperty(\n                    app_image_config_name="appImageConfigName",\n                    image_name="imageName",\n\n                    # the properties below are optional\n                    image_version_number=123\n                )],\n                default_resource_spec=sagemaker.CfnDomain.ResourceSpecProperty(\n                    instance_type="instanceType",\n                    lifecycle_config_arn="lifecycleConfigArn",\n                    sage_maker_image_arn="sageMakerImageArn",\n                    sage_maker_image_version_arn="sageMakerImageVersionArn"\n                )\n            ),\n            r_studio_server_pro_app_settings=sagemaker.CfnDomain.RStudioServerProAppSettingsProperty(\n                access_status="accessStatus",\n                user_group="userGroup"\n            ),\n            security_groups=["securityGroups"],\n            sharing_settings=sagemaker.CfnDomain.SharingSettingsProperty(\n                notebook_output_option="notebookOutputOption",\n                s3_kms_key_id="s3KmsKeyId",\n                s3_output_path="s3OutputPath"\n            )\n        ),\n        domain_name="domainName",\n        subnet_ids=["subnetIds"],\n        vpc_id="vpcId",\n\n        # the properties below are optional\n        app_network_access_type="appNetworkAccessType",\n        app_security_group_management="appSecurityGroupManagement",\n        default_space_settings=sagemaker.CfnDomain.DefaultSpaceSettingsProperty(\n            execution_role="executionRole",\n\n            # the properties below are optional\n            jupyter_server_app_settings=sagemaker.CfnDomain.JupyterServerAppSettingsProperty(\n                default_resource_spec=sagemaker.CfnDomain.ResourceSpecProperty(\n                    instance_type="instanceType",\n                    lifecycle_config_arn="lifecycleConfigArn",\n                    sage_maker_image_arn="sageMakerImageArn",\n                    sage_maker_image_version_arn="sageMakerImageVersionArn"\n                )\n            ),\n            kernel_gateway_app_settings=sagemaker.CfnDomain.KernelGatewayAppSettingsProperty(\n                custom_images=[sagemaker.CfnDomain.CustomImageProperty(\n                    app_image_config_name="appImageConfigName",\n                    image_name="imageName",\n\n                    # the properties below are optional\n                    image_version_number=123\n                )],\n                default_resource_spec=sagemaker.CfnDomain.ResourceSpecProperty(\n                    instance_type="instanceType",\n                    lifecycle_config_arn="lifecycleConfigArn",\n                    sage_maker_image_arn="sageMakerImageArn",\n                    sage_maker_image_version_arn="sageMakerImageVersionArn"\n                )\n            ),\n            security_groups=["securityGroups"]\n        ),\n        domain_settings=sagemaker.CfnDomain.DomainSettingsProperty(\n            r_studio_server_pro_domain_settings=sagemaker.CfnDomain.RStudioServerProDomainSettingsProperty(\n                domain_execution_role_arn="domainExecutionRoleArn",\n\n                # the properties below are optional\n                default_resource_spec=sagemaker.CfnDomain.ResourceSpecProperty(\n                    instance_type="instanceType",\n                    lifecycle_config_arn="lifecycleConfigArn",\n                    sage_maker_image_arn="sageMakerImageArn",\n                    sage_maker_image_version_arn="sageMakerImageVersionArn"\n                ),\n                r_studio_connect_url="rStudioConnectUrl",\n                r_studio_package_manager_url="rStudioPackageManagerUrl"\n            ),\n            security_group_ids=["securityGroupIds"]\n        ),\n        kms_key_id="kmsKeyId",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['auth_mode', 'default_user_settings', 'domain_name', 'subnet_ids', 'vpc_id', 'app_network_access_type', 'app_security_group_management', 'default_space_settings', 'domain_settings', 'kms_key_id', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnDomainProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpointConfigProps
class CfnEndpointConfigPropsDef(BaseCfnProperty):
    production_variants: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_ProductionVariantPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='A list of ``ProductionVariant`` objects, one for each model that you want to host at this endpoint.\n')
    async_inference_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_AsyncInferenceConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies configuration for how an endpoint performs asynchronous inference.\n')
    data_capture_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_DataCaptureConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies how to capture endpoint data for model monitor. The data capture configuration applies to all production variants hosted at the endpoint.\n')
    endpoint_config_name: typing.Optional[str] = pydantic.Field(None, description='The name of the endpoint configuration.\n')
    explainer_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_ExplainerConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::SageMaker::EndpointConfig.ExplainerConfig``.\n')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description="The Amazon Resource Name (ARN) of an AWS Key Management Service key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the endpoint. - Key ID: ``1234abcd-12ab-34cd-56ef-1234567890ab`` - Key ARN: ``arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab`` - Alias name: ``alias/ExampleAlias`` - Alias name ARN: ``arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias`` The KMS key policy must grant permission to the IAM role that you specify in your ``CreateEndpoint`` , ``UpdateEndpoint`` requests. For more information, refer to the AWS Key Management Service section `Using Key Policies in AWS KMS <https://docs.aws.amazon.com//kms/latest/developerguide/key-policies.html>`_ .. epigraph:: Certain Nitro-based instances include local storage, dependent on the instance type. Local storage volumes are encrypted using a hardware module on the instance. You can't request a ``KmsKeyId`` when using an instance type with local storage. If any of the models that you specify in the ``ProductionVariants`` parameter use nitro-based instances with local storage, do not specify a value for the ``KmsKeyId`` parameter. If you specify a value for ``KmsKeyId`` when using any nitro-based instances with local storage, the call to ``CreateEndpointConfig`` fails. For a list of instance types that support local instance storage, see `Instance Store Volumes <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes>`_ . For more information about local instance storage encryption, see `SSD Instance Store Volumes <https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html>`_ .\n")
    shadow_production_variants: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpointConfig_ProductionVariantPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Array of ``ProductionVariant`` objects. There is one for each model that you want to host at this endpoint in shadow mode with production traffic replicated from the model specified on ``ProductionVariants`` . If you use this field, you can only specify one variant for ``ProductionVariants`` and one variant for ``ShadowProductionVariants`` .\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs to apply to this resource. For more information, see `Resource Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ and `Using Cost Allocation Tags <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cfn_endpoint_config_props = sagemaker.CfnEndpointConfigProps(\n        production_variants=[sagemaker.CfnEndpointConfig.ProductionVariantProperty(\n            initial_variant_weight=123,\n            model_name="modelName",\n            variant_name="variantName",\n\n            # the properties below are optional\n            accelerator_type="acceleratorType",\n            container_startup_health_check_timeout_in_seconds=123,\n            enable_ssm_access=False,\n            initial_instance_count=123,\n            instance_type="instanceType",\n            model_data_download_timeout_in_seconds=123,\n            serverless_config=sagemaker.CfnEndpointConfig.ServerlessConfigProperty(\n                max_concurrency=123,\n                memory_size_in_mb=123,\n\n                # the properties below are optional\n                provisioned_concurrency=123\n            ),\n            volume_size_in_gb=123\n        )],\n\n        # the properties below are optional\n        async_inference_config=sagemaker.CfnEndpointConfig.AsyncInferenceConfigProperty(\n            output_config=sagemaker.CfnEndpointConfig.AsyncInferenceOutputConfigProperty(\n                kms_key_id="kmsKeyId",\n                notification_config=sagemaker.CfnEndpointConfig.AsyncInferenceNotificationConfigProperty(\n                    error_topic="errorTopic",\n                    include_inference_response_in=["includeInferenceResponseIn"],\n                    success_topic="successTopic"\n                ),\n                s3_failure_path="s3FailurePath",\n                s3_output_path="s3OutputPath"\n            ),\n\n            # the properties below are optional\n            client_config=sagemaker.CfnEndpointConfig.AsyncInferenceClientConfigProperty(\n                max_concurrent_invocations_per_instance=123\n            )\n        ),\n        data_capture_config=sagemaker.CfnEndpointConfig.DataCaptureConfigProperty(\n            capture_options=[sagemaker.CfnEndpointConfig.CaptureOptionProperty(\n                capture_mode="captureMode"\n            )],\n            destination_s3_uri="destinationS3Uri",\n            initial_sampling_percentage=123,\n\n            # the properties below are optional\n            capture_content_type_header=sagemaker.CfnEndpointConfig.CaptureContentTypeHeaderProperty(\n                csv_content_types=["csvContentTypes"],\n                json_content_types=["jsonContentTypes"]\n            ),\n            enable_capture=False,\n            kms_key_id="kmsKeyId"\n        ),\n        endpoint_config_name="endpointConfigName",\n        explainer_config=sagemaker.CfnEndpointConfig.ExplainerConfigProperty(\n            clarify_explainer_config=sagemaker.CfnEndpointConfig.ClarifyExplainerConfigProperty(\n                shap_config=sagemaker.CfnEndpointConfig.ClarifyShapConfigProperty(\n                    shap_baseline_config=sagemaker.CfnEndpointConfig.ClarifyShapBaselineConfigProperty(\n                        mime_type="mimeType",\n                        shap_baseline="shapBaseline",\n                        shap_baseline_uri="shapBaselineUri"\n                    ),\n\n                    # the properties below are optional\n                    number_of_samples=123,\n                    seed=123,\n                    text_config=sagemaker.CfnEndpointConfig.ClarifyTextConfigProperty(\n                        granularity="granularity",\n                        language="language"\n                    ),\n                    use_logit=False\n                ),\n\n                # the properties below are optional\n                enable_explanations="enableExplanations",\n                inference_config=sagemaker.CfnEndpointConfig.ClarifyInferenceConfigProperty(\n                    content_template="contentTemplate",\n                    feature_headers=["featureHeaders"],\n                    features_attribute="featuresAttribute",\n                    feature_types=["featureTypes"],\n                    label_attribute="labelAttribute",\n                    label_headers=["labelHeaders"],\n                    label_index=123,\n                    max_payload_in_mb=123,\n                    max_record_count=123,\n                    probability_attribute="probabilityAttribute",\n                    probability_index=123\n                )\n            )\n        ),\n        kms_key_id="kmsKeyId",\n        shadow_production_variants=[sagemaker.CfnEndpointConfig.ProductionVariantProperty(\n            initial_variant_weight=123,\n            model_name="modelName",\n            variant_name="variantName",\n\n            # the properties below are optional\n            accelerator_type="acceleratorType",\n            container_startup_health_check_timeout_in_seconds=123,\n            enable_ssm_access=False,\n            initial_instance_count=123,\n            instance_type="instanceType",\n            model_data_download_timeout_in_seconds=123,\n            serverless_config=sagemaker.CfnEndpointConfig.ServerlessConfigProperty(\n                max_concurrency=123,\n                memory_size_in_mb=123,\n\n                # the properties below are optional\n                provisioned_concurrency=123\n            ),\n            volume_size_in_gb=123\n        )],\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['production_variants', 'async_inference_config', 'data_capture_config', 'endpoint_config_name', 'explainer_config', 'kms_key_id', 'shadow_production_variants', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpointConfigProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnEndpointProps
class CfnEndpointPropsDef(BaseCfnProperty):
    endpoint_config_name: str = pydantic.Field(..., description='The name of the `AWS::SageMaker::EndpointConfig <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpointconfig.html>`_ resource that specifies the configuration for the endpoint. For more information, see `CreateEndpointConfig <https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateEndpointConfig.html>`_ .\n')
    deployment_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpoint_DeploymentConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.\n')
    endpoint_name: typing.Optional[str] = pydantic.Field(None, description='The name of the endpoint.The name must be unique within an AWS Region in your AWS account. The name is case-insensitive in ``CreateEndpoint`` , but the case is preserved and must be matched in ` <https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_runtime_InvokeEndpoint.html>`_ .\n')
    exclude_retained_variant_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnEndpoint_VariantPropertyPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description="When you are updating endpoint resources with `RetainAllVariantProperties <https://docs.aws.amazon.com/sagemaker/latest/dg/API_UpdateEndpoint.html#SageMaker-UpdateEndpoint-request-RetainAllVariantProperties>`_ whose value is set to ``true`` , ``ExcludeRetainedVariantProperties`` specifies the list of type `VariantProperty <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sagemaker-endpoint-variantproperty.html>`_ to override with the values provided by ``EndpointConfig`` . If you don't specify a value for ``ExcludeAllVariantProperties`` , no variant properties are overridden. Don't use this property when creating new endpoint resources or when ``RetainAllVariantProperties`` is set to ``false`` .\n")
    retain_all_variant_properties: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='When updating endpoint resources, enables or disables the retention of variant properties, such as the instance count or the variant weight. To retain the variant properties of an endpoint when updating it, set ``RetainAllVariantProperties`` to ``true`` . To use the variant properties specified in a new ``EndpointConfig`` call when updating an endpoint, set ``RetainAllVariantProperties`` to ``false`` . Use this property only when updating endpoint resources, not when creating new endpoint resources.\n')
    retain_deployment_config: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Specifies whether to reuse the last deployment configuration. The default value is false (the configuration is not reused).\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs to apply to this resource. For more information, see `Resource Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ and `Using Cost Allocation Tags <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what>`_ in the *AWS Billing and Cost Management User Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-endpoint.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cfn_endpoint_props = sagemaker.CfnEndpointProps(\n        endpoint_config_name="endpointConfigName",\n\n        # the properties below are optional\n        deployment_config=sagemaker.CfnEndpoint.DeploymentConfigProperty(\n            blue_green_update_policy=sagemaker.CfnEndpoint.BlueGreenUpdatePolicyProperty(\n                traffic_routing_configuration=sagemaker.CfnEndpoint.TrafficRoutingConfigProperty(\n                    type="type",\n\n                    # the properties below are optional\n                    canary_size=sagemaker.CfnEndpoint.CapacitySizeProperty(\n                        type="type",\n                        value=123\n                    ),\n                    linear_step_size=sagemaker.CfnEndpoint.CapacitySizeProperty(\n                        type="type",\n                        value=123\n                    ),\n                    wait_interval_in_seconds=123\n                ),\n\n                # the properties below are optional\n                maximum_execution_timeout_in_seconds=123,\n                termination_wait_in_seconds=123\n            ),\n\n            # the properties below are optional\n            auto_rollback_configuration=sagemaker.CfnEndpoint.AutoRollbackConfigProperty(\n                alarms=[sagemaker.CfnEndpoint.AlarmProperty(\n                    alarm_name="alarmName"\n                )]\n            )\n        ),\n        endpoint_name="endpointName",\n        exclude_retained_variant_properties=[sagemaker.CfnEndpoint.VariantPropertyProperty(\n            variant_property_type="variantPropertyType"\n        )],\n        retain_all_variant_properties=False,\n        retain_deployment_config=False,\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['endpoint_config_name', 'deployment_config', 'endpoint_name', 'exclude_retained_variant_properties', 'retain_all_variant_properties', 'retain_deployment_config', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnEndpointProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnFeatureGroupProps
class CfnFeatureGroupPropsDef(BaseCfnProperty):
    event_time_feature_name: str = pydantic.Field(..., description='The name of the feature that stores the ``EventTime`` of a Record in a ``FeatureGroup`` . A ``EventTime`` is point in time when a new event occurs that corresponds to the creation or update of a ``Record`` in ``FeatureGroup`` . All ``Records`` in the ``FeatureGroup`` must have a corresponding ``EventTime`` .\n')
    feature_definitions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnFeatureGroup_FeatureDefinitionPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='A list of ``Feature`` s. Each ``Feature`` must include a ``FeatureName`` and a ``FeatureType`` . Valid ``FeatureType`` s are ``Integral`` , ``Fractional`` and ``String`` . ``FeatureName`` s cannot be any of the following: ``is_deleted`` , ``write_time`` , ``api_invocation_time`` . You can create up to 2,500 ``FeatureDefinition`` s per ``FeatureGroup`` .\n')
    feature_group_name: str = pydantic.Field(..., description='The name of the ``FeatureGroup`` .\n')
    record_identifier_feature_name: str = pydantic.Field(..., description='The name of the ``Feature`` whose value uniquely identifies a ``Record`` defined in the ``FeatureGroup`` ``FeatureDefinitions`` .\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A free form description of a ``FeatureGroup`` .\n')
    offline_store_config: typing.Any = pydantic.Field(None, description='The configuration of an ``OfflineStore`` .\n')
    online_store_config: typing.Any = pydantic.Field(None, description='The configuration of an ``OnlineStore`` .\n')
    role_arn: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of the IAM execution role used to create the feature group.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Tags used to define a ``FeatureGroup`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-featuregroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    # offline_store_config: Any\n    # online_store_config: Any\n\n    cfn_feature_group_props = sagemaker.CfnFeatureGroupProps(\n        event_time_feature_name="eventTimeFeatureName",\n        feature_definitions=[sagemaker.CfnFeatureGroup.FeatureDefinitionProperty(\n            feature_name="featureName",\n            feature_type="featureType"\n        )],\n        feature_group_name="featureGroupName",\n        record_identifier_feature_name="recordIdentifierFeatureName",\n\n        # the properties below are optional\n        description="description",\n        offline_store_config=offline_store_config,\n        online_store_config=online_store_config,\n        role_arn="roleArn",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['event_time_feature_name', 'feature_definitions', 'feature_group_name', 'record_identifier_feature_name', 'description', 'offline_store_config', 'online_store_config', 'role_arn', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnFeatureGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnImageProps
class CfnImagePropsDef(BaseCfnProperty):
    image_name: str = pydantic.Field(..., description='The name of the Image. Must be unique by region in your account. *Length Constraints* : Minimum length of 1. Maximum length of 63. *Pattern* : ``^[a-zA-Z0-9]([-.]?[a-zA-Z0-9]){0,62}$``\n')
    image_role_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf. *Length Constraints* : Minimum length of 20. Maximum length of 2048. *Pattern* : ``^arn:aws[a-z\\-]*:iam::\\d{12}:role/?[a-zA-Z_0-9+=,.@\\-_/]+$``\n')
    image_description: typing.Optional[str] = pydantic.Field(None, description='The description of the image. *Length Constraints* : Minimum length of 1. Maximum length of 512. *Pattern* : ``.*``\n')
    image_display_name: typing.Optional[str] = pydantic.Field(None, description='The display name of the image. *Length Constraints* : Minimum length of 1. Maximum length of 128. *Pattern* : ``^\\S(.*\\S)?$``\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs to apply to this resource. *Array Members* : Minimum number of 0 items. Maximum number of 50 items.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-image.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cfn_image_props = sagemaker.CfnImageProps(\n        image_name="imageName",\n        image_role_arn="imageRoleArn",\n\n        # the properties below are optional\n        image_description="imageDescription",\n        image_display_name="imageDisplayName",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['image_name', 'image_role_arn', 'image_description', 'image_display_name', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnImageProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnImageVersionProps
class CfnImageVersionPropsDef(BaseCfnProperty):
    base_image: str = pydantic.Field(..., description='The container image that the SageMaker image version is based on. *Length Constraints* : Minimum length of 1. Maximum length of 255. *Pattern* : ``.*``\n')
    image_name: str = pydantic.Field(..., description='The name of the parent image. *Length Constraints* : Minimum length of 1. Maximum length of 63. *Pattern* : ``^[a-zA-Z0-9]([-.]?[a-zA-Z0-9]){0,62}$``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-imageversion.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cfn_image_version_props = sagemaker.CfnImageVersionProps(\n        base_image="baseImage",\n        image_name="imageName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['base_image', 'image_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnImageVersionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnInferenceExperimentProps
class CfnInferenceExperimentPropsDef(BaseCfnProperty):
    endpoint_name: str = pydantic.Field(..., description='The name of the endpoint.\n')
    model_variants: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnInferenceExperiment_ModelVariantConfigPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='An array of ``ModelVariantConfigSummary`` objects. There is one for each variant in the inference experiment. Each ``ModelVariantConfigSummary`` object in the array describes the infrastructure configuration for deploying the corresponding variant.\n')
    name: str = pydantic.Field(..., description='The name of the inference experiment.\n')
    role_arn: str = pydantic.Field(..., description='The ARN of the IAM role that Amazon SageMaker can assume to access model artifacts and container images, and manage Amazon SageMaker Inference endpoints for model deployment.\n')
    type: str = pydantic.Field(..., description='The type of the inference experiment.\n')
    data_storage_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnInferenceExperiment_DataStorageConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The Amazon S3 location and configuration for storing inference request and response data.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the inference experiment.\n')
    desired_state: typing.Optional[str] = pydantic.Field(None, description='The desired state of the experiment after stopping. The possible states are the following:. - ``Completed`` : The experiment completed successfully - ``Cancelled`` : The experiment was canceled\n')
    kms_key: typing.Optional[str] = pydantic.Field(None, description='The AWS Key Management Service key that Amazon SageMaker uses to encrypt captured data at rest using Amazon S3 server-side encryption.\n')
    schedule: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnInferenceExperiment_InferenceExperimentSchedulePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The duration for which the inference experiment ran or will run. The maximum duration that you can set for an inference experiment is 30 days.\n')
    shadow_mode_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnInferenceExperiment_ShadowModeConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration of ``ShadowMode`` inference experiment type, which shows the production variant that takes all the inference requests, and the shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant it also shows the percentage of requests that Amazon SageMaker replicates.\n')
    status_reason: typing.Optional[str] = pydantic.Field(None, description='The error message for the inference experiment status result.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-inferenceexperiment.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cfn_inference_experiment_props = sagemaker.CfnInferenceExperimentProps(\n        endpoint_name="endpointName",\n        model_variants=[sagemaker.CfnInferenceExperiment.ModelVariantConfigProperty(\n            infrastructure_config=sagemaker.CfnInferenceExperiment.ModelInfrastructureConfigProperty(\n                infrastructure_type="infrastructureType",\n                real_time_inference_config=sagemaker.CfnInferenceExperiment.RealTimeInferenceConfigProperty(\n                    instance_count=123,\n                    instance_type="instanceType"\n                )\n            ),\n            model_name="modelName",\n            variant_name="variantName"\n        )],\n        name="name",\n        role_arn="roleArn",\n        type="type",\n\n        # the properties below are optional\n        data_storage_config=sagemaker.CfnInferenceExperiment.DataStorageConfigProperty(\n            destination="destination",\n\n            # the properties below are optional\n            content_type=sagemaker.CfnInferenceExperiment.CaptureContentTypeHeaderProperty(\n                csv_content_types=["csvContentTypes"],\n                json_content_types=["jsonContentTypes"]\n            ),\n            kms_key="kmsKey"\n        ),\n        description="description",\n        desired_state="desiredState",\n        kms_key="kmsKey",\n        schedule=sagemaker.CfnInferenceExperiment.InferenceExperimentScheduleProperty(\n            end_time="endTime",\n            start_time="startTime"\n        ),\n        shadow_mode_config=sagemaker.CfnInferenceExperiment.ShadowModeConfigProperty(\n            shadow_model_variants=[sagemaker.CfnInferenceExperiment.ShadowModelVariantConfigProperty(\n                sampling_percentage=123,\n                shadow_model_variant_name="shadowModelVariantName"\n            )],\n            source_model_variant_name="sourceModelVariantName"\n        ),\n        status_reason="statusReason",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['endpoint_name', 'model_variants', 'name', 'role_arn', 'type', 'data_storage_config', 'description', 'desired_state', 'kms_key', 'schedule', 'shadow_mode_config', 'status_reason', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnInferenceExperimentProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelBiasJobDefinitionProps
class CfnModelBiasJobDefinitionPropsDef(BaseCfnProperty):
    job_resources: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_MonitoringResourcesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Identifies the resources to deploy for a monitoring job.\n')
    model_bias_app_specification: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_ModelBiasAppSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Configures the model bias job to run a specified Docker container image.\n')
    model_bias_job_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_ModelBiasJobInputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Inputs for the model bias job.\n')
    model_bias_job_output_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_MonitoringOutputConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The output configuration for monitoring jobs.\n')
    role_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.\n')
    endpoint_name: typing.Optional[str] = pydantic.Field(None, description='``AWS::SageMaker::ModelBiasJobDefinition.EndpointName``.\n')
    job_definition_name: typing.Optional[str] = pydantic.Field(None, description='The name of the bias job definition. The name must be unique within an AWS Region in the AWS account.\n')
    model_bias_baseline_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_ModelBiasBaselineConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The baseline configuration for a model bias job.\n')
    network_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_NetworkConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Networking options for a model bias job.\n')
    stopping_condition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelBiasJobDefinition_StoppingConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A time limit for how long the monitoring job is allowed to run before stopping.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelbiasjobdefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cfn_model_bias_job_definition_props = sagemaker.CfnModelBiasJobDefinitionProps(\n        job_resources=sagemaker.CfnModelBiasJobDefinition.MonitoringResourcesProperty(\n            cluster_config=sagemaker.CfnModelBiasJobDefinition.ClusterConfigProperty(\n                instance_count=123,\n                instance_type="instanceType",\n                volume_size_in_gb=123,\n\n                # the properties below are optional\n                volume_kms_key_id="volumeKmsKeyId"\n            )\n        ),\n        model_bias_app_specification=sagemaker.CfnModelBiasJobDefinition.ModelBiasAppSpecificationProperty(\n            config_uri="configUri",\n            image_uri="imageUri",\n\n            # the properties below are optional\n            environment={\n                "environment_key": "environment"\n            }\n        ),\n        model_bias_job_input=sagemaker.CfnModelBiasJobDefinition.ModelBiasJobInputProperty(\n            ground_truth_s3_input=sagemaker.CfnModelBiasJobDefinition.MonitoringGroundTruthS3InputProperty(\n                s3_uri="s3Uri"\n            ),\n\n            # the properties below are optional\n            batch_transform_input=sagemaker.CfnModelBiasJobDefinition.BatchTransformInputProperty(\n                data_captured_destination_s3_uri="dataCapturedDestinationS3Uri",\n                dataset_format=sagemaker.CfnModelBiasJobDefinition.DatasetFormatProperty(\n                    csv=sagemaker.CfnModelBiasJobDefinition.CsvProperty(\n                        header=False\n                    ),\n                    json=sagemaker.CfnModelBiasJobDefinition.JsonProperty(\n                        line=False\n                    ),\n                    parquet=False\n                ),\n                local_path="localPath",\n\n                # the properties below are optional\n                end_time_offset="endTimeOffset",\n                features_attribute="featuresAttribute",\n                inference_attribute="inferenceAttribute",\n                probability_attribute="probabilityAttribute",\n                probability_threshold_attribute=123,\n                s3_data_distribution_type="s3DataDistributionType",\n                s3_input_mode="s3InputMode",\n                start_time_offset="startTimeOffset"\n            ),\n            endpoint_input=sagemaker.CfnModelBiasJobDefinition.EndpointInputProperty(\n                endpoint_name="endpointName",\n                local_path="localPath",\n\n                # the properties below are optional\n                end_time_offset="endTimeOffset",\n                features_attribute="featuresAttribute",\n                inference_attribute="inferenceAttribute",\n                probability_attribute="probabilityAttribute",\n                probability_threshold_attribute=123,\n                s3_data_distribution_type="s3DataDistributionType",\n                s3_input_mode="s3InputMode",\n                start_time_offset="startTimeOffset"\n            )\n        ),\n        model_bias_job_output_config=sagemaker.CfnModelBiasJobDefinition.MonitoringOutputConfigProperty(\n            monitoring_outputs=[sagemaker.CfnModelBiasJobDefinition.MonitoringOutputProperty(\n                s3_output=sagemaker.CfnModelBiasJobDefinition.S3OutputProperty(\n                    local_path="localPath",\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    s3_upload_mode="s3UploadMode"\n                )\n            )],\n\n            # the properties below are optional\n            kms_key_id="kmsKeyId"\n        ),\n        role_arn="roleArn",\n\n        # the properties below are optional\n        endpoint_name="endpointName",\n        job_definition_name="jobDefinitionName",\n        model_bias_baseline_config=sagemaker.CfnModelBiasJobDefinition.ModelBiasBaselineConfigProperty(\n            baselining_job_name="baseliningJobName",\n            constraints_resource=sagemaker.CfnModelBiasJobDefinition.ConstraintsResourceProperty(\n                s3_uri="s3Uri"\n            )\n        ),\n        network_config=sagemaker.CfnModelBiasJobDefinition.NetworkConfigProperty(\n            enable_inter_container_traffic_encryption=False,\n            enable_network_isolation=False,\n            vpc_config=sagemaker.CfnModelBiasJobDefinition.VpcConfigProperty(\n                security_group_ids=["securityGroupIds"],\n                subnets=["subnets"]\n            )\n        ),\n        stopping_condition=sagemaker.CfnModelBiasJobDefinition.StoppingConditionProperty(\n            max_runtime_in_seconds=123\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['job_resources', 'model_bias_app_specification', 'model_bias_job_input', 'model_bias_job_output_config', 'role_arn', 'endpoint_name', 'job_definition_name', 'model_bias_baseline_config', 'network_config', 'stopping_condition', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelBiasJobDefinitionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelCardProps
class CfnModelCardPropsDef(BaseCfnProperty):
    content: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_ContentPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The content of the model card. Content uses the `model card JSON schema <https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html#model-cards-json-schema>`_ .\n')
    model_card_name: str = pydantic.Field(..., description='The unique name of the model card.\n')
    model_card_status: str = pydantic.Field(..., description='The approval status of the model card within your organization. Different organizations might have different criteria for model card review and approval. - ``Draft`` : The model card is a work in progress. - ``PendingReview`` : The model card is pending review. - ``Approved`` : The model card is approved. - ``Archived`` : The model card is archived. No more updates should be made to the model card, but it can still be exported.\n')
    created_by: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_UserContextPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the user who created or modified one or more of the following:. - Experiment - Trial - Trial component - Lineage group - Project - Model Card\n')
    last_modified_by: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_UserContextPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::SageMaker::ModelCard.LastModifiedBy``.\n')
    security_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelCard_SecurityConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The security configuration used to protect model card data.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='Key-value pairs used to manage metadata for the model card.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelcard.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    # value: Any\n\n    cfn_model_card_props = sagemaker.CfnModelCardProps(\n        content=sagemaker.CfnModelCard.ContentProperty(\n            additional_information=sagemaker.CfnModelCard.AdditionalInformationProperty(\n                caveats_and_recommendations="caveatsAndRecommendations",\n                custom_details={\n                    "custom_details_key": "customDetails"\n                },\n                ethical_considerations="ethicalConsiderations"\n            ),\n            business_details=sagemaker.CfnModelCard.BusinessDetailsProperty(\n                business_problem="businessProblem",\n                business_stakeholders="businessStakeholders",\n                line_of_business="lineOfBusiness"\n            ),\n            evaluation_details=[sagemaker.CfnModelCard.EvaluationDetailProperty(\n                name="name",\n\n                # the properties below are optional\n                datasets=["datasets"],\n                evaluation_job_arn="evaluationJobArn",\n                evaluation_observation="evaluationObservation",\n                metadata={\n                    "metadata_key": "metadata"\n                },\n                metric_groups=[sagemaker.CfnModelCard.MetricGroupProperty(\n                    metric_data=[sagemaker.CfnModelCard.MetricDataItemsProperty(\n                        name="name",\n                        type="type",\n                        value=value,\n\n                        # the properties below are optional\n                        notes="notes",\n                        x_axis_name=["xAxisName"],\n                        y_axis_name=["yAxisName"]\n                    )],\n                    name="name"\n                )]\n            )],\n            intended_uses=sagemaker.CfnModelCard.IntendedUsesProperty(\n                explanations_for_risk_rating="explanationsForRiskRating",\n                factors_affecting_model_efficiency="factorsAffectingModelEfficiency",\n                intended_uses="intendedUses",\n                purpose_of_model="purposeOfModel",\n                risk_rating="riskRating"\n            ),\n            model_overview=sagemaker.CfnModelCard.ModelOverviewProperty(\n                algorithm_type="algorithmType",\n                inference_environment=sagemaker.CfnModelCard.InferenceEnvironmentProperty(\n                    container_image=["containerImage"]\n                ),\n                model_artifact=["modelArtifact"],\n                model_creator="modelCreator",\n                model_description="modelDescription",\n                model_id="modelId",\n                model_name="modelName",\n                model_owner="modelOwner",\n                model_version=123,\n                problem_type="problemType"\n            ),\n            model_package_details=sagemaker.CfnModelCard.ModelPackageDetailsProperty(\n                approval_description="approvalDescription",\n                created_by=sagemaker.CfnModelCard.ModelPackageCreatorProperty(\n                    user_profile_name="userProfileName"\n                ),\n                domain="domain",\n                inference_specification=sagemaker.CfnModelCard.InferenceSpecificationProperty(\n                    containers=[sagemaker.CfnModelCard.ContainerProperty(\n                        image="image",\n\n                        # the properties below are optional\n                        model_data_url="modelDataUrl",\n                        nearest_model_name="nearestModelName"\n                    )]\n                ),\n                model_approval_status="modelApprovalStatus",\n                model_package_arn="modelPackageArn",\n                model_package_description="modelPackageDescription",\n                model_package_group_name="modelPackageGroupName",\n                model_package_name="modelPackageName",\n                model_package_status="modelPackageStatus",\n                model_package_version=123,\n                source_algorithms=[sagemaker.CfnModelCard.SourceAlgorithmProperty(\n                    algorithm_name="algorithmName",\n\n                    # the properties below are optional\n                    model_data_url="modelDataUrl"\n                )],\n                task="task"\n            ),\n            training_details=sagemaker.CfnModelCard.TrainingDetailsProperty(\n                objective_function=sagemaker.CfnModelCard.ObjectiveFunctionProperty(\n                    function=sagemaker.CfnModelCard.FunctionProperty(\n                        condition="condition",\n                        facet="facet",\n                        function="function"\n                    ),\n                    notes="notes"\n                ),\n                training_job_details=sagemaker.CfnModelCard.TrainingJobDetailsProperty(\n                    hyper_parameters=[sagemaker.CfnModelCard.TrainingHyperParameterProperty(\n                        name="name",\n                        value="value"\n                    )],\n                    training_arn="trainingArn",\n                    training_datasets=["trainingDatasets"],\n                    training_environment=sagemaker.CfnModelCard.TrainingEnvironmentProperty(\n                        container_image=["containerImage"]\n                    ),\n                    training_metrics=[sagemaker.CfnModelCard.TrainingMetricProperty(\n                        name="name",\n                        value=123,\n\n                        # the properties below are optional\n                        notes="notes"\n                    )],\n                    user_provided_hyper_parameters=[sagemaker.CfnModelCard.TrainingHyperParameterProperty(\n                        name="name",\n                        value="value"\n                    )],\n                    user_provided_training_metrics=[sagemaker.CfnModelCard.TrainingMetricProperty(\n                        name="name",\n                        value=123,\n\n                        # the properties below are optional\n                        notes="notes"\n                    )]\n                ),\n                training_observations="trainingObservations"\n            )\n        ),\n        model_card_name="modelCardName",\n        model_card_status="modelCardStatus",\n\n        # the properties below are optional\n        created_by=sagemaker.CfnModelCard.UserContextProperty(\n            domain_id="domainId",\n            user_profile_arn="userProfileArn",\n            user_profile_name="userProfileName"\n        ),\n        last_modified_by=sagemaker.CfnModelCard.UserContextProperty(\n            domain_id="domainId",\n            user_profile_arn="userProfileArn",\n            user_profile_name="userProfileName"\n        ),\n        security_config=sagemaker.CfnModelCard.SecurityConfigProperty(\n            kms_key_id="kmsKeyId"\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['content', 'model_card_name', 'model_card_status', 'created_by', 'last_modified_by', 'security_config', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelCardProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinitionProps
class CfnModelExplainabilityJobDefinitionPropsDef(BaseCfnProperty):
    job_resources: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_MonitoringResourcesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Identifies the resources to deploy for a monitoring job.\n')
    model_explainability_app_specification: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_ModelExplainabilityAppSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Configures the model explainability job to run a specified Docker container image.\n')
    model_explainability_job_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_ModelExplainabilityJobInputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Inputs for the model explainability job.\n')
    model_explainability_job_output_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_MonitoringOutputConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The output configuration for monitoring jobs.\n')
    role_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.\n')
    endpoint_name: typing.Optional[str] = pydantic.Field(None, description='``AWS::SageMaker::ModelExplainabilityJobDefinition.EndpointName``.\n')
    job_definition_name: typing.Optional[str] = pydantic.Field(None, description='The name of the model explainability job definition. The name must be unique within an AWS Region in the AWS account.\n')
    model_explainability_baseline_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_ModelExplainabilityBaselineConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The baseline configuration for a model explainability job.\n')
    network_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_NetworkConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Networking options for a model explainability job.\n')
    stopping_condition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelExplainabilityJobDefinition_StoppingConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A time limit for how long the monitoring job is allowed to run before stopping.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelexplainabilityjobdefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cfn_model_explainability_job_definition_props = sagemaker.CfnModelExplainabilityJobDefinitionProps(\n        job_resources=sagemaker.CfnModelExplainabilityJobDefinition.MonitoringResourcesProperty(\n            cluster_config=sagemaker.CfnModelExplainabilityJobDefinition.ClusterConfigProperty(\n                instance_count=123,\n                instance_type="instanceType",\n                volume_size_in_gb=123,\n\n                # the properties below are optional\n                volume_kms_key_id="volumeKmsKeyId"\n            )\n        ),\n        model_explainability_app_specification=sagemaker.CfnModelExplainabilityJobDefinition.ModelExplainabilityAppSpecificationProperty(\n            config_uri="configUri",\n            image_uri="imageUri",\n\n            # the properties below are optional\n            environment={\n                "environment_key": "environment"\n            }\n        ),\n        model_explainability_job_input=sagemaker.CfnModelExplainabilityJobDefinition.ModelExplainabilityJobInputProperty(\n            batch_transform_input=sagemaker.CfnModelExplainabilityJobDefinition.BatchTransformInputProperty(\n                data_captured_destination_s3_uri="dataCapturedDestinationS3Uri",\n                dataset_format=sagemaker.CfnModelExplainabilityJobDefinition.DatasetFormatProperty(\n                    csv=sagemaker.CfnModelExplainabilityJobDefinition.CsvProperty(\n                        header=False\n                    ),\n                    json=sagemaker.CfnModelExplainabilityJobDefinition.JsonProperty(\n                        line=False\n                    ),\n                    parquet=False\n                ),\n                local_path="localPath",\n\n                # the properties below are optional\n                features_attribute="featuresAttribute",\n                inference_attribute="inferenceAttribute",\n                probability_attribute="probabilityAttribute",\n                s3_data_distribution_type="s3DataDistributionType",\n                s3_input_mode="s3InputMode"\n            ),\n            endpoint_input=sagemaker.CfnModelExplainabilityJobDefinition.EndpointInputProperty(\n                endpoint_name="endpointName",\n                local_path="localPath",\n\n                # the properties below are optional\n                features_attribute="featuresAttribute",\n                inference_attribute="inferenceAttribute",\n                probability_attribute="probabilityAttribute",\n                s3_data_distribution_type="s3DataDistributionType",\n                s3_input_mode="s3InputMode"\n            )\n        ),\n        model_explainability_job_output_config=sagemaker.CfnModelExplainabilityJobDefinition.MonitoringOutputConfigProperty(\n            monitoring_outputs=[sagemaker.CfnModelExplainabilityJobDefinition.MonitoringOutputProperty(\n                s3_output=sagemaker.CfnModelExplainabilityJobDefinition.S3OutputProperty(\n                    local_path="localPath",\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    s3_upload_mode="s3UploadMode"\n                )\n            )],\n\n            # the properties below are optional\n            kms_key_id="kmsKeyId"\n        ),\n        role_arn="roleArn",\n\n        # the properties below are optional\n        endpoint_name="endpointName",\n        job_definition_name="jobDefinitionName",\n        model_explainability_baseline_config=sagemaker.CfnModelExplainabilityJobDefinition.ModelExplainabilityBaselineConfigProperty(\n            baselining_job_name="baseliningJobName",\n            constraints_resource=sagemaker.CfnModelExplainabilityJobDefinition.ConstraintsResourceProperty(\n                s3_uri="s3Uri"\n            )\n        ),\n        network_config=sagemaker.CfnModelExplainabilityJobDefinition.NetworkConfigProperty(\n            enable_inter_container_traffic_encryption=False,\n            enable_network_isolation=False,\n            vpc_config=sagemaker.CfnModelExplainabilityJobDefinition.VpcConfigProperty(\n                security_group_ids=["securityGroupIds"],\n                subnets=["subnets"]\n            )\n        ),\n        stopping_condition=sagemaker.CfnModelExplainabilityJobDefinition.StoppingConditionProperty(\n            max_runtime_in_seconds=123\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['job_resources', 'model_explainability_app_specification', 'model_explainability_job_input', 'model_explainability_job_output_config', 'role_arn', 'endpoint_name', 'job_definition_name', 'model_explainability_baseline_config', 'network_config', 'stopping_condition', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelExplainabilityJobDefinitionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackageGroupProps
class CfnModelPackageGroupPropsDef(BaseCfnProperty):
    model_package_group_name: str = pydantic.Field(..., description='The name of the model group.\n')
    model_package_group_description: typing.Optional[str] = pydantic.Field(None, description='The description for the model group.\n')
    model_package_group_policy: typing.Any = pydantic.Field(None, description='A resouce policy to control access to a model group. For information about resoure policies, see `Identity-based policies and resource-based policies <https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html>`_ in the *AWS Identity and Access Management User Guide.* .\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackagegroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    # model_package_group_policy: Any\n\n    cfn_model_package_group_props = sagemaker.CfnModelPackageGroupProps(\n        model_package_group_name="modelPackageGroupName",\n\n        # the properties below are optional\n        model_package_group_description="modelPackageGroupDescription",\n        model_package_group_policy=model_package_group_policy,\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['model_package_group_name', 'model_package_group_description', 'model_package_group_policy', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackageGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelPackageProps
class CfnModelPackagePropsDef(BaseCfnProperty):
    additional_inference_specification_definition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_AdditionalInferenceSpecificationDefinitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A structure of additional Inference Specification. Additional Inference Specification specifies details about inference jobs that can be run with models based on this model package\n')
    additional_inference_specifications: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_AdditionalInferenceSpecificationDefinitionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An array of additional Inference Specification objects.\n')
    additional_inference_specifications_to_add: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_AdditionalInferenceSpecificationDefinitionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='An array of additional Inference Specification objects to be added to the existing array. The total number of additional Inference Specification objects cannot exceed 15. Each additional Inference Specification object specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts.\n')
    approval_description: typing.Optional[str] = pydantic.Field(None, description='A description provided when the model approval is set.\n')
    certify_for_marketplace: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Whether the model package is to be certified to be listed on AWS Marketplace. For information about listing model packages on AWS Marketplace, see `List Your Algorithm or Model Package on AWS Marketplace <https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-mkt-list.html>`_ .\n')
    client_token: typing.Optional[str] = pydantic.Field(None, description='A unique token that guarantees that the call to this API is idempotent.\n')
    created_by: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_UserContextPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.\n')
    customer_metadata_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='The metadata properties for the model package.\n')
    domain: typing.Optional[str] = pydantic.Field(None, description='The machine learning domain of your model package and its components. Common machine learning domains include computer vision and natural language processing.\n')
    drift_check_baselines: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_DriftCheckBaselinesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Represents the drift check baselines that can be used when the model monitor is set using the model package.\n')
    environment: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='The environment variables to set in the Docker container. Each key and value in the ``Environment`` string to string map can have length of up to 1024. We support up to 16 entries in the map.\n')
    inference_specification: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_InferenceSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Defines how to perform inference generation after a training job is run.\n')
    last_modified_by: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_UserContextPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.\n')
    last_modified_time: typing.Optional[str] = pydantic.Field(None, description='The last time the model package was modified.\n')
    metadata_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_MetadataPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Metadata properties of the tracking entity, trial, or trial component.\n')
    model_approval_status: typing.Optional[str] = pydantic.Field(None, description='The approval status of the model. This can be one of the following values. - ``APPROVED`` - The model is approved - ``REJECTED`` - The model is rejected. - ``PENDING_MANUAL_APPROVAL`` - The model is waiting for manual approval.\n')
    model_metrics: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ModelMetricsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Metrics for the model.\n')
    model_package_description: typing.Optional[str] = pydantic.Field(None, description='The description of the model package.\n')
    model_package_group_name: typing.Optional[str] = pydantic.Field(None, description='The model group to which the model belongs.\n')
    model_package_name: typing.Optional[str] = pydantic.Field(None, description='The name of the model.\n')
    model_package_status_details: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ModelPackageStatusDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the validation and image scan statuses of the model package.\n')
    model_package_status_item: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ModelPackageStatusItemPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Represents the overall status of a model package.\n')
    model_package_version: typing.Union[int, float, None] = pydantic.Field(None, description='The version number of a versioned model.\n')
    sample_payload_url: typing.Optional[str] = pydantic.Field(None, description='The Amazon Simple Storage Service path where the sample payload are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).\n')
    source_algorithm_specification: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_SourceAlgorithmSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A list of algorithms that were used to create a model package.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of the tags associated with the model package. For more information, see `Tagging AWS resources <https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html>`_ in the *AWS General Reference Guide* .\n')
    task: typing.Optional[str] = pydantic.Field(None, description='The machine learning task your model package accomplishes. Common machine learning tasks include object detection and image classification.\n')
    validation_specification: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelPackage_ValidationSpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies batch transform jobs that SageMaker runs to validate your model package.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelpackage.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    # model_input: Any\n\n    cfn_model_package_props = sagemaker.CfnModelPackageProps(\n        additional_inference_specification_definition=sagemaker.CfnModelPackage.AdditionalInferenceSpecificationDefinitionProperty(\n            containers=[sagemaker.CfnModelPackage.ModelPackageContainerDefinitionProperty(\n                image="image",\n\n                # the properties below are optional\n                container_hostname="containerHostname",\n                environment={\n                    "environment_key": "environment"\n                },\n                framework="framework",\n                framework_version="frameworkVersion",\n                image_digest="imageDigest",\n                model_data_url="modelDataUrl",\n                model_input=model_input,\n                nearest_model_name="nearestModelName",\n                product_id="productId"\n            )],\n            name="name",\n\n            # the properties below are optional\n            description="description",\n            supported_content_types=["supportedContentTypes"],\n            supported_realtime_inference_instance_types=["supportedRealtimeInferenceInstanceTypes"],\n            supported_response_mime_types=["supportedResponseMimeTypes"],\n            supported_transform_instance_types=["supportedTransformInstanceTypes"]\n        ),\n        additional_inference_specifications=[sagemaker.CfnModelPackage.AdditionalInferenceSpecificationDefinitionProperty(\n            containers=[sagemaker.CfnModelPackage.ModelPackageContainerDefinitionProperty(\n                image="image",\n\n                # the properties below are optional\n                container_hostname="containerHostname",\n                environment={\n                    "environment_key": "environment"\n                },\n                framework="framework",\n                framework_version="frameworkVersion",\n                image_digest="imageDigest",\n                model_data_url="modelDataUrl",\n                model_input=model_input,\n                nearest_model_name="nearestModelName",\n                product_id="productId"\n            )],\n            name="name",\n\n            # the properties below are optional\n            description="description",\n            supported_content_types=["supportedContentTypes"],\n            supported_realtime_inference_instance_types=["supportedRealtimeInferenceInstanceTypes"],\n            supported_response_mime_types=["supportedResponseMimeTypes"],\n            supported_transform_instance_types=["supportedTransformInstanceTypes"]\n        )],\n        additional_inference_specifications_to_add=[sagemaker.CfnModelPackage.AdditionalInferenceSpecificationDefinitionProperty(\n            containers=[sagemaker.CfnModelPackage.ModelPackageContainerDefinitionProperty(\n                image="image",\n\n                # the properties below are optional\n                container_hostname="containerHostname",\n                environment={\n                    "environment_key": "environment"\n                },\n                framework="framework",\n                framework_version="frameworkVersion",\n                image_digest="imageDigest",\n                model_data_url="modelDataUrl",\n                model_input=model_input,\n                nearest_model_name="nearestModelName",\n                product_id="productId"\n            )],\n            name="name",\n\n            # the properties below are optional\n            description="description",\n            supported_content_types=["supportedContentTypes"],\n            supported_realtime_inference_instance_types=["supportedRealtimeInferenceInstanceTypes"],\n            supported_response_mime_types=["supportedResponseMimeTypes"],\n            supported_transform_instance_types=["supportedTransformInstanceTypes"]\n        )],\n        approval_description="approvalDescription",\n        certify_for_marketplace=False,\n        client_token="clientToken",\n        created_by=sagemaker.CfnModelPackage.UserContextProperty(\n            domain_id="domainId",\n            user_profile_arn="userProfileArn",\n            user_profile_name="userProfileName"\n        ),\n        customer_metadata_properties={\n            "customer_metadata_properties_key": "customerMetadataProperties"\n        },\n        domain="domain",\n        drift_check_baselines=sagemaker.CfnModelPackage.DriftCheckBaselinesProperty(\n            bias=sagemaker.CfnModelPackage.DriftCheckBiasProperty(\n                config_file=sagemaker.CfnModelPackage.FileSourceProperty(\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    content_digest="contentDigest",\n                    content_type="contentType"\n                ),\n                post_training_constraints=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                    content_type="contentType",\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    content_digest="contentDigest"\n                ),\n                pre_training_constraints=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                    content_type="contentType",\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    content_digest="contentDigest"\n                )\n            ),\n            explainability=sagemaker.CfnModelPackage.DriftCheckExplainabilityProperty(\n                config_file=sagemaker.CfnModelPackage.FileSourceProperty(\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    content_digest="contentDigest",\n                    content_type="contentType"\n                ),\n                constraints=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                    content_type="contentType",\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    content_digest="contentDigest"\n                )\n            ),\n            model_data_quality=sagemaker.CfnModelPackage.DriftCheckModelDataQualityProperty(\n                constraints=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                    content_type="contentType",\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    content_digest="contentDigest"\n                ),\n                statistics=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                    content_type="contentType",\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    content_digest="contentDigest"\n                )\n            ),\n            model_quality=sagemaker.CfnModelPackage.DriftCheckModelQualityProperty(\n                constraints=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                    content_type="contentType",\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    content_digest="contentDigest"\n                ),\n                statistics=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                    content_type="contentType",\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    content_digest="contentDigest"\n                )\n            )\n        ),\n        environment={\n            "environment_key": "environment"\n        },\n        inference_specification=sagemaker.CfnModelPackage.InferenceSpecificationProperty(\n            containers=[sagemaker.CfnModelPackage.ModelPackageContainerDefinitionProperty(\n                image="image",\n\n                # the properties below are optional\n                container_hostname="containerHostname",\n                environment={\n                    "environment_key": "environment"\n                },\n                framework="framework",\n                framework_version="frameworkVersion",\n                image_digest="imageDigest",\n                model_data_url="modelDataUrl",\n                model_input=model_input,\n                nearest_model_name="nearestModelName",\n                product_id="productId"\n            )],\n            supported_content_types=["supportedContentTypes"],\n            supported_response_mime_types=["supportedResponseMimeTypes"],\n\n            # the properties below are optional\n            supported_realtime_inference_instance_types=["supportedRealtimeInferenceInstanceTypes"],\n            supported_transform_instance_types=["supportedTransformInstanceTypes"]\n        ),\n        last_modified_by=sagemaker.CfnModelPackage.UserContextProperty(\n            domain_id="domainId",\n            user_profile_arn="userProfileArn",\n            user_profile_name="userProfileName"\n        ),\n        last_modified_time="lastModifiedTime",\n        metadata_properties=sagemaker.CfnModelPackage.MetadataPropertiesProperty(\n            commit_id="commitId",\n            generated_by="generatedBy",\n            project_id="projectId",\n            repository="repository"\n        ),\n        model_approval_status="modelApprovalStatus",\n        model_metrics=sagemaker.CfnModelPackage.ModelMetricsProperty(\n            bias=sagemaker.CfnModelPackage.BiasProperty(\n                post_training_report=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                    content_type="contentType",\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    content_digest="contentDigest"\n                ),\n                pre_training_report=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                    content_type="contentType",\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    content_digest="contentDigest"\n                ),\n                report=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                    content_type="contentType",\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    content_digest="contentDigest"\n                )\n            ),\n            explainability=sagemaker.CfnModelPackage.ExplainabilityProperty(\n                report=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                    content_type="contentType",\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    content_digest="contentDigest"\n                )\n            ),\n            model_data_quality=sagemaker.CfnModelPackage.ModelDataQualityProperty(\n                constraints=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                    content_type="contentType",\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    content_digest="contentDigest"\n                ),\n                statistics=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                    content_type="contentType",\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    content_digest="contentDigest"\n                )\n            ),\n            model_quality=sagemaker.CfnModelPackage.ModelQualityProperty(\n                constraints=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                    content_type="contentType",\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    content_digest="contentDigest"\n                ),\n                statistics=sagemaker.CfnModelPackage.MetricsSourceProperty(\n                    content_type="contentType",\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    content_digest="contentDigest"\n                )\n            )\n        ),\n        model_package_description="modelPackageDescription",\n        model_package_group_name="modelPackageGroupName",\n        model_package_name="modelPackageName",\n        model_package_status_details=sagemaker.CfnModelPackage.ModelPackageStatusDetailsProperty(\n            validation_statuses=[sagemaker.CfnModelPackage.ModelPackageStatusItemProperty(\n                name="name",\n                status="status",\n\n                # the properties below are optional\n                failure_reason="failureReason"\n            )],\n\n            # the properties below are optional\n            image_scan_statuses=[sagemaker.CfnModelPackage.ModelPackageStatusItemProperty(\n                name="name",\n                status="status",\n\n                # the properties below are optional\n                failure_reason="failureReason"\n            )]\n        ),\n        model_package_status_item=sagemaker.CfnModelPackage.ModelPackageStatusItemProperty(\n            name="name",\n            status="status",\n\n            # the properties below are optional\n            failure_reason="failureReason"\n        ),\n        model_package_version=123,\n        sample_payload_url="samplePayloadUrl",\n        source_algorithm_specification=sagemaker.CfnModelPackage.SourceAlgorithmSpecificationProperty(\n            source_algorithms=[sagemaker.CfnModelPackage.SourceAlgorithmProperty(\n                algorithm_name="algorithmName",\n\n                # the properties below are optional\n                model_data_url="modelDataUrl"\n            )]\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        task="task",\n        validation_specification=sagemaker.CfnModelPackage.ValidationSpecificationProperty(\n            validation_profiles=[sagemaker.CfnModelPackage.ValidationProfileProperty(\n                profile_name="profileName",\n                transform_job_definition=sagemaker.CfnModelPackage.TransformJobDefinitionProperty(\n                    transform_input=sagemaker.CfnModelPackage.TransformInputProperty(\n                        data_source=sagemaker.CfnModelPackage.DataSourceProperty(\n                            s3_data_source=sagemaker.CfnModelPackage.S3DataSourceProperty(\n                                s3_data_type="s3DataType",\n                                s3_uri="s3Uri"\n                            )\n                        ),\n\n                        # the properties below are optional\n                        compression_type="compressionType",\n                        content_type="contentType",\n                        split_type="splitType"\n                    ),\n                    transform_output=sagemaker.CfnModelPackage.TransformOutputProperty(\n                        s3_output_path="s3OutputPath",\n\n                        # the properties below are optional\n                        accept="accept",\n                        assemble_with="assembleWith",\n                        kms_key_id="kmsKeyId"\n                    ),\n                    transform_resources=sagemaker.CfnModelPackage.TransformResourcesProperty(\n                        instance_count=123,\n                        instance_type="instanceType",\n\n                        # the properties below are optional\n                        volume_kms_key_id="volumeKmsKeyId"\n                    ),\n\n                    # the properties below are optional\n                    batch_strategy="batchStrategy",\n                    environment={\n                        "environment_key": "environment"\n                    },\n                    max_concurrent_transforms=123,\n                    max_payload_in_mb=123\n                )\n            )],\n            validation_role="validationRole"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['additional_inference_specification_definition', 'additional_inference_specifications', 'additional_inference_specifications_to_add', 'approval_description', 'certify_for_marketplace', 'client_token', 'created_by', 'customer_metadata_properties', 'domain', 'drift_check_baselines', 'environment', 'inference_specification', 'last_modified_by', 'last_modified_time', 'metadata_properties', 'model_approval_status', 'model_metrics', 'model_package_description', 'model_package_group_name', 'model_package_name', 'model_package_status_details', 'model_package_status_item', 'model_package_version', 'sample_payload_url', 'source_algorithm_specification', 'tags', 'task', 'validation_specification']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelPackageProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelProps
class CfnModelPropsDef(BaseCfnProperty):
    execution_role_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the IAM role that SageMaker can assume to access model artifacts and docker image for deployment on ML compute instances or for batch transform jobs. Deploying on ML compute instances is part of model hosting. For more information, see `SageMaker Roles <https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html>`_ . .. epigraph:: To be able to pass this role to SageMaker, the caller of this API must have the ``iam:PassRole`` permission.\n')
    containers: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModel_ContainerDefinitionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='Specifies the containers in the inference pipeline.\n')
    enable_network_isolation: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Isolates the model container. No inbound or outbound network calls can be made to or from the model container.\n')
    inference_execution_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModel_InferenceExecutionConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies details of how containers in a multi-container endpoint are called.\n')
    model_name: typing.Optional[str] = pydantic.Field(None, description='The name of the new model.\n')
    primary_container: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModel_ContainerDefinitionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The location of the primary docker image containing inference code, associated artifacts, and custom environment map that the inference code uses when the model is deployed for predictions.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs to apply to this resource. For more information, see `Resource Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ and `Using Cost Allocation Tags <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what>`_ in the *AWS Billing and Cost Management User Guide* .\n')
    vpc_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModel_VpcConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A `VpcConfig <https://docs.aws.amazon.com/sagemaker/latest/dg/API_VpcConfig.html>`_ object that specifies the VPC that you want your model to connect to. Control access to and from your model container by configuring the VPC. ``VpcConfig`` is used in hosting services and in batch transform. For more information, see `Protect Endpoints by Using an Amazon Virtual Private Cloud <https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html>`_ and `Protect Data in Batch Transform Jobs by Using an Amazon Virtual Private Cloud <https://docs.aws.amazon.com/sagemaker/latest/dg/batch-vpc.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-model.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    # environment: Any\n\n    cfn_model_props = sagemaker.CfnModelProps(\n        execution_role_arn="executionRoleArn",\n\n        # the properties below are optional\n        containers=[sagemaker.CfnModel.ContainerDefinitionProperty(\n            container_hostname="containerHostname",\n            environment=environment,\n            image="image",\n            image_config=sagemaker.CfnModel.ImageConfigProperty(\n                repository_access_mode="repositoryAccessMode",\n\n                # the properties below are optional\n                repository_auth_config=sagemaker.CfnModel.RepositoryAuthConfigProperty(\n                    repository_credentials_provider_arn="repositoryCredentialsProviderArn"\n                )\n            ),\n            inference_specification_name="inferenceSpecificationName",\n            mode="mode",\n            model_data_url="modelDataUrl",\n            model_package_name="modelPackageName",\n            multi_model_config=sagemaker.CfnModel.MultiModelConfigProperty(\n                model_cache_setting="modelCacheSetting"\n            )\n        )],\n        enable_network_isolation=False,\n        inference_execution_config=sagemaker.CfnModel.InferenceExecutionConfigProperty(\n            mode="mode"\n        ),\n        model_name="modelName",\n        primary_container=sagemaker.CfnModel.ContainerDefinitionProperty(\n            container_hostname="containerHostname",\n            environment=environment,\n            image="image",\n            image_config=sagemaker.CfnModel.ImageConfigProperty(\n                repository_access_mode="repositoryAccessMode",\n\n                # the properties below are optional\n                repository_auth_config=sagemaker.CfnModel.RepositoryAuthConfigProperty(\n                    repository_credentials_provider_arn="repositoryCredentialsProviderArn"\n                )\n            ),\n            inference_specification_name="inferenceSpecificationName",\n            mode="mode",\n            model_data_url="modelDataUrl",\n            model_package_name="modelPackageName",\n            multi_model_config=sagemaker.CfnModel.MultiModelConfigProperty(\n                model_cache_setting="modelCacheSetting"\n            )\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        vpc_config=sagemaker.CfnModel.VpcConfigProperty(\n            security_group_ids=["securityGroupIds"],\n            subnets=["subnets"]\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['execution_role_arn', 'containers', 'enable_network_isolation', 'inference_execution_config', 'model_name', 'primary_container', 'tags', 'vpc_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnModelQualityJobDefinitionProps
class CfnModelQualityJobDefinitionPropsDef(BaseCfnProperty):
    job_resources: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_MonitoringResourcesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Identifies the resources to deploy for a monitoring job.\n')
    model_quality_app_specification: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_ModelQualityAppSpecificationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Container image configuration object for the monitoring job.\n')
    model_quality_job_input: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_ModelQualityJobInputPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='A list of the inputs that are monitored. Currently endpoints are supported.\n')
    model_quality_job_output_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_MonitoringOutputConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The output configuration for monitoring jobs.\n')
    role_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.\n')
    endpoint_name: typing.Optional[str] = pydantic.Field(None, description='``AWS::SageMaker::ModelQualityJobDefinition.EndpointName``.\n')
    job_definition_name: typing.Optional[str] = pydantic.Field(None, description='The name of the monitoring job definition.\n')
    model_quality_baseline_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_ModelQualityBaselineConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the constraints and baselines for the monitoring job.\n')
    network_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_NetworkConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the network configuration for the monitoring job.\n')
    stopping_condition: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnModelQualityJobDefinition_StoppingConditionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A time limit for how long the monitoring job is allowed to run before stopping.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-modelqualityjobdefinition.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cfn_model_quality_job_definition_props = sagemaker.CfnModelQualityJobDefinitionProps(\n        job_resources=sagemaker.CfnModelQualityJobDefinition.MonitoringResourcesProperty(\n            cluster_config=sagemaker.CfnModelQualityJobDefinition.ClusterConfigProperty(\n                instance_count=123,\n                instance_type="instanceType",\n                volume_size_in_gb=123,\n\n                # the properties below are optional\n                volume_kms_key_id="volumeKmsKeyId"\n            )\n        ),\n        model_quality_app_specification=sagemaker.CfnModelQualityJobDefinition.ModelQualityAppSpecificationProperty(\n            image_uri="imageUri",\n            problem_type="problemType",\n\n            # the properties below are optional\n            container_arguments=["containerArguments"],\n            container_entrypoint=["containerEntrypoint"],\n            environment={\n                "environment_key": "environment"\n            },\n            post_analytics_processor_source_uri="postAnalyticsProcessorSourceUri",\n            record_preprocessor_source_uri="recordPreprocessorSourceUri"\n        ),\n        model_quality_job_input=sagemaker.CfnModelQualityJobDefinition.ModelQualityJobInputProperty(\n            ground_truth_s3_input=sagemaker.CfnModelQualityJobDefinition.MonitoringGroundTruthS3InputProperty(\n                s3_uri="s3Uri"\n            ),\n\n            # the properties below are optional\n            batch_transform_input=sagemaker.CfnModelQualityJobDefinition.BatchTransformInputProperty(\n                data_captured_destination_s3_uri="dataCapturedDestinationS3Uri",\n                dataset_format=sagemaker.CfnModelQualityJobDefinition.DatasetFormatProperty(\n                    csv=sagemaker.CfnModelQualityJobDefinition.CsvProperty(\n                        header=False\n                    ),\n                    json=sagemaker.CfnModelQualityJobDefinition.JsonProperty(\n                        line=False\n                    ),\n                    parquet=False\n                ),\n                local_path="localPath",\n\n                # the properties below are optional\n                end_time_offset="endTimeOffset",\n                inference_attribute="inferenceAttribute",\n                probability_attribute="probabilityAttribute",\n                probability_threshold_attribute=123,\n                s3_data_distribution_type="s3DataDistributionType",\n                s3_input_mode="s3InputMode",\n                start_time_offset="startTimeOffset"\n            ),\n            endpoint_input=sagemaker.CfnModelQualityJobDefinition.EndpointInputProperty(\n                endpoint_name="endpointName",\n                local_path="localPath",\n\n                # the properties below are optional\n                end_time_offset="endTimeOffset",\n                inference_attribute="inferenceAttribute",\n                probability_attribute="probabilityAttribute",\n                probability_threshold_attribute=123,\n                s3_data_distribution_type="s3DataDistributionType",\n                s3_input_mode="s3InputMode",\n                start_time_offset="startTimeOffset"\n            )\n        ),\n        model_quality_job_output_config=sagemaker.CfnModelQualityJobDefinition.MonitoringOutputConfigProperty(\n            monitoring_outputs=[sagemaker.CfnModelQualityJobDefinition.MonitoringOutputProperty(\n                s3_output=sagemaker.CfnModelQualityJobDefinition.S3OutputProperty(\n                    local_path="localPath",\n                    s3_uri="s3Uri",\n\n                    # the properties below are optional\n                    s3_upload_mode="s3UploadMode"\n                )\n            )],\n\n            # the properties below are optional\n            kms_key_id="kmsKeyId"\n        ),\n        role_arn="roleArn",\n\n        # the properties below are optional\n        endpoint_name="endpointName",\n        job_definition_name="jobDefinitionName",\n        model_quality_baseline_config=sagemaker.CfnModelQualityJobDefinition.ModelQualityBaselineConfigProperty(\n            baselining_job_name="baseliningJobName",\n            constraints_resource=sagemaker.CfnModelQualityJobDefinition.ConstraintsResourceProperty(\n                s3_uri="s3Uri"\n            )\n        ),\n        network_config=sagemaker.CfnModelQualityJobDefinition.NetworkConfigProperty(\n            enable_inter_container_traffic_encryption=False,\n            enable_network_isolation=False,\n            vpc_config=sagemaker.CfnModelQualityJobDefinition.VpcConfigProperty(\n                security_group_ids=["securityGroupIds"],\n                subnets=["subnets"]\n            )\n        ),\n        stopping_condition=sagemaker.CfnModelQualityJobDefinition.StoppingConditionProperty(\n            max_runtime_in_seconds=123\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['job_resources', 'model_quality_app_specification', 'model_quality_job_input', 'model_quality_job_output_config', 'role_arn', 'endpoint_name', 'job_definition_name', 'model_quality_baseline_config', 'network_config', 'stopping_condition', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnModelQualityJobDefinitionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnMonitoringScheduleProps
class CfnMonitoringSchedulePropsDef(BaseCfnProperty):
    monitoring_schedule_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_MonitoringScheduleConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The configuration object that specifies the monitoring schedule and defines the monitoring job.\n')
    monitoring_schedule_name: str = pydantic.Field(..., description='The name of the monitoring schedule.\n')
    endpoint_name: typing.Optional[str] = pydantic.Field(None, description='The name of the endpoint using the monitoring schedule.\n')
    failure_reason: typing.Optional[str] = pydantic.Field(None, description='Contains the reason a monitoring job failed, if it failed.\n')
    last_monitoring_execution_summary: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnMonitoringSchedule_MonitoringExecutionSummaryPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Describes metadata on the last execution to run, if there was one.\n')
    monitoring_schedule_status: typing.Optional[str] = pydantic.Field(None, description='The status of the monitoring schedule.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-monitoringschedule.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cfn_monitoring_schedule_props = sagemaker.CfnMonitoringScheduleProps(\n        monitoring_schedule_config=sagemaker.CfnMonitoringSchedule.MonitoringScheduleConfigProperty(\n            monitoring_job_definition=sagemaker.CfnMonitoringSchedule.MonitoringJobDefinitionProperty(\n                monitoring_app_specification=sagemaker.CfnMonitoringSchedule.MonitoringAppSpecificationProperty(\n                    image_uri="imageUri",\n\n                    # the properties below are optional\n                    container_arguments=["containerArguments"],\n                    container_entrypoint=["containerEntrypoint"],\n                    post_analytics_processor_source_uri="postAnalyticsProcessorSourceUri",\n                    record_preprocessor_source_uri="recordPreprocessorSourceUri"\n                ),\n                monitoring_inputs=[sagemaker.CfnMonitoringSchedule.MonitoringInputProperty(\n                    batch_transform_input=sagemaker.CfnMonitoringSchedule.BatchTransformInputProperty(\n                        data_captured_destination_s3_uri="dataCapturedDestinationS3Uri",\n                        dataset_format=sagemaker.CfnMonitoringSchedule.DatasetFormatProperty(\n                            csv=sagemaker.CfnMonitoringSchedule.CsvProperty(\n                                header=False\n                            ),\n                            json=sagemaker.CfnMonitoringSchedule.JsonProperty(\n                                line=False\n                            ),\n                            parquet=False\n                        ),\n                        local_path="localPath",\n\n                        # the properties below are optional\n                        s3_data_distribution_type="s3DataDistributionType",\n                        s3_input_mode="s3InputMode"\n                    ),\n                    endpoint_input=sagemaker.CfnMonitoringSchedule.EndpointInputProperty(\n                        endpoint_name="endpointName",\n                        local_path="localPath",\n\n                        # the properties below are optional\n                        s3_data_distribution_type="s3DataDistributionType",\n                        s3_input_mode="s3InputMode"\n                    )\n                )],\n                monitoring_output_config=sagemaker.CfnMonitoringSchedule.MonitoringOutputConfigProperty(\n                    monitoring_outputs=[sagemaker.CfnMonitoringSchedule.MonitoringOutputProperty(\n                        s3_output=sagemaker.CfnMonitoringSchedule.S3OutputProperty(\n                            local_path="localPath",\n                            s3_uri="s3Uri",\n\n                            # the properties below are optional\n                            s3_upload_mode="s3UploadMode"\n                        )\n                    )],\n\n                    # the properties below are optional\n                    kms_key_id="kmsKeyId"\n                ),\n                monitoring_resources=sagemaker.CfnMonitoringSchedule.MonitoringResourcesProperty(\n                    cluster_config=sagemaker.CfnMonitoringSchedule.ClusterConfigProperty(\n                        instance_count=123,\n                        instance_type="instanceType",\n                        volume_size_in_gb=123,\n\n                        # the properties below are optional\n                        volume_kms_key_id="volumeKmsKeyId"\n                    )\n                ),\n                role_arn="roleArn",\n\n                # the properties below are optional\n                baseline_config=sagemaker.CfnMonitoringSchedule.BaselineConfigProperty(\n                    constraints_resource=sagemaker.CfnMonitoringSchedule.ConstraintsResourceProperty(\n                        s3_uri="s3Uri"\n                    ),\n                    statistics_resource=sagemaker.CfnMonitoringSchedule.StatisticsResourceProperty(\n                        s3_uri="s3Uri"\n                    )\n                ),\n                environment={\n                    "environment_key": "environment"\n                },\n                network_config=sagemaker.CfnMonitoringSchedule.NetworkConfigProperty(\n                    enable_inter_container_traffic_encryption=False,\n                    enable_network_isolation=False,\n                    vpc_config=sagemaker.CfnMonitoringSchedule.VpcConfigProperty(\n                        security_group_ids=["securityGroupIds"],\n                        subnets=["subnets"]\n                    )\n                ),\n                stopping_condition=sagemaker.CfnMonitoringSchedule.StoppingConditionProperty(\n                    max_runtime_in_seconds=123\n                )\n            ),\n            monitoring_job_definition_name="monitoringJobDefinitionName",\n            monitoring_type="monitoringType",\n            schedule_config=sagemaker.CfnMonitoringSchedule.ScheduleConfigProperty(\n                schedule_expression="scheduleExpression"\n            )\n        ),\n        monitoring_schedule_name="monitoringScheduleName",\n\n        # the properties below are optional\n        endpoint_name="endpointName",\n        failure_reason="failureReason",\n        last_monitoring_execution_summary=sagemaker.CfnMonitoringSchedule.MonitoringExecutionSummaryProperty(\n            creation_time="creationTime",\n            last_modified_time="lastModifiedTime",\n            monitoring_execution_status="monitoringExecutionStatus",\n            monitoring_schedule_name="monitoringScheduleName",\n            scheduled_time="scheduledTime",\n\n            # the properties below are optional\n            endpoint_name="endpointName",\n            failure_reason="failureReason",\n            processing_job_arn="processingJobArn"\n        ),\n        monitoring_schedule_status="monitoringScheduleStatus",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['monitoring_schedule_config', 'monitoring_schedule_name', 'endpoint_name', 'failure_reason', 'last_monitoring_execution_summary', 'monitoring_schedule_status', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnMonitoringScheduleProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnNotebookInstanceLifecycleConfigProps
class CfnNotebookInstanceLifecycleConfigPropsDef(BaseCfnProperty):
    notebook_instance_lifecycle_config_name: typing.Optional[str] = pydantic.Field(None, description='The name of the lifecycle configuration.\n')
    on_create: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnNotebookInstanceLifecycleConfig_NotebookInstanceLifecycleHookPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A shell script that runs only once, when you create a notebook instance. The shell script must be a base64-encoded string.\n')
    on_start: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnNotebookInstanceLifecycleConfig_NotebookInstanceLifecycleHookPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A shell script that runs every time you start a notebook instance, including when you create the notebook instance. The shell script must be a base64-encoded string.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstancelifecycleconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cfn_notebook_instance_lifecycle_config_props = sagemaker.CfnNotebookInstanceLifecycleConfigProps(\n        notebook_instance_lifecycle_config_name="notebookInstanceLifecycleConfigName",\n        on_create=[sagemaker.CfnNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHookProperty(\n            content="content"\n        )],\n        on_start=[sagemaker.CfnNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleHookProperty(\n            content="content"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['notebook_instance_lifecycle_config_name', 'on_create', 'on_start']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnNotebookInstanceLifecycleConfigProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnNotebookInstanceProps
class CfnNotebookInstancePropsDef(BaseCfnProperty):
    instance_type: str = pydantic.Field(..., description='The type of ML compute instance to launch for the notebook instance. .. epigraph:: Expect some interruption of service if this parameter is changed as CloudFormation stops a notebook instance and starts it up again to update it.\n')
    role_arn: str = pydantic.Field(..., description='When you send any requests to AWS resources from the notebook instance, SageMaker assumes this role to perform tasks on your behalf. You must grant this role necessary permissions so SageMaker can perform these tasks. The policy must allow the SageMaker service principal (sagemaker.amazonaws.com) permissions to assume this role. For more information, see `SageMaker Roles <https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html>`_ . .. epigraph:: To be able to pass this role to SageMaker, the caller of this API must have the ``iam:PassRole`` permission.\n')
    accelerator_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of Amazon Elastic Inference (EI) instance types to associate with the notebook instance. Currently, only one instance type can be associated with a notebook instance. For more information, see `Using Elastic Inference in Amazon SageMaker <https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html>`_ . *Valid Values:* ``ml.eia1.medium | ml.eia1.large | ml.eia1.xlarge | ml.eia2.medium | ml.eia2.large | ml.eia2.xlarge`` .\n')
    additional_code_repositories: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='An array of up to three Git repositories associated with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in `AWS CodeCommit <https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html>`_ or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see `Associating Git Repositories with SageMaker Notebook Instances <https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html>`_ .\n')
    default_code_repository: typing.Optional[str] = pydantic.Field(None, description='The Git repository associated with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in `AWS CodeCommit <https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html>`_ or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see `Associating Git Repositories with SageMaker Notebook Instances <https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html>`_ .\n')
    direct_internet_access: typing.Optional[str] = pydantic.Field(None, description='Sets whether SageMaker provides internet access to the notebook instance. If you set this to ``Disabled`` this notebook instance is able to access resources only in your VPC, and is not be able to connect to SageMaker training and endpoint services unless you configure a NAT Gateway in your VPC. For more information, see `Notebook Instances Are Internet-Enabled by Default <https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access>`_ . You can set the value of this parameter to ``Disabled`` only if you set a value for the ``SubnetId`` parameter.\n')
    instance_metadata_service_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnNotebookInstance_InstanceMetadataServiceConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Information on the IMDS configuration of the notebook instance.\n')
    kms_key_id: typing.Optional[str] = pydantic.Field(None, description='The Amazon Resource Name (ARN) of a AWS Key Management Service key that SageMaker uses to encrypt data on the storage volume attached to your notebook instance. The KMS key you provide must be enabled. For information, see `Enabling and Disabling Keys <https://docs.aws.amazon.com/kms/latest/developerguide/enabling-keys.html>`_ in the *AWS Key Management Service Developer Guide* .\n')
    lifecycle_config_name: typing.Optional[str] = pydantic.Field(None, description='The name of a lifecycle configuration to associate with the notebook instance. For information about lifecycle configurations, see `Customize a Notebook Instance <https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html>`_ in the *Amazon SageMaker Developer Guide* .\n')
    notebook_instance_name: typing.Optional[str] = pydantic.Field(None, description='The name of the new notebook instance.\n')
    platform_identifier: typing.Optional[str] = pydantic.Field(None, description='The platform identifier of the notebook instance runtime environment.\n')
    root_access: typing.Optional[str] = pydantic.Field(None, description='Whether root access is enabled or disabled for users of the notebook instance. The default value is ``Enabled`` . .. epigraph:: Lifecycle configurations need root access to be able to set up a notebook instance. Because of this, lifecycle configurations associated with a notebook instance always run with root access even if you disable root access for users.\n')
    security_group_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The VPC security group IDs, in the form sg-xxxxxxxx. The security groups must be for the same VPC as specified in the subnet.\n')
    subnet_id: typing.Optional[str] = pydantic.Field(None, description='The ID of the subnet in a VPC to which you would like to have a connectivity from your ML compute instance.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs to apply to this resource. For more information, see `Resource Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ and `Using Cost Allocation Tags <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what>`_ . You can add tags later by using the ``CreateTags`` API.\n')
    volume_size_in_gb: typing.Union[int, float, None] = pydantic.Field(None, description='The size, in GB, of the ML storage volume to attach to the notebook instance. The default value is 5 GB. .. epigraph:: Expect some interruption of service if this parameter is changed as CloudFormation stops a notebook instance and starts it up again to update it.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-notebookinstance.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cfn_notebook_instance_props = sagemaker.CfnNotebookInstanceProps(\n        instance_type="instanceType",\n        role_arn="roleArn",\n\n        # the properties below are optional\n        accelerator_types=["acceleratorTypes"],\n        additional_code_repositories=["additionalCodeRepositories"],\n        default_code_repository="defaultCodeRepository",\n        direct_internet_access="directInternetAccess",\n        instance_metadata_service_configuration=sagemaker.CfnNotebookInstance.InstanceMetadataServiceConfigurationProperty(\n            minimum_instance_metadata_service_version="minimumInstanceMetadataServiceVersion"\n        ),\n        kms_key_id="kmsKeyId",\n        lifecycle_config_name="lifecycleConfigName",\n        notebook_instance_name="notebookInstanceName",\n        platform_identifier="platformIdentifier",\n        root_access="rootAccess",\n        security_group_ids=["securityGroupIds"],\n        subnet_id="subnetId",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        volume_size_in_gb=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_type', 'role_arn', 'accelerator_types', 'additional_code_repositories', 'default_code_repository', 'direct_internet_access', 'instance_metadata_service_configuration', 'kms_key_id', 'lifecycle_config_name', 'notebook_instance_name', 'platform_identifier', 'root_access', 'security_group_ids', 'subnet_id', 'tags', 'volume_size_in_gb']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnNotebookInstanceProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnPipelineProps
class CfnPipelinePropsDef(BaseCfnProperty):
    pipeline_definition: typing.Any = pydantic.Field(..., description='The definition of the pipeline. This can be either a JSON string or an Amazon S3 location.\n')
    pipeline_name: str = pydantic.Field(..., description='The name of the pipeline.\n')
    role_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of the IAM role used to execute the pipeline.\n')
    parallelism_configuration: typing.Any = pydantic.Field(None, description='``AWS::SageMaker::Pipeline.ParallelismConfiguration``.\n')
    pipeline_description: typing.Optional[str] = pydantic.Field(None, description='The description of the pipeline.\n')
    pipeline_display_name: typing.Optional[str] = pydantic.Field(None, description='The display name of the pipeline.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags of the pipeline.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-pipeline.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    # parallelism_configuration: Any\n    # pipeline_definition: Any\n\n    cfn_pipeline_props = sagemaker.CfnPipelineProps(\n        pipeline_definition=pipeline_definition,\n        pipeline_name="pipelineName",\n        role_arn="roleArn",\n\n        # the properties below are optional\n        parallelism_configuration=parallelism_configuration,\n        pipeline_description="pipelineDescription",\n        pipeline_display_name="pipelineDisplayName",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['pipeline_definition', 'pipeline_name', 'role_arn', 'parallelism_configuration', 'pipeline_description', 'pipeline_display_name', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnPipelineProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnProjectProps
class CfnProjectPropsDef(BaseCfnProperty):
    project_name: str = pydantic.Field(..., description='The name of the project.\n')
    service_catalog_provisioning_details: typing.Any = pydantic.Field(..., description='The product ID and provisioning artifact ID to provision a service catalog. For information, see `What is AWS Service Catalog <https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html>`_ .\n')
    project_description: typing.Optional[str] = pydantic.Field(None, description='The description of the project.\n')
    service_catalog_provisioned_product_details: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnProject_ServiceCatalogProvisionedProductDetailsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::SageMaker::Project.ServiceCatalogProvisionedProductDetails``.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='A list of key-value pairs to apply to this resource. For more information, see `Resource Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ and `Using Cost Allocation Tags <https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what>`_ in the *AWS Billing and Cost Management User Guide* .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-project.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    # service_catalog_provisioning_details: Any\n\n    cfn_project_props = sagemaker.CfnProjectProps(\n        project_name="projectName",\n        service_catalog_provisioning_details=service_catalog_provisioning_details,\n\n        # the properties below are optional\n        project_description="projectDescription",\n        service_catalog_provisioned_product_details=sagemaker.CfnProject.ServiceCatalogProvisionedProductDetailsProperty(\n            provisioned_product_id="provisionedProductId",\n            provisioned_product_status_message="provisionedProductStatusMessage"\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['project_name', 'service_catalog_provisioning_details', 'project_description', 'service_catalog_provisioned_product_details', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnProjectProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnSpaceProps
class CfnSpacePropsDef(BaseCfnProperty):
    domain_id: str = pydantic.Field(..., description='The ID of the associated Domain.\n')
    space_name: str = pydantic.Field(..., description='The name of the space.\n')
    space_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnSpace_SpaceSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A collection of space settings.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-space.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cfn_space_props = sagemaker.CfnSpaceProps(\n        domain_id="domainId",\n        space_name="spaceName",\n\n        # the properties below are optional\n        space_settings=sagemaker.CfnSpace.SpaceSettingsProperty(\n            jupyter_server_app_settings=sagemaker.CfnSpace.JupyterServerAppSettingsProperty(\n                default_resource_spec=sagemaker.CfnSpace.ResourceSpecProperty(\n                    instance_type="instanceType",\n                    sage_maker_image_arn="sageMakerImageArn",\n                    sage_maker_image_version_arn="sageMakerImageVersionArn"\n                )\n            ),\n            kernel_gateway_app_settings=sagemaker.CfnSpace.KernelGatewayAppSettingsProperty(\n                custom_images=[sagemaker.CfnSpace.CustomImageProperty(\n                    app_image_config_name="appImageConfigName",\n                    image_name="imageName",\n\n                    # the properties below are optional\n                    image_version_number=123\n                )],\n                default_resource_spec=sagemaker.CfnSpace.ResourceSpecProperty(\n                    instance_type="instanceType",\n                    sage_maker_image_arn="sageMakerImageArn",\n                    sage_maker_image_version_arn="sageMakerImageVersionArn"\n                )\n            )\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['domain_id', 'space_name', 'space_settings', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnSpaceProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnUserProfileProps
class CfnUserProfilePropsDef(BaseCfnProperty):
    domain_id: str = pydantic.Field(..., description='The domain ID.\n')
    user_profile_name: str = pydantic.Field(..., description='The user profile name.\n')
    single_sign_on_user_identifier: typing.Optional[str] = pydantic.Field(None, description='A specifier for the type of value specified in SingleSignOnUserValue. Currently, the only supported value is "UserName". If the Domain\'s AuthMode is IAM Identity Center , this field is required. If the Domain\'s AuthMode is not IAM Identity Center , this field cannot be specified.\n')
    single_sign_on_user_value: typing.Optional[str] = pydantic.Field(None, description="The username of the associated AWS Single Sign-On User for this UserProfile. If the Domain's AuthMode is IAM Identity Center , this field is required, and must match a valid username of a user in your directory. If the Domain's AuthMode is not IAM Identity Center , this field cannot be specified.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs to apply to this resource. Tags that you specify for the User Profile are also added to all apps that the User Profile launches. For more information, see `Tag <https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html>`_ .\n')
    user_settings: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnUserProfile_UserSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='A collection of settings that apply to users of Amazon SageMaker Studio.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-userprofile.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cfn_user_profile_props = sagemaker.CfnUserProfileProps(\n        domain_id="domainId",\n        user_profile_name="userProfileName",\n\n        # the properties below are optional\n        single_sign_on_user_identifier="singleSignOnUserIdentifier",\n        single_sign_on_user_value="singleSignOnUserValue",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        user_settings=sagemaker.CfnUserProfile.UserSettingsProperty(\n            execution_role="executionRole",\n            jupyter_server_app_settings=sagemaker.CfnUserProfile.JupyterServerAppSettingsProperty(\n                default_resource_spec=sagemaker.CfnUserProfile.ResourceSpecProperty(\n                    instance_type="instanceType",\n                    sage_maker_image_arn="sageMakerImageArn",\n                    sage_maker_image_version_arn="sageMakerImageVersionArn"\n                )\n            ),\n            kernel_gateway_app_settings=sagemaker.CfnUserProfile.KernelGatewayAppSettingsProperty(\n                custom_images=[sagemaker.CfnUserProfile.CustomImageProperty(\n                    app_image_config_name="appImageConfigName",\n                    image_name="imageName",\n\n                    # the properties below are optional\n                    image_version_number=123\n                )],\n                default_resource_spec=sagemaker.CfnUserProfile.ResourceSpecProperty(\n                    instance_type="instanceType",\n                    sage_maker_image_arn="sageMakerImageArn",\n                    sage_maker_image_version_arn="sageMakerImageVersionArn"\n                )\n            ),\n            r_studio_server_pro_app_settings=sagemaker.CfnUserProfile.RStudioServerProAppSettingsProperty(\n                access_status="accessStatus",\n                user_group="userGroup"\n            ),\n            security_groups=["securityGroups"],\n            sharing_settings=sagemaker.CfnUserProfile.SharingSettingsProperty(\n                notebook_output_option="notebookOutputOption",\n                s3_kms_key_id="s3KmsKeyId",\n                s3_output_path="s3OutputPath"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['domain_id', 'user_profile_name', 'single_sign_on_user_identifier', 'single_sign_on_user_value', 'tags', 'user_settings']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnUserProfileProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sagemaker.CfnWorkteamProps
class CfnWorkteamPropsDef(BaseCfnProperty):
    description: typing.Optional[str] = pydantic.Field(None, description='A description of the work team.\n')
    member_definitions: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnWorkteam_MemberDefinitionPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A list of ``MemberDefinition`` objects that contains objects that identify the workers that make up the work team. Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use ``CognitoMemberDefinition`` . For workforces created using your own OIDC identity provider (IdP) use ``OidcMemberDefinition`` .\n')
    notification_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_sagemaker.CfnWorkteam_NotificationConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Configures SNS notifications of available or expiring work items for work teams.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='An array of key-value pairs.\n')
    workforce_name: typing.Optional[str] = pydantic.Field(None, description='``AWS::SageMaker::Workteam.WorkforceName``.\n')
    workteam_name: typing.Optional[str] = pydantic.Field(None, description='The name of the work team.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-sagemaker-workteam.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_sagemaker as sagemaker\n\n    cfn_workteam_props = sagemaker.CfnWorkteamProps(\n        description="description",\n        member_definitions=[sagemaker.CfnWorkteam.MemberDefinitionProperty(\n            cognito_member_definition=sagemaker.CfnWorkteam.CognitoMemberDefinitionProperty(\n                cognito_client_id="cognitoClientId",\n                cognito_user_group="cognitoUserGroup",\n                cognito_user_pool="cognitoUserPool"\n            ),\n            oidc_member_definition=sagemaker.CfnWorkteam.OidcMemberDefinitionProperty(\n                oidc_groups=["oidcGroups"]\n            )\n        )],\n        notification_configuration=sagemaker.CfnWorkteam.NotificationConfigurationProperty(\n            notification_topic_arn="notificationTopicArn"\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        workforce_name="workforceName",\n        workteam_name="workteamName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['description', 'member_definitions', 'notification_configuration', 'tags', 'workforce_name', 'workteam_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sagemaker.CfnWorkteamProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnApp_ResourceSpecProperty: typing.Optional[dict[str, CfnApp_ResourceSpecPropertyDef]] = pydantic.Field(None)
    CfnAppImageConfig_FileSystemConfigProperty: typing.Optional[dict[str, CfnAppImageConfig_FileSystemConfigPropertyDef]] = pydantic.Field(None)
    CfnAppImageConfig_KernelGatewayImageConfigProperty: typing.Optional[dict[str, CfnAppImageConfig_KernelGatewayImageConfigPropertyDef]] = pydantic.Field(None)
    CfnAppImageConfig_KernelSpecProperty: typing.Optional[dict[str, CfnAppImageConfig_KernelSpecPropertyDef]] = pydantic.Field(None)
    CfnCodeRepository_GitConfigProperty: typing.Optional[dict[str, CfnCodeRepository_GitConfigPropertyDef]] = pydantic.Field(None)
    CfnDataQualityJobDefinition_BatchTransformInputProperty: typing.Optional[dict[str, CfnDataQualityJobDefinition_BatchTransformInputPropertyDef]] = pydantic.Field(None)
    CfnDataQualityJobDefinition_ClusterConfigProperty: typing.Optional[dict[str, CfnDataQualityJobDefinition_ClusterConfigPropertyDef]] = pydantic.Field(None)
    CfnDataQualityJobDefinition_ConstraintsResourceProperty: typing.Optional[dict[str, CfnDataQualityJobDefinition_ConstraintsResourcePropertyDef]] = pydantic.Field(None)
    CfnDataQualityJobDefinition_CsvProperty: typing.Optional[dict[str, CfnDataQualityJobDefinition_CsvPropertyDef]] = pydantic.Field(None)
    CfnDataQualityJobDefinition_DataQualityAppSpecificationProperty: typing.Optional[dict[str, CfnDataQualityJobDefinition_DataQualityAppSpecificationPropertyDef]] = pydantic.Field(None)
    CfnDataQualityJobDefinition_DataQualityBaselineConfigProperty: typing.Optional[dict[str, CfnDataQualityJobDefinition_DataQualityBaselineConfigPropertyDef]] = pydantic.Field(None)
    CfnDataQualityJobDefinition_DataQualityJobInputProperty: typing.Optional[dict[str, CfnDataQualityJobDefinition_DataQualityJobInputPropertyDef]] = pydantic.Field(None)
    CfnDataQualityJobDefinition_DatasetFormatProperty: typing.Optional[dict[str, CfnDataQualityJobDefinition_DatasetFormatPropertyDef]] = pydantic.Field(None)
    CfnDataQualityJobDefinition_EndpointInputProperty: typing.Optional[dict[str, CfnDataQualityJobDefinition_EndpointInputPropertyDef]] = pydantic.Field(None)
    CfnDataQualityJobDefinition_JsonProperty: typing.Optional[dict[str, CfnDataQualityJobDefinition_JsonPropertyDef]] = pydantic.Field(None)
    CfnDataQualityJobDefinition_MonitoringOutputConfigProperty: typing.Optional[dict[str, CfnDataQualityJobDefinition_MonitoringOutputConfigPropertyDef]] = pydantic.Field(None)
    CfnDataQualityJobDefinition_MonitoringOutputProperty: typing.Optional[dict[str, CfnDataQualityJobDefinition_MonitoringOutputPropertyDef]] = pydantic.Field(None)
    CfnDataQualityJobDefinition_MonitoringResourcesProperty: typing.Optional[dict[str, CfnDataQualityJobDefinition_MonitoringResourcesPropertyDef]] = pydantic.Field(None)
    CfnDataQualityJobDefinition_NetworkConfigProperty: typing.Optional[dict[str, CfnDataQualityJobDefinition_NetworkConfigPropertyDef]] = pydantic.Field(None)
    CfnDataQualityJobDefinition_S3OutputProperty: typing.Optional[dict[str, CfnDataQualityJobDefinition_S3OutputPropertyDef]] = pydantic.Field(None)
    CfnDataQualityJobDefinition_StatisticsResourceProperty: typing.Optional[dict[str, CfnDataQualityJobDefinition_StatisticsResourcePropertyDef]] = pydantic.Field(None)
    CfnDataQualityJobDefinition_StoppingConditionProperty: typing.Optional[dict[str, CfnDataQualityJobDefinition_StoppingConditionPropertyDef]] = pydantic.Field(None)
    CfnDataQualityJobDefinition_VpcConfigProperty: typing.Optional[dict[str, CfnDataQualityJobDefinition_VpcConfigPropertyDef]] = pydantic.Field(None)
    CfnDevice_DeviceProperty: typing.Optional[dict[str, CfnDevice_DevicePropertyDef]] = pydantic.Field(None)
    CfnDeviceFleet_EdgeOutputConfigProperty: typing.Optional[dict[str, CfnDeviceFleet_EdgeOutputConfigPropertyDef]] = pydantic.Field(None)
    CfnDomain_CustomImageProperty: typing.Optional[dict[str, CfnDomain_CustomImagePropertyDef]] = pydantic.Field(None)
    CfnDomain_DefaultSpaceSettingsProperty: typing.Optional[dict[str, CfnDomain_DefaultSpaceSettingsPropertyDef]] = pydantic.Field(None)
    CfnDomain_DomainSettingsProperty: typing.Optional[dict[str, CfnDomain_DomainSettingsPropertyDef]] = pydantic.Field(None)
    CfnDomain_JupyterServerAppSettingsProperty: typing.Optional[dict[str, CfnDomain_JupyterServerAppSettingsPropertyDef]] = pydantic.Field(None)
    CfnDomain_KernelGatewayAppSettingsProperty: typing.Optional[dict[str, CfnDomain_KernelGatewayAppSettingsPropertyDef]] = pydantic.Field(None)
    CfnDomain_ResourceSpecProperty: typing.Optional[dict[str, CfnDomain_ResourceSpecPropertyDef]] = pydantic.Field(None)
    CfnDomain_RSessionAppSettingsProperty: typing.Optional[dict[str, CfnDomain_RSessionAppSettingsPropertyDef]] = pydantic.Field(None)
    CfnDomain_RStudioServerProAppSettingsProperty: typing.Optional[dict[str, CfnDomain_RStudioServerProAppSettingsPropertyDef]] = pydantic.Field(None)
    CfnDomain_RStudioServerProDomainSettingsProperty: typing.Optional[dict[str, CfnDomain_RStudioServerProDomainSettingsPropertyDef]] = pydantic.Field(None)
    CfnDomain_SharingSettingsProperty: typing.Optional[dict[str, CfnDomain_SharingSettingsPropertyDef]] = pydantic.Field(None)
    CfnDomain_UserSettingsProperty: typing.Optional[dict[str, CfnDomain_UserSettingsPropertyDef]] = pydantic.Field(None)
    CfnEndpoint_AlarmProperty: typing.Optional[dict[str, CfnEndpoint_AlarmPropertyDef]] = pydantic.Field(None)
    CfnEndpoint_AutoRollbackConfigProperty: typing.Optional[dict[str, CfnEndpoint_AutoRollbackConfigPropertyDef]] = pydantic.Field(None)
    CfnEndpoint_BlueGreenUpdatePolicyProperty: typing.Optional[dict[str, CfnEndpoint_BlueGreenUpdatePolicyPropertyDef]] = pydantic.Field(None)
    CfnEndpoint_CapacitySizeProperty: typing.Optional[dict[str, CfnEndpoint_CapacitySizePropertyDef]] = pydantic.Field(None)
    CfnEndpoint_DeploymentConfigProperty: typing.Optional[dict[str, CfnEndpoint_DeploymentConfigPropertyDef]] = pydantic.Field(None)
    CfnEndpoint_TrafficRoutingConfigProperty: typing.Optional[dict[str, CfnEndpoint_TrafficRoutingConfigPropertyDef]] = pydantic.Field(None)
    CfnEndpoint_VariantPropertyProperty: typing.Optional[dict[str, CfnEndpoint_VariantPropertyPropertyDef]] = pydantic.Field(None)
    CfnEndpointConfig_AsyncInferenceClientConfigProperty: typing.Optional[dict[str, CfnEndpointConfig_AsyncInferenceClientConfigPropertyDef]] = pydantic.Field(None)
    CfnEndpointConfig_AsyncInferenceConfigProperty: typing.Optional[dict[str, CfnEndpointConfig_AsyncInferenceConfigPropertyDef]] = pydantic.Field(None)
    CfnEndpointConfig_AsyncInferenceNotificationConfigProperty: typing.Optional[dict[str, CfnEndpointConfig_AsyncInferenceNotificationConfigPropertyDef]] = pydantic.Field(None)
    CfnEndpointConfig_AsyncInferenceOutputConfigProperty: typing.Optional[dict[str, CfnEndpointConfig_AsyncInferenceOutputConfigPropertyDef]] = pydantic.Field(None)
    CfnEndpointConfig_CaptureContentTypeHeaderProperty: typing.Optional[dict[str, CfnEndpointConfig_CaptureContentTypeHeaderPropertyDef]] = pydantic.Field(None)
    CfnEndpointConfig_CaptureOptionProperty: typing.Optional[dict[str, CfnEndpointConfig_CaptureOptionPropertyDef]] = pydantic.Field(None)
    CfnEndpointConfig_ClarifyExplainerConfigProperty: typing.Optional[dict[str, CfnEndpointConfig_ClarifyExplainerConfigPropertyDef]] = pydantic.Field(None)
    CfnEndpointConfig_ClarifyInferenceConfigProperty: typing.Optional[dict[str, CfnEndpointConfig_ClarifyInferenceConfigPropertyDef]] = pydantic.Field(None)
    CfnEndpointConfig_ClarifyShapBaselineConfigProperty: typing.Optional[dict[str, CfnEndpointConfig_ClarifyShapBaselineConfigPropertyDef]] = pydantic.Field(None)
    CfnEndpointConfig_ClarifyShapConfigProperty: typing.Optional[dict[str, CfnEndpointConfig_ClarifyShapConfigPropertyDef]] = pydantic.Field(None)
    CfnEndpointConfig_ClarifyTextConfigProperty: typing.Optional[dict[str, CfnEndpointConfig_ClarifyTextConfigPropertyDef]] = pydantic.Field(None)
    CfnEndpointConfig_DataCaptureConfigProperty: typing.Optional[dict[str, CfnEndpointConfig_DataCaptureConfigPropertyDef]] = pydantic.Field(None)
    CfnEndpointConfig_ExplainerConfigProperty: typing.Optional[dict[str, CfnEndpointConfig_ExplainerConfigPropertyDef]] = pydantic.Field(None)
    CfnEndpointConfig_ProductionVariantProperty: typing.Optional[dict[str, CfnEndpointConfig_ProductionVariantPropertyDef]] = pydantic.Field(None)
    CfnEndpointConfig_ServerlessConfigProperty: typing.Optional[dict[str, CfnEndpointConfig_ServerlessConfigPropertyDef]] = pydantic.Field(None)
    CfnFeatureGroup_DataCatalogConfigProperty: typing.Optional[dict[str, CfnFeatureGroup_DataCatalogConfigPropertyDef]] = pydantic.Field(None)
    CfnFeatureGroup_FeatureDefinitionProperty: typing.Optional[dict[str, CfnFeatureGroup_FeatureDefinitionPropertyDef]] = pydantic.Field(None)
    CfnFeatureGroup_OfflineStoreConfigProperty: typing.Optional[dict[str, CfnFeatureGroup_OfflineStoreConfigPropertyDef]] = pydantic.Field(None)
    CfnFeatureGroup_OnlineStoreConfigProperty: typing.Optional[dict[str, CfnFeatureGroup_OnlineStoreConfigPropertyDef]] = pydantic.Field(None)
    CfnFeatureGroup_OnlineStoreSecurityConfigProperty: typing.Optional[dict[str, CfnFeatureGroup_OnlineStoreSecurityConfigPropertyDef]] = pydantic.Field(None)
    CfnFeatureGroup_S3StorageConfigProperty: typing.Optional[dict[str, CfnFeatureGroup_S3StorageConfigPropertyDef]] = pydantic.Field(None)
    CfnInferenceExperiment_CaptureContentTypeHeaderProperty: typing.Optional[dict[str, CfnInferenceExperiment_CaptureContentTypeHeaderPropertyDef]] = pydantic.Field(None)
    CfnInferenceExperiment_DataStorageConfigProperty: typing.Optional[dict[str, CfnInferenceExperiment_DataStorageConfigPropertyDef]] = pydantic.Field(None)
    CfnInferenceExperiment_EndpointMetadataProperty: typing.Optional[dict[str, CfnInferenceExperiment_EndpointMetadataPropertyDef]] = pydantic.Field(None)
    CfnInferenceExperiment_InferenceExperimentScheduleProperty: typing.Optional[dict[str, CfnInferenceExperiment_InferenceExperimentSchedulePropertyDef]] = pydantic.Field(None)
    CfnInferenceExperiment_ModelInfrastructureConfigProperty: typing.Optional[dict[str, CfnInferenceExperiment_ModelInfrastructureConfigPropertyDef]] = pydantic.Field(None)
    CfnInferenceExperiment_ModelVariantConfigProperty: typing.Optional[dict[str, CfnInferenceExperiment_ModelVariantConfigPropertyDef]] = pydantic.Field(None)
    CfnInferenceExperiment_RealTimeInferenceConfigProperty: typing.Optional[dict[str, CfnInferenceExperiment_RealTimeInferenceConfigPropertyDef]] = pydantic.Field(None)
    CfnInferenceExperiment_ShadowModeConfigProperty: typing.Optional[dict[str, CfnInferenceExperiment_ShadowModeConfigPropertyDef]] = pydantic.Field(None)
    CfnInferenceExperiment_ShadowModelVariantConfigProperty: typing.Optional[dict[str, CfnInferenceExperiment_ShadowModelVariantConfigPropertyDef]] = pydantic.Field(None)
    CfnModel_ContainerDefinitionProperty: typing.Optional[dict[str, CfnModel_ContainerDefinitionPropertyDef]] = pydantic.Field(None)
    CfnModel_ImageConfigProperty: typing.Optional[dict[str, CfnModel_ImageConfigPropertyDef]] = pydantic.Field(None)
    CfnModel_InferenceExecutionConfigProperty: typing.Optional[dict[str, CfnModel_InferenceExecutionConfigPropertyDef]] = pydantic.Field(None)
    CfnModel_MultiModelConfigProperty: typing.Optional[dict[str, CfnModel_MultiModelConfigPropertyDef]] = pydantic.Field(None)
    CfnModel_RepositoryAuthConfigProperty: typing.Optional[dict[str, CfnModel_RepositoryAuthConfigPropertyDef]] = pydantic.Field(None)
    CfnModel_VpcConfigProperty: typing.Optional[dict[str, CfnModel_VpcConfigPropertyDef]] = pydantic.Field(None)
    CfnModelBiasJobDefinition_BatchTransformInputProperty: typing.Optional[dict[str, CfnModelBiasJobDefinition_BatchTransformInputPropertyDef]] = pydantic.Field(None)
    CfnModelBiasJobDefinition_ClusterConfigProperty: typing.Optional[dict[str, CfnModelBiasJobDefinition_ClusterConfigPropertyDef]] = pydantic.Field(None)
    CfnModelBiasJobDefinition_ConstraintsResourceProperty: typing.Optional[dict[str, CfnModelBiasJobDefinition_ConstraintsResourcePropertyDef]] = pydantic.Field(None)
    CfnModelBiasJobDefinition_CsvProperty: typing.Optional[dict[str, CfnModelBiasJobDefinition_CsvPropertyDef]] = pydantic.Field(None)
    CfnModelBiasJobDefinition_DatasetFormatProperty: typing.Optional[dict[str, CfnModelBiasJobDefinition_DatasetFormatPropertyDef]] = pydantic.Field(None)
    CfnModelBiasJobDefinition_EndpointInputProperty: typing.Optional[dict[str, CfnModelBiasJobDefinition_EndpointInputPropertyDef]] = pydantic.Field(None)
    CfnModelBiasJobDefinition_JsonProperty: typing.Optional[dict[str, CfnModelBiasJobDefinition_JsonPropertyDef]] = pydantic.Field(None)
    CfnModelBiasJobDefinition_ModelBiasAppSpecificationProperty: typing.Optional[dict[str, CfnModelBiasJobDefinition_ModelBiasAppSpecificationPropertyDef]] = pydantic.Field(None)
    CfnModelBiasJobDefinition_ModelBiasBaselineConfigProperty: typing.Optional[dict[str, CfnModelBiasJobDefinition_ModelBiasBaselineConfigPropertyDef]] = pydantic.Field(None)
    CfnModelBiasJobDefinition_ModelBiasJobInputProperty: typing.Optional[dict[str, CfnModelBiasJobDefinition_ModelBiasJobInputPropertyDef]] = pydantic.Field(None)
    CfnModelBiasJobDefinition_MonitoringGroundTruthS3InputProperty: typing.Optional[dict[str, CfnModelBiasJobDefinition_MonitoringGroundTruthS3InputPropertyDef]] = pydantic.Field(None)
    CfnModelBiasJobDefinition_MonitoringOutputConfigProperty: typing.Optional[dict[str, CfnModelBiasJobDefinition_MonitoringOutputConfigPropertyDef]] = pydantic.Field(None)
    CfnModelBiasJobDefinition_MonitoringOutputProperty: typing.Optional[dict[str, CfnModelBiasJobDefinition_MonitoringOutputPropertyDef]] = pydantic.Field(None)
    CfnModelBiasJobDefinition_MonitoringResourcesProperty: typing.Optional[dict[str, CfnModelBiasJobDefinition_MonitoringResourcesPropertyDef]] = pydantic.Field(None)
    CfnModelBiasJobDefinition_NetworkConfigProperty: typing.Optional[dict[str, CfnModelBiasJobDefinition_NetworkConfigPropertyDef]] = pydantic.Field(None)
    CfnModelBiasJobDefinition_S3OutputProperty: typing.Optional[dict[str, CfnModelBiasJobDefinition_S3OutputPropertyDef]] = pydantic.Field(None)
    CfnModelBiasJobDefinition_StoppingConditionProperty: typing.Optional[dict[str, CfnModelBiasJobDefinition_StoppingConditionPropertyDef]] = pydantic.Field(None)
    CfnModelBiasJobDefinition_VpcConfigProperty: typing.Optional[dict[str, CfnModelBiasJobDefinition_VpcConfigPropertyDef]] = pydantic.Field(None)
    CfnModelCard_AdditionalInformationProperty: typing.Optional[dict[str, CfnModelCard_AdditionalInformationPropertyDef]] = pydantic.Field(None)
    CfnModelCard_BusinessDetailsProperty: typing.Optional[dict[str, CfnModelCard_BusinessDetailsPropertyDef]] = pydantic.Field(None)
    CfnModelCard_ContainerProperty: typing.Optional[dict[str, CfnModelCard_ContainerPropertyDef]] = pydantic.Field(None)
    CfnModelCard_ContentProperty: typing.Optional[dict[str, CfnModelCard_ContentPropertyDef]] = pydantic.Field(None)
    CfnModelCard_EvaluationDetailProperty: typing.Optional[dict[str, CfnModelCard_EvaluationDetailPropertyDef]] = pydantic.Field(None)
    CfnModelCard_FunctionProperty: typing.Optional[dict[str, CfnModelCard_FunctionPropertyDef]] = pydantic.Field(None)
    CfnModelCard_InferenceEnvironmentProperty: typing.Optional[dict[str, CfnModelCard_InferenceEnvironmentPropertyDef]] = pydantic.Field(None)
    CfnModelCard_InferenceSpecificationProperty: typing.Optional[dict[str, CfnModelCard_InferenceSpecificationPropertyDef]] = pydantic.Field(None)
    CfnModelCard_IntendedUsesProperty: typing.Optional[dict[str, CfnModelCard_IntendedUsesPropertyDef]] = pydantic.Field(None)
    CfnModelCard_MetricDataItemsProperty: typing.Optional[dict[str, CfnModelCard_MetricDataItemsPropertyDef]] = pydantic.Field(None)
    CfnModelCard_MetricGroupProperty: typing.Optional[dict[str, CfnModelCard_MetricGroupPropertyDef]] = pydantic.Field(None)
    CfnModelCard_ModelOverviewProperty: typing.Optional[dict[str, CfnModelCard_ModelOverviewPropertyDef]] = pydantic.Field(None)
    CfnModelCard_ModelPackageCreatorProperty: typing.Optional[dict[str, CfnModelCard_ModelPackageCreatorPropertyDef]] = pydantic.Field(None)
    CfnModelCard_ModelPackageDetailsProperty: typing.Optional[dict[str, CfnModelCard_ModelPackageDetailsPropertyDef]] = pydantic.Field(None)
    CfnModelCard_ObjectiveFunctionProperty: typing.Optional[dict[str, CfnModelCard_ObjectiveFunctionPropertyDef]] = pydantic.Field(None)
    CfnModelCard_SecurityConfigProperty: typing.Optional[dict[str, CfnModelCard_SecurityConfigPropertyDef]] = pydantic.Field(None)
    CfnModelCard_SourceAlgorithmProperty: typing.Optional[dict[str, CfnModelCard_SourceAlgorithmPropertyDef]] = pydantic.Field(None)
    CfnModelCard_TrainingDetailsProperty: typing.Optional[dict[str, CfnModelCard_TrainingDetailsPropertyDef]] = pydantic.Field(None)
    CfnModelCard_TrainingEnvironmentProperty: typing.Optional[dict[str, CfnModelCard_TrainingEnvironmentPropertyDef]] = pydantic.Field(None)
    CfnModelCard_TrainingHyperParameterProperty: typing.Optional[dict[str, CfnModelCard_TrainingHyperParameterPropertyDef]] = pydantic.Field(None)
    CfnModelCard_TrainingJobDetailsProperty: typing.Optional[dict[str, CfnModelCard_TrainingJobDetailsPropertyDef]] = pydantic.Field(None)
    CfnModelCard_TrainingMetricProperty: typing.Optional[dict[str, CfnModelCard_TrainingMetricPropertyDef]] = pydantic.Field(None)
    CfnModelCard_UserContextProperty: typing.Optional[dict[str, CfnModelCard_UserContextPropertyDef]] = pydantic.Field(None)
    CfnModelExplainabilityJobDefinition_BatchTransformInputProperty: typing.Optional[dict[str, CfnModelExplainabilityJobDefinition_BatchTransformInputPropertyDef]] = pydantic.Field(None)
    CfnModelExplainabilityJobDefinition_ClusterConfigProperty: typing.Optional[dict[str, CfnModelExplainabilityJobDefinition_ClusterConfigPropertyDef]] = pydantic.Field(None)
    CfnModelExplainabilityJobDefinition_ConstraintsResourceProperty: typing.Optional[dict[str, CfnModelExplainabilityJobDefinition_ConstraintsResourcePropertyDef]] = pydantic.Field(None)
    CfnModelExplainabilityJobDefinition_CsvProperty: typing.Optional[dict[str, CfnModelExplainabilityJobDefinition_CsvPropertyDef]] = pydantic.Field(None)
    CfnModelExplainabilityJobDefinition_DatasetFormatProperty: typing.Optional[dict[str, CfnModelExplainabilityJobDefinition_DatasetFormatPropertyDef]] = pydantic.Field(None)
    CfnModelExplainabilityJobDefinition_EndpointInputProperty: typing.Optional[dict[str, CfnModelExplainabilityJobDefinition_EndpointInputPropertyDef]] = pydantic.Field(None)
    CfnModelExplainabilityJobDefinition_JsonProperty: typing.Optional[dict[str, CfnModelExplainabilityJobDefinition_JsonPropertyDef]] = pydantic.Field(None)
    CfnModelExplainabilityJobDefinition_ModelExplainabilityAppSpecificationProperty: typing.Optional[dict[str, CfnModelExplainabilityJobDefinition_ModelExplainabilityAppSpecificationPropertyDef]] = pydantic.Field(None)
    CfnModelExplainabilityJobDefinition_ModelExplainabilityBaselineConfigProperty: typing.Optional[dict[str, CfnModelExplainabilityJobDefinition_ModelExplainabilityBaselineConfigPropertyDef]] = pydantic.Field(None)
    CfnModelExplainabilityJobDefinition_ModelExplainabilityJobInputProperty: typing.Optional[dict[str, CfnModelExplainabilityJobDefinition_ModelExplainabilityJobInputPropertyDef]] = pydantic.Field(None)
    CfnModelExplainabilityJobDefinition_MonitoringOutputConfigProperty: typing.Optional[dict[str, CfnModelExplainabilityJobDefinition_MonitoringOutputConfigPropertyDef]] = pydantic.Field(None)
    CfnModelExplainabilityJobDefinition_MonitoringOutputProperty: typing.Optional[dict[str, CfnModelExplainabilityJobDefinition_MonitoringOutputPropertyDef]] = pydantic.Field(None)
    CfnModelExplainabilityJobDefinition_MonitoringResourcesProperty: typing.Optional[dict[str, CfnModelExplainabilityJobDefinition_MonitoringResourcesPropertyDef]] = pydantic.Field(None)
    CfnModelExplainabilityJobDefinition_NetworkConfigProperty: typing.Optional[dict[str, CfnModelExplainabilityJobDefinition_NetworkConfigPropertyDef]] = pydantic.Field(None)
    CfnModelExplainabilityJobDefinition_S3OutputProperty: typing.Optional[dict[str, CfnModelExplainabilityJobDefinition_S3OutputPropertyDef]] = pydantic.Field(None)
    CfnModelExplainabilityJobDefinition_StoppingConditionProperty: typing.Optional[dict[str, CfnModelExplainabilityJobDefinition_StoppingConditionPropertyDef]] = pydantic.Field(None)
    CfnModelExplainabilityJobDefinition_VpcConfigProperty: typing.Optional[dict[str, CfnModelExplainabilityJobDefinition_VpcConfigPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_AdditionalInferenceSpecificationDefinitionProperty: typing.Optional[dict[str, CfnModelPackage_AdditionalInferenceSpecificationDefinitionPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_BiasProperty: typing.Optional[dict[str, CfnModelPackage_BiasPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_DataSourceProperty: typing.Optional[dict[str, CfnModelPackage_DataSourcePropertyDef]] = pydantic.Field(None)
    CfnModelPackage_DriftCheckBaselinesProperty: typing.Optional[dict[str, CfnModelPackage_DriftCheckBaselinesPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_DriftCheckBiasProperty: typing.Optional[dict[str, CfnModelPackage_DriftCheckBiasPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_DriftCheckExplainabilityProperty: typing.Optional[dict[str, CfnModelPackage_DriftCheckExplainabilityPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_DriftCheckModelDataQualityProperty: typing.Optional[dict[str, CfnModelPackage_DriftCheckModelDataQualityPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_DriftCheckModelQualityProperty: typing.Optional[dict[str, CfnModelPackage_DriftCheckModelQualityPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_ExplainabilityProperty: typing.Optional[dict[str, CfnModelPackage_ExplainabilityPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_FileSourceProperty: typing.Optional[dict[str, CfnModelPackage_FileSourcePropertyDef]] = pydantic.Field(None)
    CfnModelPackage_InferenceSpecificationProperty: typing.Optional[dict[str, CfnModelPackage_InferenceSpecificationPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_MetadataPropertiesProperty: typing.Optional[dict[str, CfnModelPackage_MetadataPropertiesPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_MetricsSourceProperty: typing.Optional[dict[str, CfnModelPackage_MetricsSourcePropertyDef]] = pydantic.Field(None)
    CfnModelPackage_ModelDataQualityProperty: typing.Optional[dict[str, CfnModelPackage_ModelDataQualityPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_ModelInputProperty: typing.Optional[dict[str, CfnModelPackage_ModelInputPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_ModelMetricsProperty: typing.Optional[dict[str, CfnModelPackage_ModelMetricsPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_ModelPackageContainerDefinitionProperty: typing.Optional[dict[str, CfnModelPackage_ModelPackageContainerDefinitionPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_ModelPackageStatusDetailsProperty: typing.Optional[dict[str, CfnModelPackage_ModelPackageStatusDetailsPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_ModelPackageStatusItemProperty: typing.Optional[dict[str, CfnModelPackage_ModelPackageStatusItemPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_ModelQualityProperty: typing.Optional[dict[str, CfnModelPackage_ModelQualityPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_S3DataSourceProperty: typing.Optional[dict[str, CfnModelPackage_S3DataSourcePropertyDef]] = pydantic.Field(None)
    CfnModelPackage_SourceAlgorithmProperty: typing.Optional[dict[str, CfnModelPackage_SourceAlgorithmPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_SourceAlgorithmSpecificationProperty: typing.Optional[dict[str, CfnModelPackage_SourceAlgorithmSpecificationPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_TransformInputProperty: typing.Optional[dict[str, CfnModelPackage_TransformInputPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_TransformJobDefinitionProperty: typing.Optional[dict[str, CfnModelPackage_TransformJobDefinitionPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_TransformOutputProperty: typing.Optional[dict[str, CfnModelPackage_TransformOutputPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_TransformResourcesProperty: typing.Optional[dict[str, CfnModelPackage_TransformResourcesPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_UserContextProperty: typing.Optional[dict[str, CfnModelPackage_UserContextPropertyDef]] = pydantic.Field(None)
    CfnModelPackage_ValidationProfileProperty: typing.Optional[dict[str, CfnModelPackage_ValidationProfilePropertyDef]] = pydantic.Field(None)
    CfnModelPackage_ValidationSpecificationProperty: typing.Optional[dict[str, CfnModelPackage_ValidationSpecificationPropertyDef]] = pydantic.Field(None)
    CfnModelQualityJobDefinition_BatchTransformInputProperty: typing.Optional[dict[str, CfnModelQualityJobDefinition_BatchTransformInputPropertyDef]] = pydantic.Field(None)
    CfnModelQualityJobDefinition_ClusterConfigProperty: typing.Optional[dict[str, CfnModelQualityJobDefinition_ClusterConfigPropertyDef]] = pydantic.Field(None)
    CfnModelQualityJobDefinition_ConstraintsResourceProperty: typing.Optional[dict[str, CfnModelQualityJobDefinition_ConstraintsResourcePropertyDef]] = pydantic.Field(None)
    CfnModelQualityJobDefinition_CsvProperty: typing.Optional[dict[str, CfnModelQualityJobDefinition_CsvPropertyDef]] = pydantic.Field(None)
    CfnModelQualityJobDefinition_DatasetFormatProperty: typing.Optional[dict[str, CfnModelQualityJobDefinition_DatasetFormatPropertyDef]] = pydantic.Field(None)
    CfnModelQualityJobDefinition_EndpointInputProperty: typing.Optional[dict[str, CfnModelQualityJobDefinition_EndpointInputPropertyDef]] = pydantic.Field(None)
    CfnModelQualityJobDefinition_JsonProperty: typing.Optional[dict[str, CfnModelQualityJobDefinition_JsonPropertyDef]] = pydantic.Field(None)
    CfnModelQualityJobDefinition_ModelQualityAppSpecificationProperty: typing.Optional[dict[str, CfnModelQualityJobDefinition_ModelQualityAppSpecificationPropertyDef]] = pydantic.Field(None)
    CfnModelQualityJobDefinition_ModelQualityBaselineConfigProperty: typing.Optional[dict[str, CfnModelQualityJobDefinition_ModelQualityBaselineConfigPropertyDef]] = pydantic.Field(None)
    CfnModelQualityJobDefinition_ModelQualityJobInputProperty: typing.Optional[dict[str, CfnModelQualityJobDefinition_ModelQualityJobInputPropertyDef]] = pydantic.Field(None)
    CfnModelQualityJobDefinition_MonitoringGroundTruthS3InputProperty: typing.Optional[dict[str, CfnModelQualityJobDefinition_MonitoringGroundTruthS3InputPropertyDef]] = pydantic.Field(None)
    CfnModelQualityJobDefinition_MonitoringOutputConfigProperty: typing.Optional[dict[str, CfnModelQualityJobDefinition_MonitoringOutputConfigPropertyDef]] = pydantic.Field(None)
    CfnModelQualityJobDefinition_MonitoringOutputProperty: typing.Optional[dict[str, CfnModelQualityJobDefinition_MonitoringOutputPropertyDef]] = pydantic.Field(None)
    CfnModelQualityJobDefinition_MonitoringResourcesProperty: typing.Optional[dict[str, CfnModelQualityJobDefinition_MonitoringResourcesPropertyDef]] = pydantic.Field(None)
    CfnModelQualityJobDefinition_NetworkConfigProperty: typing.Optional[dict[str, CfnModelQualityJobDefinition_NetworkConfigPropertyDef]] = pydantic.Field(None)
    CfnModelQualityJobDefinition_S3OutputProperty: typing.Optional[dict[str, CfnModelQualityJobDefinition_S3OutputPropertyDef]] = pydantic.Field(None)
    CfnModelQualityJobDefinition_StoppingConditionProperty: typing.Optional[dict[str, CfnModelQualityJobDefinition_StoppingConditionPropertyDef]] = pydantic.Field(None)
    CfnModelQualityJobDefinition_VpcConfigProperty: typing.Optional[dict[str, CfnModelQualityJobDefinition_VpcConfigPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_BaselineConfigProperty: typing.Optional[dict[str, CfnMonitoringSchedule_BaselineConfigPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_BatchTransformInputProperty: typing.Optional[dict[str, CfnMonitoringSchedule_BatchTransformInputPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_ClusterConfigProperty: typing.Optional[dict[str, CfnMonitoringSchedule_ClusterConfigPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_ConstraintsResourceProperty: typing.Optional[dict[str, CfnMonitoringSchedule_ConstraintsResourcePropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_CsvProperty: typing.Optional[dict[str, CfnMonitoringSchedule_CsvPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_DatasetFormatProperty: typing.Optional[dict[str, CfnMonitoringSchedule_DatasetFormatPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_EndpointInputProperty: typing.Optional[dict[str, CfnMonitoringSchedule_EndpointInputPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_JsonProperty: typing.Optional[dict[str, CfnMonitoringSchedule_JsonPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_MonitoringAppSpecificationProperty: typing.Optional[dict[str, CfnMonitoringSchedule_MonitoringAppSpecificationPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_MonitoringExecutionSummaryProperty: typing.Optional[dict[str, CfnMonitoringSchedule_MonitoringExecutionSummaryPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_MonitoringInputProperty: typing.Optional[dict[str, CfnMonitoringSchedule_MonitoringInputPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_MonitoringJobDefinitionProperty: typing.Optional[dict[str, CfnMonitoringSchedule_MonitoringJobDefinitionPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_MonitoringOutputConfigProperty: typing.Optional[dict[str, CfnMonitoringSchedule_MonitoringOutputConfigPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_MonitoringOutputProperty: typing.Optional[dict[str, CfnMonitoringSchedule_MonitoringOutputPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_MonitoringResourcesProperty: typing.Optional[dict[str, CfnMonitoringSchedule_MonitoringResourcesPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_MonitoringScheduleConfigProperty: typing.Optional[dict[str, CfnMonitoringSchedule_MonitoringScheduleConfigPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_NetworkConfigProperty: typing.Optional[dict[str, CfnMonitoringSchedule_NetworkConfigPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_S3OutputProperty: typing.Optional[dict[str, CfnMonitoringSchedule_S3OutputPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_ScheduleConfigProperty: typing.Optional[dict[str, CfnMonitoringSchedule_ScheduleConfigPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_StatisticsResourceProperty: typing.Optional[dict[str, CfnMonitoringSchedule_StatisticsResourcePropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_StoppingConditionProperty: typing.Optional[dict[str, CfnMonitoringSchedule_StoppingConditionPropertyDef]] = pydantic.Field(None)
    CfnMonitoringSchedule_VpcConfigProperty: typing.Optional[dict[str, CfnMonitoringSchedule_VpcConfigPropertyDef]] = pydantic.Field(None)
    CfnNotebookInstance_InstanceMetadataServiceConfigurationProperty: typing.Optional[dict[str, CfnNotebookInstance_InstanceMetadataServiceConfigurationPropertyDef]] = pydantic.Field(None)
    CfnNotebookInstanceLifecycleConfig_NotebookInstanceLifecycleHookProperty: typing.Optional[dict[str, CfnNotebookInstanceLifecycleConfig_NotebookInstanceLifecycleHookPropertyDef]] = pydantic.Field(None)
    CfnPipeline_ParallelismConfigurationProperty: typing.Optional[dict[str, CfnPipeline_ParallelismConfigurationPropertyDef]] = pydantic.Field(None)
    CfnPipeline_PipelineDefinitionProperty: typing.Optional[dict[str, CfnPipeline_PipelineDefinitionPropertyDef]] = pydantic.Field(None)
    CfnPipeline_S3LocationProperty: typing.Optional[dict[str, CfnPipeline_S3LocationPropertyDef]] = pydantic.Field(None)
    CfnProject_ProvisioningParameterProperty: typing.Optional[dict[str, CfnProject_ProvisioningParameterPropertyDef]] = pydantic.Field(None)
    CfnProject_ServiceCatalogProvisionedProductDetailsProperty: typing.Optional[dict[str, CfnProject_ServiceCatalogProvisionedProductDetailsPropertyDef]] = pydantic.Field(None)
    CfnProject_ServiceCatalogProvisioningDetailsProperty: typing.Optional[dict[str, CfnProject_ServiceCatalogProvisioningDetailsPropertyDef]] = pydantic.Field(None)
    CfnSpace_CustomImageProperty: typing.Optional[dict[str, CfnSpace_CustomImagePropertyDef]] = pydantic.Field(None)
    CfnSpace_JupyterServerAppSettingsProperty: typing.Optional[dict[str, CfnSpace_JupyterServerAppSettingsPropertyDef]] = pydantic.Field(None)
    CfnSpace_KernelGatewayAppSettingsProperty: typing.Optional[dict[str, CfnSpace_KernelGatewayAppSettingsPropertyDef]] = pydantic.Field(None)
    CfnSpace_ResourceSpecProperty: typing.Optional[dict[str, CfnSpace_ResourceSpecPropertyDef]] = pydantic.Field(None)
    CfnSpace_SpaceSettingsProperty: typing.Optional[dict[str, CfnSpace_SpaceSettingsPropertyDef]] = pydantic.Field(None)
    CfnUserProfile_CustomImageProperty: typing.Optional[dict[str, CfnUserProfile_CustomImagePropertyDef]] = pydantic.Field(None)
    CfnUserProfile_JupyterServerAppSettingsProperty: typing.Optional[dict[str, CfnUserProfile_JupyterServerAppSettingsPropertyDef]] = pydantic.Field(None)
    CfnUserProfile_KernelGatewayAppSettingsProperty: typing.Optional[dict[str, CfnUserProfile_KernelGatewayAppSettingsPropertyDef]] = pydantic.Field(None)
    CfnUserProfile_ResourceSpecProperty: typing.Optional[dict[str, CfnUserProfile_ResourceSpecPropertyDef]] = pydantic.Field(None)
    CfnUserProfile_RStudioServerProAppSettingsProperty: typing.Optional[dict[str, CfnUserProfile_RStudioServerProAppSettingsPropertyDef]] = pydantic.Field(None)
    CfnUserProfile_SharingSettingsProperty: typing.Optional[dict[str, CfnUserProfile_SharingSettingsPropertyDef]] = pydantic.Field(None)
    CfnUserProfile_UserSettingsProperty: typing.Optional[dict[str, CfnUserProfile_UserSettingsPropertyDef]] = pydantic.Field(None)
    CfnWorkteam_CognitoMemberDefinitionProperty: typing.Optional[dict[str, CfnWorkteam_CognitoMemberDefinitionPropertyDef]] = pydantic.Field(None)
    CfnWorkteam_MemberDefinitionProperty: typing.Optional[dict[str, CfnWorkteam_MemberDefinitionPropertyDef]] = pydantic.Field(None)
    CfnWorkteam_NotificationConfigurationProperty: typing.Optional[dict[str, CfnWorkteam_NotificationConfigurationPropertyDef]] = pydantic.Field(None)
    CfnWorkteam_OidcMemberDefinitionProperty: typing.Optional[dict[str, CfnWorkteam_OidcMemberDefinitionPropertyDef]] = pydantic.Field(None)
    CfnApp: typing.Optional[dict[str, CfnAppDef]] = pydantic.Field(None)
    CfnAppImageConfig: typing.Optional[dict[str, CfnAppImageConfigDef]] = pydantic.Field(None)
    CfnCodeRepository: typing.Optional[dict[str, CfnCodeRepositoryDef]] = pydantic.Field(None)
    CfnDataQualityJobDefinition: typing.Optional[dict[str, CfnDataQualityJobDefinitionDef]] = pydantic.Field(None)
    CfnDevice: typing.Optional[dict[str, CfnDeviceDef]] = pydantic.Field(None)
    CfnDeviceFleet: typing.Optional[dict[str, CfnDeviceFleetDef]] = pydantic.Field(None)
    CfnDomain: typing.Optional[dict[str, CfnDomainDef]] = pydantic.Field(None)
    CfnEndpoint: typing.Optional[dict[str, CfnEndpointDef]] = pydantic.Field(None)
    CfnEndpointConfig: typing.Optional[dict[str, CfnEndpointConfigDef]] = pydantic.Field(None)
    CfnFeatureGroup: typing.Optional[dict[str, CfnFeatureGroupDef]] = pydantic.Field(None)
    CfnImage: typing.Optional[dict[str, CfnImageDef]] = pydantic.Field(None)
    CfnImageVersion: typing.Optional[dict[str, CfnImageVersionDef]] = pydantic.Field(None)
    CfnInferenceExperiment: typing.Optional[dict[str, CfnInferenceExperimentDef]] = pydantic.Field(None)
    CfnModel: typing.Optional[dict[str, CfnModelDef]] = pydantic.Field(None)
    CfnModelBiasJobDefinition: typing.Optional[dict[str, CfnModelBiasJobDefinitionDef]] = pydantic.Field(None)
    CfnModelCard: typing.Optional[dict[str, CfnModelCardDef]] = pydantic.Field(None)
    CfnModelExplainabilityJobDefinition: typing.Optional[dict[str, CfnModelExplainabilityJobDefinitionDef]] = pydantic.Field(None)
    CfnModelPackage: typing.Optional[dict[str, CfnModelPackageDef]] = pydantic.Field(None)
    CfnModelPackageGroup: typing.Optional[dict[str, CfnModelPackageGroupDef]] = pydantic.Field(None)
    CfnModelQualityJobDefinition: typing.Optional[dict[str, CfnModelQualityJobDefinitionDef]] = pydantic.Field(None)
    CfnMonitoringSchedule: typing.Optional[dict[str, CfnMonitoringScheduleDef]] = pydantic.Field(None)
    CfnNotebookInstance: typing.Optional[dict[str, CfnNotebookInstanceDef]] = pydantic.Field(None)
    CfnNotebookInstanceLifecycleConfig: typing.Optional[dict[str, CfnNotebookInstanceLifecycleConfigDef]] = pydantic.Field(None)
    CfnPipeline: typing.Optional[dict[str, CfnPipelineDef]] = pydantic.Field(None)
    CfnProject: typing.Optional[dict[str, CfnProjectDef]] = pydantic.Field(None)
    CfnSpace: typing.Optional[dict[str, CfnSpaceDef]] = pydantic.Field(None)
    CfnUserProfile: typing.Optional[dict[str, CfnUserProfileDef]] = pydantic.Field(None)
    CfnWorkteam: typing.Optional[dict[str, CfnWorkteamDef]] = pydantic.Field(None)
    CfnAppImageConfigProps: typing.Optional[dict[str, CfnAppImageConfigPropsDef]] = pydantic.Field(None)
    CfnAppProps: typing.Optional[dict[str, CfnAppPropsDef]] = pydantic.Field(None)
    CfnCodeRepositoryProps: typing.Optional[dict[str, CfnCodeRepositoryPropsDef]] = pydantic.Field(None)
    CfnDataQualityJobDefinitionProps: typing.Optional[dict[str, CfnDataQualityJobDefinitionPropsDef]] = pydantic.Field(None)
    CfnDeviceFleetProps: typing.Optional[dict[str, CfnDeviceFleetPropsDef]] = pydantic.Field(None)
    CfnDeviceProps: typing.Optional[dict[str, CfnDevicePropsDef]] = pydantic.Field(None)
    CfnDomainProps: typing.Optional[dict[str, CfnDomainPropsDef]] = pydantic.Field(None)
    CfnEndpointConfigProps: typing.Optional[dict[str, CfnEndpointConfigPropsDef]] = pydantic.Field(None)
    CfnEndpointProps: typing.Optional[dict[str, CfnEndpointPropsDef]] = pydantic.Field(None)
    CfnFeatureGroupProps: typing.Optional[dict[str, CfnFeatureGroupPropsDef]] = pydantic.Field(None)
    CfnImageProps: typing.Optional[dict[str, CfnImagePropsDef]] = pydantic.Field(None)
    CfnImageVersionProps: typing.Optional[dict[str, CfnImageVersionPropsDef]] = pydantic.Field(None)
    CfnInferenceExperimentProps: typing.Optional[dict[str, CfnInferenceExperimentPropsDef]] = pydantic.Field(None)
    CfnModelBiasJobDefinitionProps: typing.Optional[dict[str, CfnModelBiasJobDefinitionPropsDef]] = pydantic.Field(None)
    CfnModelCardProps: typing.Optional[dict[str, CfnModelCardPropsDef]] = pydantic.Field(None)
    CfnModelExplainabilityJobDefinitionProps: typing.Optional[dict[str, CfnModelExplainabilityJobDefinitionPropsDef]] = pydantic.Field(None)
    CfnModelPackageGroupProps: typing.Optional[dict[str, CfnModelPackageGroupPropsDef]] = pydantic.Field(None)
    CfnModelPackageProps: typing.Optional[dict[str, CfnModelPackagePropsDef]] = pydantic.Field(None)
    CfnModelProps: typing.Optional[dict[str, CfnModelPropsDef]] = pydantic.Field(None)
    CfnModelQualityJobDefinitionProps: typing.Optional[dict[str, CfnModelQualityJobDefinitionPropsDef]] = pydantic.Field(None)
    CfnMonitoringScheduleProps: typing.Optional[dict[str, CfnMonitoringSchedulePropsDef]] = pydantic.Field(None)
    CfnNotebookInstanceLifecycleConfigProps: typing.Optional[dict[str, CfnNotebookInstanceLifecycleConfigPropsDef]] = pydantic.Field(None)
    CfnNotebookInstanceProps: typing.Optional[dict[str, CfnNotebookInstancePropsDef]] = pydantic.Field(None)
    CfnPipelineProps: typing.Optional[dict[str, CfnPipelinePropsDef]] = pydantic.Field(None)
    CfnProjectProps: typing.Optional[dict[str, CfnProjectPropsDef]] = pydantic.Field(None)
    CfnSpaceProps: typing.Optional[dict[str, CfnSpacePropsDef]] = pydantic.Field(None)
    CfnUserProfileProps: typing.Optional[dict[str, CfnUserProfilePropsDef]] = pydantic.Field(None)
    CfnWorkteamProps: typing.Optional[dict[str, CfnWorkteamPropsDef]] = pydantic.Field(None)
    ...
