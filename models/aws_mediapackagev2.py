from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_mediapackagev2.CfnChannel.IngestEndpointProperty
class CfnChannel_IngestEndpointPropertyDef(BaseStruct):
    url: typing.Optional[str] = pydantic.Field(None, description='The URL associated with the ingest endpoint of the channel.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackagev2-channel-ingestendpoint.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackagev2 as mediapackagev2\n\n    ingest_endpoint_property = mediapackagev2.CfnChannel.IngestEndpointProperty(\n        id="id",\n        url="url"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnChannel.IngestEndpointProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.DashManifestConfigurationProperty
class CfnOriginEndpoint_DashManifestConfigurationPropertyDef(BaseStruct):
    manifest_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, index.")
    drm_signaling: typing.Optional[str] = pydantic.Field(None, description='')
    filter_configuration: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_FilterConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    manifest_window_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    min_buffer_time_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    min_update_period_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    period_triggers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='Leave this value empty to indicate that the manifest is contained all in one period. For more information about periods in the DASH manifest, see Multi-period DASH in AWS Elemental MediaPackage.\n')
    scte_dash: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_ScteDashPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    segment_template_format: typing.Optional[str] = pydantic.Field(None, description='')
    suggested_presentation_delay_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    utc_timing: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_DashUtcTimingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['manifest_name', 'drm_signaling', 'filter_configuration', 'manifest_window_seconds', 'min_buffer_time_seconds', 'min_update_period_seconds', 'period_triggers', 'scte_dash', 'segment_template_format', 'suggested_presentation_delay_seconds', 'utc_timing']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.DashManifestConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.DashUtcTimingProperty
class CfnOriginEndpoint_DashUtcTimingPropertyDef(BaseStruct):
    timing_mode: typing.Optional[str] = pydantic.Field(None, description='The UTC timing mode.\n')
    timing_source: typing.Optional[str] = pydantic.Field(None, description='The the method that the player uses to synchronize to coordinated universal time (UTC) wall clock time.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackagev2-originendpoint-dashutctiming.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackagev2 as mediapackagev2\n\n    dash_utc_timing_property = mediapackagev2.CfnOriginEndpoint.DashUtcTimingProperty(\n        timing_mode="timingMode",\n        timing_source="timingSource"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['timing_mode', 'timing_source']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.DashUtcTimingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.EncryptionContractConfigurationProperty
class CfnOriginEndpoint_EncryptionContractConfigurationPropertyDef(BaseStruct):
    preset_speke20_audio: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="A collection of audio encryption presets. Value description: - ``PRESET-AUDIO-1`` - Use one content key to encrypt all of the audio tracks in your stream. - ``PRESET-AUDIO-2`` - Use one content key to encrypt all of the stereo audio tracks and one content key to encrypt all of the multichannel audio tracks. - ``PRESET-AUDIO-3`` - Use one content key to encrypt all of the stereo audio tracks, one content key to encrypt all of the multichannel audio tracks with 3 to 6 channels, and one content key to encrypt all of the multichannel audio tracks with more than 6 channels. - ``SHARED`` - Use the same content key for all of the audio and video tracks in your stream. - ``UNENCRYPTED`` - Don't encrypt any of the audio tracks in your stream.\n")
    preset_speke20_video: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The SPEKE Version 2.0 preset video associated with the encryption contract configuration of the origin endpoint.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackagev2-originendpoint-encryptioncontractconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackagev2 as mediapackagev2\n\n    encryption_contract_configuration_property = mediapackagev2.CfnOriginEndpoint.EncryptionContractConfigurationProperty(\n        preset_speke20_audio="presetSpeke20Audio",\n        preset_speke20_video="presetSpeke20Video"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['preset_speke20_audio', 'preset_speke20_video']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.EncryptionContractConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.EncryptionMethodProperty
class CfnOriginEndpoint_EncryptionMethodPropertyDef(BaseStruct):
    cmaf_encryption_method: typing.Optional[str] = pydantic.Field(None, description='The encryption method to use.\n')
    ts_encryption_method: typing.Optional[str] = pydantic.Field(None, description='The encryption method to use.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackagev2-originendpoint-encryptionmethod.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackagev2 as mediapackagev2\n\n    encryption_method_property = mediapackagev2.CfnOriginEndpoint.EncryptionMethodProperty(\n        cmaf_encryption_method="cmafEncryptionMethod",\n        ts_encryption_method="tsEncryptionMethod"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cmaf_encryption_method', 'ts_encryption_method']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.EncryptionMethodProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.EncryptionProperty
class CfnOriginEndpoint_EncryptionPropertyDef(BaseStruct):
    encryption_method: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_EncryptionMethodPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The encryption method to use.\n')
    speke_key_provider: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_SpekeKeyProviderPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The SPEKE key provider to use for encryption.\n')
    constant_initialization_vector: typing.Optional[str] = pydantic.Field(None, description="A 128-bit, 16-byte hex value represented by a 32-character string, used in conjunction with the key for encrypting content. If you don't specify a value, then MediaPackage creates the constant initialization vector (IV).\n")
    key_rotation_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='The interval, in seconds, to rotate encryption keys for the origin endpoint.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackagev2-originendpoint-encryption.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackagev2 as mediapackagev2\n\n    encryption_property = mediapackagev2.CfnOriginEndpoint.EncryptionProperty(\n        encryption_method=mediapackagev2.CfnOriginEndpoint.EncryptionMethodProperty(\n            cmaf_encryption_method="cmafEncryptionMethod",\n            ts_encryption_method="tsEncryptionMethod"\n        ),\n        speke_key_provider=mediapackagev2.CfnOriginEndpoint.SpekeKeyProviderProperty(\n            drm_systems=["drmSystems"],\n            encryption_contract_configuration=mediapackagev2.CfnOriginEndpoint.EncryptionContractConfigurationProperty(\n                preset_speke20_audio="presetSpeke20Audio",\n                preset_speke20_video="presetSpeke20Video"\n            ),\n            resource_id="resourceId",\n            role_arn="roleArn",\n            url="url"\n        ),\n\n        # the properties below are optional\n        constant_initialization_vector="constantInitializationVector",\n        key_rotation_interval_seconds=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['encryption_method', 'speke_key_provider', 'constant_initialization_vector', 'key_rotation_interval_seconds']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.EncryptionProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.FilterConfigurationProperty
class CfnOriginEndpoint_FilterConfigurationPropertyDef(BaseStruct):
    end: typing.Optional[str] = pydantic.Field(None, description="Optionally specify the end time for all of your manifest egress requests. When you include end time, note that you cannot use end time query parameters for this manifest's endpoint URL.\n")
    manifest_filter: typing.Optional[str] = pydantic.Field(None, description="Optionally specify one or more manifest filters for all of your manifest egress requests. When you include a manifest filter, note that you cannot use an identical manifest filter query parameter for this manifest's endpoint URL.\n")
    start: typing.Optional[str] = pydantic.Field(None, description="Optionally specify the start time for all of your manifest egress requests. When you include start time, note that you cannot use start time query parameters for this manifest's endpoint URL.\n")
    time_delay_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='Optionally specify the time delay for all of your manifest egress requests. Enter a value that is smaller than your endpoint\'s startover window. When you include time delay, note that you cannot use time delay query parameters for this manifest\'s endpoint URL.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackagev2-originendpoint-filterconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackagev2 as mediapackagev2\n\n    filter_configuration_property = mediapackagev2.CfnOriginEndpoint.FilterConfigurationProperty(\n        end="end",\n        manifest_filter="manifestFilter",\n        start="start",\n        time_delay_seconds=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['end', 'manifest_filter', 'start', 'time_delay_seconds']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.FilterConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.HlsManifestConfigurationProperty
class CfnOriginEndpoint_HlsManifestConfigurationPropertyDef(BaseStruct):
    manifest_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the manifest associated with the HLS manifest configuration.\n')
    child_manifest_name: typing.Optional[str] = pydantic.Field(None, description='The name of the child manifest associated with the HLS manifest configuration.\n')
    filter_configuration: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_FilterConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    manifest_window_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='The duration of the manifest window, in seconds, for the HLS manifest configuration.\n')
    program_date_time_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='The ``EXT-X-PROGRAM-DATE-TIME`` interval, in seconds, associated with the HLS manifest configuration.\n')
    scte_hls: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_ScteHlsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='THE SCTE-35 HLS configuration associated with the HLS manifest configuration.\n')
    url: typing.Optional[str] = pydantic.Field(None, description='The URL of the HLS manifest configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackagev2-originendpoint-hlsmanifestconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackagev2 as mediapackagev2\n\n    hls_manifest_configuration_property = mediapackagev2.CfnOriginEndpoint.HlsManifestConfigurationProperty(\n        manifest_name="manifestName",\n\n        # the properties below are optional\n        child_manifest_name="childManifestName",\n        filter_configuration=mediapackagev2.CfnOriginEndpoint.FilterConfigurationProperty(\n            end="end",\n            manifest_filter="manifestFilter",\n            start="start",\n            time_delay_seconds=123\n        ),\n        manifest_window_seconds=123,\n        program_date_time_interval_seconds=123,\n        scte_hls=mediapackagev2.CfnOriginEndpoint.ScteHlsProperty(\n            ad_marker_hls="adMarkerHls"\n        ),\n        url="url"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['manifest_name', 'child_manifest_name', 'filter_configuration', 'manifest_window_seconds', 'program_date_time_interval_seconds', 'scte_hls', 'url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.HlsManifestConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.LowLatencyHlsManifestConfigurationProperty
class CfnOriginEndpoint_LowLatencyHlsManifestConfigurationPropertyDef(BaseStruct):
    manifest_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="A short short string that's appended to the endpoint URL. The manifest name creates a unique path to this endpoint. If you don't enter a value, MediaPackage uses the default manifest name, ``index`` . MediaPackage automatically inserts the format extension, such as ``.m3u8`` . You can't use the same manifest name if you use HLS manifest and low-latency HLS manifest. The ``manifestName`` on the ``HLSManifest`` object overrides the ``manifestName`` you provided on the ``originEndpoint`` object.\n")
    child_manifest_name: typing.Optional[str] = pydantic.Field(None, description='The name of the child manifest associated with the low-latency HLS (LL-HLS) manifest configuration of the origin endpoint.\n')
    filter_configuration: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_FilterConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    manifest_window_seconds: typing.Union[int, float, None] = pydantic.Field(None, description="The total duration (in seconds) of the manifest's content.\n")
    program_date_time_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description="Inserts ``EXT-X-PROGRAM-DATE-TIME`` tags in the output manifest at the interval that you specify. If you don't enter an interval, ``EXT-X-PROGRAM-DATE-TIME`` tags aren't included in the manifest. The tags sync the stream to the wall clock so that viewers can seek to a specific time in the playback timeline on the player. ``ID3Timed`` metadata messages generate every 5 seconds whenever MediaPackage ingests the content. Irrespective of this parameter, if any ``ID3Timed`` metadata is in the HLS input, MediaPackage passes through that metadata to the HLS output.\n")
    scte_hls: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_ScteHlsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The SCTE-35 HLS configuration associated with the low-latency HLS (LL-HLS) manifest configuration of the origin endpoint.\n')
    url: typing.Optional[str] = pydantic.Field(None, description='The URL of the low-latency HLS (LL-HLS) manifest configuration of the origin endpoint.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackagev2-originendpoint-lowlatencyhlsmanifestconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackagev2 as mediapackagev2\n\n    low_latency_hls_manifest_configuration_property = mediapackagev2.CfnOriginEndpoint.LowLatencyHlsManifestConfigurationProperty(\n        manifest_name="manifestName",\n\n        # the properties below are optional\n        child_manifest_name="childManifestName",\n        filter_configuration=mediapackagev2.CfnOriginEndpoint.FilterConfigurationProperty(\n            end="end",\n            manifest_filter="manifestFilter",\n            start="start",\n            time_delay_seconds=123\n        ),\n        manifest_window_seconds=123,\n        program_date_time_interval_seconds=123,\n        scte_hls=mediapackagev2.CfnOriginEndpoint.ScteHlsProperty(\n            ad_marker_hls="adMarkerHls"\n        ),\n        url="url"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['manifest_name', 'child_manifest_name', 'filter_configuration', 'manifest_window_seconds', 'program_date_time_interval_seconds', 'scte_hls', 'url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.LowLatencyHlsManifestConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.ScteDashProperty
class CfnOriginEndpoint_ScteDashPropertyDef(BaseStruct):
    ad_marker_dash: typing.Optional[str] = pydantic.Field(None, description='Choose how ad markers are included in the packaged content. If you include ad markers in the content stream in your upstream encoders, then you need to inform MediaPackage what to do with the ad markers in the output. Value description: - ``Binary`` - The SCTE-35 marker is expressed as a hex-string (Base64 string) rather than full XML. - ``XML`` - The SCTE marker is expressed fully in XML.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackagev2-originendpoint-sctedash.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackagev2 as mediapackagev2\n\n    scte_dash_property = mediapackagev2.CfnOriginEndpoint.ScteDashProperty(\n        ad_marker_dash="adMarkerDash"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ad_marker_dash']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.ScteDashProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.ScteHlsProperty
class CfnOriginEndpoint_ScteHlsPropertyDef(BaseStruct):
    ad_marker_hls: typing.Optional[str] = pydantic.Field(None, description='The SCTE-35 HLS ad-marker configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackagev2-originendpoint-sctehls.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackagev2 as mediapackagev2\n\n    scte_hls_property = mediapackagev2.CfnOriginEndpoint.ScteHlsProperty(\n        ad_marker_hls="adMarkerHls"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['ad_marker_hls']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.ScteHlsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.ScteProperty
class CfnOriginEndpoint_SctePropertyDef(BaseStruct):
    scte_filter: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The filter associated with the SCTE-35 configuration.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackagev2-originendpoint-scte.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackagev2 as mediapackagev2\n\n    scte_property = mediapackagev2.CfnOriginEndpoint.ScteProperty(\n        scte_filter=["scteFilter"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['scte_filter']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.ScteProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.SegmentProperty
class CfnOriginEndpoint_SegmentPropertyDef(BaseStruct):
    encryption: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_EncryptionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Whether to use encryption for the segment.\n')
    include_iframe_only_streams: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Whether the segment includes I-frame-only streams.\n')
    scte: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_SctePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The SCTE-35 configuration associated with the segment.\n')
    segment_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='The duration of the segment, in seconds.\n')
    segment_name: typing.Optional[str] = pydantic.Field(None, description='The name of the segment associated with the origin endpoint.\n')
    ts_include_dvb_subtitles: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Whether the segment includes DVB subtitles.\n')
    ts_use_audio_rendition_group: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='Whether the segment is an audio rendition group.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackagev2-originendpoint-segment.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackagev2 as mediapackagev2\n\n    segment_property = mediapackagev2.CfnOriginEndpoint.SegmentProperty(\n        encryption=mediapackagev2.CfnOriginEndpoint.EncryptionProperty(\n            encryption_method=mediapackagev2.CfnOriginEndpoint.EncryptionMethodProperty(\n                cmaf_encryption_method="cmafEncryptionMethod",\n                ts_encryption_method="tsEncryptionMethod"\n            ),\n            speke_key_provider=mediapackagev2.CfnOriginEndpoint.SpekeKeyProviderProperty(\n                drm_systems=["drmSystems"],\n                encryption_contract_configuration=mediapackagev2.CfnOriginEndpoint.EncryptionContractConfigurationProperty(\n                    preset_speke20_audio="presetSpeke20Audio",\n                    preset_speke20_video="presetSpeke20Video"\n                ),\n                resource_id="resourceId",\n                role_arn="roleArn",\n                url="url"\n            ),\n\n            # the properties below are optional\n            constant_initialization_vector="constantInitializationVector",\n            key_rotation_interval_seconds=123\n        ),\n        include_iframe_only_streams=False,\n        scte=mediapackagev2.CfnOriginEndpoint.ScteProperty(\n            scte_filter=["scteFilter"]\n        ),\n        segment_duration_seconds=123,\n        segment_name="segmentName",\n        ts_include_dvb_subtitles=False,\n        ts_use_audio_rendition_group=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['encryption', 'include_iframe_only_streams', 'scte', 'segment_duration_seconds', 'segment_name', 'ts_include_dvb_subtitles', 'ts_use_audio_rendition_group']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.SegmentProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.SpekeKeyProviderProperty
class CfnOriginEndpoint_SpekeKeyProviderPropertyDef(BaseStruct):
    drm_systems: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description="The DRM solution provider you're using to protect your content during distribution.\n")
    encryption_contract_configuration: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_EncryptionContractConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='The encryption contract configuration associated with the SPEKE key provider.\n')
    resource_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The unique identifier for the content. The service sends this identifier to the key server to identify the current endpoint. How unique you make this identifier depends on how fine-grained you want access controls to be. The service does not permit you to use the same ID for two simultaneous encryption processes. The resource ID is also known as the content ID. The following example shows a resource ID: ``MovieNight20171126093045``\n')
    role_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The ARN for the IAM role granted by the key provider that provides access to the key provider API. This role must have a trust policy that allows MediaPackage to assume the role, and it must have a sufficient permissions policy to allow access to the specific key retrieval URL. Get this from your DRM solution provider. Valid format: ``arn:aws:iam::{accountID}:role/{name}`` . The following example shows a role ARN: ``arn:aws:iam::444455556666:role/SpekeAccess``\n')
    url: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The URL of the SPEKE key provider.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-mediapackagev2-originendpoint-spekekeyprovider.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackagev2 as mediapackagev2\n\n    speke_key_provider_property = mediapackagev2.CfnOriginEndpoint.SpekeKeyProviderProperty(\n        drm_systems=["drmSystems"],\n        encryption_contract_configuration=mediapackagev2.CfnOriginEndpoint.EncryptionContractConfigurationProperty(\n            preset_speke20_audio="presetSpeke20Audio",\n            preset_speke20_video="presetSpeke20Video"\n        ),\n        resource_id="resourceId",\n        role_arn="roleArn",\n        url="url"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['drm_systems', 'encryption_contract_configuration', 'resource_id', 'role_arn', 'url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnOriginEndpoint.SpekeKeyProviderProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackagev2.CfnChannel
class CfnChannelDef(BaseCfnResource):
    channel_group_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the channel group associated with the channel configuration.\n')
    channel_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the channel.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the channel.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags associated with the channel.')
    _init_params: typing.ClassVar[list[str]] = ['channel_group_name', 'channel_name', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['IngestEndpointProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnChannel'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_mediapackagev2.CfnChannelDefConfig] = pydantic.Field(None)


class CfnChannelDefConfig(pydantic.BaseModel):
    IngestEndpointProperty: typing.Optional[list[models.aws_mediapackagev2.CfnChannelDefIngestendpointpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_mediapackagev2.CfnChannelDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_mediapackagev2.CfnChannelDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_mediapackagev2.CfnChannelDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_mediapackagev2.CfnChannelDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_mediapackagev2.CfnChannelDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_mediapackagev2.CfnChannelDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_mediapackagev2.CfnChannelDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_mediapackagev2.CfnChannelDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_mediapackagev2.CfnChannelDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_mediapackagev2.CfnChannelDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_mediapackagev2.CfnChannelDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_mediapackagev2.CfnChannelDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_mediapackagev2.CfnChannelDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    attr_ingest_endpoints_config: typing.Optional[models._interface_methods.CoreIResolvableDefConfig] = pydantic.Field(None)
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnChannelDefIngestendpointpropertyParams(pydantic.BaseModel):
    id: typing.Optional[str] = pydantic.Field(None, description='')
    url: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnChannelDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnChannelDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnChannelDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnChannelDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnChannelDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnChannelDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnChannelDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnChannelDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnChannelDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnChannelDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnChannelDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnChannelDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnChannelDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnChannelDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_mediapackagev2.CfnChannelGroup
class CfnChannelGroupDef(BaseCfnResource):
    channel_group_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the channel group.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The configuration for a MediaPackage V2 channel group.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags associated with the channel group.')
    _init_params: typing.ClassVar[list[str]] = ['channel_group_name', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnChannelGroup'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_mediapackagev2.CfnChannelGroupDefConfig] = pydantic.Field(None)


class CfnChannelGroupDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_mediapackagev2.CfnChannelGroupDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_mediapackagev2.CfnChannelGroupDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_mediapackagev2.CfnChannelGroupDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_mediapackagev2.CfnChannelGroupDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_mediapackagev2.CfnChannelGroupDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_mediapackagev2.CfnChannelGroupDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_mediapackagev2.CfnChannelGroupDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_mediapackagev2.CfnChannelGroupDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_mediapackagev2.CfnChannelGroupDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_mediapackagev2.CfnChannelGroupDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_mediapackagev2.CfnChannelGroupDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_mediapackagev2.CfnChannelGroupDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_mediapackagev2.CfnChannelGroupDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnChannelGroupDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnChannelGroupDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnChannelGroupDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnChannelGroupDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnChannelGroupDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnChannelGroupDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnChannelGroupDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnChannelGroupDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnChannelGroupDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnChannelGroupDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnChannelGroupDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnChannelGroupDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnChannelGroupDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnChannelGroupDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_mediapackagev2.CfnChannelPolicy
class CfnChannelPolicyDef(BaseCfnResource):
    channel_group_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the channel group associated with the channel policy.\n')
    channel_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the channel associated with the channel policy.\n')
    policy: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The policy associated with the channel.')
    _init_params: typing.ClassVar[list[str]] = ['channel_group_name', 'channel_name', 'policy']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnChannelPolicy'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_mediapackagev2.CfnChannelPolicyDefConfig] = pydantic.Field(None)


class CfnChannelPolicyDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_mediapackagev2.CfnChannelPolicyDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_mediapackagev2.CfnChannelPolicyDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_mediapackagev2.CfnChannelPolicyDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_mediapackagev2.CfnChannelPolicyDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_mediapackagev2.CfnChannelPolicyDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_mediapackagev2.CfnChannelPolicyDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_mediapackagev2.CfnChannelPolicyDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_mediapackagev2.CfnChannelPolicyDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_mediapackagev2.CfnChannelPolicyDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_mediapackagev2.CfnChannelPolicyDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_mediapackagev2.CfnChannelPolicyDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_mediapackagev2.CfnChannelPolicyDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_mediapackagev2.CfnChannelPolicyDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnChannelPolicyDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnChannelPolicyDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnChannelPolicyDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnChannelPolicyDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnChannelPolicyDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnChannelPolicyDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnChannelPolicyDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnChannelPolicyDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnChannelPolicyDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnChannelPolicyDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnChannelPolicyDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnChannelPolicyDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnChannelPolicyDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnChannelPolicyDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_mediapackagev2.CfnOriginEndpoint
class CfnOriginEndpointDef(BaseCfnResource):
    channel_group_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the channel group associated with the origin endpoint configuration.\n')
    channel_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The channel name associated with the origin endpoint.\n')
    origin_endpoint_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the origin endpoint associated with the origin endpoint configuration.\n')
    container_type: typing.Optional[str] = pydantic.Field(None, description='The container type associated with the origin endpoint configuration.\n')
    dash_manifests: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_DashManifestConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A DASH manifest configuration.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description associated with the origin endpoint.\n')
    hls_manifests: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_HlsManifestConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The HLS manfiests associated with the origin endpoint configuration.\n')
    low_latency_hls_manifests: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_LowLatencyHlsManifestConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The low-latency HLS (LL-HLS) manifests associated with the origin endpoint.\n')
    segment: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_SegmentPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The segment associated with the origin endpoint.\n')
    startover_window_seconds: typing.Union[int, float, None] = pydantic.Field(None, description="The size of the window (in seconds) to specify a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags associated with the origin endpoint.')
    _init_params: typing.ClassVar[list[str]] = ['channel_group_name', 'channel_name', 'origin_endpoint_name', 'container_type', 'dash_manifests', 'description', 'hls_manifests', 'low_latency_hls_manifests', 'segment', 'startover_window_seconds', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['DashManifestConfigurationProperty', 'DashUtcTimingProperty', 'EncryptionContractConfigurationProperty', 'EncryptionMethodProperty', 'EncryptionProperty', 'FilterConfigurationProperty', 'HlsManifestConfigurationProperty', 'LowLatencyHlsManifestConfigurationProperty', 'ScteDashProperty', 'ScteHlsProperty', 'ScteProperty', 'SegmentProperty', 'SpekeKeyProviderProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnOriginEndpoint'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_mediapackagev2.CfnOriginEndpointDefConfig] = pydantic.Field(None)


class CfnOriginEndpointDefConfig(pydantic.BaseModel):
    DashManifestConfigurationProperty: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefDashmanifestconfigurationpropertyParams]] = pydantic.Field(None, description='')
    DashUtcTimingProperty: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefDashutctimingpropertyParams]] = pydantic.Field(None, description='')
    EncryptionContractConfigurationProperty: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefEncryptioncontractconfigurationpropertyParams]] = pydantic.Field(None, description='')
    EncryptionMethodProperty: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefEncryptionmethodpropertyParams]] = pydantic.Field(None, description='')
    EncryptionProperty: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefEncryptionpropertyParams]] = pydantic.Field(None, description='')
    FilterConfigurationProperty: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefFilterconfigurationpropertyParams]] = pydantic.Field(None, description='')
    HlsManifestConfigurationProperty: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefHlsmanifestconfigurationpropertyParams]] = pydantic.Field(None, description='')
    LowLatencyHlsManifestConfigurationProperty: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefLowlatencyhlsmanifestconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ScteDashProperty: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefSctedashpropertyParams]] = pydantic.Field(None, description='')
    ScteHlsProperty: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefSctehlspropertyParams]] = pydantic.Field(None, description='')
    ScteProperty: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefSctepropertyParams]] = pydantic.Field(None, description='')
    SegmentProperty: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefSegmentpropertyParams]] = pydantic.Field(None, description='')
    SpekeKeyProviderProperty: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefSpekekeyproviderpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    cdk_tag_manager_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnOriginEndpointDefDashmanifestconfigurationpropertyParams(pydantic.BaseModel):
    manifest_name: str = pydantic.Field(..., description='')
    drm_signaling: typing.Optional[str] = pydantic.Field(None, description='')
    filter_configuration: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_FilterConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    manifest_window_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    min_buffer_time_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    min_update_period_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    period_triggers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    scte_dash: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_ScteDashPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    segment_template_format: typing.Optional[str] = pydantic.Field(None, description='')
    suggested_presentation_delay_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    utc_timing: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_DashUtcTimingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnOriginEndpointDefDashutctimingpropertyParams(pydantic.BaseModel):
    timing_mode: typing.Optional[str] = pydantic.Field(None, description='')
    timing_source: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnOriginEndpointDefEncryptioncontractconfigurationpropertyParams(pydantic.BaseModel):
    preset_speke20_audio: str = pydantic.Field(..., description='')
    preset_speke20_video: str = pydantic.Field(..., description='')
    ...

class CfnOriginEndpointDefEncryptionmethodpropertyParams(pydantic.BaseModel):
    cmaf_encryption_method: typing.Optional[str] = pydantic.Field(None, description='')
    ts_encryption_method: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnOriginEndpointDefEncryptionpropertyParams(pydantic.BaseModel):
    encryption_method: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_EncryptionMethodPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    speke_key_provider: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_SpekeKeyProviderPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    constant_initialization_vector: typing.Optional[str] = pydantic.Field(None, description='')
    key_rotation_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnOriginEndpointDefFilterconfigurationpropertyParams(pydantic.BaseModel):
    end: typing.Optional[str] = pydantic.Field(None, description='')
    manifest_filter: typing.Optional[str] = pydantic.Field(None, description='')
    start: typing.Optional[str] = pydantic.Field(None, description='')
    time_delay_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnOriginEndpointDefHlsmanifestconfigurationpropertyParams(pydantic.BaseModel):
    manifest_name: str = pydantic.Field(..., description='')
    child_manifest_name: typing.Optional[str] = pydantic.Field(None, description='')
    filter_configuration: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_FilterConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    manifest_window_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    program_date_time_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    scte_hls: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_ScteHlsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    url: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnOriginEndpointDefLowlatencyhlsmanifestconfigurationpropertyParams(pydantic.BaseModel):
    manifest_name: str = pydantic.Field(..., description='')
    child_manifest_name: typing.Optional[str] = pydantic.Field(None, description='')
    filter_configuration: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_FilterConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    manifest_window_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    program_date_time_interval_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    scte_hls: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_ScteHlsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    url: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnOriginEndpointDefSctedashpropertyParams(pydantic.BaseModel):
    ad_marker_dash: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnOriginEndpointDefSctehlspropertyParams(pydantic.BaseModel):
    ad_marker_hls: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnOriginEndpointDefSctepropertyParams(pydantic.BaseModel):
    scte_filter: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnOriginEndpointDefSegmentpropertyParams(pydantic.BaseModel):
    encryption: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_EncryptionPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    include_iframe_only_streams: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    scte: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_SctePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    segment_duration_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    segment_name: typing.Optional[str] = pydantic.Field(None, description='')
    ts_include_dvb_subtitles: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ts_use_audio_rendition_group: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnOriginEndpointDefSpekekeyproviderpropertyParams(pydantic.BaseModel):
    drm_systems: typing.Sequence[str] = pydantic.Field(..., description='')
    encryption_contract_configuration: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_EncryptionContractConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    resource_id: str = pydantic.Field(..., description='')
    role_arn: str = pydantic.Field(..., description='')
    url: str = pydantic.Field(..., description='')
    ...

class CfnOriginEndpointDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnOriginEndpointDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnOriginEndpointDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnOriginEndpointDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnOriginEndpointDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnOriginEndpointDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnOriginEndpointDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnOriginEndpointDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnOriginEndpointDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnOriginEndpointDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnOriginEndpointDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnOriginEndpointDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnOriginEndpointDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnOriginEndpointDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_mediapackagev2.CfnOriginEndpointPolicy
class CfnOriginEndpointPolicyDef(BaseCfnResource):
    channel_group_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the channel group associated with the origin endpoint policy.\n')
    channel_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The channel name associated with the origin endpoint policy.\n')
    origin_endpoint_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the origin endpoint associated with the origin endpoint policy.\n')
    policy: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The policy associated with the origin endpoint.')
    _init_params: typing.ClassVar[list[str]] = ['channel_group_name', 'channel_name', 'origin_endpoint_name', 'policy']
    _method_names: typing.ClassVar[list[str]] = ['add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnOriginEndpointPolicy'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_mediapackagev2.CfnOriginEndpointPolicyDefConfig] = pydantic.Field(None)


class CfnOriginEndpointPolicyDefConfig(pydantic.BaseModel):
    add_deletion_override: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointPolicyDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointPolicyDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointPolicyDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointPolicyDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointPolicyDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointPolicyDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointPolicyDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointPolicyDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointPolicyDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointPolicyDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointPolicyDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointPolicyDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_mediapackagev2.CfnOriginEndpointPolicyDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnOriginEndpointPolicyDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnOriginEndpointPolicyDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnOriginEndpointPolicyDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnOriginEndpointPolicyDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnOriginEndpointPolicyDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnOriginEndpointPolicyDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnOriginEndpointPolicyDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnOriginEndpointPolicyDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnOriginEndpointPolicyDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnOriginEndpointPolicyDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnOriginEndpointPolicyDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnOriginEndpointPolicyDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnOriginEndpointPolicyDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnOriginEndpointPolicyDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_mediapackagev2.CfnChannelGroupProps
class CfnChannelGroupPropsDef(BaseCfnProperty):
    channel_group_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the channel group.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The configuration for a MediaPackage V2 channel group.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags associated with the channel group.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackagev2-channelgroup.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackagev2 as mediapackagev2\n\n    cfn_channel_group_props = mediapackagev2.CfnChannelGroupProps(\n        channel_group_name="channelGroupName",\n\n        # the properties below are optional\n        description="description",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['channel_group_name', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnChannelGroupProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackagev2.CfnChannelPolicyProps
class CfnChannelPolicyPropsDef(BaseCfnProperty):
    channel_group_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the channel group associated with the channel policy.\n')
    channel_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the channel associated with the channel policy.\n')
    policy: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The policy associated with the channel.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackagev2-channelpolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackagev2 as mediapackagev2\n\n    # policy: Any\n\n    cfn_channel_policy_props = mediapackagev2.CfnChannelPolicyProps(\n        channel_group_name="channelGroupName",\n        channel_name="channelName",\n        policy=policy\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['channel_group_name', 'channel_name', 'policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnChannelPolicyProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackagev2.CfnChannelProps
class CfnChannelPropsDef(BaseCfnProperty):
    channel_group_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the channel group associated with the channel configuration.\n')
    channel_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the channel.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description of the channel.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags associated with the channel.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackagev2-channel.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackagev2 as mediapackagev2\n\n    cfn_channel_props = mediapackagev2.CfnChannelProps(\n        channel_group_name="channelGroupName",\n        channel_name="channelName",\n\n        # the properties below are optional\n        description="description",\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['channel_group_name', 'channel_name', 'description', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnChannelProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackagev2.CfnOriginEndpointPolicyProps
class CfnOriginEndpointPolicyPropsDef(BaseCfnProperty):
    channel_group_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the channel group associated with the origin endpoint policy.\n')
    channel_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The channel name associated with the origin endpoint policy.\n')
    origin_endpoint_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the origin endpoint associated with the origin endpoint policy.\n')
    policy: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The policy associated with the origin endpoint.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackagev2-originendpointpolicy.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackagev2 as mediapackagev2\n\n    # policy: Any\n\n    cfn_origin_endpoint_policy_props = mediapackagev2.CfnOriginEndpointPolicyProps(\n        channel_group_name="channelGroupName",\n        channel_name="channelName",\n        origin_endpoint_name="originEndpointName",\n        policy=policy\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['channel_group_name', 'channel_name', 'origin_endpoint_name', 'policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnOriginEndpointPolicyProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_mediapackagev2.CfnOriginEndpointProps
class CfnOriginEndpointPropsDef(BaseCfnProperty):
    channel_group_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the channel group associated with the origin endpoint configuration.\n')
    channel_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The channel name associated with the origin endpoint.\n')
    origin_endpoint_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='The name of the origin endpoint associated with the origin endpoint configuration.\n')
    container_type: typing.Optional[str] = pydantic.Field(None, description='The container type associated with the origin endpoint configuration.\n')
    dash_manifests: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_DashManifestConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A DASH manifest configuration.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='The description associated with the origin endpoint.\n')
    hls_manifests: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_HlsManifestConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The HLS manfiests associated with the origin endpoint configuration.\n')
    low_latency_hls_manifests: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_LowLatencyHlsManifestConfigurationPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The low-latency HLS (LL-HLS) manifests associated with the origin endpoint.\n')
    segment: typing.Union[models.UnsupportedResource, models.aws_mediapackagev2.CfnOriginEndpoint_SegmentPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The segment associated with the origin endpoint.\n')
    startover_window_seconds: typing.Union[int, float, None] = pydantic.Field(None, description="The size of the window (in seconds) to specify a window of the live stream that's available for on-demand viewing. Viewers can start-over or catch-up on content that falls within the window.\n")
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags associated with the origin endpoint.\n\n:see: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-mediapackagev2-originendpoint.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_mediapackagev2 as mediapackagev2\n\n    cfn_origin_endpoint_props = mediapackagev2.CfnOriginEndpointProps(\n        channel_group_name="channelGroupName",\n        channel_name="channelName",\n        origin_endpoint_name="originEndpointName",\n\n        # the properties below are optional\n        container_type="containerType",\n        dash_manifests=[mediapackagev2.CfnOriginEndpoint.DashManifestConfigurationProperty(\n            manifest_name="manifestName",\n\n            # the properties below are optional\n            drm_signaling="drmSignaling",\n            filter_configuration=mediapackagev2.CfnOriginEndpoint.FilterConfigurationProperty(\n                end="end",\n                manifest_filter="manifestFilter",\n                start="start",\n                time_delay_seconds=123\n            ),\n            manifest_window_seconds=123,\n            min_buffer_time_seconds=123,\n            min_update_period_seconds=123,\n            period_triggers=["periodTriggers"],\n            scte_dash=mediapackagev2.CfnOriginEndpoint.ScteDashProperty(\n                ad_marker_dash="adMarkerDash"\n            ),\n            segment_template_format="segmentTemplateFormat",\n            suggested_presentation_delay_seconds=123,\n            utc_timing=mediapackagev2.CfnOriginEndpoint.DashUtcTimingProperty(\n                timing_mode="timingMode",\n                timing_source="timingSource"\n            )\n        )],\n        description="description",\n        hls_manifests=[mediapackagev2.CfnOriginEndpoint.HlsManifestConfigurationProperty(\n            manifest_name="manifestName",\n\n            # the properties below are optional\n            child_manifest_name="childManifestName",\n            filter_configuration=mediapackagev2.CfnOriginEndpoint.FilterConfigurationProperty(\n                end="end",\n                manifest_filter="manifestFilter",\n                start="start",\n                time_delay_seconds=123\n            ),\n            manifest_window_seconds=123,\n            program_date_time_interval_seconds=123,\n            scte_hls=mediapackagev2.CfnOriginEndpoint.ScteHlsProperty(\n                ad_marker_hls="adMarkerHls"\n            ),\n            url="url"\n        )],\n        low_latency_hls_manifests=[mediapackagev2.CfnOriginEndpoint.LowLatencyHlsManifestConfigurationProperty(\n            manifest_name="manifestName",\n\n            # the properties below are optional\n            child_manifest_name="childManifestName",\n            filter_configuration=mediapackagev2.CfnOriginEndpoint.FilterConfigurationProperty(\n                end="end",\n                manifest_filter="manifestFilter",\n                start="start",\n                time_delay_seconds=123\n            ),\n            manifest_window_seconds=123,\n            program_date_time_interval_seconds=123,\n            scte_hls=mediapackagev2.CfnOriginEndpoint.ScteHlsProperty(\n                ad_marker_hls="adMarkerHls"\n            ),\n            url="url"\n        )],\n        segment=mediapackagev2.CfnOriginEndpoint.SegmentProperty(\n            encryption=mediapackagev2.CfnOriginEndpoint.EncryptionProperty(\n                encryption_method=mediapackagev2.CfnOriginEndpoint.EncryptionMethodProperty(\n                    cmaf_encryption_method="cmafEncryptionMethod",\n                    ts_encryption_method="tsEncryptionMethod"\n                ),\n                speke_key_provider=mediapackagev2.CfnOriginEndpoint.SpekeKeyProviderProperty(\n                    drm_systems=["drmSystems"],\n                    encryption_contract_configuration=mediapackagev2.CfnOriginEndpoint.EncryptionContractConfigurationProperty(\n                        preset_speke20_audio="presetSpeke20Audio",\n                        preset_speke20_video="presetSpeke20Video"\n                    ),\n                    resource_id="resourceId",\n                    role_arn="roleArn",\n                    url="url"\n                ),\n\n                # the properties below are optional\n                constant_initialization_vector="constantInitializationVector",\n                key_rotation_interval_seconds=123\n            ),\n            include_iframe_only_streams=False,\n            scte=mediapackagev2.CfnOriginEndpoint.ScteProperty(\n                scte_filter=["scteFilter"]\n            ),\n            segment_duration_seconds=123,\n            segment_name="segmentName",\n            ts_include_dvb_subtitles=False,\n            ts_use_audio_rendition_group=False\n        ),\n        startover_window_seconds=123,\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['channel_group_name', 'channel_name', 'origin_endpoint_name', 'container_type', 'dash_manifests', 'description', 'hls_manifests', 'low_latency_hls_manifests', 'segment', 'startover_window_seconds', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_mediapackagev2.CfnOriginEndpointProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnChannel_IngestEndpointProperty: typing.Optional[dict[str, models.aws_mediapackagev2.CfnChannel_IngestEndpointPropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_DashManifestConfigurationProperty: typing.Optional[dict[str, models.aws_mediapackagev2.CfnOriginEndpoint_DashManifestConfigurationPropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_DashUtcTimingProperty: typing.Optional[dict[str, models.aws_mediapackagev2.CfnOriginEndpoint_DashUtcTimingPropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_EncryptionContractConfigurationProperty: typing.Optional[dict[str, models.aws_mediapackagev2.CfnOriginEndpoint_EncryptionContractConfigurationPropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_EncryptionMethodProperty: typing.Optional[dict[str, models.aws_mediapackagev2.CfnOriginEndpoint_EncryptionMethodPropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_EncryptionProperty: typing.Optional[dict[str, models.aws_mediapackagev2.CfnOriginEndpoint_EncryptionPropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_FilterConfigurationProperty: typing.Optional[dict[str, models.aws_mediapackagev2.CfnOriginEndpoint_FilterConfigurationPropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_HlsManifestConfigurationProperty: typing.Optional[dict[str, models.aws_mediapackagev2.CfnOriginEndpoint_HlsManifestConfigurationPropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_LowLatencyHlsManifestConfigurationProperty: typing.Optional[dict[str, models.aws_mediapackagev2.CfnOriginEndpoint_LowLatencyHlsManifestConfigurationPropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_ScteDashProperty: typing.Optional[dict[str, models.aws_mediapackagev2.CfnOriginEndpoint_ScteDashPropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_ScteHlsProperty: typing.Optional[dict[str, models.aws_mediapackagev2.CfnOriginEndpoint_ScteHlsPropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_ScteProperty: typing.Optional[dict[str, models.aws_mediapackagev2.CfnOriginEndpoint_SctePropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_SegmentProperty: typing.Optional[dict[str, models.aws_mediapackagev2.CfnOriginEndpoint_SegmentPropertyDef]] = pydantic.Field(None)
    CfnOriginEndpoint_SpekeKeyProviderProperty: typing.Optional[dict[str, models.aws_mediapackagev2.CfnOriginEndpoint_SpekeKeyProviderPropertyDef]] = pydantic.Field(None)
    CfnChannel: typing.Optional[dict[str, models.aws_mediapackagev2.CfnChannelDef]] = pydantic.Field(None)
    CfnChannelGroup: typing.Optional[dict[str, models.aws_mediapackagev2.CfnChannelGroupDef]] = pydantic.Field(None)
    CfnChannelPolicy: typing.Optional[dict[str, models.aws_mediapackagev2.CfnChannelPolicyDef]] = pydantic.Field(None)
    CfnOriginEndpoint: typing.Optional[dict[str, models.aws_mediapackagev2.CfnOriginEndpointDef]] = pydantic.Field(None)
    CfnOriginEndpointPolicy: typing.Optional[dict[str, models.aws_mediapackagev2.CfnOriginEndpointPolicyDef]] = pydantic.Field(None)
    CfnChannelGroupProps: typing.Optional[dict[str, models.aws_mediapackagev2.CfnChannelGroupPropsDef]] = pydantic.Field(None)
    CfnChannelPolicyProps: typing.Optional[dict[str, models.aws_mediapackagev2.CfnChannelPolicyPropsDef]] = pydantic.Field(None)
    CfnChannelProps: typing.Optional[dict[str, models.aws_mediapackagev2.CfnChannelPropsDef]] = pydantic.Field(None)
    CfnOriginEndpointPolicyProps: typing.Optional[dict[str, models.aws_mediapackagev2.CfnOriginEndpointPolicyPropsDef]] = pydantic.Field(None)
    CfnOriginEndpointProps: typing.Optional[dict[str, models.aws_mediapackagev2.CfnOriginEndpointPropsDef]] = pydantic.Field(None)
    ...

import models
