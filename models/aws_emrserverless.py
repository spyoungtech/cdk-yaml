from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_emrserverless.CfnApplication.AutoStartConfigurationProperty
class CfnApplication_AutoStartConfigurationPropertyDef(BaseStruct):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Enables the application to automatically start on job submission. Defaults to true.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emrserverless-application-autostartconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emrserverless as emrserverless\n\n    auto_start_configuration_property = emrserverless.CfnApplication.AutoStartConfigurationProperty(\n        enabled=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emrserverless.CfnApplication.AutoStartConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emrserverless.CfnApplication.AutoStopConfigurationProperty
class CfnApplication_AutoStopConfigurationPropertyDef(BaseStruct):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Enables the application to automatically stop after a certain amount of time being idle. Defaults to true.\n')
    idle_timeout_minutes: typing.Union[int, float, None] = pydantic.Field(None, description='The amount of idle time in minutes after which your application will automatically stop. Defaults to 15 minutes. *Minimum* : 1 *Maximum* : 10080\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emrserverless-application-autostopconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emrserverless as emrserverless\n\n    auto_stop_configuration_property = emrserverless.CfnApplication.AutoStopConfigurationProperty(\n        enabled=False,\n        idle_timeout_minutes=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['enabled', 'idle_timeout_minutes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emrserverless.CfnApplication.AutoStopConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emrserverless.CfnApplication.ImageConfigurationInputProperty
class CfnApplication_ImageConfigurationInputPropertyDef(BaseStruct):
    image_uri: typing.Optional[str] = pydantic.Field(None, description='``CfnApplication.ImageConfigurationInputProperty.ImageUri``.')
    _init_params: typing.ClassVar[list[str]] = ['image_uri']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emrserverless.CfnApplication.ImageConfigurationInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emrserverless.CfnApplication.InitialCapacityConfigKeyValuePairProperty
class CfnApplication_InitialCapacityConfigKeyValuePairPropertyDef(BaseStruct):
    key: str = pydantic.Field(..., description='The worker type for an analytics framework. For Spark applications, the key can either be set to ``Driver`` or ``Executor`` . For Hive applications, it can be set to ``HiveDriver`` or ``TezTask`` . *Minimum* : 1 *Maximum* : 50 *Pattern* : ``^[a-zA-Z]+[-_]*[a-zA-Z]+$``\n')
    value: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_emrserverless.CfnApplication_InitialCapacityConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The value for the initial capacity configuration per worker.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emrserverless-application-initialcapacityconfigkeyvaluepair.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emrserverless as emrserverless\n\n    initial_capacity_config_key_value_pair_property = emrserverless.CfnApplication.InitialCapacityConfigKeyValuePairProperty(\n        key="key",\n        value=emrserverless.CfnApplication.InitialCapacityConfigProperty(\n            worker_configuration=emrserverless.CfnApplication.WorkerConfigurationProperty(\n                cpu="cpu",\n                memory="memory",\n\n                # the properties below are optional\n                disk="disk"\n            ),\n            worker_count=123\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emrserverless.CfnApplication.InitialCapacityConfigKeyValuePairProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emrserverless.CfnApplication.InitialCapacityConfigProperty
class CfnApplication_InitialCapacityConfigPropertyDef(BaseStruct):
    worker_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_emrserverless.CfnApplication_WorkerConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The resource configuration of the initial capacity configuration.\n')
    worker_count: typing.Union[int, float] = pydantic.Field(..., description='The number of workers in the initial capacity configuration. *Minimum* : 1 *Maximum* : 1000000\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emrserverless-application-initialcapacityconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emrserverless as emrserverless\n\n    initial_capacity_config_property = emrserverless.CfnApplication.InitialCapacityConfigProperty(\n        worker_configuration=emrserverless.CfnApplication.WorkerConfigurationProperty(\n            cpu="cpu",\n            memory="memory",\n\n            # the properties below are optional\n            disk="disk"\n        ),\n        worker_count=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['worker_configuration', 'worker_count']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emrserverless.CfnApplication.InitialCapacityConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emrserverless.CfnApplication.MaximumAllowedResourcesProperty
class CfnApplication_MaximumAllowedResourcesPropertyDef(BaseStruct):
    cpu: str = pydantic.Field(..., description='The maximum allowed CPU for an application. *Minimum* : 1 *Maximum* : 15 *Pattern* : ``^[1-9][0-9]*(\\\\s)?(vCPU|vcpu|VCPU)?$``\n')
    memory: str = pydantic.Field(..., description='The maximum allowed resources for an application. *Minimum* : 1 *Maximum* : 15 *Pattern* : ``^[1-9][0-9]*(\\\\s)?(GB|gb|gB|Gb)?$``\n')
    disk: typing.Optional[str] = pydantic.Field(None, description='The maximum allowed disk for an application. *Minimum* : 1 *Maximum* : 15 *Pattern* : ``^[1-9][0-9]*(\\\\s)?(GB|gb|gB|Gb)$"``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emrserverless-application-maximumallowedresources.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emrserverless as emrserverless\n\n    maximum_allowed_resources_property = emrserverless.CfnApplication.MaximumAllowedResourcesProperty(\n        cpu="cpu",\n        memory="memory",\n\n        # the properties below are optional\n        disk="disk"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cpu', 'memory', 'disk']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emrserverless.CfnApplication.MaximumAllowedResourcesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emrserverless.CfnApplication.NetworkConfigurationProperty
class CfnApplication_NetworkConfigurationPropertyDef(BaseStruct):
    security_group_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The array of security group Ids for customer VPC connectivity. *Minimum* : 1 *Maximum* : 32 *Pattern* : ``^[-0-9a-zA-Z]+``\n')
    subnet_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The array of subnet Ids for customer VPC connectivity. *Minimum* : 1 *Maximum* : 32 *Pattern* : ``^[-0-9a-zA-Z]+``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emrserverless-application-networkconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emrserverless as emrserverless\n\n    network_configuration_property = emrserverless.CfnApplication.NetworkConfigurationProperty(\n        security_group_ids=["securityGroupIds"],\n        subnet_ids=["subnetIds"]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['security_group_ids', 'subnet_ids']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emrserverless.CfnApplication.NetworkConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emrserverless.CfnApplication.WorkerConfigurationProperty
class CfnApplication_WorkerConfigurationPropertyDef(BaseStruct):
    cpu: str = pydantic.Field(..., description='*Minimum* : 1. *Maximum* : 15 *Pattern* : ``^[1-9][0-9]*(\\\\s)?(vCPU|vcpu|VCPU)?$``\n')
    memory: str = pydantic.Field(..., description='*Minimum* : 1. *Maximum* : 15 *Pattern* : ``^[1-9][0-9]*(\\\\s)?(GB|gb|gB|Gb)?$``\n')
    disk: typing.Optional[str] = pydantic.Field(None, description='*Minimum* : 1. *Maximum* : 15 *Pattern* : ``^[1-9][0-9]*(\\\\s)?(GB|gb|gB|Gb)$"``\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-emrserverless-application-workerconfiguration.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emrserverless as emrserverless\n\n    worker_configuration_property = emrserverless.CfnApplication.WorkerConfigurationProperty(\n        cpu="cpu",\n        memory="memory",\n\n        # the properties below are optional\n        disk="disk"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['cpu', 'memory', 'disk']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emrserverless.CfnApplication.WorkerConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emrserverless.CfnApplication.WorkerTypeSpecificationInputProperty
class CfnApplication_WorkerTypeSpecificationInputPropertyDef(BaseStruct):
    image_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_emrserverless.CfnApplication_ImageConfigurationInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnApplication.WorkerTypeSpecificationInputProperty.ImageConfiguration``.')
    _init_params: typing.ClassVar[list[str]] = ['image_configuration']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emrserverless.CfnApplication.WorkerTypeSpecificationInputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_emrserverless.CfnApplication
class CfnApplicationDef(BaseCfnResource):
    release_label: str = pydantic.Field(..., description='The EMR release version associated with the application. *Minimum* : 1 *Maximum* : 64 *Pattern* : ``^[A-Za-z0-9._/-]+$``\n')
    type: str = pydantic.Field(..., description='The type of application, such as Spark or Hive.\n')
    architecture: typing.Optional[str] = pydantic.Field(None, description='The CPU architecture type of the application. Allowed values: ``X86_64`` or ``ARM64``\n')
    auto_start_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_emrserverless.CfnApplication_AutoStartConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for an application to automatically start on job submission.\n')
    auto_stop_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_emrserverless.CfnApplication_AutoStopConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for an application to automatically stop after a certain amount of time being idle.\n')
    image_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_emrserverless.CfnApplication_ImageConfigurationInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::EMRServerless::Application.ImageConfiguration``.\n')
    initial_capacity: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_emrserverless.CfnApplication_InitialCapacityConfigKeyValuePairPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The initial capacity of the application.\n')
    maximum_capacity: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_emrserverless.CfnApplication_MaximumAllowedResourcesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The maximum capacity of the application. This is cumulative across all workers at any given point in time during the lifespan of the application is created. No new resources will be created once any one of the defined limits is hit.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the application. *Minimum* : 1 *Maximum* : 64 *Pattern* : ``^[A-Za-z0-9._\\\\/#-]+$``\n')
    network_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_emrserverless.CfnApplication_NetworkConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The network configuration for customer VPC connectivity for the application.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags assigned to the application.\n')
    worker_type_specifications: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_emrserverless.CfnApplication_WorkerTypeSpecificationInputPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='``AWS::EMRServerless::Application.WorkerTypeSpecifications``.')
    _init_params: typing.ClassVar[list[str]] = ['release_label', 'type', 'architecture', 'auto_start_configuration', 'auto_stop_configuration', 'image_configuration', 'initial_capacity', 'maximum_capacity', 'name', 'network_configuration', 'tags', 'worker_type_specifications']
    _method_names: typing.ClassVar[list[str]] = ['AutoStartConfigurationProperty', 'AutoStopConfigurationProperty', 'ImageConfigurationInputProperty', 'InitialCapacityConfigKeyValuePairProperty', 'InitialCapacityConfigProperty', 'MaximumAllowedResourcesProperty', 'NetworkConfigurationProperty', 'WorkerConfigurationProperty', 'WorkerTypeSpecificationInputProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emrserverless.CfnApplication'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnApplicationDefConfig] = pydantic.Field(None)


class CfnApplicationDefConfig(pydantic.BaseModel):
    AutoStartConfigurationProperty: typing.Optional[list[CfnApplicationDefAutostartconfigurationpropertyParams]] = pydantic.Field(None, description='')
    AutoStopConfigurationProperty: typing.Optional[list[CfnApplicationDefAutostopconfigurationpropertyParams]] = pydantic.Field(None, description='')
    ImageConfigurationInputProperty: typing.Optional[list[CfnApplicationDefImageconfigurationinputpropertyParams]] = pydantic.Field(None, description='')
    InitialCapacityConfigKeyValuePairProperty: typing.Optional[list[CfnApplicationDefInitialcapacityconfigkeyvaluepairpropertyParams]] = pydantic.Field(None, description='')
    InitialCapacityConfigProperty: typing.Optional[list[CfnApplicationDefInitialcapacityconfigpropertyParams]] = pydantic.Field(None, description='')
    MaximumAllowedResourcesProperty: typing.Optional[list[CfnApplicationDefMaximumallowedresourcespropertyParams]] = pydantic.Field(None, description='')
    NetworkConfigurationProperty: typing.Optional[list[CfnApplicationDefNetworkconfigurationpropertyParams]] = pydantic.Field(None, description='')
    WorkerConfigurationProperty: typing.Optional[list[CfnApplicationDefWorkerconfigurationpropertyParams]] = pydantic.Field(None, description='')
    WorkerTypeSpecificationInputProperty: typing.Optional[list[CfnApplicationDefWorkertypespecificationinputpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnApplicationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnApplicationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnApplicationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnApplicationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnApplicationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnApplicationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnApplicationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnApplicationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnApplicationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnApplicationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnApplicationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnApplicationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnApplicationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnApplicationDefAutostartconfigurationpropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefAutostopconfigurationpropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    idle_timeout_minutes: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefImageconfigurationinputpropertyParams(pydantic.BaseModel):
    image_uri: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefInitialcapacityconfigkeyvaluepairpropertyParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='')
    value: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_emrserverless.CfnApplication_InitialCapacityConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnApplicationDefInitialcapacityconfigpropertyParams(pydantic.BaseModel):
    worker_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_emrserverless.CfnApplication_WorkerConfigurationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    worker_count: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnApplicationDefMaximumallowedresourcespropertyParams(pydantic.BaseModel):
    cpu: str = pydantic.Field(..., description='')
    memory: str = pydantic.Field(..., description='')
    disk: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefNetworkconfigurationpropertyParams(pydantic.BaseModel):
    security_group_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    subnet_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefWorkerconfigurationpropertyParams(pydantic.BaseModel):
    cpu: str = pydantic.Field(..., description='')
    memory: str = pydantic.Field(..., description='')
    disk: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefWorkertypespecificationinputpropertyParams(pydantic.BaseModel):
    image_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_emrserverless.CfnApplication_ImageConfigurationInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnApplicationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnApplicationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApplicationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnApplicationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApplicationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnApplicationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnApplicationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnApplicationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnApplicationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnApplicationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApplicationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnApplicationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnApplicationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApplicationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_emrserverless.CfnApplicationProps
class CfnApplicationPropsDef(BaseCfnProperty):
    release_label: str = pydantic.Field(..., description='The EMR release version associated with the application. *Minimum* : 1 *Maximum* : 64 *Pattern* : ``^[A-Za-z0-9._/-]+$``\n')
    type: str = pydantic.Field(..., description='The type of application, such as Spark or Hive.\n')
    architecture: typing.Optional[str] = pydantic.Field(None, description='The CPU architecture type of the application. Allowed values: ``X86_64`` or ``ARM64``\n')
    auto_start_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_emrserverless.CfnApplication_AutoStartConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for an application to automatically start on job submission.\n')
    auto_stop_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_emrserverless.CfnApplication_AutoStopConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration for an application to automatically stop after a certain amount of time being idle.\n')
    image_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_emrserverless.CfnApplication_ImageConfigurationInputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::EMRServerless::Application.ImageConfiguration``.\n')
    initial_capacity: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_emrserverless.CfnApplication_InitialCapacityConfigKeyValuePairPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='The initial capacity of the application.\n')
    maximum_capacity: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_emrserverless.CfnApplication_MaximumAllowedResourcesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The maximum capacity of the application. This is cumulative across all workers at any given point in time during the lifespan of the application is created. No new resources will be created once any one of the defined limits is hit.\n')
    name: typing.Optional[str] = pydantic.Field(None, description='The name of the application. *Minimum* : 1 *Maximum* : 64 *Pattern* : ``^[A-Za-z0-9._\\\\/#-]+$``\n')
    network_configuration: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_emrserverless.CfnApplication_NetworkConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The network configuration for customer VPC connectivity for the application.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags assigned to the application.\n')
    worker_type_specifications: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_emrserverless.CfnApplication_WorkerTypeSpecificationInputPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='``AWS::EMRServerless::Application.WorkerTypeSpecifications``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-emrserverless-application.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_emrserverless as emrserverless\n\n    cfn_application_props = emrserverless.CfnApplicationProps(\n        release_label="releaseLabel",\n        type="type",\n\n        # the properties below are optional\n        architecture="architecture",\n        auto_start_configuration=emrserverless.CfnApplication.AutoStartConfigurationProperty(\n            enabled=False\n        ),\n        auto_stop_configuration=emrserverless.CfnApplication.AutoStopConfigurationProperty(\n            enabled=False,\n            idle_timeout_minutes=123\n        ),\n        image_configuration=emrserverless.CfnApplication.ImageConfigurationInputProperty(\n            image_uri="imageUri"\n        ),\n        initial_capacity=[emrserverless.CfnApplication.InitialCapacityConfigKeyValuePairProperty(\n            key="key",\n            value=emrserverless.CfnApplication.InitialCapacityConfigProperty(\n                worker_configuration=emrserverless.CfnApplication.WorkerConfigurationProperty(\n                    cpu="cpu",\n                    memory="memory",\n\n                    # the properties below are optional\n                    disk="disk"\n                ),\n                worker_count=123\n            )\n        )],\n        maximum_capacity=emrserverless.CfnApplication.MaximumAllowedResourcesProperty(\n            cpu="cpu",\n            memory="memory",\n\n            # the properties below are optional\n            disk="disk"\n        ),\n        name="name",\n        network_configuration=emrserverless.CfnApplication.NetworkConfigurationProperty(\n            security_group_ids=["securityGroupIds"],\n            subnet_ids=["subnetIds"]\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )],\n        worker_type_specifications={\n            "worker_type_specifications_key": emrserverless.CfnApplication.WorkerTypeSpecificationInputProperty(\n                image_configuration=emrserverless.CfnApplication.ImageConfigurationInputProperty(\n                    image_uri="imageUri"\n                )\n            )\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['release_label', 'type', 'architecture', 'auto_start_configuration', 'auto_stop_configuration', 'image_configuration', 'initial_capacity', 'maximum_capacity', 'name', 'network_configuration', 'tags', 'worker_type_specifications']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_emrserverless.CfnApplicationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnApplication_AutoStartConfigurationProperty: typing.Optional[dict[str, CfnApplication_AutoStartConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_AutoStopConfigurationProperty: typing.Optional[dict[str, CfnApplication_AutoStopConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_ImageConfigurationInputProperty: typing.Optional[dict[str, CfnApplication_ImageConfigurationInputPropertyDef]] = pydantic.Field(None)
    CfnApplication_InitialCapacityConfigKeyValuePairProperty: typing.Optional[dict[str, CfnApplication_InitialCapacityConfigKeyValuePairPropertyDef]] = pydantic.Field(None)
    CfnApplication_InitialCapacityConfigProperty: typing.Optional[dict[str, CfnApplication_InitialCapacityConfigPropertyDef]] = pydantic.Field(None)
    CfnApplication_MaximumAllowedResourcesProperty: typing.Optional[dict[str, CfnApplication_MaximumAllowedResourcesPropertyDef]] = pydantic.Field(None)
    CfnApplication_NetworkConfigurationProperty: typing.Optional[dict[str, CfnApplication_NetworkConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_WorkerConfigurationProperty: typing.Optional[dict[str, CfnApplication_WorkerConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApplication_WorkerTypeSpecificationInputProperty: typing.Optional[dict[str, CfnApplication_WorkerTypeSpecificationInputPropertyDef]] = pydantic.Field(None)
    CfnApplication: typing.Optional[dict[str, CfnApplicationDef]] = pydantic.Field(None)
    CfnApplicationProps: typing.Optional[dict[str, CfnApplicationPropsDef]] = pydantic.Field(None)
    ...
