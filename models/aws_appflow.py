from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams

#  autogenerated from aws_cdk.aws_appflow.CfnConnector.ConnectorProvisioningConfigProperty
class CfnConnector_ConnectorProvisioningConfigPropertyDef(BaseStruct):
    lambda_: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnector_LambdaConnectorProvisioningConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Contains information about the configuration of the lambda which is being registered as the connector.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connector-connectorprovisioningconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    connector_provisioning_config_property = appflow.CfnConnector.ConnectorProvisioningConfigProperty(\n        lambda_=appflow.CfnConnector.LambdaConnectorProvisioningConfigProperty(\n            lambda_arn="lambdaArn"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['lambda_']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnector.ConnectorProvisioningConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnector.LambdaConnectorProvisioningConfigProperty
class CfnConnector_LambdaConnectorProvisioningConfigPropertyDef(BaseStruct):
    lambda_arn: str = pydantic.Field(..., description='Lambda ARN of the connector being registered.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connector-lambdaconnectorprovisioningconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    lambda_connector_provisioning_config_property = appflow.CfnConnector.LambdaConnectorProvisioningConfigProperty(\n        lambda_arn="lambdaArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['lambda_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnector.LambdaConnectorProvisioningConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.AmplitudeConnectorProfileCredentialsProperty
class CfnConnectorProfile_AmplitudeConnectorProfileCredentialsPropertyDef(BaseStruct):
    api_key: str = pydantic.Field(..., description='A unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.\n')
    secret_key: str = pydantic.Field(..., description='The Secret Access Key portion of the credentials.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-amplitudeconnectorprofilecredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    amplitude_connector_profile_credentials_property = appflow.CfnConnectorProfile.AmplitudeConnectorProfileCredentialsProperty(\n        api_key="apiKey",\n        secret_key="secretKey"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['api_key', 'secret_key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.AmplitudeConnectorProfileCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.ApiKeyCredentialsProperty
class CfnConnectorProfile_ApiKeyCredentialsPropertyDef(BaseStruct):
    api_key: str = pydantic.Field(..., description='The API key required for API key authentication.\n')
    api_secret_key: typing.Optional[str] = pydantic.Field(None, description='The API secret key required for API key authentication.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-apikeycredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    api_key_credentials_property = appflow.CfnConnectorProfile.ApiKeyCredentialsProperty(\n        api_key="apiKey",\n\n        # the properties below are optional\n        api_secret_key="apiSecretKey"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['api_key', 'api_secret_key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.ApiKeyCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.BasicAuthCredentialsProperty
class CfnConnectorProfile_BasicAuthCredentialsPropertyDef(BaseStruct):
    password: str = pydantic.Field(..., description='The password to use to connect to a resource.\n')
    username: str = pydantic.Field(..., description='The username to use to connect to a resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-basicauthcredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    basic_auth_credentials_property = appflow.CfnConnectorProfile.BasicAuthCredentialsProperty(\n        password="password",\n        username="username"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['password', 'username']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.BasicAuthCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty
class CfnConnectorProfile_ConnectorOAuthRequestPropertyDef(BaseStruct):
    auth_code: typing.Optional[str] = pydantic.Field(None, description='The code provided by the connector when it has been authenticated via the connected app.\n')
    redirect_uri: typing.Optional[str] = pydantic.Field(None, description='The URL to which the authentication server redirects the browser after authorization has been granted.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-connectoroauthrequest.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    connector_oAuth_request_property = appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n        auth_code="authCode",\n        redirect_uri="redirectUri"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['auth_code', 'redirect_uri']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.ConnectorProfileConfigProperty
class CfnConnectorProfile_ConnectorProfileConfigPropertyDef(BaseStruct):
    connector_profile_credentials: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific credentials required by each connector.\n')
    connector_profile_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific properties of the profile configuration.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-connectorprofileconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    connector_profile_config_property = appflow.CfnConnectorProfile.ConnectorProfileConfigProperty(\n        connector_profile_credentials=appflow.CfnConnectorProfile.ConnectorProfileCredentialsProperty(\n            amplitude=appflow.CfnConnectorProfile.AmplitudeConnectorProfileCredentialsProperty(\n                api_key="apiKey",\n                secret_key="secretKey"\n            ),\n            custom_connector=appflow.CfnConnectorProfile.CustomConnectorProfileCredentialsProperty(\n                authentication_type="authenticationType",\n\n                # the properties below are optional\n                api_key=appflow.CfnConnectorProfile.ApiKeyCredentialsProperty(\n                    api_key="apiKey",\n\n                    # the properties below are optional\n                    api_secret_key="apiSecretKey"\n                ),\n                basic=appflow.CfnConnectorProfile.BasicAuthCredentialsProperty(\n                    password="password",\n                    username="username"\n                ),\n                custom=appflow.CfnConnectorProfile.CustomAuthCredentialsProperty(\n                    custom_authentication_type="customAuthenticationType",\n\n                    # the properties below are optional\n                    credentials_map={\n                        "credentials_map_key": "credentialsMap"\n                    }\n                ),\n                oauth2=appflow.CfnConnectorProfile.OAuth2CredentialsProperty(\n                    access_token="accessToken",\n                    client_id="clientId",\n                    client_secret="clientSecret",\n                    o_auth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                        auth_code="authCode",\n                        redirect_uri="redirectUri"\n                    ),\n                    refresh_token="refreshToken"\n                )\n            ),\n            datadog=appflow.CfnConnectorProfile.DatadogConnectorProfileCredentialsProperty(\n                api_key="apiKey",\n                application_key="applicationKey"\n            ),\n            dynatrace=appflow.CfnConnectorProfile.DynatraceConnectorProfileCredentialsProperty(\n                api_token="apiToken"\n            ),\n            google_analytics=appflow.CfnConnectorProfile.GoogleAnalyticsConnectorProfileCredentialsProperty(\n                client_id="clientId",\n                client_secret="clientSecret",\n\n                # the properties below are optional\n                access_token="accessToken",\n                connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                    auth_code="authCode",\n                    redirect_uri="redirectUri"\n                ),\n                refresh_token="refreshToken"\n            ),\n            infor_nexus=appflow.CfnConnectorProfile.InforNexusConnectorProfileCredentialsProperty(\n                access_key_id="accessKeyId",\n                datakey="datakey",\n                secret_access_key="secretAccessKey",\n                user_id="userId"\n            ),\n            marketo=appflow.CfnConnectorProfile.MarketoConnectorProfileCredentialsProperty(\n                client_id="clientId",\n                client_secret="clientSecret",\n\n                # the properties below are optional\n                access_token="accessToken",\n                connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                    auth_code="authCode",\n                    redirect_uri="redirectUri"\n                )\n            ),\n            pardot=appflow.CfnConnectorProfile.PardotConnectorProfileCredentialsProperty(\n                access_token="accessToken",\n                client_credentials_arn="clientCredentialsArn",\n                connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                    auth_code="authCode",\n                    redirect_uri="redirectUri"\n                ),\n                refresh_token="refreshToken"\n            ),\n            redshift=appflow.CfnConnectorProfile.RedshiftConnectorProfileCredentialsProperty(\n                password="password",\n                username="username"\n            ),\n            salesforce=appflow.CfnConnectorProfile.SalesforceConnectorProfileCredentialsProperty(\n                access_token="accessToken",\n                client_credentials_arn="clientCredentialsArn",\n                connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                    auth_code="authCode",\n                    redirect_uri="redirectUri"\n                ),\n                jwt_token="jwtToken",\n                o_auth2_grant_type="oAuth2GrantType",\n                refresh_token="refreshToken"\n            ),\n            sapo_data=appflow.CfnConnectorProfile.SAPODataConnectorProfileCredentialsProperty(\n                basic_auth_credentials=appflow.CfnConnectorProfile.BasicAuthCredentialsProperty(\n                    password="password",\n                    username="username"\n                ),\n                o_auth_credentials=appflow.CfnConnectorProfile.OAuthCredentialsProperty(\n                    access_token="accessToken",\n                    client_id="clientId",\n                    client_secret="clientSecret",\n                    connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                        auth_code="authCode",\n                        redirect_uri="redirectUri"\n                    ),\n                    refresh_token="refreshToken"\n                )\n            ),\n            service_now=appflow.CfnConnectorProfile.ServiceNowConnectorProfileCredentialsProperty(\n                password="password",\n                username="username"\n            ),\n            singular=appflow.CfnConnectorProfile.SingularConnectorProfileCredentialsProperty(\n                api_key="apiKey"\n            ),\n            slack=appflow.CfnConnectorProfile.SlackConnectorProfileCredentialsProperty(\n                client_id="clientId",\n                client_secret="clientSecret",\n\n                # the properties below are optional\n                access_token="accessToken",\n                connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                    auth_code="authCode",\n                    redirect_uri="redirectUri"\n                )\n            ),\n            snowflake=appflow.CfnConnectorProfile.SnowflakeConnectorProfileCredentialsProperty(\n                password="password",\n                username="username"\n            ),\n            trendmicro=appflow.CfnConnectorProfile.TrendmicroConnectorProfileCredentialsProperty(\n                api_secret_key="apiSecretKey"\n            ),\n            veeva=appflow.CfnConnectorProfile.VeevaConnectorProfileCredentialsProperty(\n                password="password",\n                username="username"\n            ),\n            zendesk=appflow.CfnConnectorProfile.ZendeskConnectorProfileCredentialsProperty(\n                client_id="clientId",\n                client_secret="clientSecret",\n\n                # the properties below are optional\n                access_token="accessToken",\n                connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                    auth_code="authCode",\n                    redirect_uri="redirectUri"\n                )\n            )\n        ),\n        connector_profile_properties=appflow.CfnConnectorProfile.ConnectorProfilePropertiesProperty(\n            custom_connector=appflow.CfnConnectorProfile.CustomConnectorProfilePropertiesProperty(\n                o_auth2_properties=appflow.CfnConnectorProfile.OAuth2PropertiesProperty(\n                    o_auth2_grant_type="oAuth2GrantType",\n                    token_url="tokenUrl",\n                    token_url_custom_properties={\n                        "token_url_custom_properties_key": "tokenUrlCustomProperties"\n                    }\n                ),\n                profile_properties={\n                    "profile_properties_key": "profileProperties"\n                }\n            ),\n            datadog=appflow.CfnConnectorProfile.DatadogConnectorProfilePropertiesProperty(\n                instance_url="instanceUrl"\n            ),\n            dynatrace=appflow.CfnConnectorProfile.DynatraceConnectorProfilePropertiesProperty(\n                instance_url="instanceUrl"\n            ),\n            infor_nexus=appflow.CfnConnectorProfile.InforNexusConnectorProfilePropertiesProperty(\n                instance_url="instanceUrl"\n            ),\n            marketo=appflow.CfnConnectorProfile.MarketoConnectorProfilePropertiesProperty(\n                instance_url="instanceUrl"\n            ),\n            pardot=appflow.CfnConnectorProfile.PardotConnectorProfilePropertiesProperty(\n                business_unit_id="businessUnitId",\n\n                # the properties below are optional\n                instance_url="instanceUrl",\n                is_sandbox_environment=False\n            ),\n            redshift=appflow.CfnConnectorProfile.RedshiftConnectorProfilePropertiesProperty(\n                bucket_name="bucketName",\n                role_arn="roleArn",\n\n                # the properties below are optional\n                bucket_prefix="bucketPrefix",\n                cluster_identifier="clusterIdentifier",\n                data_api_role_arn="dataApiRoleArn",\n                database_name="databaseName",\n                database_url="databaseUrl",\n                is_redshift_serverless=False,\n                workgroup_name="workgroupName"\n            ),\n            salesforce=appflow.CfnConnectorProfile.SalesforceConnectorProfilePropertiesProperty(\n                instance_url="instanceUrl",\n                is_sandbox_environment=False,\n                use_private_link_for_metadata_and_authorization=False\n            ),\n            sapo_data=appflow.CfnConnectorProfile.SAPODataConnectorProfilePropertiesProperty(\n                application_host_url="applicationHostUrl",\n                application_service_path="applicationServicePath",\n                client_number="clientNumber",\n                logon_language="logonLanguage",\n                o_auth_properties=appflow.CfnConnectorProfile.OAuthPropertiesProperty(\n                    auth_code_url="authCodeUrl",\n                    o_auth_scopes=["oAuthScopes"],\n                    token_url="tokenUrl"\n                ),\n                port_number=123,\n                private_link_service_name="privateLinkServiceName"\n            ),\n            service_now=appflow.CfnConnectorProfile.ServiceNowConnectorProfilePropertiesProperty(\n                instance_url="instanceUrl"\n            ),\n            slack=appflow.CfnConnectorProfile.SlackConnectorProfilePropertiesProperty(\n                instance_url="instanceUrl"\n            ),\n            snowflake=appflow.CfnConnectorProfile.SnowflakeConnectorProfilePropertiesProperty(\n                bucket_name="bucketName",\n                stage="stage",\n                warehouse="warehouse",\n\n                # the properties below are optional\n                account_name="accountName",\n                bucket_prefix="bucketPrefix",\n                private_link_service_name="privateLinkServiceName",\n                region="region"\n            ),\n            veeva=appflow.CfnConnectorProfile.VeevaConnectorProfilePropertiesProperty(\n                instance_url="instanceUrl"\n            ),\n            zendesk=appflow.CfnConnectorProfile.ZendeskConnectorProfilePropertiesProperty(\n                instance_url="instanceUrl"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['connector_profile_credentials', 'connector_profile_properties']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.ConnectorProfileConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.ConnectorProfileCredentialsProperty
class CfnConnectorProfile_ConnectorProfileCredentialsPropertyDef(BaseStruct):
    amplitude: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_AmplitudeConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific credentials required when using Amplitude.\n')
    custom_connector: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_CustomConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific profile credentials that are required when using the custom connector.\n')
    datadog: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_DatadogConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific credentials required when using Datadog.\n')
    dynatrace: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_DynatraceConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific credentials required when using Dynatrace.\n')
    google_analytics: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_GoogleAnalyticsConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific credentials required when using Google Analytics.\n')
    infor_nexus: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_InforNexusConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific credentials required when using Infor Nexus.\n')
    marketo: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_MarketoConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific credentials required when using Marketo.\n')
    pardot: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_PardotConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnConnectorProfile.ConnectorProfileCredentialsProperty.Pardot``.\n')
    redshift: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_RedshiftConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific credentials required when using Amazon Redshift.\n')
    salesforce: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_SalesforceConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific credentials required when using Salesforce.\n')
    sapo_data: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_SAPODataConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific profile credentials required when using SAPOData.\n')
    service_now: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ServiceNowConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific credentials required when using ServiceNow.\n')
    singular: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_SingularConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific credentials required when using Singular.\n')
    slack: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_SlackConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific credentials required when using Slack.\n')
    snowflake: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_SnowflakeConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific credentials required when using Snowflake.\n')
    trendmicro: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_TrendmicroConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific credentials required when using Trend Micro.\n')
    veeva: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_VeevaConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific credentials required when using Veeva.\n')
    zendesk: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ZendeskConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific credentials required when using Zendesk.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-connectorprofilecredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    connector_profile_credentials_property = appflow.CfnConnectorProfile.ConnectorProfileCredentialsProperty(\n        amplitude=appflow.CfnConnectorProfile.AmplitudeConnectorProfileCredentialsProperty(\n            api_key="apiKey",\n            secret_key="secretKey"\n        ),\n        custom_connector=appflow.CfnConnectorProfile.CustomConnectorProfileCredentialsProperty(\n            authentication_type="authenticationType",\n\n            # the properties below are optional\n            api_key=appflow.CfnConnectorProfile.ApiKeyCredentialsProperty(\n                api_key="apiKey",\n\n                # the properties below are optional\n                api_secret_key="apiSecretKey"\n            ),\n            basic=appflow.CfnConnectorProfile.BasicAuthCredentialsProperty(\n                password="password",\n                username="username"\n            ),\n            custom=appflow.CfnConnectorProfile.CustomAuthCredentialsProperty(\n                custom_authentication_type="customAuthenticationType",\n\n                # the properties below are optional\n                credentials_map={\n                    "credentials_map_key": "credentialsMap"\n                }\n            ),\n            oauth2=appflow.CfnConnectorProfile.OAuth2CredentialsProperty(\n                access_token="accessToken",\n                client_id="clientId",\n                client_secret="clientSecret",\n                o_auth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                    auth_code="authCode",\n                    redirect_uri="redirectUri"\n                ),\n                refresh_token="refreshToken"\n            )\n        ),\n        datadog=appflow.CfnConnectorProfile.DatadogConnectorProfileCredentialsProperty(\n            api_key="apiKey",\n            application_key="applicationKey"\n        ),\n        dynatrace=appflow.CfnConnectorProfile.DynatraceConnectorProfileCredentialsProperty(\n            api_token="apiToken"\n        ),\n        google_analytics=appflow.CfnConnectorProfile.GoogleAnalyticsConnectorProfileCredentialsProperty(\n            client_id="clientId",\n            client_secret="clientSecret",\n\n            # the properties below are optional\n            access_token="accessToken",\n            connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                auth_code="authCode",\n                redirect_uri="redirectUri"\n            ),\n            refresh_token="refreshToken"\n        ),\n        infor_nexus=appflow.CfnConnectorProfile.InforNexusConnectorProfileCredentialsProperty(\n            access_key_id="accessKeyId",\n            datakey="datakey",\n            secret_access_key="secretAccessKey",\n            user_id="userId"\n        ),\n        marketo=appflow.CfnConnectorProfile.MarketoConnectorProfileCredentialsProperty(\n            client_id="clientId",\n            client_secret="clientSecret",\n\n            # the properties below are optional\n            access_token="accessToken",\n            connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                auth_code="authCode",\n                redirect_uri="redirectUri"\n            )\n        ),\n        pardot=appflow.CfnConnectorProfile.PardotConnectorProfileCredentialsProperty(\n            access_token="accessToken",\n            client_credentials_arn="clientCredentialsArn",\n            connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                auth_code="authCode",\n                redirect_uri="redirectUri"\n            ),\n            refresh_token="refreshToken"\n        ),\n        redshift=appflow.CfnConnectorProfile.RedshiftConnectorProfileCredentialsProperty(\n            password="password",\n            username="username"\n        ),\n        salesforce=appflow.CfnConnectorProfile.SalesforceConnectorProfileCredentialsProperty(\n            access_token="accessToken",\n            client_credentials_arn="clientCredentialsArn",\n            connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                auth_code="authCode",\n                redirect_uri="redirectUri"\n            ),\n            jwt_token="jwtToken",\n            o_auth2_grant_type="oAuth2GrantType",\n            refresh_token="refreshToken"\n        ),\n        sapo_data=appflow.CfnConnectorProfile.SAPODataConnectorProfileCredentialsProperty(\n            basic_auth_credentials=appflow.CfnConnectorProfile.BasicAuthCredentialsProperty(\n                password="password",\n                username="username"\n            ),\n            o_auth_credentials=appflow.CfnConnectorProfile.OAuthCredentialsProperty(\n                access_token="accessToken",\n                client_id="clientId",\n                client_secret="clientSecret",\n                connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                    auth_code="authCode",\n                    redirect_uri="redirectUri"\n                ),\n                refresh_token="refreshToken"\n            )\n        ),\n        service_now=appflow.CfnConnectorProfile.ServiceNowConnectorProfileCredentialsProperty(\n            password="password",\n            username="username"\n        ),\n        singular=appflow.CfnConnectorProfile.SingularConnectorProfileCredentialsProperty(\n            api_key="apiKey"\n        ),\n        slack=appflow.CfnConnectorProfile.SlackConnectorProfileCredentialsProperty(\n            client_id="clientId",\n            client_secret="clientSecret",\n\n            # the properties below are optional\n            access_token="accessToken",\n            connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                auth_code="authCode",\n                redirect_uri="redirectUri"\n            )\n        ),\n        snowflake=appflow.CfnConnectorProfile.SnowflakeConnectorProfileCredentialsProperty(\n            password="password",\n            username="username"\n        ),\n        trendmicro=appflow.CfnConnectorProfile.TrendmicroConnectorProfileCredentialsProperty(\n            api_secret_key="apiSecretKey"\n        ),\n        veeva=appflow.CfnConnectorProfile.VeevaConnectorProfileCredentialsProperty(\n            password="password",\n            username="username"\n        ),\n        zendesk=appflow.CfnConnectorProfile.ZendeskConnectorProfileCredentialsProperty(\n            client_id="clientId",\n            client_secret="clientSecret",\n\n            # the properties below are optional\n            access_token="accessToken",\n            connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                auth_code="authCode",\n                redirect_uri="redirectUri"\n            )\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['amplitude', 'custom_connector', 'datadog', 'dynatrace', 'google_analytics', 'infor_nexus', 'marketo', 'pardot', 'redshift', 'salesforce', 'sapo_data', 'service_now', 'singular', 'slack', 'snowflake', 'trendmicro', 'veeva', 'zendesk']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.ConnectorProfileCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.ConnectorProfilePropertiesProperty
class CfnConnectorProfile_ConnectorProfilePropertiesPropertyDef(BaseStruct):
    custom_connector: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_CustomConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The properties required by the custom connector.\n')
    datadog: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_DatadogConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific properties required by Datadog.\n')
    dynatrace: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_DynatraceConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific properties required by Dynatrace.\n')
    infor_nexus: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_InforNexusConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific properties required by Infor Nexus.\n')
    marketo: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_MarketoConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific properties required by Marketo.\n')
    pardot: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_PardotConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnConnectorProfile.ConnectorProfilePropertiesProperty.Pardot``.\n')
    redshift: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_RedshiftConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific properties required by Amazon Redshift.\n')
    salesforce: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_SalesforceConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific properties required by Salesforce.\n')
    sapo_data: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_SAPODataConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific profile properties required when using SAPOData.\n')
    service_now: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ServiceNowConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific properties required by serviceNow.\n')
    slack: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_SlackConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific properties required by Slack.\n')
    snowflake: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_SnowflakeConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific properties required by Snowflake.\n')
    veeva: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_VeevaConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific properties required by Veeva.\n')
    zendesk: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ZendeskConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The connector-specific properties required by Zendesk.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-connectorprofileproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    connector_profile_properties_property = appflow.CfnConnectorProfile.ConnectorProfilePropertiesProperty(\n        custom_connector=appflow.CfnConnectorProfile.CustomConnectorProfilePropertiesProperty(\n            o_auth2_properties=appflow.CfnConnectorProfile.OAuth2PropertiesProperty(\n                o_auth2_grant_type="oAuth2GrantType",\n                token_url="tokenUrl",\n                token_url_custom_properties={\n                    "token_url_custom_properties_key": "tokenUrlCustomProperties"\n                }\n            ),\n            profile_properties={\n                "profile_properties_key": "profileProperties"\n            }\n        ),\n        datadog=appflow.CfnConnectorProfile.DatadogConnectorProfilePropertiesProperty(\n            instance_url="instanceUrl"\n        ),\n        dynatrace=appflow.CfnConnectorProfile.DynatraceConnectorProfilePropertiesProperty(\n            instance_url="instanceUrl"\n        ),\n        infor_nexus=appflow.CfnConnectorProfile.InforNexusConnectorProfilePropertiesProperty(\n            instance_url="instanceUrl"\n        ),\n        marketo=appflow.CfnConnectorProfile.MarketoConnectorProfilePropertiesProperty(\n            instance_url="instanceUrl"\n        ),\n        pardot=appflow.CfnConnectorProfile.PardotConnectorProfilePropertiesProperty(\n            business_unit_id="businessUnitId",\n\n            # the properties below are optional\n            instance_url="instanceUrl",\n            is_sandbox_environment=False\n        ),\n        redshift=appflow.CfnConnectorProfile.RedshiftConnectorProfilePropertiesProperty(\n            bucket_name="bucketName",\n            role_arn="roleArn",\n\n            # the properties below are optional\n            bucket_prefix="bucketPrefix",\n            cluster_identifier="clusterIdentifier",\n            data_api_role_arn="dataApiRoleArn",\n            database_name="databaseName",\n            database_url="databaseUrl",\n            is_redshift_serverless=False,\n            workgroup_name="workgroupName"\n        ),\n        salesforce=appflow.CfnConnectorProfile.SalesforceConnectorProfilePropertiesProperty(\n            instance_url="instanceUrl",\n            is_sandbox_environment=False,\n            use_private_link_for_metadata_and_authorization=False\n        ),\n        sapo_data=appflow.CfnConnectorProfile.SAPODataConnectorProfilePropertiesProperty(\n            application_host_url="applicationHostUrl",\n            application_service_path="applicationServicePath",\n            client_number="clientNumber",\n            logon_language="logonLanguage",\n            o_auth_properties=appflow.CfnConnectorProfile.OAuthPropertiesProperty(\n                auth_code_url="authCodeUrl",\n                o_auth_scopes=["oAuthScopes"],\n                token_url="tokenUrl"\n            ),\n            port_number=123,\n            private_link_service_name="privateLinkServiceName"\n        ),\n        service_now=appflow.CfnConnectorProfile.ServiceNowConnectorProfilePropertiesProperty(\n            instance_url="instanceUrl"\n        ),\n        slack=appflow.CfnConnectorProfile.SlackConnectorProfilePropertiesProperty(\n            instance_url="instanceUrl"\n        ),\n        snowflake=appflow.CfnConnectorProfile.SnowflakeConnectorProfilePropertiesProperty(\n            bucket_name="bucketName",\n            stage="stage",\n            warehouse="warehouse",\n\n            # the properties below are optional\n            account_name="accountName",\n            bucket_prefix="bucketPrefix",\n            private_link_service_name="privateLinkServiceName",\n            region="region"\n        ),\n        veeva=appflow.CfnConnectorProfile.VeevaConnectorProfilePropertiesProperty(\n            instance_url="instanceUrl"\n        ),\n        zendesk=appflow.CfnConnectorProfile.ZendeskConnectorProfilePropertiesProperty(\n            instance_url="instanceUrl"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['custom_connector', 'datadog', 'dynatrace', 'infor_nexus', 'marketo', 'pardot', 'redshift', 'salesforce', 'sapo_data', 'service_now', 'slack', 'snowflake', 'veeva', 'zendesk']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.ConnectorProfilePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.CustomAuthCredentialsProperty
class CfnConnectorProfile_CustomAuthCredentialsPropertyDef(BaseStruct):
    custom_authentication_type: str = pydantic.Field(..., description='The custom authentication type that the connector uses.\n')
    credentials_map: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='A map that holds custom authentication credentials.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-customauthcredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    custom_auth_credentials_property = appflow.CfnConnectorProfile.CustomAuthCredentialsProperty(\n        custom_authentication_type="customAuthenticationType",\n\n        # the properties below are optional\n        credentials_map={\n            "credentials_map_key": "credentialsMap"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['custom_authentication_type', 'credentials_map']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.CustomAuthCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.CustomConnectorProfileCredentialsProperty
class CfnConnectorProfile_CustomConnectorProfileCredentialsPropertyDef(BaseStruct):
    authentication_type: str = pydantic.Field(..., description='The authentication type that the custom connector uses for authenticating while creating a connector profile.\n')
    api_key: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ApiKeyCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The API keys required for the authentication of the user.\n')
    basic: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_BasicAuthCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The basic credentials that are required for the authentication of the user.\n')
    custom: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_CustomAuthCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='If the connector uses the custom authentication mechanism, this holds the required credentials.\n')
    oauth2: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_OAuth2CredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The OAuth 2.0 credentials required for the authentication of the user.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-customconnectorprofilecredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    custom_connector_profile_credentials_property = appflow.CfnConnectorProfile.CustomConnectorProfileCredentialsProperty(\n        authentication_type="authenticationType",\n\n        # the properties below are optional\n        api_key=appflow.CfnConnectorProfile.ApiKeyCredentialsProperty(\n            api_key="apiKey",\n\n            # the properties below are optional\n            api_secret_key="apiSecretKey"\n        ),\n        basic=appflow.CfnConnectorProfile.BasicAuthCredentialsProperty(\n            password="password",\n            username="username"\n        ),\n        custom=appflow.CfnConnectorProfile.CustomAuthCredentialsProperty(\n            custom_authentication_type="customAuthenticationType",\n\n            # the properties below are optional\n            credentials_map={\n                "credentials_map_key": "credentialsMap"\n            }\n        ),\n        oauth2=appflow.CfnConnectorProfile.OAuth2CredentialsProperty(\n            access_token="accessToken",\n            client_id="clientId",\n            client_secret="clientSecret",\n            o_auth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                auth_code="authCode",\n                redirect_uri="redirectUri"\n            ),\n            refresh_token="refreshToken"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['authentication_type', 'api_key', 'basic', 'custom', 'oauth2']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.CustomConnectorProfileCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.CustomConnectorProfilePropertiesProperty
class CfnConnectorProfile_CustomConnectorProfilePropertiesPropertyDef(BaseStruct):
    o_auth2_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_OAuth2PropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The OAuth 2.0 properties required for OAuth 2.0 authentication.\n')
    profile_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='A map of properties that are required to create a profile for the custom connector.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-customconnectorprofileproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    custom_connector_profile_properties_property = appflow.CfnConnectorProfile.CustomConnectorProfilePropertiesProperty(\n        o_auth2_properties=appflow.CfnConnectorProfile.OAuth2PropertiesProperty(\n            o_auth2_grant_type="oAuth2GrantType",\n            token_url="tokenUrl",\n            token_url_custom_properties={\n                "token_url_custom_properties_key": "tokenUrlCustomProperties"\n            }\n        ),\n        profile_properties={\n            "profile_properties_key": "profileProperties"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['o_auth2_properties', 'profile_properties']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.CustomConnectorProfilePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.DatadogConnectorProfileCredentialsProperty
class CfnConnectorProfile_DatadogConnectorProfileCredentialsPropertyDef(BaseStruct):
    api_key: str = pydantic.Field(..., description='A unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.\n')
    application_key: str = pydantic.Field(..., description='Application keys, in conjunction with your API key, give you full access to Datadog’s programmatic API. Application keys are associated with the user account that created them. The application key is used to log all requests made to the API.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-datadogconnectorprofilecredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    datadog_connector_profile_credentials_property = appflow.CfnConnectorProfile.DatadogConnectorProfileCredentialsProperty(\n        api_key="apiKey",\n        application_key="applicationKey"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['api_key', 'application_key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.DatadogConnectorProfileCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.DatadogConnectorProfilePropertiesProperty
class CfnConnectorProfile_DatadogConnectorProfilePropertiesPropertyDef(BaseStruct):
    instance_url: str = pydantic.Field(..., description='The location of the Datadog resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-datadogconnectorprofileproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    datadog_connector_profile_properties_property = appflow.CfnConnectorProfile.DatadogConnectorProfilePropertiesProperty(\n        instance_url="instanceUrl"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.DatadogConnectorProfilePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.DynatraceConnectorProfileCredentialsProperty
class CfnConnectorProfile_DynatraceConnectorProfileCredentialsPropertyDef(BaseStruct):
    api_token: str = pydantic.Field(..., description='The API tokens used by Dynatrace API to authenticate various API calls.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-dynatraceconnectorprofilecredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    dynatrace_connector_profile_credentials_property = appflow.CfnConnectorProfile.DynatraceConnectorProfileCredentialsProperty(\n        api_token="apiToken"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['api_token']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.DynatraceConnectorProfileCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.DynatraceConnectorProfilePropertiesProperty
class CfnConnectorProfile_DynatraceConnectorProfilePropertiesPropertyDef(BaseStruct):
    instance_url: str = pydantic.Field(..., description='The location of the Dynatrace resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-dynatraceconnectorprofileproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    dynatrace_connector_profile_properties_property = appflow.CfnConnectorProfile.DynatraceConnectorProfilePropertiesProperty(\n        instance_url="instanceUrl"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.DynatraceConnectorProfilePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.GoogleAnalyticsConnectorProfileCredentialsProperty
class CfnConnectorProfile_GoogleAnalyticsConnectorProfileCredentialsPropertyDef(BaseStruct):
    client_id: str = pydantic.Field(..., description='The identifier for the desired client.\n')
    client_secret: str = pydantic.Field(..., description='The client secret used by the OAuth client to authenticate to the authorization server.\n')
    access_token: typing.Optional[str] = pydantic.Field(None, description='The credentials used to access protected Google Analytics resources.\n')
    connector_o_auth_request: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorOAuthRequestPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Used by select connectors for which the OAuth workflow is supported, such as Salesforce, Google Analytics, Marketo, Zendesk, and Slack.\n')
    refresh_token: typing.Optional[str] = pydantic.Field(None, description='The credentials used to acquire new access tokens. This is required only for OAuth2 access tokens, and is not required for OAuth1 access tokens.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-googleanalyticsconnectorprofilecredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    google_analytics_connector_profile_credentials_property = appflow.CfnConnectorProfile.GoogleAnalyticsConnectorProfileCredentialsProperty(\n        client_id="clientId",\n        client_secret="clientSecret",\n\n        # the properties below are optional\n        access_token="accessToken",\n        connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n            auth_code="authCode",\n            redirect_uri="redirectUri"\n        ),\n        refresh_token="refreshToken"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['client_id', 'client_secret', 'access_token', 'connector_o_auth_request', 'refresh_token']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.GoogleAnalyticsConnectorProfileCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.InforNexusConnectorProfileCredentialsProperty
class CfnConnectorProfile_InforNexusConnectorProfileCredentialsPropertyDef(BaseStruct):
    access_key_id: str = pydantic.Field(..., description='The Access Key portion of the credentials.\n')
    datakey: str = pydantic.Field(..., description='The encryption keys used to encrypt data.\n')
    secret_access_key: str = pydantic.Field(..., description='The secret key used to sign requests.\n')
    user_id: str = pydantic.Field(..., description='The identifier for the user.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-infornexusconnectorprofilecredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    infor_nexus_connector_profile_credentials_property = appflow.CfnConnectorProfile.InforNexusConnectorProfileCredentialsProperty(\n        access_key_id="accessKeyId",\n        datakey="datakey",\n        secret_access_key="secretAccessKey",\n        user_id="userId"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['access_key_id', 'datakey', 'secret_access_key', 'user_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.InforNexusConnectorProfileCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.InforNexusConnectorProfilePropertiesProperty
class CfnConnectorProfile_InforNexusConnectorProfilePropertiesPropertyDef(BaseStruct):
    instance_url: str = pydantic.Field(..., description='The location of the Infor Nexus resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-infornexusconnectorprofileproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    infor_nexus_connector_profile_properties_property = appflow.CfnConnectorProfile.InforNexusConnectorProfilePropertiesProperty(\n        instance_url="instanceUrl"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.InforNexusConnectorProfilePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.MarketoConnectorProfileCredentialsProperty
class CfnConnectorProfile_MarketoConnectorProfileCredentialsPropertyDef(BaseStruct):
    client_id: str = pydantic.Field(..., description='The identifier for the desired client.\n')
    client_secret: str = pydantic.Field(..., description='The client secret used by the OAuth client to authenticate to the authorization server.\n')
    access_token: typing.Optional[str] = pydantic.Field(None, description='The credentials used to access protected Marketo resources.\n')
    connector_o_auth_request: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorOAuthRequestPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Used by select connectors for which the OAuth workflow is supported, such as Salesforce, Google Analytics, Marketo, Zendesk, and Slack.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-marketoconnectorprofilecredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    marketo_connector_profile_credentials_property = appflow.CfnConnectorProfile.MarketoConnectorProfileCredentialsProperty(\n        client_id="clientId",\n        client_secret="clientSecret",\n\n        # the properties below are optional\n        access_token="accessToken",\n        connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n            auth_code="authCode",\n            redirect_uri="redirectUri"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['client_id', 'client_secret', 'access_token', 'connector_o_auth_request']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.MarketoConnectorProfileCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.MarketoConnectorProfilePropertiesProperty
class CfnConnectorProfile_MarketoConnectorProfilePropertiesPropertyDef(BaseStruct):
    instance_url: str = pydantic.Field(..., description='The location of the Marketo resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-marketoconnectorprofileproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    marketo_connector_profile_properties_property = appflow.CfnConnectorProfile.MarketoConnectorProfilePropertiesProperty(\n        instance_url="instanceUrl"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.MarketoConnectorProfilePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.OAuth2CredentialsProperty
class CfnConnectorProfile_OAuth2CredentialsPropertyDef(BaseStruct):
    access_token: typing.Optional[str] = pydantic.Field(None, description='The access token used to access the connector on your behalf.\n')
    client_id: typing.Optional[str] = pydantic.Field(None, description='The identifier for the desired client.\n')
    client_secret: typing.Optional[str] = pydantic.Field(None, description='The client secret used by the OAuth client to authenticate to the authorization server.\n')
    o_auth_request: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorOAuthRequestPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnConnectorProfile.OAuth2CredentialsProperty.OAuthRequest``.\n')
    refresh_token: typing.Optional[str] = pydantic.Field(None, description='The refresh token used to refresh an expired access token.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-oauth2credentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    o_auth2_credentials_property = appflow.CfnConnectorProfile.OAuth2CredentialsProperty(\n        access_token="accessToken",\n        client_id="clientId",\n        client_secret="clientSecret",\n        o_auth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n            auth_code="authCode",\n            redirect_uri="redirectUri"\n        ),\n        refresh_token="refreshToken"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['access_token', 'client_id', 'client_secret', 'o_auth_request', 'refresh_token']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.OAuth2CredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.OAuth2PropertiesProperty
class CfnConnectorProfile_OAuth2PropertiesPropertyDef(BaseStruct):
    o_auth2_grant_type: typing.Optional[str] = pydantic.Field(None, description='The OAuth 2.0 grant type used by connector for OAuth 2.0 authentication.\n')
    token_url: typing.Optional[str] = pydantic.Field(None, description='The token URL required for OAuth 2.0 authentication.\n')
    token_url_custom_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='Associates your token URL with a map of properties that you define. Use this parameter to provide any additional details that the connector requires to authenticate your request.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-oauth2properties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    o_auth2_properties_property = appflow.CfnConnectorProfile.OAuth2PropertiesProperty(\n        o_auth2_grant_type="oAuth2GrantType",\n        token_url="tokenUrl",\n        token_url_custom_properties={\n            "token_url_custom_properties_key": "tokenUrlCustomProperties"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['o_auth2_grant_type', 'token_url', 'token_url_custom_properties']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.OAuth2PropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.OAuthCredentialsProperty
class CfnConnectorProfile_OAuthCredentialsPropertyDef(BaseStruct):
    access_token: typing.Optional[str] = pydantic.Field(None, description='The access token used to access protected SAPOData resources.\n')
    client_id: typing.Optional[str] = pydantic.Field(None, description='The identifier for the desired client.\n')
    client_secret: typing.Optional[str] = pydantic.Field(None, description='The client secret used by the OAuth client to authenticate to the authorization server.\n')
    connector_o_auth_request: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorOAuthRequestPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnConnectorProfile.OAuthCredentialsProperty.ConnectorOAuthRequest``.\n')
    refresh_token: typing.Optional[str] = pydantic.Field(None, description='The refresh token used to refresh expired access token.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-oauthcredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    o_auth_credentials_property = appflow.CfnConnectorProfile.OAuthCredentialsProperty(\n        access_token="accessToken",\n        client_id="clientId",\n        client_secret="clientSecret",\n        connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n            auth_code="authCode",\n            redirect_uri="redirectUri"\n        ),\n        refresh_token="refreshToken"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['access_token', 'client_id', 'client_secret', 'connector_o_auth_request', 'refresh_token']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.OAuthCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.OAuthPropertiesProperty
class CfnConnectorProfile_OAuthPropertiesPropertyDef(BaseStruct):
    auth_code_url: typing.Optional[str] = pydantic.Field(None, description='The authorization code url required to redirect to SAP Login Page to fetch authorization code for OAuth type authentication.\n')
    o_auth_scopes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The OAuth scopes required for OAuth type authentication.\n')
    token_url: typing.Optional[str] = pydantic.Field(None, description='The token url required to fetch access/refresh tokens using authorization code and also to refresh expired access token using refresh token.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-oauthproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    o_auth_properties_property = appflow.CfnConnectorProfile.OAuthPropertiesProperty(\n        auth_code_url="authCodeUrl",\n        o_auth_scopes=["oAuthScopes"],\n        token_url="tokenUrl"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['auth_code_url', 'o_auth_scopes', 'token_url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.OAuthPropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.PardotConnectorProfileCredentialsProperty
class CfnConnectorProfile_PardotConnectorProfileCredentialsPropertyDef(BaseStruct):
    access_token: typing.Optional[str] = pydantic.Field(None, description='``CfnConnectorProfile.PardotConnectorProfileCredentialsProperty.AccessToken``.')
    client_credentials_arn: typing.Optional[str] = pydantic.Field(None, description='``CfnConnectorProfile.PardotConnectorProfileCredentialsProperty.ClientCredentialsArn``.\n')
    connector_o_auth_request: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorOAuthRequestPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnConnectorProfile.PardotConnectorProfileCredentialsProperty.ConnectorOAuthRequest``.\n')
    refresh_token: typing.Optional[str] = pydantic.Field(None, description='``CfnConnectorProfile.PardotConnectorProfileCredentialsProperty.RefreshToken``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-pardotconnectorprofilecredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    pardot_connector_profile_credentials_property = appflow.CfnConnectorProfile.PardotConnectorProfileCredentialsProperty(\n        access_token="accessToken",\n        client_credentials_arn="clientCredentialsArn",\n        connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n            auth_code="authCode",\n            redirect_uri="redirectUri"\n        ),\n        refresh_token="refreshToken"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['access_token', 'client_credentials_arn', 'connector_o_auth_request', 'refresh_token']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.PardotConnectorProfileCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.PardotConnectorProfilePropertiesProperty
class CfnConnectorProfile_PardotConnectorProfilePropertiesPropertyDef(BaseStruct):
    business_unit_id: str = pydantic.Field(..., description='``CfnConnectorProfile.PardotConnectorProfilePropertiesProperty.BusinessUnitId``.')
    instance_url: typing.Optional[str] = pydantic.Field(None, description='``CfnConnectorProfile.PardotConnectorProfilePropertiesProperty.InstanceUrl``.\n')
    is_sandbox_environment: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnConnectorProfile.PardotConnectorProfilePropertiesProperty.IsSandboxEnvironment``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-pardotconnectorprofileproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    pardot_connector_profile_properties_property = appflow.CfnConnectorProfile.PardotConnectorProfilePropertiesProperty(\n        business_unit_id="businessUnitId",\n\n        # the properties below are optional\n        instance_url="instanceUrl",\n        is_sandbox_environment=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['business_unit_id', 'instance_url', 'is_sandbox_environment']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.PardotConnectorProfilePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.RedshiftConnectorProfileCredentialsProperty
class CfnConnectorProfile_RedshiftConnectorProfileCredentialsPropertyDef(BaseStruct):
    password: typing.Optional[str] = pydantic.Field(None, description='The password that corresponds to the user name.\n')
    username: typing.Optional[str] = pydantic.Field(None, description='The name of the user.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-redshiftconnectorprofilecredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    redshift_connector_profile_credentials_property = appflow.CfnConnectorProfile.RedshiftConnectorProfileCredentialsProperty(\n        password="password",\n        username="username"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['password', 'username']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.RedshiftConnectorProfileCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.RedshiftConnectorProfilePropertiesProperty
class CfnConnectorProfile_RedshiftConnectorProfilePropertiesPropertyDef(BaseStruct):
    bucket_name: str = pydantic.Field(..., description='A name for the associated Amazon S3 bucket.\n')
    role_arn: str = pydantic.Field(..., description='The Amazon Resource Name (ARN) of IAM role that grants Amazon Redshift read-only access to Amazon S3. For more information, and for the polices that you attach to this role, see `Allow Amazon Redshift to access your Amazon AppFlow data in Amazon S3 <https://docs.aws.amazon.com/appflow/latest/userguide/security_iam_service-role-policies.html#redshift-access-s3>`_ .\n')
    bucket_prefix: typing.Optional[str] = pydantic.Field(None, description='The object key for the destination bucket in which Amazon AppFlow places the files.\n')
    cluster_identifier: typing.Optional[str] = pydantic.Field(None, description='``CfnConnectorProfile.RedshiftConnectorProfilePropertiesProperty.ClusterIdentifier``.\n')
    data_api_role_arn: typing.Optional[str] = pydantic.Field(None, description='``CfnConnectorProfile.RedshiftConnectorProfilePropertiesProperty.DataApiRoleArn``.\n')
    database_name: typing.Optional[str] = pydantic.Field(None, description='``CfnConnectorProfile.RedshiftConnectorProfilePropertiesProperty.DatabaseName``.\n')
    database_url: typing.Optional[str] = pydantic.Field(None, description='The JDBC URL of the Amazon Redshift cluster.\n')
    is_redshift_serverless: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnConnectorProfile.RedshiftConnectorProfilePropertiesProperty.IsRedshiftServerless``.\n')
    workgroup_name: typing.Optional[str] = pydantic.Field(None, description='``CfnConnectorProfile.RedshiftConnectorProfilePropertiesProperty.WorkgroupName``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-redshiftconnectorprofileproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    redshift_connector_profile_properties_property = appflow.CfnConnectorProfile.RedshiftConnectorProfilePropertiesProperty(\n        bucket_name="bucketName",\n        role_arn="roleArn",\n\n        # the properties below are optional\n        bucket_prefix="bucketPrefix",\n        cluster_identifier="clusterIdentifier",\n        data_api_role_arn="dataApiRoleArn",\n        database_name="databaseName",\n        database_url="databaseUrl",\n        is_redshift_serverless=False,\n        workgroup_name="workgroupName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket_name', 'role_arn', 'bucket_prefix', 'cluster_identifier', 'data_api_role_arn', 'database_name', 'database_url', 'is_redshift_serverless', 'workgroup_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.RedshiftConnectorProfilePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.SalesforceConnectorProfileCredentialsProperty
class CfnConnectorProfile_SalesforceConnectorProfileCredentialsPropertyDef(BaseStruct):
    access_token: typing.Optional[str] = pydantic.Field(None, description='The credentials used to access protected Salesforce resources.\n')
    client_credentials_arn: typing.Optional[str] = pydantic.Field(None, description='The secret manager ARN, which contains the client ID and client secret of the connected app.\n')
    connector_o_auth_request: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorOAuthRequestPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Used by select connectors for which the OAuth workflow is supported, such as Salesforce, Google Analytics, Marketo, Zendesk, and Slack.\n')
    jwt_token: typing.Optional[str] = pydantic.Field(None, description='``CfnConnectorProfile.SalesforceConnectorProfileCredentialsProperty.JwtToken``.\n')
    o_auth2_grant_type: typing.Optional[str] = pydantic.Field(None, description='``CfnConnectorProfile.SalesforceConnectorProfileCredentialsProperty.OAuth2GrantType``.\n')
    refresh_token: typing.Optional[str] = pydantic.Field(None, description='The credentials used to acquire new access tokens.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-salesforceconnectorprofilecredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    salesforce_connector_profile_credentials_property = appflow.CfnConnectorProfile.SalesforceConnectorProfileCredentialsProperty(\n        access_token="accessToken",\n        client_credentials_arn="clientCredentialsArn",\n        connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n            auth_code="authCode",\n            redirect_uri="redirectUri"\n        ),\n        jwt_token="jwtToken",\n        o_auth2_grant_type="oAuth2GrantType",\n        refresh_token="refreshToken"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['access_token', 'client_credentials_arn', 'connector_o_auth_request', 'jwt_token', 'o_auth2_grant_type', 'refresh_token']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.SalesforceConnectorProfileCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.SalesforceConnectorProfilePropertiesProperty
class CfnConnectorProfile_SalesforceConnectorProfilePropertiesPropertyDef(BaseStruct):
    instance_url: typing.Optional[str] = pydantic.Field(None, description='The location of the Salesforce resource.\n')
    is_sandbox_environment: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Indicates whether the connector profile applies to a sandbox or production environment.\n')
    use_private_link_for_metadata_and_authorization: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnConnectorProfile.SalesforceConnectorProfilePropertiesProperty.usePrivateLinkForMetadataAndAuthorization``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-salesforceconnectorprofileproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    salesforce_connector_profile_properties_property = appflow.CfnConnectorProfile.SalesforceConnectorProfilePropertiesProperty(\n        instance_url="instanceUrl",\n        is_sandbox_environment=False,\n        use_private_link_for_metadata_and_authorization=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_url', 'is_sandbox_environment', 'use_private_link_for_metadata_and_authorization']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.SalesforceConnectorProfilePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.SAPODataConnectorProfileCredentialsProperty
class CfnConnectorProfile_SAPODataConnectorProfileCredentialsPropertyDef(BaseStruct):
    basic_auth_credentials: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_BasicAuthCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The SAPOData basic authentication credentials.\n')
    o_auth_credentials: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_OAuthCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The SAPOData OAuth type authentication credentials.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-sapodataconnectorprofilecredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    s_aPOData_connector_profile_credentials_property = appflow.CfnConnectorProfile.SAPODataConnectorProfileCredentialsProperty(\n        basic_auth_credentials=appflow.CfnConnectorProfile.BasicAuthCredentialsProperty(\n            password="password",\n            username="username"\n        ),\n        o_auth_credentials=appflow.CfnConnectorProfile.OAuthCredentialsProperty(\n            access_token="accessToken",\n            client_id="clientId",\n            client_secret="clientSecret",\n            connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                auth_code="authCode",\n                redirect_uri="redirectUri"\n            ),\n            refresh_token="refreshToken"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['basic_auth_credentials', 'o_auth_credentials']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.SAPODataConnectorProfileCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.SAPODataConnectorProfilePropertiesProperty
class CfnConnectorProfile_SAPODataConnectorProfilePropertiesPropertyDef(BaseStruct):
    application_host_url: typing.Optional[str] = pydantic.Field(None, description='The location of the SAPOData resource.\n')
    application_service_path: typing.Optional[str] = pydantic.Field(None, description='The application path to catalog service.\n')
    client_number: typing.Optional[str] = pydantic.Field(None, description='The client number for the client creating the connection.\n')
    logon_language: typing.Optional[str] = pydantic.Field(None, description='The logon language of SAPOData instance.\n')
    o_auth_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_OAuthPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The SAPOData OAuth properties required for OAuth type authentication.\n')
    port_number: typing.Union[int, float, None] = pydantic.Field(None, description='The port number of the SAPOData instance.\n')
    private_link_service_name: typing.Optional[str] = pydantic.Field(None, description='The SAPOData Private Link service name to be used for private data transfers.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-sapodataconnectorprofileproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    s_aPOData_connector_profile_properties_property = appflow.CfnConnectorProfile.SAPODataConnectorProfilePropertiesProperty(\n        application_host_url="applicationHostUrl",\n        application_service_path="applicationServicePath",\n        client_number="clientNumber",\n        logon_language="logonLanguage",\n        o_auth_properties=appflow.CfnConnectorProfile.OAuthPropertiesProperty(\n            auth_code_url="authCodeUrl",\n            o_auth_scopes=["oAuthScopes"],\n            token_url="tokenUrl"\n        ),\n        port_number=123,\n        private_link_service_name="privateLinkServiceName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['application_host_url', 'application_service_path', 'client_number', 'logon_language', 'o_auth_properties', 'port_number', 'private_link_service_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.SAPODataConnectorProfilePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.ServiceNowConnectorProfileCredentialsProperty
class CfnConnectorProfile_ServiceNowConnectorProfileCredentialsPropertyDef(BaseStruct):
    password: str = pydantic.Field(..., description='The password that corresponds to the user name.\n')
    username: str = pydantic.Field(..., description='The name of the user.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-servicenowconnectorprofilecredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    service_now_connector_profile_credentials_property = appflow.CfnConnectorProfile.ServiceNowConnectorProfileCredentialsProperty(\n        password="password",\n        username="username"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['password', 'username']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.ServiceNowConnectorProfileCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.ServiceNowConnectorProfilePropertiesProperty
class CfnConnectorProfile_ServiceNowConnectorProfilePropertiesPropertyDef(BaseStruct):
    instance_url: str = pydantic.Field(..., description='The location of the ServiceNow resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-servicenowconnectorprofileproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    service_now_connector_profile_properties_property = appflow.CfnConnectorProfile.ServiceNowConnectorProfilePropertiesProperty(\n        instance_url="instanceUrl"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.ServiceNowConnectorProfilePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.SingularConnectorProfileCredentialsProperty
class CfnConnectorProfile_SingularConnectorProfileCredentialsPropertyDef(BaseStruct):
    api_key: str = pydantic.Field(..., description='A unique alphanumeric identifier used to authenticate a user, developer, or calling program to your API.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-singularconnectorprofilecredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    singular_connector_profile_credentials_property = appflow.CfnConnectorProfile.SingularConnectorProfileCredentialsProperty(\n        api_key="apiKey"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['api_key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.SingularConnectorProfileCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.SlackConnectorProfileCredentialsProperty
class CfnConnectorProfile_SlackConnectorProfileCredentialsPropertyDef(BaseStruct):
    client_id: str = pydantic.Field(..., description='The identifier for the client.\n')
    client_secret: str = pydantic.Field(..., description='The client secret used by the OAuth client to authenticate to the authorization server.\n')
    access_token: typing.Optional[str] = pydantic.Field(None, description='The credentials used to access protected Slack resources.\n')
    connector_o_auth_request: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorOAuthRequestPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Used by select connectors for which the OAuth workflow is supported, such as Salesforce, Google Analytics, Marketo, Zendesk, and Slack.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-slackconnectorprofilecredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    slack_connector_profile_credentials_property = appflow.CfnConnectorProfile.SlackConnectorProfileCredentialsProperty(\n        client_id="clientId",\n        client_secret="clientSecret",\n\n        # the properties below are optional\n        access_token="accessToken",\n        connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n            auth_code="authCode",\n            redirect_uri="redirectUri"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['client_id', 'client_secret', 'access_token', 'connector_o_auth_request']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.SlackConnectorProfileCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.SlackConnectorProfilePropertiesProperty
class CfnConnectorProfile_SlackConnectorProfilePropertiesPropertyDef(BaseStruct):
    instance_url: str = pydantic.Field(..., description='The location of the Slack resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-slackconnectorprofileproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    slack_connector_profile_properties_property = appflow.CfnConnectorProfile.SlackConnectorProfilePropertiesProperty(\n        instance_url="instanceUrl"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.SlackConnectorProfilePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.SnowflakeConnectorProfileCredentialsProperty
class CfnConnectorProfile_SnowflakeConnectorProfileCredentialsPropertyDef(BaseStruct):
    password: str = pydantic.Field(..., description='The password that corresponds to the user name.\n')
    username: str = pydantic.Field(..., description='The name of the user.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-snowflakeconnectorprofilecredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    snowflake_connector_profile_credentials_property = appflow.CfnConnectorProfile.SnowflakeConnectorProfileCredentialsProperty(\n        password="password",\n        username="username"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['password', 'username']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.SnowflakeConnectorProfileCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.SnowflakeConnectorProfilePropertiesProperty
class CfnConnectorProfile_SnowflakeConnectorProfilePropertiesPropertyDef(BaseStruct):
    bucket_name: str = pydantic.Field(..., description='The name of the Amazon S3 bucket associated with Snowflake.\n')
    stage: str = pydantic.Field(..., description='The name of the Amazon S3 stage that was created while setting up an Amazon S3 stage in the Snowflake account. This is written in the following format: < Database>< Schema>.\n')
    warehouse: str = pydantic.Field(..., description='The name of the Snowflake warehouse.\n')
    account_name: typing.Optional[str] = pydantic.Field(None, description='The name of the account.\n')
    bucket_prefix: typing.Optional[str] = pydantic.Field(None, description='The bucket path that refers to the Amazon S3 bucket associated with Snowflake.\n')
    private_link_service_name: typing.Optional[str] = pydantic.Field(None, description='The Snowflake Private Link service name to be used for private data transfers.\n')
    region: typing.Optional[str] = pydantic.Field(None, description='The AWS Region of the Snowflake account.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-snowflakeconnectorprofileproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    snowflake_connector_profile_properties_property = appflow.CfnConnectorProfile.SnowflakeConnectorProfilePropertiesProperty(\n        bucket_name="bucketName",\n        stage="stage",\n        warehouse="warehouse",\n\n        # the properties below are optional\n        account_name="accountName",\n        bucket_prefix="bucketPrefix",\n        private_link_service_name="privateLinkServiceName",\n        region="region"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket_name', 'stage', 'warehouse', 'account_name', 'bucket_prefix', 'private_link_service_name', 'region']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.SnowflakeConnectorProfilePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.TrendmicroConnectorProfileCredentialsProperty
class CfnConnectorProfile_TrendmicroConnectorProfileCredentialsPropertyDef(BaseStruct):
    api_secret_key: str = pydantic.Field(..., description='The Secret Access Key portion of the credentials.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-trendmicroconnectorprofilecredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    trendmicro_connector_profile_credentials_property = appflow.CfnConnectorProfile.TrendmicroConnectorProfileCredentialsProperty(\n        api_secret_key="apiSecretKey"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['api_secret_key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.TrendmicroConnectorProfileCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.VeevaConnectorProfileCredentialsProperty
class CfnConnectorProfile_VeevaConnectorProfileCredentialsPropertyDef(BaseStruct):
    password: str = pydantic.Field(..., description='The password that corresponds to the user name.\n')
    username: str = pydantic.Field(..., description='The name of the user.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-veevaconnectorprofilecredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    veeva_connector_profile_credentials_property = appflow.CfnConnectorProfile.VeevaConnectorProfileCredentialsProperty(\n        password="password",\n        username="username"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['password', 'username']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.VeevaConnectorProfileCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.VeevaConnectorProfilePropertiesProperty
class CfnConnectorProfile_VeevaConnectorProfilePropertiesPropertyDef(BaseStruct):
    instance_url: str = pydantic.Field(..., description='The location of the Veeva resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-veevaconnectorprofileproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    veeva_connector_profile_properties_property = appflow.CfnConnectorProfile.VeevaConnectorProfilePropertiesProperty(\n        instance_url="instanceUrl"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.VeevaConnectorProfilePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.ZendeskConnectorProfileCredentialsProperty
class CfnConnectorProfile_ZendeskConnectorProfileCredentialsPropertyDef(BaseStruct):
    client_id: str = pydantic.Field(..., description='The identifier for the desired client.\n')
    client_secret: str = pydantic.Field(..., description='The client secret used by the OAuth client to authenticate to the authorization server.\n')
    access_token: typing.Optional[str] = pydantic.Field(None, description='The credentials used to access protected Zendesk resources.\n')
    connector_o_auth_request: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorOAuthRequestPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Used by select connectors for which the OAuth workflow is supported, such as Salesforce, Google Analytics, Marketo, Zendesk, and Slack.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-zendeskconnectorprofilecredentials.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    zendesk_connector_profile_credentials_property = appflow.CfnConnectorProfile.ZendeskConnectorProfileCredentialsProperty(\n        client_id="clientId",\n        client_secret="clientSecret",\n\n        # the properties below are optional\n        access_token="accessToken",\n        connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n            auth_code="authCode",\n            redirect_uri="redirectUri"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['client_id', 'client_secret', 'access_token', 'connector_o_auth_request']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.ZendeskConnectorProfileCredentialsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile.ZendeskConnectorProfilePropertiesProperty
class CfnConnectorProfile_ZendeskConnectorProfilePropertiesPropertyDef(BaseStruct):
    instance_url: str = pydantic.Field(..., description='The location of the Zendesk resource.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-connectorprofile-zendeskconnectorprofileproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    zendesk_connector_profile_properties_property = appflow.CfnConnectorProfile.ZendeskConnectorProfilePropertiesProperty(\n        instance_url="instanceUrl"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['instance_url']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile.ZendeskConnectorProfilePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.AggregationConfigProperty
class CfnFlow_AggregationConfigPropertyDef(BaseStruct):
    aggregation_type: typing.Optional[str] = pydantic.Field(None, description='Specifies whether Amazon AppFlow aggregates the flow records into a single file, or leave them unaggregated.\n')
    target_file_size: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnFlow.AggregationConfigProperty.TargetFileSize``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-aggregationconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    aggregation_config_property = appflow.CfnFlow.AggregationConfigProperty(\n        aggregation_type="aggregationType",\n        target_file_size=123\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['aggregation_type', 'target_file_size']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.AggregationConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.AmplitudeSourcePropertiesProperty
class CfnFlow_AmplitudeSourcePropertiesPropertyDef(BaseStruct):
    object: str = pydantic.Field(..., description='The object specified in the Amplitude flow source.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-amplitudesourceproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    amplitude_source_properties_property = appflow.CfnFlow.AmplitudeSourcePropertiesProperty(\n        object="object"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.AmplitudeSourcePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.ConnectorOperatorProperty
class CfnFlow_ConnectorOperatorPropertyDef(BaseStruct):
    amplitude: typing.Optional[str] = pydantic.Field(None, description='The operation to be performed on the provided Amplitude source fields.\n')
    custom_connector: typing.Optional[str] = pydantic.Field(None, description='Operators supported by the custom connector.\n')
    datadog: typing.Optional[str] = pydantic.Field(None, description='The operation to be performed on the provided Datadog source fields.\n')
    dynatrace: typing.Optional[str] = pydantic.Field(None, description='The operation to be performed on the provided Dynatrace source fields.\n')
    google_analytics: typing.Optional[str] = pydantic.Field(None, description='The operation to be performed on the provided Google Analytics source fields.\n')
    infor_nexus: typing.Optional[str] = pydantic.Field(None, description='The operation to be performed on the provided Infor Nexus source fields.\n')
    marketo: typing.Optional[str] = pydantic.Field(None, description='The operation to be performed on the provided Marketo source fields.\n')
    pardot: typing.Optional[str] = pydantic.Field(None, description='``CfnFlow.ConnectorOperatorProperty.Pardot``.\n')
    s3: typing.Optional[str] = pydantic.Field(None, description='The operation to be performed on the provided Amazon S3 source fields.\n')
    salesforce: typing.Optional[str] = pydantic.Field(None, description='The operation to be performed on the provided Salesforce source fields.\n')
    sapo_data: typing.Optional[str] = pydantic.Field(None, description='The operation to be performed on the provided SAPOData source fields.\n')
    service_now: typing.Optional[str] = pydantic.Field(None, description='The operation to be performed on the provided ServiceNow source fields.\n')
    singular: typing.Optional[str] = pydantic.Field(None, description='The operation to be performed on the provided Singular source fields.\n')
    slack: typing.Optional[str] = pydantic.Field(None, description='The operation to be performed on the provided Slack source fields.\n')
    trendmicro: typing.Optional[str] = pydantic.Field(None, description='The operation to be performed on the provided Trend Micro source fields.\n')
    veeva: typing.Optional[str] = pydantic.Field(None, description='The operation to be performed on the provided Veeva source fields.\n')
    zendesk: typing.Optional[str] = pydantic.Field(None, description='The operation to be performed on the provided Zendesk source fields.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-connectoroperator.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    connector_operator_property = appflow.CfnFlow.ConnectorOperatorProperty(\n        amplitude="amplitude",\n        custom_connector="customConnector",\n        datadog="datadog",\n        dynatrace="dynatrace",\n        google_analytics="googleAnalytics",\n        infor_nexus="inforNexus",\n        marketo="marketo",\n        pardot="pardot",\n        s3="s3",\n        salesforce="salesforce",\n        sapo_data="sapoData",\n        service_now="serviceNow",\n        singular="singular",\n        slack="slack",\n        trendmicro="trendmicro",\n        veeva="veeva",\n        zendesk="zendesk"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['amplitude', 'custom_connector', 'datadog', 'dynatrace', 'google_analytics', 'infor_nexus', 'marketo', 'pardot', 's3', 'salesforce', 'sapo_data', 'service_now', 'singular', 'slack', 'trendmicro', 'veeva', 'zendesk']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.ConnectorOperatorProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.CustomConnectorDestinationPropertiesProperty
class CfnFlow_CustomConnectorDestinationPropertiesPropertyDef(BaseStruct):
    entity_name: str = pydantic.Field(..., description='The entity specified in the custom connector as a destination in the flow.\n')
    custom_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description="The custom properties that are specific to the connector when it's used as a destination in the flow.\n")
    error_handling_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ErrorHandlingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The settings that determine how Amazon AppFlow handles an error when placing data in the custom connector as destination.\n')
    id_field_names: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update, delete, or upsert.\n')
    write_operation_type: typing.Optional[str] = pydantic.Field(None, description='Specifies the type of write operation to be performed in the custom connector when it\'s used as destination.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-customconnectordestinationproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    custom_connector_destination_properties_property = appflow.CfnFlow.CustomConnectorDestinationPropertiesProperty(\n        entity_name="entityName",\n\n        # the properties below are optional\n        custom_properties={\n            "custom_properties_key": "customProperties"\n        },\n        error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n            bucket_name="bucketName",\n            bucket_prefix="bucketPrefix",\n            fail_on_first_error=False\n        ),\n        id_field_names=["idFieldNames"],\n        write_operation_type="writeOperationType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['entity_name', 'custom_properties', 'error_handling_config', 'id_field_names', 'write_operation_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.CustomConnectorDestinationPropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.CustomConnectorSourcePropertiesProperty
class CfnFlow_CustomConnectorSourcePropertiesPropertyDef(BaseStruct):
    entity_name: str = pydantic.Field(..., description='The entity specified in the custom connector as a source in the flow.\n')
    custom_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='Custom properties that are required to use the custom connector as a source.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-customconnectorsourceproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    custom_connector_source_properties_property = appflow.CfnFlow.CustomConnectorSourcePropertiesProperty(\n        entity_name="entityName",\n\n        # the properties below are optional\n        custom_properties={\n            "custom_properties_key": "customProperties"\n        }\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['entity_name', 'custom_properties']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.CustomConnectorSourcePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.DatadogSourcePropertiesProperty
class CfnFlow_DatadogSourcePropertiesPropertyDef(BaseStruct):
    object: str = pydantic.Field(..., description='The object specified in the Datadog flow source.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-datadogsourceproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    datadog_source_properties_property = appflow.CfnFlow.DatadogSourcePropertiesProperty(\n        object="object"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.DatadogSourcePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.DestinationConnectorPropertiesProperty
class CfnFlow_DestinationConnectorPropertiesPropertyDef(BaseStruct):
    custom_connector: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_CustomConnectorDestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The properties that are required to query the custom Connector.\n')
    event_bridge: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_EventBridgeDestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The properties required to query Amazon EventBridge.\n')
    lookout_metrics: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_LookoutMetricsDestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The properties required to query Amazon Lookout for Metrics.\n')
    marketo: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_MarketoDestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The properties required to query Marketo.\n')
    redshift: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_RedshiftDestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The properties required to query Amazon Redshift.\n')
    s3: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_S3DestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The properties required to query Amazon S3.\n')
    salesforce: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_SalesforceDestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The properties required to query Salesforce.\n')
    sapo_data: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_SAPODataDestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The properties required to query SAPOData.\n')
    snowflake: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_SnowflakeDestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The properties required to query Snowflake.\n')
    upsolver: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_UpsolverDestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The properties required to query Upsolver.\n')
    zendesk: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ZendeskDestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The properties required to query Zendesk.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-destinationconnectorproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    destination_connector_properties_property = appflow.CfnFlow.DestinationConnectorPropertiesProperty(\n        custom_connector=appflow.CfnFlow.CustomConnectorDestinationPropertiesProperty(\n            entity_name="entityName",\n\n            # the properties below are optional\n            custom_properties={\n                "custom_properties_key": "customProperties"\n            },\n            error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                bucket_name="bucketName",\n                bucket_prefix="bucketPrefix",\n                fail_on_first_error=False\n            ),\n            id_field_names=["idFieldNames"],\n            write_operation_type="writeOperationType"\n        ),\n        event_bridge=appflow.CfnFlow.EventBridgeDestinationPropertiesProperty(\n            object="object",\n\n            # the properties below are optional\n            error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                bucket_name="bucketName",\n                bucket_prefix="bucketPrefix",\n                fail_on_first_error=False\n            )\n        ),\n        lookout_metrics=appflow.CfnFlow.LookoutMetricsDestinationPropertiesProperty(\n            object="object"\n        ),\n        marketo=appflow.CfnFlow.MarketoDestinationPropertiesProperty(\n            object="object",\n\n            # the properties below are optional\n            error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                bucket_name="bucketName",\n                bucket_prefix="bucketPrefix",\n                fail_on_first_error=False\n            )\n        ),\n        redshift=appflow.CfnFlow.RedshiftDestinationPropertiesProperty(\n            intermediate_bucket_name="intermediateBucketName",\n            object="object",\n\n            # the properties below are optional\n            bucket_prefix="bucketPrefix",\n            error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                bucket_name="bucketName",\n                bucket_prefix="bucketPrefix",\n                fail_on_first_error=False\n            )\n        ),\n        s3=appflow.CfnFlow.S3DestinationPropertiesProperty(\n            bucket_name="bucketName",\n\n            # the properties below are optional\n            bucket_prefix="bucketPrefix",\n            s3_output_format_config=appflow.CfnFlow.S3OutputFormatConfigProperty(\n                aggregation_config=appflow.CfnFlow.AggregationConfigProperty(\n                    aggregation_type="aggregationType",\n                    target_file_size=123\n                ),\n                file_type="fileType",\n                prefix_config=appflow.CfnFlow.PrefixConfigProperty(\n                    path_prefix_hierarchy=["pathPrefixHierarchy"],\n                    prefix_format="prefixFormat",\n                    prefix_type="prefixType"\n                ),\n                preserve_source_data_typing=False\n            )\n        ),\n        salesforce=appflow.CfnFlow.SalesforceDestinationPropertiesProperty(\n            object="object",\n\n            # the properties below are optional\n            data_transfer_api="dataTransferApi",\n            error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                bucket_name="bucketName",\n                bucket_prefix="bucketPrefix",\n                fail_on_first_error=False\n            ),\n            id_field_names=["idFieldNames"],\n            write_operation_type="writeOperationType"\n        ),\n        sapo_data=appflow.CfnFlow.SAPODataDestinationPropertiesProperty(\n            object_path="objectPath",\n\n            # the properties below are optional\n            error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                bucket_name="bucketName",\n                bucket_prefix="bucketPrefix",\n                fail_on_first_error=False\n            ),\n            id_field_names=["idFieldNames"],\n            success_response_handling_config=appflow.CfnFlow.SuccessResponseHandlingConfigProperty(\n                bucket_name="bucketName",\n                bucket_prefix="bucketPrefix"\n            ),\n            write_operation_type="writeOperationType"\n        ),\n        snowflake=appflow.CfnFlow.SnowflakeDestinationPropertiesProperty(\n            intermediate_bucket_name="intermediateBucketName",\n            object="object",\n\n            # the properties below are optional\n            bucket_prefix="bucketPrefix",\n            error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                bucket_name="bucketName",\n                bucket_prefix="bucketPrefix",\n                fail_on_first_error=False\n            )\n        ),\n        upsolver=appflow.CfnFlow.UpsolverDestinationPropertiesProperty(\n            bucket_name="bucketName",\n            s3_output_format_config=appflow.CfnFlow.UpsolverS3OutputFormatConfigProperty(\n                prefix_config=appflow.CfnFlow.PrefixConfigProperty(\n                    path_prefix_hierarchy=["pathPrefixHierarchy"],\n                    prefix_format="prefixFormat",\n                    prefix_type="prefixType"\n                ),\n\n                # the properties below are optional\n                aggregation_config=appflow.CfnFlow.AggregationConfigProperty(\n                    aggregation_type="aggregationType",\n                    target_file_size=123\n                ),\n                file_type="fileType"\n            ),\n\n            # the properties below are optional\n            bucket_prefix="bucketPrefix"\n        ),\n        zendesk=appflow.CfnFlow.ZendeskDestinationPropertiesProperty(\n            object="object",\n\n            # the properties below are optional\n            error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                bucket_name="bucketName",\n                bucket_prefix="bucketPrefix",\n                fail_on_first_error=False\n            ),\n            id_field_names=["idFieldNames"],\n            write_operation_type="writeOperationType"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['custom_connector', 'event_bridge', 'lookout_metrics', 'marketo', 'redshift', 's3', 'salesforce', 'sapo_data', 'snowflake', 'upsolver', 'zendesk']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.DestinationConnectorPropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.DestinationFlowConfigProperty
class CfnFlow_DestinationFlowConfigPropertyDef(BaseStruct):
    connector_type: str = pydantic.Field(..., description='The type of destination connector, such as Sales force, Amazon S3, and so on. *Allowed Values* : ``EventBridge | Redshift | S3 | Salesforce | Snowflake``\n')
    destination_connector_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_DestinationConnectorPropertiesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='This stores the information that is required to query a particular connector.\n')
    api_version: typing.Optional[str] = pydantic.Field(None, description='The API version that the destination connector uses.\n')
    connector_profile_name: typing.Optional[str] = pydantic.Field(None, description='The name of the connector profile. This name must be unique for each connector profile in the AWS account .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-destinationflowconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    destination_flow_config_property = appflow.CfnFlow.DestinationFlowConfigProperty(\n        connector_type="connectorType",\n        destination_connector_properties=appflow.CfnFlow.DestinationConnectorPropertiesProperty(\n            custom_connector=appflow.CfnFlow.CustomConnectorDestinationPropertiesProperty(\n                entity_name="entityName",\n\n                # the properties below are optional\n                custom_properties={\n                    "custom_properties_key": "customProperties"\n                },\n                error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                    bucket_name="bucketName",\n                    bucket_prefix="bucketPrefix",\n                    fail_on_first_error=False\n                ),\n                id_field_names=["idFieldNames"],\n                write_operation_type="writeOperationType"\n            ),\n            event_bridge=appflow.CfnFlow.EventBridgeDestinationPropertiesProperty(\n                object="object",\n\n                # the properties below are optional\n                error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                    bucket_name="bucketName",\n                    bucket_prefix="bucketPrefix",\n                    fail_on_first_error=False\n                )\n            ),\n            lookout_metrics=appflow.CfnFlow.LookoutMetricsDestinationPropertiesProperty(\n                object="object"\n            ),\n            marketo=appflow.CfnFlow.MarketoDestinationPropertiesProperty(\n                object="object",\n\n                # the properties below are optional\n                error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                    bucket_name="bucketName",\n                    bucket_prefix="bucketPrefix",\n                    fail_on_first_error=False\n                )\n            ),\n            redshift=appflow.CfnFlow.RedshiftDestinationPropertiesProperty(\n                intermediate_bucket_name="intermediateBucketName",\n                object="object",\n\n                # the properties below are optional\n                bucket_prefix="bucketPrefix",\n                error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                    bucket_name="bucketName",\n                    bucket_prefix="bucketPrefix",\n                    fail_on_first_error=False\n                )\n            ),\n            s3=appflow.CfnFlow.S3DestinationPropertiesProperty(\n                bucket_name="bucketName",\n\n                # the properties below are optional\n                bucket_prefix="bucketPrefix",\n                s3_output_format_config=appflow.CfnFlow.S3OutputFormatConfigProperty(\n                    aggregation_config=appflow.CfnFlow.AggregationConfigProperty(\n                        aggregation_type="aggregationType",\n                        target_file_size=123\n                    ),\n                    file_type="fileType",\n                    prefix_config=appflow.CfnFlow.PrefixConfigProperty(\n                        path_prefix_hierarchy=["pathPrefixHierarchy"],\n                        prefix_format="prefixFormat",\n                        prefix_type="prefixType"\n                    ),\n                    preserve_source_data_typing=False\n                )\n            ),\n            salesforce=appflow.CfnFlow.SalesforceDestinationPropertiesProperty(\n                object="object",\n\n                # the properties below are optional\n                data_transfer_api="dataTransferApi",\n                error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                    bucket_name="bucketName",\n                    bucket_prefix="bucketPrefix",\n                    fail_on_first_error=False\n                ),\n                id_field_names=["idFieldNames"],\n                write_operation_type="writeOperationType"\n            ),\n            sapo_data=appflow.CfnFlow.SAPODataDestinationPropertiesProperty(\n                object_path="objectPath",\n\n                # the properties below are optional\n                error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                    bucket_name="bucketName",\n                    bucket_prefix="bucketPrefix",\n                    fail_on_first_error=False\n                ),\n                id_field_names=["idFieldNames"],\n                success_response_handling_config=appflow.CfnFlow.SuccessResponseHandlingConfigProperty(\n                    bucket_name="bucketName",\n                    bucket_prefix="bucketPrefix"\n                ),\n                write_operation_type="writeOperationType"\n            ),\n            snowflake=appflow.CfnFlow.SnowflakeDestinationPropertiesProperty(\n                intermediate_bucket_name="intermediateBucketName",\n                object="object",\n\n                # the properties below are optional\n                bucket_prefix="bucketPrefix",\n                error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                    bucket_name="bucketName",\n                    bucket_prefix="bucketPrefix",\n                    fail_on_first_error=False\n                )\n            ),\n            upsolver=appflow.CfnFlow.UpsolverDestinationPropertiesProperty(\n                bucket_name="bucketName",\n                s3_output_format_config=appflow.CfnFlow.UpsolverS3OutputFormatConfigProperty(\n                    prefix_config=appflow.CfnFlow.PrefixConfigProperty(\n                        path_prefix_hierarchy=["pathPrefixHierarchy"],\n                        prefix_format="prefixFormat",\n                        prefix_type="prefixType"\n                    ),\n\n                    # the properties below are optional\n                    aggregation_config=appflow.CfnFlow.AggregationConfigProperty(\n                        aggregation_type="aggregationType",\n                        target_file_size=123\n                    ),\n                    file_type="fileType"\n                ),\n\n                # the properties below are optional\n                bucket_prefix="bucketPrefix"\n            ),\n            zendesk=appflow.CfnFlow.ZendeskDestinationPropertiesProperty(\n                object="object",\n\n                # the properties below are optional\n                error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                    bucket_name="bucketName",\n                    bucket_prefix="bucketPrefix",\n                    fail_on_first_error=False\n                ),\n                id_field_names=["idFieldNames"],\n                write_operation_type="writeOperationType"\n            )\n        ),\n\n        # the properties below are optional\n        api_version="apiVersion",\n        connector_profile_name="connectorProfileName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['connector_type', 'destination_connector_properties', 'api_version', 'connector_profile_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.DestinationFlowConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.DynatraceSourcePropertiesProperty
class CfnFlow_DynatraceSourcePropertiesPropertyDef(BaseStruct):
    object: str = pydantic.Field(..., description='The object specified in the Dynatrace flow source.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-dynatracesourceproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    dynatrace_source_properties_property = appflow.CfnFlow.DynatraceSourcePropertiesProperty(\n        object="object"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.DynatraceSourcePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.ErrorHandlingConfigProperty
class CfnFlow_ErrorHandlingConfigPropertyDef(BaseStruct):
    bucket_name: typing.Optional[str] = pydantic.Field(None, description='Specifies the name of the Amazon S3 bucket.\n')
    bucket_prefix: typing.Optional[str] = pydantic.Field(None, description='Specifies the Amazon S3 bucket prefix.\n')
    fail_on_first_error: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Specifies if the flow should fail after the first instance of a failure when attempting to place data in the destination.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-errorhandlingconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    error_handling_config_property = appflow.CfnFlow.ErrorHandlingConfigProperty(\n        bucket_name="bucketName",\n        bucket_prefix="bucketPrefix",\n        fail_on_first_error=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket_name', 'bucket_prefix', 'fail_on_first_error']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.ErrorHandlingConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.EventBridgeDestinationPropertiesProperty
class CfnFlow_EventBridgeDestinationPropertiesPropertyDef(BaseStruct):
    object: str = pydantic.Field(..., description='The object specified in the Amazon EventBridge flow destination.\n')
    error_handling_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ErrorHandlingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The object specified in the Amplitude flow source.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-eventbridgedestinationproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    event_bridge_destination_properties_property = appflow.CfnFlow.EventBridgeDestinationPropertiesProperty(\n        object="object",\n\n        # the properties below are optional\n        error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n            bucket_name="bucketName",\n            bucket_prefix="bucketPrefix",\n            fail_on_first_error=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object', 'error_handling_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.EventBridgeDestinationPropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.GlueDataCatalogProperty
class CfnFlow_GlueDataCatalogPropertyDef(BaseStruct):
    database_name: str = pydantic.Field(..., description='``CfnFlow.GlueDataCatalogProperty.DatabaseName``.')
    role_arn: str = pydantic.Field(..., description='``CfnFlow.GlueDataCatalogProperty.RoleArn``.\n')
    table_prefix: str = pydantic.Field(..., description='``CfnFlow.GlueDataCatalogProperty.TablePrefix``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-gluedatacatalog.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    glue_data_catalog_property = appflow.CfnFlow.GlueDataCatalogProperty(\n        database_name="databaseName",\n        role_arn="roleArn",\n        table_prefix="tablePrefix"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['database_name', 'role_arn', 'table_prefix']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.GlueDataCatalogProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.GoogleAnalyticsSourcePropertiesProperty
class CfnFlow_GoogleAnalyticsSourcePropertiesPropertyDef(BaseStruct):
    object: str = pydantic.Field(..., description='The object specified in the Google Analytics flow source.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-googleanalyticssourceproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    google_analytics_source_properties_property = appflow.CfnFlow.GoogleAnalyticsSourcePropertiesProperty(\n        object="object"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.GoogleAnalyticsSourcePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.IncrementalPullConfigProperty
class CfnFlow_IncrementalPullConfigPropertyDef(BaseStruct):
    datetime_type_field_name: typing.Optional[str] = pydantic.Field(None, description='A field that specifies the date time or timestamp field as the criteria to use when importing incremental records from the source.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-incrementalpullconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    incremental_pull_config_property = appflow.CfnFlow.IncrementalPullConfigProperty(\n        datetime_type_field_name="datetimeTypeFieldName"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['datetime_type_field_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.IncrementalPullConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.InforNexusSourcePropertiesProperty
class CfnFlow_InforNexusSourcePropertiesPropertyDef(BaseStruct):
    object: str = pydantic.Field(..., description='The object specified in the Infor Nexus flow source.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-infornexussourceproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    infor_nexus_source_properties_property = appflow.CfnFlow.InforNexusSourcePropertiesProperty(\n        object="object"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.InforNexusSourcePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.LookoutMetricsDestinationPropertiesProperty
class CfnFlow_LookoutMetricsDestinationPropertiesPropertyDef(BaseStruct):
    object: typing.Optional[str] = pydantic.Field(None, description='The object specified in the Amazon Lookout for Metrics flow destination.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-lookoutmetricsdestinationproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    lookout_metrics_destination_properties_property = appflow.CfnFlow.LookoutMetricsDestinationPropertiesProperty(\n        object="object"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.LookoutMetricsDestinationPropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.MarketoDestinationPropertiesProperty
class CfnFlow_MarketoDestinationPropertiesPropertyDef(BaseStruct):
    object: str = pydantic.Field(..., description='The object specified in the Marketo flow destination.\n')
    error_handling_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ErrorHandlingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. ``ErrorHandlingConfig`` is a part of the destination connector details.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-marketodestinationproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    marketo_destination_properties_property = appflow.CfnFlow.MarketoDestinationPropertiesProperty(\n        object="object",\n\n        # the properties below are optional\n        error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n            bucket_name="bucketName",\n            bucket_prefix="bucketPrefix",\n            fail_on_first_error=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object', 'error_handling_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.MarketoDestinationPropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.MarketoSourcePropertiesProperty
class CfnFlow_MarketoSourcePropertiesPropertyDef(BaseStruct):
    object: str = pydantic.Field(..., description='The object specified in the Marketo flow source.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-marketosourceproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    marketo_source_properties_property = appflow.CfnFlow.MarketoSourcePropertiesProperty(\n        object="object"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.MarketoSourcePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.MetadataCatalogConfigProperty
class CfnFlow_MetadataCatalogConfigPropertyDef(BaseStruct):
    glue_data_catalog: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_GlueDataCatalogPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnFlow.MetadataCatalogConfigProperty.GlueDataCatalog``.')
    _init_params: typing.ClassVar[list[str]] = ['glue_data_catalog']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.MetadataCatalogConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.PardotSourcePropertiesProperty
class CfnFlow_PardotSourcePropertiesPropertyDef(BaseStruct):
    object: str = pydantic.Field(..., description='``CfnFlow.PardotSourcePropertiesProperty.Object``.')
    _init_params: typing.ClassVar[list[str]] = ['object']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.PardotSourcePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.PrefixConfigProperty
class CfnFlow_PrefixConfigPropertyDef(BaseStruct):
    path_prefix_hierarchy: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='``CfnFlow.PrefixConfigProperty.PathPrefixHierarchy``.\n')
    prefix_format: typing.Optional[str] = pydantic.Field(None, description="Determines the level of granularity for the date and time that's included in the prefix.\n")
    prefix_type: typing.Optional[str] = pydantic.Field(None, description='Determines the format of the prefix, and whether it applies to the file name, file path, or both.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-prefixconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    prefix_config_property = appflow.CfnFlow.PrefixConfigProperty(\n        path_prefix_hierarchy=["pathPrefixHierarchy"],\n        prefix_format="prefixFormat",\n        prefix_type="prefixType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['path_prefix_hierarchy', 'prefix_format', 'prefix_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.PrefixConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.RedshiftDestinationPropertiesProperty
class CfnFlow_RedshiftDestinationPropertiesPropertyDef(BaseStruct):
    intermediate_bucket_name: str = pydantic.Field(..., description='The intermediate bucket that Amazon AppFlow uses when moving data into Amazon Redshift.\n')
    object: str = pydantic.Field(..., description='The object specified in the Amazon Redshift flow destination.\n')
    bucket_prefix: typing.Optional[str] = pydantic.Field(None, description='The object key for the bucket in which Amazon AppFlow places the destination files.\n')
    error_handling_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ErrorHandlingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The settings that determine how Amazon AppFlow handles an error when placing data in the Amazon Redshift destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. ``ErrorHandlingConfig`` is a part of the destination connector details.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-redshiftdestinationproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    redshift_destination_properties_property = appflow.CfnFlow.RedshiftDestinationPropertiesProperty(\n        intermediate_bucket_name="intermediateBucketName",\n        object="object",\n\n        # the properties below are optional\n        bucket_prefix="bucketPrefix",\n        error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n            bucket_name="bucketName",\n            bucket_prefix="bucketPrefix",\n            fail_on_first_error=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['intermediate_bucket_name', 'object', 'bucket_prefix', 'error_handling_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.RedshiftDestinationPropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.S3DestinationPropertiesProperty
class CfnFlow_S3DestinationPropertiesPropertyDef(BaseStruct):
    bucket_name: str = pydantic.Field(..., description='The Amazon S3 bucket name in which Amazon AppFlow places the transferred data.\n')
    bucket_prefix: typing.Optional[str] = pydantic.Field(None, description='The object key for the destination bucket in which Amazon AppFlow places the files.\n')
    s3_output_format_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_S3OutputFormatConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The configuration that determines how Amazon AppFlow should format the flow output data when Amazon S3 is used as the destination.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-s3destinationproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    s3_destination_properties_property = appflow.CfnFlow.S3DestinationPropertiesProperty(\n        bucket_name="bucketName",\n\n        # the properties below are optional\n        bucket_prefix="bucketPrefix",\n        s3_output_format_config=appflow.CfnFlow.S3OutputFormatConfigProperty(\n            aggregation_config=appflow.CfnFlow.AggregationConfigProperty(\n                aggregation_type="aggregationType",\n                target_file_size=123\n            ),\n            file_type="fileType",\n            prefix_config=appflow.CfnFlow.PrefixConfigProperty(\n                path_prefix_hierarchy=["pathPrefixHierarchy"],\n                prefix_format="prefixFormat",\n                prefix_type="prefixType"\n            ),\n            preserve_source_data_typing=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket_name', 'bucket_prefix', 's3_output_format_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.S3DestinationPropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.S3InputFormatConfigProperty
class CfnFlow_S3InputFormatConfigPropertyDef(BaseStruct):
    s3_input_file_type: typing.Optional[str] = pydantic.Field(None, description='The file type that Amazon AppFlow gets from your Amazon S3 bucket.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-s3inputformatconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    s3_input_format_config_property = appflow.CfnFlow.S3InputFormatConfigProperty(\n        s3_input_file_type="s3InputFileType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['s3_input_file_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.S3InputFormatConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.S3OutputFormatConfigProperty
class CfnFlow_S3OutputFormatConfigPropertyDef(BaseStruct):
    aggregation_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_AggregationConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The aggregation settings that you can use to customize the output format of your flow data.\n')
    file_type: typing.Optional[str] = pydantic.Field(None, description='Indicates the file type that Amazon AppFlow places in the Amazon S3 bucket.\n')
    prefix_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_PrefixConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Determines the prefix that Amazon AppFlow applies to the folder name in the Amazon S3 bucket. You can name folders according to the flow frequency and date.\n')
    preserve_source_data_typing: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='``CfnFlow.S3OutputFormatConfigProperty.PreserveSourceDataTyping``.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-s3outputformatconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    s3_output_format_config_property = appflow.CfnFlow.S3OutputFormatConfigProperty(\n        aggregation_config=appflow.CfnFlow.AggregationConfigProperty(\n            aggregation_type="aggregationType",\n            target_file_size=123\n        ),\n        file_type="fileType",\n        prefix_config=appflow.CfnFlow.PrefixConfigProperty(\n            path_prefix_hierarchy=["pathPrefixHierarchy"],\n            prefix_format="prefixFormat",\n            prefix_type="prefixType"\n        ),\n        preserve_source_data_typing=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['aggregation_config', 'file_type', 'prefix_config', 'preserve_source_data_typing']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.S3OutputFormatConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.S3SourcePropertiesProperty
class CfnFlow_S3SourcePropertiesPropertyDef(BaseStruct):
    bucket_name: str = pydantic.Field(..., description='The Amazon S3 bucket name where the source files are stored.\n')
    bucket_prefix: str = pydantic.Field(..., description='The object key for the Amazon S3 bucket in which the source files are stored.\n')
    s3_input_format_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_S3InputFormatConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='When you use Amazon S3 as the source, the configuration format that you provide the flow input data.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-s3sourceproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    s3_source_properties_property = appflow.CfnFlow.S3SourcePropertiesProperty(\n        bucket_name="bucketName",\n        bucket_prefix="bucketPrefix",\n\n        # the properties below are optional\n        s3_input_format_config=appflow.CfnFlow.S3InputFormatConfigProperty(\n            s3_input_file_type="s3InputFileType"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket_name', 'bucket_prefix', 's3_input_format_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.S3SourcePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.SalesforceDestinationPropertiesProperty
class CfnFlow_SalesforceDestinationPropertiesPropertyDef(BaseStruct):
    object: str = pydantic.Field(..., description='The object specified in the Salesforce flow destination.\n')
    data_transfer_api: typing.Optional[str] = pydantic.Field(None, description="Specifies which Salesforce API is used by Amazon AppFlow when your flow transfers data to Salesforce. - **AUTOMATIC** - The default. Amazon AppFlow selects which API to use based on the number of records that your flow transfers to Salesforce. If your flow transfers fewer than 1,000 records, Amazon AppFlow uses Salesforce REST API. If your flow transfers 1,000 records or more, Amazon AppFlow uses Salesforce Bulk API 2.0. Each of these Salesforce APIs structures data differently. If Amazon AppFlow selects the API automatically, be aware that, for recurring flows, the data output might vary from one flow run to the next. For example, if a flow runs daily, it might use REST API on one day to transfer 900 records, and it might use Bulk API 2.0 on the next day to transfer 1,100 records. For each of these flow runs, the respective Salesforce API formats the data differently. Some of the differences include how dates are formatted and null values are represented. Also, Bulk API 2.0 doesn't transfer Salesforce compound fields. By choosing this option, you optimize flow performance for both small and large data transfers, but the tradeoff is inconsistent formatting in the output. - **BULKV2** - Amazon AppFlow uses only Salesforce Bulk API 2.0. This API runs asynchronous data transfers, and it's optimal for large sets of data. By choosing this option, you ensure that your flow writes consistent output, but you optimize performance only for large data transfers. Note that Bulk API 2.0 does not transfer Salesforce compound fields. - **REST_SYNC** - Amazon AppFlow uses only Salesforce REST API. By choosing this option, you ensure that your flow writes consistent output, but you decrease performance for large data transfers that are better suited for Bulk API 2.0. In some cases, if your flow attempts to transfer a vary large set of data, it might fail with a timed out error.\n")
    error_handling_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ErrorHandlingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The settings that determine how Amazon AppFlow handles an error when placing data in the Salesforce destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. ``ErrorHandlingConfig`` is a part of the destination connector details.\n')
    id_field_names: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='The name of the field that Amazon AppFlow uses as an ID when performing a write operation such as update or delete.\n')
    write_operation_type: typing.Optional[str] = pydantic.Field(None, description='This specifies the type of write operation to be performed in Salesforce. When the value is ``UPSERT`` , then ``idFieldNames`` is required.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-salesforcedestinationproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    salesforce_destination_properties_property = appflow.CfnFlow.SalesforceDestinationPropertiesProperty(\n        object="object",\n\n        # the properties below are optional\n        data_transfer_api="dataTransferApi",\n        error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n            bucket_name="bucketName",\n            bucket_prefix="bucketPrefix",\n            fail_on_first_error=False\n        ),\n        id_field_names=["idFieldNames"],\n        write_operation_type="writeOperationType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object', 'data_transfer_api', 'error_handling_config', 'id_field_names', 'write_operation_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.SalesforceDestinationPropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.SalesforceSourcePropertiesProperty
class CfnFlow_SalesforceSourcePropertiesPropertyDef(BaseStruct):
    object: str = pydantic.Field(..., description='The object specified in the Salesforce flow source.\n')
    data_transfer_api: typing.Optional[str] = pydantic.Field(None, description="Specifies which Salesforce API is used by Amazon AppFlow when your flow transfers data from Salesforce. - **AUTOMATIC** - The default. Amazon AppFlow selects which API to use based on the number of records that your flow transfers from Salesforce. If your flow transfers fewer than 1,000,000 records, Amazon AppFlow uses Salesforce REST API. If your flow transfers 1,000,000 records or more, Amazon AppFlow uses Salesforce Bulk API 2.0. Each of these Salesforce APIs structures data differently. If Amazon AppFlow selects the API automatically, be aware that, for recurring flows, the data output might vary from one flow run to the next. For example, if a flow runs daily, it might use REST API on one day to transfer 900,000 records, and it might use Bulk API 2.0 on the next day to transfer 1,100,000 records. For each of these flow runs, the respective Salesforce API formats the data differently. Some of the differences include how dates are formatted and null values are represented. Also, Bulk API 2.0 doesn't transfer Salesforce compound fields. By choosing this option, you optimize flow performance for both small and large data transfers, but the tradeoff is inconsistent formatting in the output. - **BULKV2** - Amazon AppFlow uses only Salesforce Bulk API 2.0. This API runs asynchronous data transfers, and it's optimal for large sets of data. By choosing this option, you ensure that your flow writes consistent output, but you optimize performance only for large data transfers. Note that Bulk API 2.0 does not transfer Salesforce compound fields. - **REST_SYNC** - Amazon AppFlow uses only Salesforce REST API. By choosing this option, you ensure that your flow writes consistent output, but you decrease performance for large data transfers that are better suited for Bulk API 2.0. In some cases, if your flow attempts to transfer a vary large set of data, it might fail wituh a timed out error.\n")
    enable_dynamic_field_update: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='The flag that enables dynamic fetching of new (recently added) fields in the Salesforce objects while running a flow.\n')
    include_deleted_records: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Indicates whether Amazon AppFlow includes deleted files in the flow run.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-salesforcesourceproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    salesforce_source_properties_property = appflow.CfnFlow.SalesforceSourcePropertiesProperty(\n        object="object",\n\n        # the properties below are optional\n        data_transfer_api="dataTransferApi",\n        enable_dynamic_field_update=False,\n        include_deleted_records=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object', 'data_transfer_api', 'enable_dynamic_field_update', 'include_deleted_records']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.SalesforceSourcePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.SAPODataDestinationPropertiesProperty
class CfnFlow_SAPODataDestinationPropertiesPropertyDef(BaseStruct):
    object_path: str = pydantic.Field(..., description='The object path specified in the SAPOData flow destination.\n')
    error_handling_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ErrorHandlingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. ``ErrorHandlingConfig`` is a part of the destination connector details.\n')
    id_field_names: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of field names that can be used as an ID field when performing a write operation.\n')
    success_response_handling_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_SuccessResponseHandlingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Determines how Amazon AppFlow handles the success response that it gets from the connector after placing data. For example, this setting would determine where to write the response from a destination connector upon a successful insert operation.\n')
    write_operation_type: typing.Optional[str] = pydantic.Field(None, description='The possible write operations in the destination connector. When this value is not provided, this defaults to the ``INSERT`` operation.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-sapodatadestinationproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    s_aPOData_destination_properties_property = appflow.CfnFlow.SAPODataDestinationPropertiesProperty(\n        object_path="objectPath",\n\n        # the properties below are optional\n        error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n            bucket_name="bucketName",\n            bucket_prefix="bucketPrefix",\n            fail_on_first_error=False\n        ),\n        id_field_names=["idFieldNames"],\n        success_response_handling_config=appflow.CfnFlow.SuccessResponseHandlingConfigProperty(\n            bucket_name="bucketName",\n            bucket_prefix="bucketPrefix"\n        ),\n        write_operation_type="writeOperationType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object_path', 'error_handling_config', 'id_field_names', 'success_response_handling_config', 'write_operation_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.SAPODataDestinationPropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.SAPODataSourcePropertiesProperty
class CfnFlow_SAPODataSourcePropertiesPropertyDef(BaseStruct):
    object_path: str = pydantic.Field(..., description='The object path specified in the SAPOData flow source.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-sapodatasourceproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    s_aPOData_source_properties_property = appflow.CfnFlow.SAPODataSourcePropertiesProperty(\n        object_path="objectPath"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.SAPODataSourcePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.ScheduledTriggerPropertiesProperty
class CfnFlow_ScheduledTriggerPropertiesPropertyDef(BaseStruct):
    schedule_expression: str = pydantic.Field(..., description='The scheduling expression that determines the rate at which the schedule will run, for example ``rate(5minutes)`` .\n')
    data_pull_mode: typing.Optional[str] = pydantic.Field(None, description='Specifies whether a scheduled flow has an incremental data transfer or a complete data transfer for each flow run.\n')
    first_execution_from: typing.Union[int, float, None] = pydantic.Field(None, description='Specifies the date range for the records to import from the connector in the first flow run.\n')
    flow_error_deactivation_threshold: typing.Union[int, float, None] = pydantic.Field(None, description='``CfnFlow.ScheduledTriggerPropertiesProperty.FlowErrorDeactivationThreshold``.\n')
    schedule_end_time: typing.Union[int, float, None] = pydantic.Field(None, description='The time at which the scheduled flow ends. The time is formatted as a timestamp that follows the ISO 8601 standard, such as ``2022-04-27T13:00:00-07:00`` .\n')
    schedule_offset: typing.Union[int, float, None] = pydantic.Field(None, description='Specifies the optional offset that is added to the time interval for a schedule-triggered flow.\n')
    schedule_start_time: typing.Union[int, float, None] = pydantic.Field(None, description='The time at which the scheduled flow starts. The time is formatted as a timestamp that follows the ISO 8601 standard, such as ``2022-04-26T13:00:00-07:00`` .\n')
    time_zone: typing.Optional[str] = pydantic.Field(None, description='Specifies the time zone used when referring to the dates and times of a scheduled flow, such as ``America/New_York`` . This time zone is only a descriptive label. It doesn\'t affect how Amazon AppFlow interprets the timestamps that you specify to schedule the flow. If you want to schedule a flow by using times in a particular time zone, indicate the time zone as a UTC offset in your timestamps. For example, the UTC offsets for the ``America/New_York`` timezone are ``-04:00`` EDT and ``-05:00 EST`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-scheduledtriggerproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    scheduled_trigger_properties_property = appflow.CfnFlow.ScheduledTriggerPropertiesProperty(\n        schedule_expression="scheduleExpression",\n\n        # the properties below are optional\n        data_pull_mode="dataPullMode",\n        first_execution_from=123,\n        flow_error_deactivation_threshold=123,\n        schedule_end_time=123,\n        schedule_offset=123,\n        schedule_start_time=123,\n        time_zone="timeZone"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['schedule_expression', 'data_pull_mode', 'first_execution_from', 'flow_error_deactivation_threshold', 'schedule_end_time', 'schedule_offset', 'schedule_start_time', 'time_zone']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.ScheduledTriggerPropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.ServiceNowSourcePropertiesProperty
class CfnFlow_ServiceNowSourcePropertiesPropertyDef(BaseStruct):
    object: str = pydantic.Field(..., description='The object specified in the ServiceNow flow source.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-servicenowsourceproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    service_now_source_properties_property = appflow.CfnFlow.ServiceNowSourcePropertiesProperty(\n        object="object"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.ServiceNowSourcePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.SingularSourcePropertiesProperty
class CfnFlow_SingularSourcePropertiesPropertyDef(BaseStruct):
    object: str = pydantic.Field(..., description='The object specified in the Singular flow source.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-singularsourceproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    singular_source_properties_property = appflow.CfnFlow.SingularSourcePropertiesProperty(\n        object="object"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.SingularSourcePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.SlackSourcePropertiesProperty
class CfnFlow_SlackSourcePropertiesPropertyDef(BaseStruct):
    object: str = pydantic.Field(..., description='The object specified in the Slack flow source.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-slacksourceproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    slack_source_properties_property = appflow.CfnFlow.SlackSourcePropertiesProperty(\n        object="object"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.SlackSourcePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.SnowflakeDestinationPropertiesProperty
class CfnFlow_SnowflakeDestinationPropertiesPropertyDef(BaseStruct):
    intermediate_bucket_name: str = pydantic.Field(..., description='The intermediate bucket that Amazon AppFlow uses when moving data into Snowflake.\n')
    object: str = pydantic.Field(..., description='The object specified in the Snowflake flow destination.\n')
    bucket_prefix: typing.Optional[str] = pydantic.Field(None, description='The object key for the destination bucket in which Amazon AppFlow places the files.\n')
    error_handling_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ErrorHandlingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The settings that determine how Amazon AppFlow handles an error when placing data in the Snowflake destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. ``ErrorHandlingConfig`` is a part of the destination connector details.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-snowflakedestinationproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    snowflake_destination_properties_property = appflow.CfnFlow.SnowflakeDestinationPropertiesProperty(\n        intermediate_bucket_name="intermediateBucketName",\n        object="object",\n\n        # the properties below are optional\n        bucket_prefix="bucketPrefix",\n        error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n            bucket_name="bucketName",\n            bucket_prefix="bucketPrefix",\n            fail_on_first_error=False\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['intermediate_bucket_name', 'object', 'bucket_prefix', 'error_handling_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.SnowflakeDestinationPropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.SourceConnectorPropertiesProperty
class CfnFlow_SourceConnectorPropertiesPropertyDef(BaseStruct):
    amplitude: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_AmplitudeSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the information that is required for querying Amplitude.\n')
    custom_connector: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_CustomConnectorSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The properties that are applied when the custom connector is being used as a source.\n')
    datadog: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_DatadogSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the information that is required for querying Datadog.\n')
    dynatrace: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_DynatraceSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the information that is required for querying Dynatrace.\n')
    google_analytics: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_GoogleAnalyticsSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the information that is required for querying Google Analytics.\n')
    infor_nexus: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_InforNexusSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the information that is required for querying Infor Nexus.\n')
    marketo: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_MarketoSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the information that is required for querying Marketo.\n')
    pardot: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_PardotSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``CfnFlow.SourceConnectorPropertiesProperty.Pardot``.\n')
    s3: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_S3SourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the information that is required for querying Amazon S3.\n')
    salesforce: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_SalesforceSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the information that is required for querying Salesforce.\n')
    sapo_data: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_SAPODataSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The properties that are applied when using SAPOData as a flow source.\n')
    service_now: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ServiceNowSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the information that is required for querying ServiceNow.\n')
    singular: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_SingularSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the information that is required for querying Singular.\n')
    slack: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_SlackSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the information that is required for querying Slack.\n')
    trendmicro: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_TrendmicroSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the information that is required for querying Trend Micro.\n')
    veeva: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_VeevaSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the information that is required for querying Veeva.\n')
    zendesk: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ZendeskSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the information that is required for querying Zendesk.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-sourceconnectorproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    source_connector_properties_property = appflow.CfnFlow.SourceConnectorPropertiesProperty(\n        amplitude=appflow.CfnFlow.AmplitudeSourcePropertiesProperty(\n            object="object"\n        ),\n        custom_connector=appflow.CfnFlow.CustomConnectorSourcePropertiesProperty(\n            entity_name="entityName",\n\n            # the properties below are optional\n            custom_properties={\n                "custom_properties_key": "customProperties"\n            }\n        ),\n        datadog=appflow.CfnFlow.DatadogSourcePropertiesProperty(\n            object="object"\n        ),\n        dynatrace=appflow.CfnFlow.DynatraceSourcePropertiesProperty(\n            object="object"\n        ),\n        google_analytics=appflow.CfnFlow.GoogleAnalyticsSourcePropertiesProperty(\n            object="object"\n        ),\n        infor_nexus=appflow.CfnFlow.InforNexusSourcePropertiesProperty(\n            object="object"\n        ),\n        marketo=appflow.CfnFlow.MarketoSourcePropertiesProperty(\n            object="object"\n        ),\n        pardot=appflow.CfnFlow.PardotSourcePropertiesProperty(\n            object="object"\n        ),\n        s3=appflow.CfnFlow.S3SourcePropertiesProperty(\n            bucket_name="bucketName",\n            bucket_prefix="bucketPrefix",\n\n            # the properties below are optional\n            s3_input_format_config=appflow.CfnFlow.S3InputFormatConfigProperty(\n                s3_input_file_type="s3InputFileType"\n            )\n        ),\n        salesforce=appflow.CfnFlow.SalesforceSourcePropertiesProperty(\n            object="object",\n\n            # the properties below are optional\n            data_transfer_api="dataTransferApi",\n            enable_dynamic_field_update=False,\n            include_deleted_records=False\n        ),\n        sapo_data=appflow.CfnFlow.SAPODataSourcePropertiesProperty(\n            object_path="objectPath"\n        ),\n        service_now=appflow.CfnFlow.ServiceNowSourcePropertiesProperty(\n            object="object"\n        ),\n        singular=appflow.CfnFlow.SingularSourcePropertiesProperty(\n            object="object"\n        ),\n        slack=appflow.CfnFlow.SlackSourcePropertiesProperty(\n            object="object"\n        ),\n        trendmicro=appflow.CfnFlow.TrendmicroSourcePropertiesProperty(\n            object="object"\n        ),\n        veeva=appflow.CfnFlow.VeevaSourcePropertiesProperty(\n            object="object",\n\n            # the properties below are optional\n            document_type="documentType",\n            include_all_versions=False,\n            include_renditions=False,\n            include_source_files=False\n        ),\n        zendesk=appflow.CfnFlow.ZendeskSourcePropertiesProperty(\n            object="object"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['amplitude', 'custom_connector', 'datadog', 'dynatrace', 'google_analytics', 'infor_nexus', 'marketo', 'pardot', 's3', 'salesforce', 'sapo_data', 'service_now', 'singular', 'slack', 'trendmicro', 'veeva', 'zendesk']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.SourceConnectorPropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.SourceFlowConfigProperty
class CfnFlow_SourceFlowConfigPropertyDef(BaseStruct):
    connector_type: str = pydantic.Field(..., description='The type of connector, such as Salesforce, Amplitude, and so on.\n')
    source_connector_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_SourceConnectorPropertiesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Specifies the information that is required to query a particular source connector.\n')
    api_version: typing.Optional[str] = pydantic.Field(None, description="The API version of the connector when it's used as a source in the flow.\n")
    connector_profile_name: typing.Optional[str] = pydantic.Field(None, description='The name of the connector profile. This name must be unique for each connector profile in the AWS account .\n')
    incremental_pull_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_IncrementalPullConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Defines the configuration for a scheduled incremental data pull. If a valid configuration is provided, the fields specified in the configuration are used when querying for the incremental data pull.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-sourceflowconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    source_flow_config_property = appflow.CfnFlow.SourceFlowConfigProperty(\n        connector_type="connectorType",\n        source_connector_properties=appflow.CfnFlow.SourceConnectorPropertiesProperty(\n            amplitude=appflow.CfnFlow.AmplitudeSourcePropertiesProperty(\n                object="object"\n            ),\n            custom_connector=appflow.CfnFlow.CustomConnectorSourcePropertiesProperty(\n                entity_name="entityName",\n\n                # the properties below are optional\n                custom_properties={\n                    "custom_properties_key": "customProperties"\n                }\n            ),\n            datadog=appflow.CfnFlow.DatadogSourcePropertiesProperty(\n                object="object"\n            ),\n            dynatrace=appflow.CfnFlow.DynatraceSourcePropertiesProperty(\n                object="object"\n            ),\n            google_analytics=appflow.CfnFlow.GoogleAnalyticsSourcePropertiesProperty(\n                object="object"\n            ),\n            infor_nexus=appflow.CfnFlow.InforNexusSourcePropertiesProperty(\n                object="object"\n            ),\n            marketo=appflow.CfnFlow.MarketoSourcePropertiesProperty(\n                object="object"\n            ),\n            pardot=appflow.CfnFlow.PardotSourcePropertiesProperty(\n                object="object"\n            ),\n            s3=appflow.CfnFlow.S3SourcePropertiesProperty(\n                bucket_name="bucketName",\n                bucket_prefix="bucketPrefix",\n\n                # the properties below are optional\n                s3_input_format_config=appflow.CfnFlow.S3InputFormatConfigProperty(\n                    s3_input_file_type="s3InputFileType"\n                )\n            ),\n            salesforce=appflow.CfnFlow.SalesforceSourcePropertiesProperty(\n                object="object",\n\n                # the properties below are optional\n                data_transfer_api="dataTransferApi",\n                enable_dynamic_field_update=False,\n                include_deleted_records=False\n            ),\n            sapo_data=appflow.CfnFlow.SAPODataSourcePropertiesProperty(\n                object_path="objectPath"\n            ),\n            service_now=appflow.CfnFlow.ServiceNowSourcePropertiesProperty(\n                object="object"\n            ),\n            singular=appflow.CfnFlow.SingularSourcePropertiesProperty(\n                object="object"\n            ),\n            slack=appflow.CfnFlow.SlackSourcePropertiesProperty(\n                object="object"\n            ),\n            trendmicro=appflow.CfnFlow.TrendmicroSourcePropertiesProperty(\n                object="object"\n            ),\n            veeva=appflow.CfnFlow.VeevaSourcePropertiesProperty(\n                object="object",\n\n                # the properties below are optional\n                document_type="documentType",\n                include_all_versions=False,\n                include_renditions=False,\n                include_source_files=False\n            ),\n            zendesk=appflow.CfnFlow.ZendeskSourcePropertiesProperty(\n                object="object"\n            )\n        ),\n\n        # the properties below are optional\n        api_version="apiVersion",\n        connector_profile_name="connectorProfileName",\n        incremental_pull_config=appflow.CfnFlow.IncrementalPullConfigProperty(\n            datetime_type_field_name="datetimeTypeFieldName"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['connector_type', 'source_connector_properties', 'api_version', 'connector_profile_name', 'incremental_pull_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.SourceFlowConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.SuccessResponseHandlingConfigProperty
class CfnFlow_SuccessResponseHandlingConfigPropertyDef(BaseStruct):
    bucket_name: typing.Optional[str] = pydantic.Field(None, description='The name of the Amazon S3 bucket.\n')
    bucket_prefix: typing.Optional[str] = pydantic.Field(None, description='The Amazon S3 bucket prefix.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-successresponsehandlingconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    success_response_handling_config_property = appflow.CfnFlow.SuccessResponseHandlingConfigProperty(\n        bucket_name="bucketName",\n        bucket_prefix="bucketPrefix"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket_name', 'bucket_prefix']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.SuccessResponseHandlingConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.TaskPropertiesObjectProperty
class CfnFlow_TaskPropertiesObjectPropertyDef(BaseStruct):
    key: str = pydantic.Field(..., description='The task property key. *Allowed Values* : ``VALUE | VALUES | DATA_TYPE | UPPER_BOUND | LOWER_BOUND | SOURCE_DATA_TYPE | DESTINATION_DATA_TYPE | VALIDATION_ACTION | MASK_VALUE | MASK_LENGTH | TRUNCATE_LENGTH | MATH_OPERATION_FIELDS_ORDER | CONCAT_FORMAT | SUBFIELD_CATEGORY_MAP`` | ``EXCLUDE_SOURCE_FIELDS_LIST``\n')
    value: str = pydantic.Field(..., description='The task property value.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-taskpropertiesobject.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    task_properties_object_property = appflow.CfnFlow.TaskPropertiesObjectProperty(\n        key="key",\n        value="value"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['key', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.TaskPropertiesObjectProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.TaskProperty
class CfnFlow_TaskPropertyDef(BaseStruct):
    source_fields: typing.Sequence[str] = pydantic.Field(..., description='The source fields to which a particular task is applied.\n')
    task_type: str = pydantic.Field(..., description='Specifies the particular task implementation that Amazon AppFlow performs. *Allowed values* : ``Arithmetic`` | ``Filter`` | ``Map`` | ``Map_all`` | ``Mask`` | ``Merge`` | ``Truncate`` | ``Validate``\n')
    connector_operator: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ConnectorOperatorPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The operation to be performed on the provided source fields.\n')
    destination_field: typing.Optional[str] = pydantic.Field(None, description='A field in a destination connector, or a field value against which Amazon AppFlow validates a source field.\n')
    task_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_TaskPropertiesObjectPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='A map used to store task-related information. The execution service looks for particular information based on the ``TaskType`` .\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-task.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    task_property = appflow.CfnFlow.TaskProperty(\n        source_fields=["sourceFields"],\n        task_type="taskType",\n\n        # the properties below are optional\n        connector_operator=appflow.CfnFlow.ConnectorOperatorProperty(\n            amplitude="amplitude",\n            custom_connector="customConnector",\n            datadog="datadog",\n            dynatrace="dynatrace",\n            google_analytics="googleAnalytics",\n            infor_nexus="inforNexus",\n            marketo="marketo",\n            pardot="pardot",\n            s3="s3",\n            salesforce="salesforce",\n            sapo_data="sapoData",\n            service_now="serviceNow",\n            singular="singular",\n            slack="slack",\n            trendmicro="trendmicro",\n            veeva="veeva",\n            zendesk="zendesk"\n        ),\n        destination_field="destinationField",\n        task_properties=[appflow.CfnFlow.TaskPropertiesObjectProperty(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['source_fields', 'task_type', 'connector_operator', 'destination_field', 'task_properties']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.TaskProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.TrendmicroSourcePropertiesProperty
class CfnFlow_TrendmicroSourcePropertiesPropertyDef(BaseStruct):
    object: str = pydantic.Field(..., description='The object specified in the Trend Micro flow source.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-trendmicrosourceproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    trendmicro_source_properties_property = appflow.CfnFlow.TrendmicroSourcePropertiesProperty(\n        object="object"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.TrendmicroSourcePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.TriggerConfigProperty
class CfnFlow_TriggerConfigPropertyDef(BaseStruct):
    trigger_type: str = pydantic.Field(..., description='Specifies the type of flow trigger. This can be ``OnDemand`` , ``Scheduled`` , or ``Event`` .\n')
    trigger_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ScheduledTriggerPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Specifies the configuration details of a schedule-triggered flow as defined by the user. Currently, these settings only apply to the ``Scheduled`` trigger type.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-triggerconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    trigger_config_property = appflow.CfnFlow.TriggerConfigProperty(\n        trigger_type="triggerType",\n\n        # the properties below are optional\n        trigger_properties=appflow.CfnFlow.ScheduledTriggerPropertiesProperty(\n            schedule_expression="scheduleExpression",\n\n            # the properties below are optional\n            data_pull_mode="dataPullMode",\n            first_execution_from=123,\n            flow_error_deactivation_threshold=123,\n            schedule_end_time=123,\n            schedule_offset=123,\n            schedule_start_time=123,\n            time_zone="timeZone"\n        )\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['trigger_type', 'trigger_properties']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.TriggerConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.UpsolverDestinationPropertiesProperty
class CfnFlow_UpsolverDestinationPropertiesPropertyDef(BaseStruct):
    bucket_name: str = pydantic.Field(..., description='The Upsolver Amazon S3 bucket name in which Amazon AppFlow places the transferred data.\n')
    s3_output_format_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_UpsolverS3OutputFormatConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The configuration that determines how data is formatted when Upsolver is used as the flow destination.\n')
    bucket_prefix: typing.Optional[str] = pydantic.Field(None, description='The object key for the destination Upsolver Amazon S3 bucket in which Amazon AppFlow places the files.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-upsolverdestinationproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    upsolver_destination_properties_property = appflow.CfnFlow.UpsolverDestinationPropertiesProperty(\n        bucket_name="bucketName",\n        s3_output_format_config=appflow.CfnFlow.UpsolverS3OutputFormatConfigProperty(\n            prefix_config=appflow.CfnFlow.PrefixConfigProperty(\n                path_prefix_hierarchy=["pathPrefixHierarchy"],\n                prefix_format="prefixFormat",\n                prefix_type="prefixType"\n            ),\n\n            # the properties below are optional\n            aggregation_config=appflow.CfnFlow.AggregationConfigProperty(\n                aggregation_type="aggregationType",\n                target_file_size=123\n            ),\n            file_type="fileType"\n        ),\n\n        # the properties below are optional\n        bucket_prefix="bucketPrefix"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['bucket_name', 's3_output_format_config', 'bucket_prefix']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.UpsolverDestinationPropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.UpsolverS3OutputFormatConfigProperty
class CfnFlow_UpsolverS3OutputFormatConfigPropertyDef(BaseStruct):
    prefix_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_PrefixConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Specifies elements that Amazon AppFlow includes in the file and folder names in the flow destination.\n')
    aggregation_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_AggregationConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The aggregation settings that you can use to customize the output format of your flow data.\n')
    file_type: typing.Optional[str] = pydantic.Field(None, description='Indicates the file type that Amazon AppFlow places in the Upsolver Amazon S3 bucket.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-upsolvers3outputformatconfig.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    upsolver_s3_output_format_config_property = appflow.CfnFlow.UpsolverS3OutputFormatConfigProperty(\n        prefix_config=appflow.CfnFlow.PrefixConfigProperty(\n            path_prefix_hierarchy=["pathPrefixHierarchy"],\n            prefix_format="prefixFormat",\n            prefix_type="prefixType"\n        ),\n\n        # the properties below are optional\n        aggregation_config=appflow.CfnFlow.AggregationConfigProperty(\n            aggregation_type="aggregationType",\n            target_file_size=123\n        ),\n        file_type="fileType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['prefix_config', 'aggregation_config', 'file_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.UpsolverS3OutputFormatConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.VeevaSourcePropertiesProperty
class CfnFlow_VeevaSourcePropertiesPropertyDef(BaseStruct):
    object: str = pydantic.Field(..., description='The object specified in the Veeva flow source.\n')
    document_type: typing.Optional[str] = pydantic.Field(None, description='The document type specified in the Veeva document extract flow.\n')
    include_all_versions: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Boolean value to include All Versions of files in Veeva document extract flow.\n')
    include_renditions: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Boolean value to include file renditions in Veeva document extract flow.\n')
    include_source_files: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='Boolean value to include source files in Veeva document extract flow.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-veevasourceproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    veeva_source_properties_property = appflow.CfnFlow.VeevaSourcePropertiesProperty(\n        object="object",\n\n        # the properties below are optional\n        document_type="documentType",\n        include_all_versions=False,\n        include_renditions=False,\n        include_source_files=False\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object', 'document_type', 'include_all_versions', 'include_renditions', 'include_source_files']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.VeevaSourcePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.ZendeskDestinationPropertiesProperty
class CfnFlow_ZendeskDestinationPropertiesPropertyDef(BaseStruct):
    object: str = pydantic.Field(..., description='The object specified in the Zendesk flow destination.\n')
    error_handling_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ErrorHandlingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='The settings that determine how Amazon AppFlow handles an error when placing data in the destination. For example, this setting would determine if the flow should fail after one insertion error, or continue and attempt to insert every record regardless of the initial failure. ``ErrorHandlingConfig`` is a part of the destination connector details.\n')
    id_field_names: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='A list of field names that can be used as an ID field when performing a write operation.\n')
    write_operation_type: typing.Optional[str] = pydantic.Field(None, description='The possible write operations in the destination connector. When this value is not provided, this defaults to the ``INSERT`` operation.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-zendeskdestinationproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    zendesk_destination_properties_property = appflow.CfnFlow.ZendeskDestinationPropertiesProperty(\n        object="object",\n\n        # the properties below are optional\n        error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n            bucket_name="bucketName",\n            bucket_prefix="bucketPrefix",\n            fail_on_first_error=False\n        ),\n        id_field_names=["idFieldNames"],\n        write_operation_type="writeOperationType"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object', 'error_handling_config', 'id_field_names', 'write_operation_type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.ZendeskDestinationPropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlow.ZendeskSourcePropertiesProperty
class CfnFlow_ZendeskSourcePropertiesPropertyDef(BaseStruct):
    object: str = pydantic.Field(..., description='The object specified in the Zendesk flow source.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appflow-flow-zendesksourceproperties.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    zendesk_source_properties_property = appflow.CfnFlow.ZendeskSourcePropertiesProperty(\n        object="object"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['object']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow.ZendeskSourcePropertiesProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnector
class CfnConnectorDef(BaseCfnResource):
    connector_provisioning_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnector_ConnectorProvisioningConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The configuration required for registering the connector.\n')
    connector_provisioning_type: str = pydantic.Field(..., description='The provisioning type used to register the connector.\n')
    connector_label: typing.Optional[str] = pydantic.Field(None, description='The label used for registering the connector.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description about the connector runtime setting.')
    _init_params: typing.ClassVar[list[str]] = ['connector_provisioning_config', 'connector_provisioning_type', 'connector_label', 'description']
    _method_names: typing.ClassVar[list[str]] = ['ConnectorProvisioningConfigProperty', 'LambdaConnectorProvisioningConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnector'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnConnectorDefConfig] = pydantic.Field(None)


class CfnConnectorDefConfig(pydantic.BaseModel):
    ConnectorProvisioningConfigProperty: typing.Optional[list[CfnConnectorDefConnectorprovisioningconfigpropertyParams]] = pydantic.Field(None, description='')
    LambdaConnectorProvisioningConfigProperty: typing.Optional[list[CfnConnectorDefLambdaconnectorprovisioningconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnConnectorDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnConnectorDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnConnectorDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnConnectorDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnConnectorDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnConnectorDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnConnectorDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnConnectorDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnConnectorDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnConnectorDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnConnectorDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnConnectorDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnConnectorDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnConnectorDefConnectorprovisioningconfigpropertyParams(pydantic.BaseModel):
    lambda_: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnector_LambdaConnectorProvisioningConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnConnectorDefLambdaconnectorprovisioningconfigpropertyParams(pydantic.BaseModel):
    lambda_arn: str = pydantic.Field(..., description='')
    ...

class CfnConnectorDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnConnectorDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnConnectorDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnConnectorDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnConnectorDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnConnectorDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnConnectorDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnConnectorDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnConnectorDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnConnectorDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnConnectorDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnConnectorDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnConnectorDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnConnectorDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfile
class CfnConnectorProfileDef(BaseCfnResource):
    connection_mode: str = pydantic.Field(..., description='Indicates the connection mode and if it is public or private.\n')
    connector_profile_name: str = pydantic.Field(..., description='The name of the connector profile. The name is unique for each ``ConnectorProfile`` in the AWS account .\n')
    connector_type: str = pydantic.Field(..., description='The type of connector, such as Salesforce, Amplitude, and so on.\n')
    connector_label: typing.Optional[str] = pydantic.Field(None, description='The label for the connector profile being created.\n')
    connector_profile_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorProfileConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Defines the connector-specific configuration and credentials.\n')
    kms_arn: typing.Optional[str] = pydantic.Field(None, description="The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.")
    _init_params: typing.ClassVar[list[str]] = ['connection_mode', 'connector_profile_name', 'connector_type', 'connector_label', 'connector_profile_config', 'kms_arn']
    _method_names: typing.ClassVar[list[str]] = ['AmplitudeConnectorProfileCredentialsProperty', 'ApiKeyCredentialsProperty', 'BasicAuthCredentialsProperty', 'ConnectorOAuthRequestProperty', 'ConnectorProfileConfigProperty', 'ConnectorProfileCredentialsProperty', 'ConnectorProfilePropertiesProperty', 'CustomAuthCredentialsProperty', 'CustomConnectorProfileCredentialsProperty', 'CustomConnectorProfilePropertiesProperty', 'DatadogConnectorProfileCredentialsProperty', 'DatadogConnectorProfilePropertiesProperty', 'DynatraceConnectorProfileCredentialsProperty', 'DynatraceConnectorProfilePropertiesProperty', 'GoogleAnalyticsConnectorProfileCredentialsProperty', 'InforNexusConnectorProfileCredentialsProperty', 'InforNexusConnectorProfilePropertiesProperty', 'MarketoConnectorProfileCredentialsProperty', 'MarketoConnectorProfilePropertiesProperty', 'OAuth2CredentialsProperty', 'OAuth2PropertiesProperty', 'OAuthCredentialsProperty', 'OAuthPropertiesProperty', 'PardotConnectorProfileCredentialsProperty', 'PardotConnectorProfilePropertiesProperty', 'RedshiftConnectorProfileCredentialsProperty', 'RedshiftConnectorProfilePropertiesProperty', 'SAPODataConnectorProfileCredentialsProperty', 'SAPODataConnectorProfilePropertiesProperty', 'SalesforceConnectorProfileCredentialsProperty', 'SalesforceConnectorProfilePropertiesProperty', 'ServiceNowConnectorProfileCredentialsProperty', 'ServiceNowConnectorProfilePropertiesProperty', 'SingularConnectorProfileCredentialsProperty', 'SlackConnectorProfileCredentialsProperty', 'SlackConnectorProfilePropertiesProperty', 'SnowflakeConnectorProfileCredentialsProperty', 'SnowflakeConnectorProfilePropertiesProperty', 'TrendmicroConnectorProfileCredentialsProperty', 'VeevaConnectorProfileCredentialsProperty', 'VeevaConnectorProfilePropertiesProperty', 'ZendeskConnectorProfileCredentialsProperty', 'ZendeskConnectorProfilePropertiesProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfile'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnConnectorProfileDefConfig] = pydantic.Field(None)


class CfnConnectorProfileDefConfig(pydantic.BaseModel):
    AmplitudeConnectorProfileCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefAmplitudeconnectorprofilecredentialspropertyParams]] = pydantic.Field(None, description='')
    ApiKeyCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefApikeycredentialspropertyParams]] = pydantic.Field(None, description='')
    BasicAuthCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefBasicauthcredentialspropertyParams]] = pydantic.Field(None, description='')
    ConnectorOAuthRequestProperty: typing.Optional[list[CfnConnectorProfileDefConnectoroauthrequestpropertyParams]] = pydantic.Field(None, description='')
    ConnectorProfileConfigProperty: typing.Optional[list[CfnConnectorProfileDefConnectorprofileconfigpropertyParams]] = pydantic.Field(None, description='')
    ConnectorProfileCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefConnectorprofilecredentialspropertyParams]] = pydantic.Field(None, description='')
    ConnectorProfilePropertiesProperty: typing.Optional[list[CfnConnectorProfileDefConnectorprofilepropertiespropertyParams]] = pydantic.Field(None, description='')
    CustomAuthCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefCustomauthcredentialspropertyParams]] = pydantic.Field(None, description='')
    CustomConnectorProfileCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefCustomconnectorprofilecredentialspropertyParams]] = pydantic.Field(None, description='')
    CustomConnectorProfilePropertiesProperty: typing.Optional[list[CfnConnectorProfileDefCustomconnectorprofilepropertiespropertyParams]] = pydantic.Field(None, description='')
    DatadogConnectorProfileCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefDatadogconnectorprofilecredentialspropertyParams]] = pydantic.Field(None, description='')
    DatadogConnectorProfilePropertiesProperty: typing.Optional[list[CfnConnectorProfileDefDatadogconnectorprofilepropertiespropertyParams]] = pydantic.Field(None, description='')
    DynatraceConnectorProfileCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefDynatraceconnectorprofilecredentialspropertyParams]] = pydantic.Field(None, description='')
    DynatraceConnectorProfilePropertiesProperty: typing.Optional[list[CfnConnectorProfileDefDynatraceconnectorprofilepropertiespropertyParams]] = pydantic.Field(None, description='')
    GoogleAnalyticsConnectorProfileCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefGoogleanalyticsconnectorprofilecredentialspropertyParams]] = pydantic.Field(None, description='')
    InforNexusConnectorProfileCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefInfornexusconnectorprofilecredentialspropertyParams]] = pydantic.Field(None, description='')
    InforNexusConnectorProfilePropertiesProperty: typing.Optional[list[CfnConnectorProfileDefInfornexusconnectorprofilepropertiespropertyParams]] = pydantic.Field(None, description='')
    MarketoConnectorProfileCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefMarketoconnectorprofilecredentialspropertyParams]] = pydantic.Field(None, description='')
    MarketoConnectorProfilePropertiesProperty: typing.Optional[list[CfnConnectorProfileDefMarketoconnectorprofilepropertiespropertyParams]] = pydantic.Field(None, description='')
    OAuth2CredentialsProperty: typing.Optional[list[CfnConnectorProfileDefOauth2CredentialspropertyParams]] = pydantic.Field(None, description='')
    OAuth2PropertiesProperty: typing.Optional[list[CfnConnectorProfileDefOauth2PropertiespropertyParams]] = pydantic.Field(None, description='')
    OAuthCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefOauthcredentialspropertyParams]] = pydantic.Field(None, description='')
    OAuthPropertiesProperty: typing.Optional[list[CfnConnectorProfileDefOauthpropertiespropertyParams]] = pydantic.Field(None, description='')
    PardotConnectorProfileCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefPardotconnectorprofilecredentialspropertyParams]] = pydantic.Field(None, description='')
    PardotConnectorProfilePropertiesProperty: typing.Optional[list[CfnConnectorProfileDefPardotconnectorprofilepropertiespropertyParams]] = pydantic.Field(None, description='')
    RedshiftConnectorProfileCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefRedshiftconnectorprofilecredentialspropertyParams]] = pydantic.Field(None, description='')
    RedshiftConnectorProfilePropertiesProperty: typing.Optional[list[CfnConnectorProfileDefRedshiftconnectorprofilepropertiespropertyParams]] = pydantic.Field(None, description='')
    SAPODataConnectorProfileCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefSapodataconnectorprofilecredentialspropertyParams]] = pydantic.Field(None, description='')
    SAPODataConnectorProfilePropertiesProperty: typing.Optional[list[CfnConnectorProfileDefSapodataconnectorprofilepropertiespropertyParams]] = pydantic.Field(None, description='')
    SalesforceConnectorProfileCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefSalesforceconnectorprofilecredentialspropertyParams]] = pydantic.Field(None, description='')
    SalesforceConnectorProfilePropertiesProperty: typing.Optional[list[CfnConnectorProfileDefSalesforceconnectorprofilepropertiespropertyParams]] = pydantic.Field(None, description='')
    ServiceNowConnectorProfileCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefServicenowconnectorprofilecredentialspropertyParams]] = pydantic.Field(None, description='')
    ServiceNowConnectorProfilePropertiesProperty: typing.Optional[list[CfnConnectorProfileDefServicenowconnectorprofilepropertiespropertyParams]] = pydantic.Field(None, description='')
    SingularConnectorProfileCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefSingularconnectorprofilecredentialspropertyParams]] = pydantic.Field(None, description='')
    SlackConnectorProfileCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefSlackconnectorprofilecredentialspropertyParams]] = pydantic.Field(None, description='')
    SlackConnectorProfilePropertiesProperty: typing.Optional[list[CfnConnectorProfileDefSlackconnectorprofilepropertiespropertyParams]] = pydantic.Field(None, description='')
    SnowflakeConnectorProfileCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefSnowflakeconnectorprofilecredentialspropertyParams]] = pydantic.Field(None, description='')
    SnowflakeConnectorProfilePropertiesProperty: typing.Optional[list[CfnConnectorProfileDefSnowflakeconnectorprofilepropertiespropertyParams]] = pydantic.Field(None, description='')
    TrendmicroConnectorProfileCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefTrendmicroconnectorprofilecredentialspropertyParams]] = pydantic.Field(None, description='')
    VeevaConnectorProfileCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefVeevaconnectorprofilecredentialspropertyParams]] = pydantic.Field(None, description='')
    VeevaConnectorProfilePropertiesProperty: typing.Optional[list[CfnConnectorProfileDefVeevaconnectorprofilepropertiespropertyParams]] = pydantic.Field(None, description='')
    ZendeskConnectorProfileCredentialsProperty: typing.Optional[list[CfnConnectorProfileDefZendeskconnectorprofilecredentialspropertyParams]] = pydantic.Field(None, description='')
    ZendeskConnectorProfilePropertiesProperty: typing.Optional[list[CfnConnectorProfileDefZendeskconnectorprofilepropertiespropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnConnectorProfileDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnConnectorProfileDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnConnectorProfileDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnConnectorProfileDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnConnectorProfileDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnConnectorProfileDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnConnectorProfileDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnConnectorProfileDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnConnectorProfileDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnConnectorProfileDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnConnectorProfileDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnConnectorProfileDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnConnectorProfileDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnConnectorProfileDefAmplitudeconnectorprofilecredentialspropertyParams(pydantic.BaseModel):
    api_key: str = pydantic.Field(..., description='')
    secret_key: str = pydantic.Field(..., description='')
    ...

class CfnConnectorProfileDefApikeycredentialspropertyParams(pydantic.BaseModel):
    api_key: str = pydantic.Field(..., description='')
    api_secret_key: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefBasicauthcredentialspropertyParams(pydantic.BaseModel):
    password: str = pydantic.Field(..., description='')
    username: str = pydantic.Field(..., description='')
    ...

class CfnConnectorProfileDefConnectoroauthrequestpropertyParams(pydantic.BaseModel):
    auth_code: typing.Optional[str] = pydantic.Field(None, description='')
    redirect_uri: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefConnectorprofileconfigpropertyParams(pydantic.BaseModel):
    connector_profile_credentials: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    connector_profile_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefConnectorprofilecredentialspropertyParams(pydantic.BaseModel):
    amplitude: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_AmplitudeConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    custom_connector: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_CustomConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    datadog: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_DatadogConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    dynatrace: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_DynatraceConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    google_analytics: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_GoogleAnalyticsConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    infor_nexus: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_InforNexusConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    marketo: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_MarketoConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    pardot: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_PardotConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    redshift: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_RedshiftConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    salesforce: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_SalesforceConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sapo_data: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_SAPODataConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    service_now: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ServiceNowConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    singular: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_SingularConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    slack: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_SlackConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    snowflake: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_SnowflakeConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    trendmicro: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_TrendmicroConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    veeva: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_VeevaConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    zendesk: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ZendeskConnectorProfileCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefConnectorprofilepropertiespropertyParams(pydantic.BaseModel):
    custom_connector: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_CustomConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    datadog: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_DatadogConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    dynatrace: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_DynatraceConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    infor_nexus: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_InforNexusConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    marketo: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_MarketoConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    pardot: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_PardotConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    redshift: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_RedshiftConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    salesforce: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_SalesforceConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sapo_data: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_SAPODataConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    service_now: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ServiceNowConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    slack: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_SlackConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    snowflake: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_SnowflakeConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    veeva: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_VeevaConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    zendesk: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ZendeskConnectorProfilePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefCustomauthcredentialspropertyParams(pydantic.BaseModel):
    custom_authentication_type: str = pydantic.Field(..., description='')
    credentials_map: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefCustomconnectorprofilecredentialspropertyParams(pydantic.BaseModel):
    authentication_type: str = pydantic.Field(..., description='')
    api_key: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ApiKeyCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    basic: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_BasicAuthCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    custom: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_CustomAuthCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    oauth2: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_OAuth2CredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefCustomconnectorprofilepropertiespropertyParams(pydantic.BaseModel):
    o_auth2_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_OAuth2PropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    profile_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefDatadogconnectorprofilecredentialspropertyParams(pydantic.BaseModel):
    api_key: str = pydantic.Field(..., description='')
    application_key: str = pydantic.Field(..., description='')
    ...

class CfnConnectorProfileDefDatadogconnectorprofilepropertiespropertyParams(pydantic.BaseModel):
    instance_url: str = pydantic.Field(..., description='')
    ...

class CfnConnectorProfileDefDynatraceconnectorprofilecredentialspropertyParams(pydantic.BaseModel):
    api_token: str = pydantic.Field(..., description='')
    ...

class CfnConnectorProfileDefDynatraceconnectorprofilepropertiespropertyParams(pydantic.BaseModel):
    instance_url: str = pydantic.Field(..., description='')
    ...

class CfnConnectorProfileDefGoogleanalyticsconnectorprofilecredentialspropertyParams(pydantic.BaseModel):
    client_id: str = pydantic.Field(..., description='')
    client_secret: str = pydantic.Field(..., description='')
    access_token: typing.Optional[str] = pydantic.Field(None, description='')
    connector_o_auth_request: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorOAuthRequestPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    refresh_token: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefInfornexusconnectorprofilecredentialspropertyParams(pydantic.BaseModel):
    access_key_id: str = pydantic.Field(..., description='')
    datakey: str = pydantic.Field(..., description='')
    secret_access_key: str = pydantic.Field(..., description='')
    user_id: str = pydantic.Field(..., description='')
    ...

class CfnConnectorProfileDefInfornexusconnectorprofilepropertiespropertyParams(pydantic.BaseModel):
    instance_url: str = pydantic.Field(..., description='')
    ...

class CfnConnectorProfileDefMarketoconnectorprofilecredentialspropertyParams(pydantic.BaseModel):
    client_id: str = pydantic.Field(..., description='')
    client_secret: str = pydantic.Field(..., description='')
    access_token: typing.Optional[str] = pydantic.Field(None, description='')
    connector_o_auth_request: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorOAuthRequestPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefMarketoconnectorprofilepropertiespropertyParams(pydantic.BaseModel):
    instance_url: str = pydantic.Field(..., description='')
    ...

class CfnConnectorProfileDefOauth2CredentialspropertyParams(pydantic.BaseModel):
    access_token: typing.Optional[str] = pydantic.Field(None, description='')
    client_id: typing.Optional[str] = pydantic.Field(None, description='')
    client_secret: typing.Optional[str] = pydantic.Field(None, description='')
    o_auth_request: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorOAuthRequestPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    refresh_token: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefOauth2PropertiespropertyParams(pydantic.BaseModel):
    o_auth2_grant_type: typing.Optional[str] = pydantic.Field(None, description='')
    token_url: typing.Optional[str] = pydantic.Field(None, description='')
    token_url_custom_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefOauthcredentialspropertyParams(pydantic.BaseModel):
    access_token: typing.Optional[str] = pydantic.Field(None, description='')
    client_id: typing.Optional[str] = pydantic.Field(None, description='')
    client_secret: typing.Optional[str] = pydantic.Field(None, description='')
    connector_o_auth_request: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorOAuthRequestPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    refresh_token: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefOauthpropertiespropertyParams(pydantic.BaseModel):
    auth_code_url: typing.Optional[str] = pydantic.Field(None, description='')
    o_auth_scopes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    token_url: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefPardotconnectorprofilecredentialspropertyParams(pydantic.BaseModel):
    access_token: typing.Optional[str] = pydantic.Field(None, description='')
    client_credentials_arn: typing.Optional[str] = pydantic.Field(None, description='')
    connector_o_auth_request: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorOAuthRequestPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    refresh_token: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefPardotconnectorprofilepropertiespropertyParams(pydantic.BaseModel):
    business_unit_id: str = pydantic.Field(..., description='')
    instance_url: typing.Optional[str] = pydantic.Field(None, description='')
    is_sandbox_environment: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefRedshiftconnectorprofilecredentialspropertyParams(pydantic.BaseModel):
    password: typing.Optional[str] = pydantic.Field(None, description='')
    username: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefRedshiftconnectorprofilepropertiespropertyParams(pydantic.BaseModel):
    bucket_name: str = pydantic.Field(..., description='')
    role_arn: str = pydantic.Field(..., description='')
    bucket_prefix: typing.Optional[str] = pydantic.Field(None, description='')
    cluster_identifier: typing.Optional[str] = pydantic.Field(None, description='')
    data_api_role_arn: typing.Optional[str] = pydantic.Field(None, description='')
    database_name: typing.Optional[str] = pydantic.Field(None, description='')
    database_url: typing.Optional[str] = pydantic.Field(None, description='')
    is_redshift_serverless: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    workgroup_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefSapodataconnectorprofilecredentialspropertyParams(pydantic.BaseModel):
    basic_auth_credentials: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_BasicAuthCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    o_auth_credentials: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_OAuthCredentialsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefSapodataconnectorprofilepropertiespropertyParams(pydantic.BaseModel):
    application_host_url: typing.Optional[str] = pydantic.Field(None, description='')
    application_service_path: typing.Optional[str] = pydantic.Field(None, description='')
    client_number: typing.Optional[str] = pydantic.Field(None, description='')
    logon_language: typing.Optional[str] = pydantic.Field(None, description='')
    o_auth_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_OAuthPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    port_number: typing.Union[int, float, None] = pydantic.Field(None, description='')
    private_link_service_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefSalesforceconnectorprofilecredentialspropertyParams(pydantic.BaseModel):
    access_token: typing.Optional[str] = pydantic.Field(None, description='')
    client_credentials_arn: typing.Optional[str] = pydantic.Field(None, description='')
    connector_o_auth_request: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorOAuthRequestPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    jwt_token: typing.Optional[str] = pydantic.Field(None, description='')
    o_auth2_grant_type: typing.Optional[str] = pydantic.Field(None, description='')
    refresh_token: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefSalesforceconnectorprofilepropertiespropertyParams(pydantic.BaseModel):
    instance_url: typing.Optional[str] = pydantic.Field(None, description='')
    is_sandbox_environment: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    use_private_link_for_metadata_and_authorization: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefServicenowconnectorprofilecredentialspropertyParams(pydantic.BaseModel):
    password: str = pydantic.Field(..., description='')
    username: str = pydantic.Field(..., description='')
    ...

class CfnConnectorProfileDefServicenowconnectorprofilepropertiespropertyParams(pydantic.BaseModel):
    instance_url: str = pydantic.Field(..., description='')
    ...

class CfnConnectorProfileDefSingularconnectorprofilecredentialspropertyParams(pydantic.BaseModel):
    api_key: str = pydantic.Field(..., description='')
    ...

class CfnConnectorProfileDefSlackconnectorprofilecredentialspropertyParams(pydantic.BaseModel):
    client_id: str = pydantic.Field(..., description='')
    client_secret: str = pydantic.Field(..., description='')
    access_token: typing.Optional[str] = pydantic.Field(None, description='')
    connector_o_auth_request: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorOAuthRequestPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefSlackconnectorprofilepropertiespropertyParams(pydantic.BaseModel):
    instance_url: str = pydantic.Field(..., description='')
    ...

class CfnConnectorProfileDefSnowflakeconnectorprofilecredentialspropertyParams(pydantic.BaseModel):
    password: str = pydantic.Field(..., description='')
    username: str = pydantic.Field(..., description='')
    ...

class CfnConnectorProfileDefSnowflakeconnectorprofilepropertiespropertyParams(pydantic.BaseModel):
    bucket_name: str = pydantic.Field(..., description='')
    stage: str = pydantic.Field(..., description='')
    warehouse: str = pydantic.Field(..., description='')
    account_name: typing.Optional[str] = pydantic.Field(None, description='')
    bucket_prefix: typing.Optional[str] = pydantic.Field(None, description='')
    private_link_service_name: typing.Optional[str] = pydantic.Field(None, description='')
    region: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefTrendmicroconnectorprofilecredentialspropertyParams(pydantic.BaseModel):
    api_secret_key: str = pydantic.Field(..., description='')
    ...

class CfnConnectorProfileDefVeevaconnectorprofilecredentialspropertyParams(pydantic.BaseModel):
    password: str = pydantic.Field(..., description='')
    username: str = pydantic.Field(..., description='')
    ...

class CfnConnectorProfileDefVeevaconnectorprofilepropertiespropertyParams(pydantic.BaseModel):
    instance_url: str = pydantic.Field(..., description='')
    ...

class CfnConnectorProfileDefZendeskconnectorprofilecredentialspropertyParams(pydantic.BaseModel):
    client_id: str = pydantic.Field(..., description='')
    client_secret: str = pydantic.Field(..., description='')
    access_token: typing.Optional[str] = pydantic.Field(None, description='')
    connector_o_auth_request: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorOAuthRequestPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnConnectorProfileDefZendeskconnectorprofilepropertiespropertyParams(pydantic.BaseModel):
    instance_url: str = pydantic.Field(..., description='')
    ...

class CfnConnectorProfileDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnConnectorProfileDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnConnectorProfileDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnConnectorProfileDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnConnectorProfileDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnConnectorProfileDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnConnectorProfileDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnConnectorProfileDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnConnectorProfileDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnConnectorProfileDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnConnectorProfileDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnConnectorProfileDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnConnectorProfileDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnConnectorProfileDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_appflow.CfnFlow
class CfnFlowDef(BaseCfnResource):
    destination_flow_config_list: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_DestinationFlowConfigPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The configuration that controls how Amazon AppFlow places data in the destination connector.\n')
    flow_name: str = pydantic.Field(..., description='The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only.\n')
    source_flow_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_SourceFlowConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Contains information about the configuration of the source connector used in the flow.\n')
    tasks: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_TaskPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='A list of tasks that Amazon AppFlow performs while transferring the data in the flow run.\n')
    trigger_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_TriggerConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The trigger settings that determine how and when Amazon AppFlow runs the specified flow.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A user-entered description of the flow.\n')
    flow_status: typing.Optional[str] = pydantic.Field(None, description='Sets the status of the flow. You can specify one of the following values:. - **Active** - The flow runs based on the trigger settings that you defined. Active scheduled flows run as scheduled, and active event-triggered flows run when the specified change event occurs. However, active on-demand flows run only when you manually start them by using Amazon AppFlow. - **Suspended** - You can use this option to deactivate an active flow. Scheduled and event-triggered flows will cease to run until you reactive them. This value only affects scheduled and event-triggered flows. It has no effect for on-demand flows. If you omit the FlowStatus parameter, Amazon AppFlow creates the flow with a default status. The default status for on-demand flows is Active. The default status for scheduled and event-triggered flows is Draft, which means they’re not yet active.\n')
    kms_arn: typing.Optional[str] = pydantic.Field(None, description="The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.\n")
    metadata_catalog_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_MetadataCatalogConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::AppFlow::Flow.MetadataCatalogConfig``.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags used to organize, track, or control access for your flow.')
    _init_params: typing.ClassVar[list[str]] = ['destination_flow_config_list', 'flow_name', 'source_flow_config', 'tasks', 'trigger_config', 'description', 'flow_status', 'kms_arn', 'metadata_catalog_config', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AggregationConfigProperty', 'AmplitudeSourcePropertiesProperty', 'ConnectorOperatorProperty', 'CustomConnectorDestinationPropertiesProperty', 'CustomConnectorSourcePropertiesProperty', 'DatadogSourcePropertiesProperty', 'DestinationConnectorPropertiesProperty', 'DestinationFlowConfigProperty', 'DynatraceSourcePropertiesProperty', 'ErrorHandlingConfigProperty', 'EventBridgeDestinationPropertiesProperty', 'GlueDataCatalogProperty', 'GoogleAnalyticsSourcePropertiesProperty', 'IncrementalPullConfigProperty', 'InforNexusSourcePropertiesProperty', 'LookoutMetricsDestinationPropertiesProperty', 'MarketoDestinationPropertiesProperty', 'MarketoSourcePropertiesProperty', 'MetadataCatalogConfigProperty', 'PardotSourcePropertiesProperty', 'PrefixConfigProperty', 'RedshiftDestinationPropertiesProperty', 'S3DestinationPropertiesProperty', 'S3InputFormatConfigProperty', 'S3OutputFormatConfigProperty', 'S3SourcePropertiesProperty', 'SAPODataDestinationPropertiesProperty', 'SAPODataSourcePropertiesProperty', 'SalesforceDestinationPropertiesProperty', 'SalesforceSourcePropertiesProperty', 'ScheduledTriggerPropertiesProperty', 'ServiceNowSourcePropertiesProperty', 'SingularSourcePropertiesProperty', 'SlackSourcePropertiesProperty', 'SnowflakeDestinationPropertiesProperty', 'SourceConnectorPropertiesProperty', 'SourceFlowConfigProperty', 'SuccessResponseHandlingConfigProperty', 'TaskPropertiesObjectProperty', 'TaskProperty', 'TrendmicroSourcePropertiesProperty', 'TriggerConfigProperty', 'UpsolverDestinationPropertiesProperty', 'UpsolverS3OutputFormatConfigProperty', 'VeevaSourcePropertiesProperty', 'ZendeskDestinationPropertiesProperty', 'ZendeskSourcePropertiesProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlow'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[CfnFlowDefConfig] = pydantic.Field(None)


class CfnFlowDefConfig(pydantic.BaseModel):
    AggregationConfigProperty: typing.Optional[list[CfnFlowDefAggregationconfigpropertyParams]] = pydantic.Field(None, description='')
    AmplitudeSourcePropertiesProperty: typing.Optional[list[CfnFlowDefAmplitudesourcepropertiespropertyParams]] = pydantic.Field(None, description='')
    ConnectorOperatorProperty: typing.Optional[list[CfnFlowDefConnectoroperatorpropertyParams]] = pydantic.Field(None, description='')
    CustomConnectorDestinationPropertiesProperty: typing.Optional[list[CfnFlowDefCustomconnectordestinationpropertiespropertyParams]] = pydantic.Field(None, description='')
    CustomConnectorSourcePropertiesProperty: typing.Optional[list[CfnFlowDefCustomconnectorsourcepropertiespropertyParams]] = pydantic.Field(None, description='')
    DatadogSourcePropertiesProperty: typing.Optional[list[CfnFlowDefDatadogsourcepropertiespropertyParams]] = pydantic.Field(None, description='')
    DestinationConnectorPropertiesProperty: typing.Optional[list[CfnFlowDefDestinationconnectorpropertiespropertyParams]] = pydantic.Field(None, description='')
    DestinationFlowConfigProperty: typing.Optional[list[CfnFlowDefDestinationflowconfigpropertyParams]] = pydantic.Field(None, description='')
    DynatraceSourcePropertiesProperty: typing.Optional[list[CfnFlowDefDynatracesourcepropertiespropertyParams]] = pydantic.Field(None, description='')
    ErrorHandlingConfigProperty: typing.Optional[list[CfnFlowDefErrorhandlingconfigpropertyParams]] = pydantic.Field(None, description='')
    EventBridgeDestinationPropertiesProperty: typing.Optional[list[CfnFlowDefEventbridgedestinationpropertiespropertyParams]] = pydantic.Field(None, description='')
    GlueDataCatalogProperty: typing.Optional[list[CfnFlowDefGluedatacatalogpropertyParams]] = pydantic.Field(None, description='')
    GoogleAnalyticsSourcePropertiesProperty: typing.Optional[list[CfnFlowDefGoogleanalyticssourcepropertiespropertyParams]] = pydantic.Field(None, description='')
    IncrementalPullConfigProperty: typing.Optional[list[CfnFlowDefIncrementalpullconfigpropertyParams]] = pydantic.Field(None, description='')
    InforNexusSourcePropertiesProperty: typing.Optional[list[CfnFlowDefInfornexussourcepropertiespropertyParams]] = pydantic.Field(None, description='')
    LookoutMetricsDestinationPropertiesProperty: typing.Optional[list[CfnFlowDefLookoutmetricsdestinationpropertiespropertyParams]] = pydantic.Field(None, description='')
    MarketoDestinationPropertiesProperty: typing.Optional[list[CfnFlowDefMarketodestinationpropertiespropertyParams]] = pydantic.Field(None, description='')
    MarketoSourcePropertiesProperty: typing.Optional[list[CfnFlowDefMarketosourcepropertiespropertyParams]] = pydantic.Field(None, description='')
    MetadataCatalogConfigProperty: typing.Optional[list[CfnFlowDefMetadatacatalogconfigpropertyParams]] = pydantic.Field(None, description='')
    PardotSourcePropertiesProperty: typing.Optional[list[CfnFlowDefPardotsourcepropertiespropertyParams]] = pydantic.Field(None, description='')
    PrefixConfigProperty: typing.Optional[list[CfnFlowDefPrefixconfigpropertyParams]] = pydantic.Field(None, description='')
    RedshiftDestinationPropertiesProperty: typing.Optional[list[CfnFlowDefRedshiftdestinationpropertiespropertyParams]] = pydantic.Field(None, description='')
    S3DestinationPropertiesProperty: typing.Optional[list[CfnFlowDefS3DestinationpropertiespropertyParams]] = pydantic.Field(None, description='')
    S3InputFormatConfigProperty: typing.Optional[list[CfnFlowDefS3InputformatconfigpropertyParams]] = pydantic.Field(None, description='')
    S3OutputFormatConfigProperty: typing.Optional[list[CfnFlowDefS3OutputformatconfigpropertyParams]] = pydantic.Field(None, description='')
    S3SourcePropertiesProperty: typing.Optional[list[CfnFlowDefS3SourcepropertiespropertyParams]] = pydantic.Field(None, description='')
    SAPODataDestinationPropertiesProperty: typing.Optional[list[CfnFlowDefSapodatadestinationpropertiespropertyParams]] = pydantic.Field(None, description='')
    SAPODataSourcePropertiesProperty: typing.Optional[list[CfnFlowDefSapodatasourcepropertiespropertyParams]] = pydantic.Field(None, description='')
    SalesforceDestinationPropertiesProperty: typing.Optional[list[CfnFlowDefSalesforcedestinationpropertiespropertyParams]] = pydantic.Field(None, description='')
    SalesforceSourcePropertiesProperty: typing.Optional[list[CfnFlowDefSalesforcesourcepropertiespropertyParams]] = pydantic.Field(None, description='')
    ScheduledTriggerPropertiesProperty: typing.Optional[list[CfnFlowDefScheduledtriggerpropertiespropertyParams]] = pydantic.Field(None, description='')
    ServiceNowSourcePropertiesProperty: typing.Optional[list[CfnFlowDefServicenowsourcepropertiespropertyParams]] = pydantic.Field(None, description='')
    SingularSourcePropertiesProperty: typing.Optional[list[CfnFlowDefSingularsourcepropertiespropertyParams]] = pydantic.Field(None, description='')
    SlackSourcePropertiesProperty: typing.Optional[list[CfnFlowDefSlacksourcepropertiespropertyParams]] = pydantic.Field(None, description='')
    SnowflakeDestinationPropertiesProperty: typing.Optional[list[CfnFlowDefSnowflakedestinationpropertiespropertyParams]] = pydantic.Field(None, description='')
    SourceConnectorPropertiesProperty: typing.Optional[list[CfnFlowDefSourceconnectorpropertiespropertyParams]] = pydantic.Field(None, description='')
    SourceFlowConfigProperty: typing.Optional[list[CfnFlowDefSourceflowconfigpropertyParams]] = pydantic.Field(None, description='')
    SuccessResponseHandlingConfigProperty: typing.Optional[list[CfnFlowDefSuccessresponsehandlingconfigpropertyParams]] = pydantic.Field(None, description='')
    TaskPropertiesObjectProperty: typing.Optional[list[CfnFlowDefTaskpropertiesobjectpropertyParams]] = pydantic.Field(None, description='')
    TaskProperty: typing.Optional[list[CfnFlowDefTaskpropertyParams]] = pydantic.Field(None, description='')
    TrendmicroSourcePropertiesProperty: typing.Optional[list[CfnFlowDefTrendmicrosourcepropertiespropertyParams]] = pydantic.Field(None, description='')
    TriggerConfigProperty: typing.Optional[list[CfnFlowDefTriggerconfigpropertyParams]] = pydantic.Field(None, description='')
    UpsolverDestinationPropertiesProperty: typing.Optional[list[CfnFlowDefUpsolverdestinationpropertiespropertyParams]] = pydantic.Field(None, description='')
    UpsolverS3OutputFormatConfigProperty: typing.Optional[list[CfnFlowDefUpsolvers3OutputformatconfigpropertyParams]] = pydantic.Field(None, description='')
    VeevaSourcePropertiesProperty: typing.Optional[list[CfnFlowDefVeevasourcepropertiespropertyParams]] = pydantic.Field(None, description='')
    ZendeskDestinationPropertiesProperty: typing.Optional[list[CfnFlowDefZendeskdestinationpropertiespropertyParams]] = pydantic.Field(None, description='')
    ZendeskSourcePropertiesProperty: typing.Optional[list[CfnFlowDefZendesksourcepropertiespropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[CfnFlowDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[CfnFlowDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[CfnFlowDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[CfnFlowDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[CfnFlowDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[CfnFlowDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[CfnFlowDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[CfnFlowDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[CfnFlowDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[CfnFlowDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[CfnFlowDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[CfnFlowDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[CfnFlowDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnFlowDefAggregationconfigpropertyParams(pydantic.BaseModel):
    aggregation_type: typing.Optional[str] = pydantic.Field(None, description='')
    target_file_size: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnFlowDefAmplitudesourcepropertiespropertyParams(pydantic.BaseModel):
    object: str = pydantic.Field(..., description='')
    ...

class CfnFlowDefConnectoroperatorpropertyParams(pydantic.BaseModel):
    amplitude: typing.Optional[str] = pydantic.Field(None, description='')
    custom_connector: typing.Optional[str] = pydantic.Field(None, description='')
    datadog: typing.Optional[str] = pydantic.Field(None, description='')
    dynatrace: typing.Optional[str] = pydantic.Field(None, description='')
    google_analytics: typing.Optional[str] = pydantic.Field(None, description='')
    infor_nexus: typing.Optional[str] = pydantic.Field(None, description='')
    marketo: typing.Optional[str] = pydantic.Field(None, description='')
    pardot: typing.Optional[str] = pydantic.Field(None, description='')
    s3: typing.Optional[str] = pydantic.Field(None, description='')
    salesforce: typing.Optional[str] = pydantic.Field(None, description='')
    sapo_data: typing.Optional[str] = pydantic.Field(None, description='')
    service_now: typing.Optional[str] = pydantic.Field(None, description='')
    singular: typing.Optional[str] = pydantic.Field(None, description='')
    slack: typing.Optional[str] = pydantic.Field(None, description='')
    trendmicro: typing.Optional[str] = pydantic.Field(None, description='')
    veeva: typing.Optional[str] = pydantic.Field(None, description='')
    zendesk: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFlowDefCustomconnectordestinationpropertiespropertyParams(pydantic.BaseModel):
    entity_name: str = pydantic.Field(..., description='')
    custom_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    error_handling_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ErrorHandlingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    id_field_names: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    write_operation_type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFlowDefCustomconnectorsourcepropertiespropertyParams(pydantic.BaseModel):
    entity_name: str = pydantic.Field(..., description='')
    custom_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    ...

class CfnFlowDefDatadogsourcepropertiespropertyParams(pydantic.BaseModel):
    object: str = pydantic.Field(..., description='')
    ...

class CfnFlowDefDestinationconnectorpropertiespropertyParams(pydantic.BaseModel):
    custom_connector: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_CustomConnectorDestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    event_bridge: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_EventBridgeDestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    lookout_metrics: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_LookoutMetricsDestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    marketo: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_MarketoDestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    redshift: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_RedshiftDestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    s3: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_S3DestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    salesforce: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_SalesforceDestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sapo_data: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_SAPODataDestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    snowflake: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_SnowflakeDestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    upsolver: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_UpsolverDestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    zendesk: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ZendeskDestinationPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFlowDefDestinationflowconfigpropertyParams(pydantic.BaseModel):
    connector_type: str = pydantic.Field(..., description='')
    destination_connector_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_DestinationConnectorPropertiesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    api_version: typing.Optional[str] = pydantic.Field(None, description='')
    connector_profile_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFlowDefDynatracesourcepropertiespropertyParams(pydantic.BaseModel):
    object: str = pydantic.Field(..., description='')
    ...

class CfnFlowDefErrorhandlingconfigpropertyParams(pydantic.BaseModel):
    bucket_name: typing.Optional[str] = pydantic.Field(None, description='')
    bucket_prefix: typing.Optional[str] = pydantic.Field(None, description='')
    fail_on_first_error: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnFlowDefEventbridgedestinationpropertiespropertyParams(pydantic.BaseModel):
    object: str = pydantic.Field(..., description='')
    error_handling_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ErrorHandlingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFlowDefGluedatacatalogpropertyParams(pydantic.BaseModel):
    database_name: str = pydantic.Field(..., description='')
    role_arn: str = pydantic.Field(..., description='')
    table_prefix: str = pydantic.Field(..., description='')
    ...

class CfnFlowDefGoogleanalyticssourcepropertiespropertyParams(pydantic.BaseModel):
    object: str = pydantic.Field(..., description='')
    ...

class CfnFlowDefIncrementalpullconfigpropertyParams(pydantic.BaseModel):
    datetime_type_field_name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFlowDefInfornexussourcepropertiespropertyParams(pydantic.BaseModel):
    object: str = pydantic.Field(..., description='')
    ...

class CfnFlowDefLookoutmetricsdestinationpropertiespropertyParams(pydantic.BaseModel):
    object: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFlowDefMarketodestinationpropertiespropertyParams(pydantic.BaseModel):
    object: str = pydantic.Field(..., description='')
    error_handling_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ErrorHandlingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFlowDefMarketosourcepropertiespropertyParams(pydantic.BaseModel):
    object: str = pydantic.Field(..., description='')
    ...

class CfnFlowDefMetadatacatalogconfigpropertyParams(pydantic.BaseModel):
    glue_data_catalog: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_GlueDataCatalogPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFlowDefPardotsourcepropertiespropertyParams(pydantic.BaseModel):
    object: str = pydantic.Field(..., description='')
    ...

class CfnFlowDefPrefixconfigpropertyParams(pydantic.BaseModel):
    path_prefix_hierarchy: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    prefix_format: typing.Optional[str] = pydantic.Field(None, description='')
    prefix_type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFlowDefRedshiftdestinationpropertiespropertyParams(pydantic.BaseModel):
    intermediate_bucket_name: str = pydantic.Field(..., description='')
    object: str = pydantic.Field(..., description='')
    bucket_prefix: typing.Optional[str] = pydantic.Field(None, description='')
    error_handling_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ErrorHandlingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFlowDefS3DestinationpropertiespropertyParams(pydantic.BaseModel):
    bucket_name: str = pydantic.Field(..., description='')
    bucket_prefix: typing.Optional[str] = pydantic.Field(None, description='')
    s3_output_format_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_S3OutputFormatConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFlowDefS3InputformatconfigpropertyParams(pydantic.BaseModel):
    s3_input_file_type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFlowDefS3OutputformatconfigpropertyParams(pydantic.BaseModel):
    aggregation_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_AggregationConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    file_type: typing.Optional[str] = pydantic.Field(None, description='')
    prefix_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_PrefixConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    preserve_source_data_typing: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnFlowDefS3SourcepropertiespropertyParams(pydantic.BaseModel):
    bucket_name: str = pydantic.Field(..., description='')
    bucket_prefix: str = pydantic.Field(..., description='')
    s3_input_format_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_S3InputFormatConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFlowDefSapodatadestinationpropertiespropertyParams(pydantic.BaseModel):
    object_path: str = pydantic.Field(..., description='')
    error_handling_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ErrorHandlingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    id_field_names: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    success_response_handling_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_SuccessResponseHandlingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    write_operation_type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFlowDefSapodatasourcepropertiespropertyParams(pydantic.BaseModel):
    object_path: str = pydantic.Field(..., description='')
    ...

class CfnFlowDefSalesforcedestinationpropertiespropertyParams(pydantic.BaseModel):
    object: str = pydantic.Field(..., description='')
    data_transfer_api: typing.Optional[str] = pydantic.Field(None, description='')
    error_handling_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ErrorHandlingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    id_field_names: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    write_operation_type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFlowDefSalesforcesourcepropertiespropertyParams(pydantic.BaseModel):
    object: str = pydantic.Field(..., description='')
    data_transfer_api: typing.Optional[str] = pydantic.Field(None, description='')
    enable_dynamic_field_update: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    include_deleted_records: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnFlowDefScheduledtriggerpropertiespropertyParams(pydantic.BaseModel):
    schedule_expression: str = pydantic.Field(..., description='')
    data_pull_mode: typing.Optional[str] = pydantic.Field(None, description='')
    first_execution_from: typing.Union[int, float, None] = pydantic.Field(None, description='')
    flow_error_deactivation_threshold: typing.Union[int, float, None] = pydantic.Field(None, description='')
    schedule_end_time: typing.Union[int, float, None] = pydantic.Field(None, description='')
    schedule_offset: typing.Union[int, float, None] = pydantic.Field(None, description='')
    schedule_start_time: typing.Union[int, float, None] = pydantic.Field(None, description='')
    time_zone: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFlowDefServicenowsourcepropertiespropertyParams(pydantic.BaseModel):
    object: str = pydantic.Field(..., description='')
    ...

class CfnFlowDefSingularsourcepropertiespropertyParams(pydantic.BaseModel):
    object: str = pydantic.Field(..., description='')
    ...

class CfnFlowDefSlacksourcepropertiespropertyParams(pydantic.BaseModel):
    object: str = pydantic.Field(..., description='')
    ...

class CfnFlowDefSnowflakedestinationpropertiespropertyParams(pydantic.BaseModel):
    intermediate_bucket_name: str = pydantic.Field(..., description='')
    object: str = pydantic.Field(..., description='')
    bucket_prefix: typing.Optional[str] = pydantic.Field(None, description='')
    error_handling_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ErrorHandlingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFlowDefSourceconnectorpropertiespropertyParams(pydantic.BaseModel):
    amplitude: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_AmplitudeSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    custom_connector: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_CustomConnectorSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    datadog: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_DatadogSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    dynatrace: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_DynatraceSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    google_analytics: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_GoogleAnalyticsSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    infor_nexus: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_InforNexusSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    marketo: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_MarketoSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    pardot: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_PardotSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    s3: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_S3SourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    salesforce: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_SalesforceSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sapo_data: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_SAPODataSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    service_now: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ServiceNowSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    singular: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_SingularSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    slack: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_SlackSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    trendmicro: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_TrendmicroSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    veeva: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_VeevaSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    zendesk: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ZendeskSourcePropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFlowDefSourceflowconfigpropertyParams(pydantic.BaseModel):
    connector_type: str = pydantic.Field(..., description='')
    source_connector_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_SourceConnectorPropertiesPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    api_version: typing.Optional[str] = pydantic.Field(None, description='')
    connector_profile_name: typing.Optional[str] = pydantic.Field(None, description='')
    incremental_pull_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_IncrementalPullConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFlowDefSuccessresponsehandlingconfigpropertyParams(pydantic.BaseModel):
    bucket_name: typing.Optional[str] = pydantic.Field(None, description='')
    bucket_prefix: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFlowDefTaskpropertiesobjectpropertyParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnFlowDefTaskpropertyParams(pydantic.BaseModel):
    source_fields: typing.Sequence[str] = pydantic.Field(..., description='')
    task_type: str = pydantic.Field(..., description='')
    connector_operator: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ConnectorOperatorPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    destination_field: typing.Optional[str] = pydantic.Field(None, description='')
    task_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_TaskPropertiesObjectPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    ...

class CfnFlowDefTrendmicrosourcepropertiespropertyParams(pydantic.BaseModel):
    object: str = pydantic.Field(..., description='')
    ...

class CfnFlowDefTriggerconfigpropertyParams(pydantic.BaseModel):
    trigger_type: str = pydantic.Field(..., description='')
    trigger_properties: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ScheduledTriggerPropertiesPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFlowDefUpsolverdestinationpropertiespropertyParams(pydantic.BaseModel):
    bucket_name: str = pydantic.Field(..., description='')
    s3_output_format_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_UpsolverS3OutputFormatConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    bucket_prefix: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFlowDefUpsolvers3OutputformatconfigpropertyParams(pydantic.BaseModel):
    prefix_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_PrefixConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    aggregation_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_AggregationConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    file_type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFlowDefVeevasourcepropertiespropertyParams(pydantic.BaseModel):
    object: str = pydantic.Field(..., description='')
    document_type: typing.Optional[str] = pydantic.Field(None, description='')
    include_all_versions: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    include_renditions: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    include_source_files: typing.Union[bool, typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], None] = pydantic.Field(None, description='')
    ...

class CfnFlowDefZendeskdestinationpropertiespropertyParams(pydantic.BaseModel):
    object: str = pydantic.Field(..., description='')
    error_handling_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_ErrorHandlingConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    id_field_names: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    write_operation_type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFlowDefZendesksourcepropertiespropertyParams(pydantic.BaseModel):
    object: str = pydantic.Field(..., description='')
    ...

class CfnFlowDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnFlowDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFlowDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnFlowDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFlowDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnFlowDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnFlowDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnFlowDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnFlowDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnFlowDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFlowDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='- tree inspector to collect and process attributes.')
    ...

class CfnFlowDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnFlowDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFlowDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProfileProps
class CfnConnectorProfilePropsDef(BaseCfnProperty):
    connection_mode: str = pydantic.Field(..., description='Indicates the connection mode and if it is public or private.\n')
    connector_profile_name: str = pydantic.Field(..., description='The name of the connector profile. The name is unique for each ``ConnectorProfile`` in the AWS account .\n')
    connector_type: str = pydantic.Field(..., description='The type of connector, such as Salesforce, Amplitude, and so on.\n')
    connector_label: typing.Optional[str] = pydantic.Field(None, description='The label for the connector profile being created.\n')
    connector_profile_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnectorProfile_ConnectorProfileConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='Defines the connector-specific configuration and credentials.\n')
    kms_arn: typing.Optional[str] = pydantic.Field(None, description='The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don\'t provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appflow-connectorprofile.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    cfn_connector_profile_props = appflow.CfnConnectorProfileProps(\n        connection_mode="connectionMode",\n        connector_profile_name="connectorProfileName",\n        connector_type="connectorType",\n\n        # the properties below are optional\n        connector_label="connectorLabel",\n        connector_profile_config=appflow.CfnConnectorProfile.ConnectorProfileConfigProperty(\n            connector_profile_credentials=appflow.CfnConnectorProfile.ConnectorProfileCredentialsProperty(\n                amplitude=appflow.CfnConnectorProfile.AmplitudeConnectorProfileCredentialsProperty(\n                    api_key="apiKey",\n                    secret_key="secretKey"\n                ),\n                custom_connector=appflow.CfnConnectorProfile.CustomConnectorProfileCredentialsProperty(\n                    authentication_type="authenticationType",\n\n                    # the properties below are optional\n                    api_key=appflow.CfnConnectorProfile.ApiKeyCredentialsProperty(\n                        api_key="apiKey",\n\n                        # the properties below are optional\n                        api_secret_key="apiSecretKey"\n                    ),\n                    basic=appflow.CfnConnectorProfile.BasicAuthCredentialsProperty(\n                        password="password",\n                        username="username"\n                    ),\n                    custom=appflow.CfnConnectorProfile.CustomAuthCredentialsProperty(\n                        custom_authentication_type="customAuthenticationType",\n\n                        # the properties below are optional\n                        credentials_map={\n                            "credentials_map_key": "credentialsMap"\n                        }\n                    ),\n                    oauth2=appflow.CfnConnectorProfile.OAuth2CredentialsProperty(\n                        access_token="accessToken",\n                        client_id="clientId",\n                        client_secret="clientSecret",\n                        o_auth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                            auth_code="authCode",\n                            redirect_uri="redirectUri"\n                        ),\n                        refresh_token="refreshToken"\n                    )\n                ),\n                datadog=appflow.CfnConnectorProfile.DatadogConnectorProfileCredentialsProperty(\n                    api_key="apiKey",\n                    application_key="applicationKey"\n                ),\n                dynatrace=appflow.CfnConnectorProfile.DynatraceConnectorProfileCredentialsProperty(\n                    api_token="apiToken"\n                ),\n                google_analytics=appflow.CfnConnectorProfile.GoogleAnalyticsConnectorProfileCredentialsProperty(\n                    client_id="clientId",\n                    client_secret="clientSecret",\n\n                    # the properties below are optional\n                    access_token="accessToken",\n                    connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                        auth_code="authCode",\n                        redirect_uri="redirectUri"\n                    ),\n                    refresh_token="refreshToken"\n                ),\n                infor_nexus=appflow.CfnConnectorProfile.InforNexusConnectorProfileCredentialsProperty(\n                    access_key_id="accessKeyId",\n                    datakey="datakey",\n                    secret_access_key="secretAccessKey",\n                    user_id="userId"\n                ),\n                marketo=appflow.CfnConnectorProfile.MarketoConnectorProfileCredentialsProperty(\n                    client_id="clientId",\n                    client_secret="clientSecret",\n\n                    # the properties below are optional\n                    access_token="accessToken",\n                    connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                        auth_code="authCode",\n                        redirect_uri="redirectUri"\n                    )\n                ),\n                pardot=appflow.CfnConnectorProfile.PardotConnectorProfileCredentialsProperty(\n                    access_token="accessToken",\n                    client_credentials_arn="clientCredentialsArn",\n                    connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                        auth_code="authCode",\n                        redirect_uri="redirectUri"\n                    ),\n                    refresh_token="refreshToken"\n                ),\n                redshift=appflow.CfnConnectorProfile.RedshiftConnectorProfileCredentialsProperty(\n                    password="password",\n                    username="username"\n                ),\n                salesforce=appflow.CfnConnectorProfile.SalesforceConnectorProfileCredentialsProperty(\n                    access_token="accessToken",\n                    client_credentials_arn="clientCredentialsArn",\n                    connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                        auth_code="authCode",\n                        redirect_uri="redirectUri"\n                    ),\n                    jwt_token="jwtToken",\n                    o_auth2_grant_type="oAuth2GrantType",\n                    refresh_token="refreshToken"\n                ),\n                sapo_data=appflow.CfnConnectorProfile.SAPODataConnectorProfileCredentialsProperty(\n                    basic_auth_credentials=appflow.CfnConnectorProfile.BasicAuthCredentialsProperty(\n                        password="password",\n                        username="username"\n                    ),\n                    o_auth_credentials=appflow.CfnConnectorProfile.OAuthCredentialsProperty(\n                        access_token="accessToken",\n                        client_id="clientId",\n                        client_secret="clientSecret",\n                        connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                            auth_code="authCode",\n                            redirect_uri="redirectUri"\n                        ),\n                        refresh_token="refreshToken"\n                    )\n                ),\n                service_now=appflow.CfnConnectorProfile.ServiceNowConnectorProfileCredentialsProperty(\n                    password="password",\n                    username="username"\n                ),\n                singular=appflow.CfnConnectorProfile.SingularConnectorProfileCredentialsProperty(\n                    api_key="apiKey"\n                ),\n                slack=appflow.CfnConnectorProfile.SlackConnectorProfileCredentialsProperty(\n                    client_id="clientId",\n                    client_secret="clientSecret",\n\n                    # the properties below are optional\n                    access_token="accessToken",\n                    connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                        auth_code="authCode",\n                        redirect_uri="redirectUri"\n                    )\n                ),\n                snowflake=appflow.CfnConnectorProfile.SnowflakeConnectorProfileCredentialsProperty(\n                    password="password",\n                    username="username"\n                ),\n                trendmicro=appflow.CfnConnectorProfile.TrendmicroConnectorProfileCredentialsProperty(\n                    api_secret_key="apiSecretKey"\n                ),\n                veeva=appflow.CfnConnectorProfile.VeevaConnectorProfileCredentialsProperty(\n                    password="password",\n                    username="username"\n                ),\n                zendesk=appflow.CfnConnectorProfile.ZendeskConnectorProfileCredentialsProperty(\n                    client_id="clientId",\n                    client_secret="clientSecret",\n\n                    # the properties below are optional\n                    access_token="accessToken",\n                    connector_oAuth_request=appflow.CfnConnectorProfile.ConnectorOAuthRequestProperty(\n                        auth_code="authCode",\n                        redirect_uri="redirectUri"\n                    )\n                )\n            ),\n            connector_profile_properties=appflow.CfnConnectorProfile.ConnectorProfilePropertiesProperty(\n                custom_connector=appflow.CfnConnectorProfile.CustomConnectorProfilePropertiesProperty(\n                    o_auth2_properties=appflow.CfnConnectorProfile.OAuth2PropertiesProperty(\n                        o_auth2_grant_type="oAuth2GrantType",\n                        token_url="tokenUrl",\n                        token_url_custom_properties={\n                            "token_url_custom_properties_key": "tokenUrlCustomProperties"\n                        }\n                    ),\n                    profile_properties={\n                        "profile_properties_key": "profileProperties"\n                    }\n                ),\n                datadog=appflow.CfnConnectorProfile.DatadogConnectorProfilePropertiesProperty(\n                    instance_url="instanceUrl"\n                ),\n                dynatrace=appflow.CfnConnectorProfile.DynatraceConnectorProfilePropertiesProperty(\n                    instance_url="instanceUrl"\n                ),\n                infor_nexus=appflow.CfnConnectorProfile.InforNexusConnectorProfilePropertiesProperty(\n                    instance_url="instanceUrl"\n                ),\n                marketo=appflow.CfnConnectorProfile.MarketoConnectorProfilePropertiesProperty(\n                    instance_url="instanceUrl"\n                ),\n                pardot=appflow.CfnConnectorProfile.PardotConnectorProfilePropertiesProperty(\n                    business_unit_id="businessUnitId",\n\n                    # the properties below are optional\n                    instance_url="instanceUrl",\n                    is_sandbox_environment=False\n                ),\n                redshift=appflow.CfnConnectorProfile.RedshiftConnectorProfilePropertiesProperty(\n                    bucket_name="bucketName",\n                    role_arn="roleArn",\n\n                    # the properties below are optional\n                    bucket_prefix="bucketPrefix",\n                    cluster_identifier="clusterIdentifier",\n                    data_api_role_arn="dataApiRoleArn",\n                    database_name="databaseName",\n                    database_url="databaseUrl",\n                    is_redshift_serverless=False,\n                    workgroup_name="workgroupName"\n                ),\n                salesforce=appflow.CfnConnectorProfile.SalesforceConnectorProfilePropertiesProperty(\n                    instance_url="instanceUrl",\n                    is_sandbox_environment=False,\n                    use_private_link_for_metadata_and_authorization=False\n                ),\n                sapo_data=appflow.CfnConnectorProfile.SAPODataConnectorProfilePropertiesProperty(\n                    application_host_url="applicationHostUrl",\n                    application_service_path="applicationServicePath",\n                    client_number="clientNumber",\n                    logon_language="logonLanguage",\n                    o_auth_properties=appflow.CfnConnectorProfile.OAuthPropertiesProperty(\n                        auth_code_url="authCodeUrl",\n                        o_auth_scopes=["oAuthScopes"],\n                        token_url="tokenUrl"\n                    ),\n                    port_number=123,\n                    private_link_service_name="privateLinkServiceName"\n                ),\n                service_now=appflow.CfnConnectorProfile.ServiceNowConnectorProfilePropertiesProperty(\n                    instance_url="instanceUrl"\n                ),\n                slack=appflow.CfnConnectorProfile.SlackConnectorProfilePropertiesProperty(\n                    instance_url="instanceUrl"\n                ),\n                snowflake=appflow.CfnConnectorProfile.SnowflakeConnectorProfilePropertiesProperty(\n                    bucket_name="bucketName",\n                    stage="stage",\n                    warehouse="warehouse",\n\n                    # the properties below are optional\n                    account_name="accountName",\n                    bucket_prefix="bucketPrefix",\n                    private_link_service_name="privateLinkServiceName",\n                    region="region"\n                ),\n                veeva=appflow.CfnConnectorProfile.VeevaConnectorProfilePropertiesProperty(\n                    instance_url="instanceUrl"\n                ),\n                zendesk=appflow.CfnConnectorProfile.ZendeskConnectorProfilePropertiesProperty(\n                    instance_url="instanceUrl"\n                )\n            )\n        ),\n        kms_arn="kmsArn"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['connection_mode', 'connector_profile_name', 'connector_type', 'connector_label', 'connector_profile_config', 'kms_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProfileProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnConnectorProps
class CfnConnectorPropsDef(BaseCfnProperty):
    connector_provisioning_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnConnector_ConnectorProvisioningConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The configuration required for registering the connector.\n')
    connector_provisioning_type: str = pydantic.Field(..., description='The provisioning type used to register the connector.\n')
    connector_label: typing.Optional[str] = pydantic.Field(None, description='The label used for registering the connector.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A description about the connector runtime setting.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appflow-connector.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    cfn_connector_props = appflow.CfnConnectorProps(\n        connector_provisioning_config=appflow.CfnConnector.ConnectorProvisioningConfigProperty(\n            lambda_=appflow.CfnConnector.LambdaConnectorProvisioningConfigProperty(\n                lambda_arn="lambdaArn"\n            )\n        ),\n        connector_provisioning_type="connectorProvisioningType",\n\n        # the properties below are optional\n        connector_label="connectorLabel",\n        description="description"\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['connector_provisioning_config', 'connector_provisioning_type', 'connector_label', 'description']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnConnectorProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_appflow.CfnFlowProps
class CfnFlowPropsDef(BaseCfnProperty):
    destination_flow_config_list: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_DestinationFlowConfigPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='The configuration that controls how Amazon AppFlow places data in the destination connector.\n')
    flow_name: str = pydantic.Field(..., description='The specified name of the flow. Spaces are not allowed. Use underscores (_) or hyphens (-) only.\n')
    source_flow_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_SourceFlowConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='Contains information about the configuration of the source connector used in the flow.\n')
    tasks: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], typing.Sequence[typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_TaskPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='A list of tasks that Amazon AppFlow performs while transferring the data in the flow run.\n')
    trigger_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_TriggerConfigPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='The trigger settings that determine how and when Amazon AppFlow runs the specified flow.\n')
    description: typing.Optional[str] = pydantic.Field(None, description='A user-entered description of the flow.\n')
    flow_status: typing.Optional[str] = pydantic.Field(None, description='Sets the status of the flow. You can specify one of the following values:. - **Active** - The flow runs based on the trigger settings that you defined. Active scheduled flows run as scheduled, and active event-triggered flows run when the specified change event occurs. However, active on-demand flows run only when you manually start them by using Amazon AppFlow. - **Suspended** - You can use this option to deactivate an active flow. Scheduled and event-triggered flows will cease to run until you reactive them. This value only affects scheduled and event-triggered flows. It has no effect for on-demand flows. If you omit the FlowStatus parameter, Amazon AppFlow creates the flow with a default status. The default status for on-demand flows is Active. The default status for scheduled and event-triggered flows is Draft, which means they’re not yet active.\n')
    kms_arn: typing.Optional[str] = pydantic.Field(None, description="The ARN (Amazon Resource Name) of the Key Management Service (KMS) key you provide for encryption. This is required if you do not want to use the Amazon AppFlow-managed KMS key. If you don't provide anything here, Amazon AppFlow uses the Amazon AppFlow-managed KMS key.\n")
    metadata_catalog_config: typing.Union[typing.Union[models.CfnDynamicReferenceDef, models.IntrinsicDef, models.JsonNullDef, models.ReferenceDef, models.SecretValueDef, models.CfnConditionDef, models.CfnJsonDef, models.aws_events.EventFieldDef, models.aws_events.MatchDef, models.aws_iam.PolicyDocumentDef, models.custom_resources.PhysicalResourceIdReferenceDef], models.aws_appflow.CfnFlow_MetadataCatalogConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='``AWS::AppFlow::Flow.MetadataCatalogConfig``.\n')
    tags: typing.Optional[typing.Sequence[typing.Union[models.CfnTagDef, dict[str, typing.Any]]]] = pydantic.Field(None, description='The tags used to organize, track, or control access for your flow.\n\n:link: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appflow-flow.html\n:exampleMetadata: fixture=_generated\n\nExample::\n\n    # The code below shows an example of how to instantiate this type.\n    # The values are placeholders you should change.\n    from aws_cdk import aws_appflow as appflow\n\n    cfn_flow_props = appflow.CfnFlowProps(\n        destination_flow_config_list=[appflow.CfnFlow.DestinationFlowConfigProperty(\n            connector_type="connectorType",\n            destination_connector_properties=appflow.CfnFlow.DestinationConnectorPropertiesProperty(\n                custom_connector=appflow.CfnFlow.CustomConnectorDestinationPropertiesProperty(\n                    entity_name="entityName",\n\n                    # the properties below are optional\n                    custom_properties={\n                        "custom_properties_key": "customProperties"\n                    },\n                    error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                        bucket_name="bucketName",\n                        bucket_prefix="bucketPrefix",\n                        fail_on_first_error=False\n                    ),\n                    id_field_names=["idFieldNames"],\n                    write_operation_type="writeOperationType"\n                ),\n                event_bridge=appflow.CfnFlow.EventBridgeDestinationPropertiesProperty(\n                    object="object",\n\n                    # the properties below are optional\n                    error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                        bucket_name="bucketName",\n                        bucket_prefix="bucketPrefix",\n                        fail_on_first_error=False\n                    )\n                ),\n                lookout_metrics=appflow.CfnFlow.LookoutMetricsDestinationPropertiesProperty(\n                    object="object"\n                ),\n                marketo=appflow.CfnFlow.MarketoDestinationPropertiesProperty(\n                    object="object",\n\n                    # the properties below are optional\n                    error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                        bucket_name="bucketName",\n                        bucket_prefix="bucketPrefix",\n                        fail_on_first_error=False\n                    )\n                ),\n                redshift=appflow.CfnFlow.RedshiftDestinationPropertiesProperty(\n                    intermediate_bucket_name="intermediateBucketName",\n                    object="object",\n\n                    # the properties below are optional\n                    bucket_prefix="bucketPrefix",\n                    error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                        bucket_name="bucketName",\n                        bucket_prefix="bucketPrefix",\n                        fail_on_first_error=False\n                    )\n                ),\n                s3=appflow.CfnFlow.S3DestinationPropertiesProperty(\n                    bucket_name="bucketName",\n\n                    # the properties below are optional\n                    bucket_prefix="bucketPrefix",\n                    s3_output_format_config=appflow.CfnFlow.S3OutputFormatConfigProperty(\n                        aggregation_config=appflow.CfnFlow.AggregationConfigProperty(\n                            aggregation_type="aggregationType",\n                            target_file_size=123\n                        ),\n                        file_type="fileType",\n                        prefix_config=appflow.CfnFlow.PrefixConfigProperty(\n                            path_prefix_hierarchy=["pathPrefixHierarchy"],\n                            prefix_format="prefixFormat",\n                            prefix_type="prefixType"\n                        ),\n                        preserve_source_data_typing=False\n                    )\n                ),\n                salesforce=appflow.CfnFlow.SalesforceDestinationPropertiesProperty(\n                    object="object",\n\n                    # the properties below are optional\n                    data_transfer_api="dataTransferApi",\n                    error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                        bucket_name="bucketName",\n                        bucket_prefix="bucketPrefix",\n                        fail_on_first_error=False\n                    ),\n                    id_field_names=["idFieldNames"],\n                    write_operation_type="writeOperationType"\n                ),\n                sapo_data=appflow.CfnFlow.SAPODataDestinationPropertiesProperty(\n                    object_path="objectPath",\n\n                    # the properties below are optional\n                    error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                        bucket_name="bucketName",\n                        bucket_prefix="bucketPrefix",\n                        fail_on_first_error=False\n                    ),\n                    id_field_names=["idFieldNames"],\n                    success_response_handling_config=appflow.CfnFlow.SuccessResponseHandlingConfigProperty(\n                        bucket_name="bucketName",\n                        bucket_prefix="bucketPrefix"\n                    ),\n                    write_operation_type="writeOperationType"\n                ),\n                snowflake=appflow.CfnFlow.SnowflakeDestinationPropertiesProperty(\n                    intermediate_bucket_name="intermediateBucketName",\n                    object="object",\n\n                    # the properties below are optional\n                    bucket_prefix="bucketPrefix",\n                    error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                        bucket_name="bucketName",\n                        bucket_prefix="bucketPrefix",\n                        fail_on_first_error=False\n                    )\n                ),\n                upsolver=appflow.CfnFlow.UpsolverDestinationPropertiesProperty(\n                    bucket_name="bucketName",\n                    s3_output_format_config=appflow.CfnFlow.UpsolverS3OutputFormatConfigProperty(\n                        prefix_config=appflow.CfnFlow.PrefixConfigProperty(\n                            path_prefix_hierarchy=["pathPrefixHierarchy"],\n                            prefix_format="prefixFormat",\n                            prefix_type="prefixType"\n                        ),\n\n                        # the properties below are optional\n                        aggregation_config=appflow.CfnFlow.AggregationConfigProperty(\n                            aggregation_type="aggregationType",\n                            target_file_size=123\n                        ),\n                        file_type="fileType"\n                    ),\n\n                    # the properties below are optional\n                    bucket_prefix="bucketPrefix"\n                ),\n                zendesk=appflow.CfnFlow.ZendeskDestinationPropertiesProperty(\n                    object="object",\n\n                    # the properties below are optional\n                    error_handling_config=appflow.CfnFlow.ErrorHandlingConfigProperty(\n                        bucket_name="bucketName",\n                        bucket_prefix="bucketPrefix",\n                        fail_on_first_error=False\n                    ),\n                    id_field_names=["idFieldNames"],\n                    write_operation_type="writeOperationType"\n                )\n            ),\n\n            # the properties below are optional\n            api_version="apiVersion",\n            connector_profile_name="connectorProfileName"\n        )],\n        flow_name="flowName",\n        source_flow_config=appflow.CfnFlow.SourceFlowConfigProperty(\n            connector_type="connectorType",\n            source_connector_properties=appflow.CfnFlow.SourceConnectorPropertiesProperty(\n                amplitude=appflow.CfnFlow.AmplitudeSourcePropertiesProperty(\n                    object="object"\n                ),\n                custom_connector=appflow.CfnFlow.CustomConnectorSourcePropertiesProperty(\n                    entity_name="entityName",\n\n                    # the properties below are optional\n                    custom_properties={\n                        "custom_properties_key": "customProperties"\n                    }\n                ),\n                datadog=appflow.CfnFlow.DatadogSourcePropertiesProperty(\n                    object="object"\n                ),\n                dynatrace=appflow.CfnFlow.DynatraceSourcePropertiesProperty(\n                    object="object"\n                ),\n                google_analytics=appflow.CfnFlow.GoogleAnalyticsSourcePropertiesProperty(\n                    object="object"\n                ),\n                infor_nexus=appflow.CfnFlow.InforNexusSourcePropertiesProperty(\n                    object="object"\n                ),\n                marketo=appflow.CfnFlow.MarketoSourcePropertiesProperty(\n                    object="object"\n                ),\n                pardot=appflow.CfnFlow.PardotSourcePropertiesProperty(\n                    object="object"\n                ),\n                s3=appflow.CfnFlow.S3SourcePropertiesProperty(\n                    bucket_name="bucketName",\n                    bucket_prefix="bucketPrefix",\n\n                    # the properties below are optional\n                    s3_input_format_config=appflow.CfnFlow.S3InputFormatConfigProperty(\n                        s3_input_file_type="s3InputFileType"\n                    )\n                ),\n                salesforce=appflow.CfnFlow.SalesforceSourcePropertiesProperty(\n                    object="object",\n\n                    # the properties below are optional\n                    data_transfer_api="dataTransferApi",\n                    enable_dynamic_field_update=False,\n                    include_deleted_records=False\n                ),\n                sapo_data=appflow.CfnFlow.SAPODataSourcePropertiesProperty(\n                    object_path="objectPath"\n                ),\n                service_now=appflow.CfnFlow.ServiceNowSourcePropertiesProperty(\n                    object="object"\n                ),\n                singular=appflow.CfnFlow.SingularSourcePropertiesProperty(\n                    object="object"\n                ),\n                slack=appflow.CfnFlow.SlackSourcePropertiesProperty(\n                    object="object"\n                ),\n                trendmicro=appflow.CfnFlow.TrendmicroSourcePropertiesProperty(\n                    object="object"\n                ),\n                veeva=appflow.CfnFlow.VeevaSourcePropertiesProperty(\n                    object="object",\n\n                    # the properties below are optional\n                    document_type="documentType",\n                    include_all_versions=False,\n                    include_renditions=False,\n                    include_source_files=False\n                ),\n                zendesk=appflow.CfnFlow.ZendeskSourcePropertiesProperty(\n                    object="object"\n                )\n            ),\n\n            # the properties below are optional\n            api_version="apiVersion",\n            connector_profile_name="connectorProfileName",\n            incremental_pull_config=appflow.CfnFlow.IncrementalPullConfigProperty(\n                datetime_type_field_name="datetimeTypeFieldName"\n            )\n        ),\n        tasks=[appflow.CfnFlow.TaskProperty(\n            source_fields=["sourceFields"],\n            task_type="taskType",\n\n            # the properties below are optional\n            connector_operator=appflow.CfnFlow.ConnectorOperatorProperty(\n                amplitude="amplitude",\n                custom_connector="customConnector",\n                datadog="datadog",\n                dynatrace="dynatrace",\n                google_analytics="googleAnalytics",\n                infor_nexus="inforNexus",\n                marketo="marketo",\n                pardot="pardot",\n                s3="s3",\n                salesforce="salesforce",\n                sapo_data="sapoData",\n                service_now="serviceNow",\n                singular="singular",\n                slack="slack",\n                trendmicro="trendmicro",\n                veeva="veeva",\n                zendesk="zendesk"\n            ),\n            destination_field="destinationField",\n            task_properties=[appflow.CfnFlow.TaskPropertiesObjectProperty(\n                key="key",\n                value="value"\n            )]\n        )],\n        trigger_config=appflow.CfnFlow.TriggerConfigProperty(\n            trigger_type="triggerType",\n\n            # the properties below are optional\n            trigger_properties=appflow.CfnFlow.ScheduledTriggerPropertiesProperty(\n                schedule_expression="scheduleExpression",\n\n                # the properties below are optional\n                data_pull_mode="dataPullMode",\n                first_execution_from=123,\n                flow_error_deactivation_threshold=123,\n                schedule_end_time=123,\n                schedule_offset=123,\n                schedule_start_time=123,\n                time_zone="timeZone"\n            )\n        ),\n\n        # the properties below are optional\n        description="description",\n        flow_status="flowStatus",\n        kms_arn="kmsArn",\n        metadata_catalog_config=appflow.CfnFlow.MetadataCatalogConfigProperty(\n            glue_data_catalog=appflow.CfnFlow.GlueDataCatalogProperty(\n                database_name="databaseName",\n                role_arn="roleArn",\n                table_prefix="tablePrefix"\n            )\n        ),\n        tags=[CfnTag(\n            key="key",\n            value="value"\n        )]\n    )\n')
    _init_params: typing.ClassVar[list[str]] = ['destination_flow_config_list', 'flow_name', 'source_flow_config', 'tasks', 'trigger_config', 'description', 'flow_status', 'kms_arn', 'metadata_catalog_config', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_appflow.CfnFlowProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




import models

class ModuleModel(pydantic.BaseModel):
    CfnConnector_ConnectorProvisioningConfigProperty: typing.Optional[dict[str, CfnConnector_ConnectorProvisioningConfigPropertyDef]] = pydantic.Field(None)
    CfnConnector_LambdaConnectorProvisioningConfigProperty: typing.Optional[dict[str, CfnConnector_LambdaConnectorProvisioningConfigPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_AmplitudeConnectorProfileCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_AmplitudeConnectorProfileCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_ApiKeyCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_ApiKeyCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_BasicAuthCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_BasicAuthCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_ConnectorOAuthRequestProperty: typing.Optional[dict[str, CfnConnectorProfile_ConnectorOAuthRequestPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_ConnectorProfileConfigProperty: typing.Optional[dict[str, CfnConnectorProfile_ConnectorProfileConfigPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_ConnectorProfileCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_ConnectorProfileCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_ConnectorProfilePropertiesProperty: typing.Optional[dict[str, CfnConnectorProfile_ConnectorProfilePropertiesPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_CustomAuthCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_CustomAuthCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_CustomConnectorProfileCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_CustomConnectorProfileCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_CustomConnectorProfilePropertiesProperty: typing.Optional[dict[str, CfnConnectorProfile_CustomConnectorProfilePropertiesPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_DatadogConnectorProfileCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_DatadogConnectorProfileCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_DatadogConnectorProfilePropertiesProperty: typing.Optional[dict[str, CfnConnectorProfile_DatadogConnectorProfilePropertiesPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_DynatraceConnectorProfileCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_DynatraceConnectorProfileCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_DynatraceConnectorProfilePropertiesProperty: typing.Optional[dict[str, CfnConnectorProfile_DynatraceConnectorProfilePropertiesPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_GoogleAnalyticsConnectorProfileCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_GoogleAnalyticsConnectorProfileCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_InforNexusConnectorProfileCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_InforNexusConnectorProfileCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_InforNexusConnectorProfilePropertiesProperty: typing.Optional[dict[str, CfnConnectorProfile_InforNexusConnectorProfilePropertiesPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_MarketoConnectorProfileCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_MarketoConnectorProfileCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_MarketoConnectorProfilePropertiesProperty: typing.Optional[dict[str, CfnConnectorProfile_MarketoConnectorProfilePropertiesPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_OAuth2CredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_OAuth2CredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_OAuth2PropertiesProperty: typing.Optional[dict[str, CfnConnectorProfile_OAuth2PropertiesPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_OAuthCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_OAuthCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_OAuthPropertiesProperty: typing.Optional[dict[str, CfnConnectorProfile_OAuthPropertiesPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_PardotConnectorProfileCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_PardotConnectorProfileCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_PardotConnectorProfilePropertiesProperty: typing.Optional[dict[str, CfnConnectorProfile_PardotConnectorProfilePropertiesPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_RedshiftConnectorProfileCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_RedshiftConnectorProfileCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_RedshiftConnectorProfilePropertiesProperty: typing.Optional[dict[str, CfnConnectorProfile_RedshiftConnectorProfilePropertiesPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_SalesforceConnectorProfileCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_SalesforceConnectorProfileCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_SalesforceConnectorProfilePropertiesProperty: typing.Optional[dict[str, CfnConnectorProfile_SalesforceConnectorProfilePropertiesPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_SAPODataConnectorProfileCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_SAPODataConnectorProfileCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_SAPODataConnectorProfilePropertiesProperty: typing.Optional[dict[str, CfnConnectorProfile_SAPODataConnectorProfilePropertiesPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_ServiceNowConnectorProfileCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_ServiceNowConnectorProfileCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_ServiceNowConnectorProfilePropertiesProperty: typing.Optional[dict[str, CfnConnectorProfile_ServiceNowConnectorProfilePropertiesPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_SingularConnectorProfileCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_SingularConnectorProfileCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_SlackConnectorProfileCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_SlackConnectorProfileCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_SlackConnectorProfilePropertiesProperty: typing.Optional[dict[str, CfnConnectorProfile_SlackConnectorProfilePropertiesPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_SnowflakeConnectorProfileCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_SnowflakeConnectorProfileCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_SnowflakeConnectorProfilePropertiesProperty: typing.Optional[dict[str, CfnConnectorProfile_SnowflakeConnectorProfilePropertiesPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_TrendmicroConnectorProfileCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_TrendmicroConnectorProfileCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_VeevaConnectorProfileCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_VeevaConnectorProfileCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_VeevaConnectorProfilePropertiesProperty: typing.Optional[dict[str, CfnConnectorProfile_VeevaConnectorProfilePropertiesPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_ZendeskConnectorProfileCredentialsProperty: typing.Optional[dict[str, CfnConnectorProfile_ZendeskConnectorProfileCredentialsPropertyDef]] = pydantic.Field(None)
    CfnConnectorProfile_ZendeskConnectorProfilePropertiesProperty: typing.Optional[dict[str, CfnConnectorProfile_ZendeskConnectorProfilePropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_AggregationConfigProperty: typing.Optional[dict[str, CfnFlow_AggregationConfigPropertyDef]] = pydantic.Field(None)
    CfnFlow_AmplitudeSourcePropertiesProperty: typing.Optional[dict[str, CfnFlow_AmplitudeSourcePropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_ConnectorOperatorProperty: typing.Optional[dict[str, CfnFlow_ConnectorOperatorPropertyDef]] = pydantic.Field(None)
    CfnFlow_CustomConnectorDestinationPropertiesProperty: typing.Optional[dict[str, CfnFlow_CustomConnectorDestinationPropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_CustomConnectorSourcePropertiesProperty: typing.Optional[dict[str, CfnFlow_CustomConnectorSourcePropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_DatadogSourcePropertiesProperty: typing.Optional[dict[str, CfnFlow_DatadogSourcePropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_DestinationConnectorPropertiesProperty: typing.Optional[dict[str, CfnFlow_DestinationConnectorPropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_DestinationFlowConfigProperty: typing.Optional[dict[str, CfnFlow_DestinationFlowConfigPropertyDef]] = pydantic.Field(None)
    CfnFlow_DynatraceSourcePropertiesProperty: typing.Optional[dict[str, CfnFlow_DynatraceSourcePropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_ErrorHandlingConfigProperty: typing.Optional[dict[str, CfnFlow_ErrorHandlingConfigPropertyDef]] = pydantic.Field(None)
    CfnFlow_EventBridgeDestinationPropertiesProperty: typing.Optional[dict[str, CfnFlow_EventBridgeDestinationPropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_GlueDataCatalogProperty: typing.Optional[dict[str, CfnFlow_GlueDataCatalogPropertyDef]] = pydantic.Field(None)
    CfnFlow_GoogleAnalyticsSourcePropertiesProperty: typing.Optional[dict[str, CfnFlow_GoogleAnalyticsSourcePropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_IncrementalPullConfigProperty: typing.Optional[dict[str, CfnFlow_IncrementalPullConfigPropertyDef]] = pydantic.Field(None)
    CfnFlow_InforNexusSourcePropertiesProperty: typing.Optional[dict[str, CfnFlow_InforNexusSourcePropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_LookoutMetricsDestinationPropertiesProperty: typing.Optional[dict[str, CfnFlow_LookoutMetricsDestinationPropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_MarketoDestinationPropertiesProperty: typing.Optional[dict[str, CfnFlow_MarketoDestinationPropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_MarketoSourcePropertiesProperty: typing.Optional[dict[str, CfnFlow_MarketoSourcePropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_MetadataCatalogConfigProperty: typing.Optional[dict[str, CfnFlow_MetadataCatalogConfigPropertyDef]] = pydantic.Field(None)
    CfnFlow_PardotSourcePropertiesProperty: typing.Optional[dict[str, CfnFlow_PardotSourcePropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_PrefixConfigProperty: typing.Optional[dict[str, CfnFlow_PrefixConfigPropertyDef]] = pydantic.Field(None)
    CfnFlow_RedshiftDestinationPropertiesProperty: typing.Optional[dict[str, CfnFlow_RedshiftDestinationPropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_S3DestinationPropertiesProperty: typing.Optional[dict[str, CfnFlow_S3DestinationPropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_S3InputFormatConfigProperty: typing.Optional[dict[str, CfnFlow_S3InputFormatConfigPropertyDef]] = pydantic.Field(None)
    CfnFlow_S3OutputFormatConfigProperty: typing.Optional[dict[str, CfnFlow_S3OutputFormatConfigPropertyDef]] = pydantic.Field(None)
    CfnFlow_S3SourcePropertiesProperty: typing.Optional[dict[str, CfnFlow_S3SourcePropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_SalesforceDestinationPropertiesProperty: typing.Optional[dict[str, CfnFlow_SalesforceDestinationPropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_SalesforceSourcePropertiesProperty: typing.Optional[dict[str, CfnFlow_SalesforceSourcePropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_SAPODataDestinationPropertiesProperty: typing.Optional[dict[str, CfnFlow_SAPODataDestinationPropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_SAPODataSourcePropertiesProperty: typing.Optional[dict[str, CfnFlow_SAPODataSourcePropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_ScheduledTriggerPropertiesProperty: typing.Optional[dict[str, CfnFlow_ScheduledTriggerPropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_ServiceNowSourcePropertiesProperty: typing.Optional[dict[str, CfnFlow_ServiceNowSourcePropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_SingularSourcePropertiesProperty: typing.Optional[dict[str, CfnFlow_SingularSourcePropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_SlackSourcePropertiesProperty: typing.Optional[dict[str, CfnFlow_SlackSourcePropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_SnowflakeDestinationPropertiesProperty: typing.Optional[dict[str, CfnFlow_SnowflakeDestinationPropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_SourceConnectorPropertiesProperty: typing.Optional[dict[str, CfnFlow_SourceConnectorPropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_SourceFlowConfigProperty: typing.Optional[dict[str, CfnFlow_SourceFlowConfigPropertyDef]] = pydantic.Field(None)
    CfnFlow_SuccessResponseHandlingConfigProperty: typing.Optional[dict[str, CfnFlow_SuccessResponseHandlingConfigPropertyDef]] = pydantic.Field(None)
    CfnFlow_TaskPropertiesObjectProperty: typing.Optional[dict[str, CfnFlow_TaskPropertiesObjectPropertyDef]] = pydantic.Field(None)
    CfnFlow_TaskProperty: typing.Optional[dict[str, CfnFlow_TaskPropertyDef]] = pydantic.Field(None)
    CfnFlow_TrendmicroSourcePropertiesProperty: typing.Optional[dict[str, CfnFlow_TrendmicroSourcePropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_TriggerConfigProperty: typing.Optional[dict[str, CfnFlow_TriggerConfigPropertyDef]] = pydantic.Field(None)
    CfnFlow_UpsolverDestinationPropertiesProperty: typing.Optional[dict[str, CfnFlow_UpsolverDestinationPropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_UpsolverS3OutputFormatConfigProperty: typing.Optional[dict[str, CfnFlow_UpsolverS3OutputFormatConfigPropertyDef]] = pydantic.Field(None)
    CfnFlow_VeevaSourcePropertiesProperty: typing.Optional[dict[str, CfnFlow_VeevaSourcePropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_ZendeskDestinationPropertiesProperty: typing.Optional[dict[str, CfnFlow_ZendeskDestinationPropertiesPropertyDef]] = pydantic.Field(None)
    CfnFlow_ZendeskSourcePropertiesProperty: typing.Optional[dict[str, CfnFlow_ZendeskSourcePropertiesPropertyDef]] = pydantic.Field(None)
    CfnConnector: typing.Optional[dict[str, CfnConnectorDef]] = pydantic.Field(None)
    CfnConnectorProfile: typing.Optional[dict[str, CfnConnectorProfileDef]] = pydantic.Field(None)
    CfnFlow: typing.Optional[dict[str, CfnFlowDef]] = pydantic.Field(None)
    CfnConnectorProfileProps: typing.Optional[dict[str, CfnConnectorProfilePropsDef]] = pydantic.Field(None)
    CfnConnectorProps: typing.Optional[dict[str, CfnConnectorPropsDef]] = pydantic.Field(None)
    CfnFlowProps: typing.Optional[dict[str, CfnFlowPropsDef]] = pydantic.Field(None)
    ...
