from __future__ import annotations
import typing
import aws_cdk
import constructs
import pydantic
import datetime
from ._base import BaseConstruct, BaseClass, BaseStruct, BaseCfnResource, BaseCfnProperty, ConnectableMixin, BaseMethodParams, GenericApplyRemovalPolicyParams, REQUIRED_INIT_PARAM, _REQUIRED_INIT_PARAM

#  autogenerated from aws_cdk.aws_sam.CfnApi.AccessLogSettingProperty
class CfnApi_AccessLogSettingPropertyDef(BaseStruct):
    destination_arn: typing.Optional[str] = pydantic.Field(None, description='')
    format: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['destination_arn', 'format']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnApi.AccessLogSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnApi.AuthProperty
class CfnApi_AuthPropertyDef(BaseStruct):
    add_default_authorizer_to_cors_preflight: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    authorizers: typing.Any = pydantic.Field(None, description='')
    default_authorizer: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['add_default_authorizer_to_cors_preflight', 'authorizers', 'default_authorizer']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnApi.AuthProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnApi.CanarySettingProperty
class CfnApi_CanarySettingPropertyDef(BaseStruct):
    deployment_id: typing.Optional[str] = pydantic.Field(None, description='')
    percent_traffic: typing.Union[int, float, None] = pydantic.Field(None, description='')
    stage_variable_overrides: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    use_stage_cache: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['deployment_id', 'percent_traffic', 'stage_variable_overrides', 'use_stage_cache']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnApi.CanarySettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnApi.CorsConfigurationProperty
class CfnApi_CorsConfigurationPropertyDef(BaseStruct):
    allow_origin: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    allow_credentials: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    allow_headers: typing.Optional[str] = pydantic.Field(None, description='')
    allow_methods: typing.Optional[str] = pydantic.Field(None, description='')
    max_age: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['allow_origin', 'allow_credentials', 'allow_headers', 'allow_methods', 'max_age']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnApi.CorsConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnApi.DomainConfigurationProperty
class CfnApi_DomainConfigurationPropertyDef(BaseStruct):
    certificate_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    domain_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    base_path: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    endpoint_configuration: typing.Optional[str] = pydantic.Field(None, description='')
    mutual_tls_authentication: typing.Union[models.UnsupportedResource, models.aws_sam.CfnApi_MutualTlsAuthenticationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ownership_verification_certificate_arn: typing.Optional[str] = pydantic.Field(None, description='')
    route53: typing.Union[models.UnsupportedResource, models.aws_sam.CfnApi_Route53ConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    security_policy: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['certificate_arn', 'domain_name', 'base_path', 'endpoint_configuration', 'mutual_tls_authentication', 'ownership_verification_certificate_arn', 'route53', 'security_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnApi.DomainConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnApi.EndpointConfigurationProperty
class CfnApi_EndpointConfigurationPropertyDef(BaseStruct):
    type: typing.Optional[str] = pydantic.Field(None, description='')
    vpc_endpoint_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['type', 'vpc_endpoint_ids']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnApi.EndpointConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnApi.MutualTlsAuthenticationProperty
class CfnApi_MutualTlsAuthenticationPropertyDef(BaseStruct):
    truststore_uri: typing.Optional[str] = pydantic.Field(None, description='')
    truststore_version: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['truststore_uri', 'truststore_version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnApi.MutualTlsAuthenticationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnApi.Route53ConfigurationProperty
class CfnApi_Route53ConfigurationPropertyDef(BaseStruct):
    distributed_domain_name: typing.Optional[str] = pydantic.Field(None, description='')
    evaluate_target_health: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    hosted_zone_id: typing.Optional[str] = pydantic.Field(None, description='')
    hosted_zone_name: typing.Optional[str] = pydantic.Field(None, description='')
    ip_v6: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['distributed_domain_name', 'evaluate_target_health', 'hosted_zone_id', 'hosted_zone_name', 'ip_v6']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnApi.Route53ConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnApi.S3LocationProperty
class CfnApi_S3LocationPropertyDef(BaseStruct):
    bucket: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    version: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['bucket', 'key', 'version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnApi.S3LocationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnApplication.ApplicationLocationProperty
class CfnApplication_ApplicationLocationPropertyDef(BaseStruct):
    application_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    semantic_version: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['application_id', 'semantic_version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnApplication.ApplicationLocationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.AlexaSkillEventProperty
class CfnFunction_AlexaSkillEventPropertyDef(BaseStruct):
    skill_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['skill_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.AlexaSkillEventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.ApiEventProperty
class CfnFunction_ApiEventPropertyDef(BaseStruct):
    method: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    path: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    auth: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_AuthPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    request_model: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_RequestModelPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    request_parameters: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnFunction_RequestParameterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    rest_api_id: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['method', 'path', 'auth', 'request_model', 'request_parameters', 'rest_api_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.ApiEventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.AuthProperty
class CfnFunction_AuthPropertyDef(BaseStruct):
    api_key_required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    authorization_scopes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    authorizer: typing.Optional[str] = pydantic.Field(None, description='')
    resource_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_AuthResourcePolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['api_key_required', 'authorization_scopes', 'authorizer', 'resource_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.AuthProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.AuthResourcePolicyProperty
class CfnFunction_AuthResourcePolicyPropertyDef(BaseStruct):
    aws_account_blacklist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    aws_account_whitelist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    custom_statements: typing.Union[typing.Sequence[typing.Any], models.UnsupportedResource, None] = pydantic.Field(None, description='')
    intrinsic_vpc_blacklist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    intrinsic_vpce_blacklist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    intrinsic_vpce_whitelist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    intrinsic_vpc_whitelist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ip_range_blacklist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ip_range_whitelist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    source_vpc_blacklist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    source_vpc_whitelist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['aws_account_blacklist', 'aws_account_whitelist', 'custom_statements', 'intrinsic_vpc_blacklist', 'intrinsic_vpce_blacklist', 'intrinsic_vpce_whitelist', 'intrinsic_vpc_whitelist', 'ip_range_blacklist', 'ip_range_whitelist', 'source_vpc_blacklist', 'source_vpc_whitelist']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.AuthResourcePolicyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.BucketSAMPTProperty
class CfnFunction_BucketSAMPTPropertyDef(BaseStruct):
    bucket_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['bucket_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.BucketSAMPTProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.CloudWatchEventEventProperty
class CfnFunction_CloudWatchEventEventPropertyDef(BaseStruct):
    pattern: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    input: typing.Optional[str] = pydantic.Field(None, description='')
    input_path: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['pattern', 'input', 'input_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.CloudWatchEventEventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.CloudWatchLogsEventProperty
class CfnFunction_CloudWatchLogsEventPropertyDef(BaseStruct):
    filter_pattern: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    log_group_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['filter_pattern', 'log_group_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.CloudWatchLogsEventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.CognitoEventProperty
class CfnFunction_CognitoEventPropertyDef(BaseStruct):
    trigger: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    user_pool: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['trigger', 'user_pool']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.CognitoEventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.CollectionSAMPTProperty
class CfnFunction_CollectionSAMPTPropertyDef(BaseStruct):
    collection_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['collection_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.CollectionSAMPTProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.CorsConfigurationProperty
class CfnFunction_CorsConfigurationPropertyDef(BaseStruct):
    allow_origin: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    allow_credentials: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    allow_headers: typing.Optional[str] = pydantic.Field(None, description='')
    allow_methods: typing.Optional[str] = pydantic.Field(None, description='')
    max_age: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['allow_origin', 'allow_credentials', 'allow_headers', 'allow_methods', 'max_age']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.CorsConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.DeadLetterQueueProperty
class CfnFunction_DeadLetterQueuePropertyDef(BaseStruct):
    target_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['target_arn', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.DeadLetterQueueProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.DeploymentPreferenceProperty
class CfnFunction_DeploymentPreferencePropertyDef(BaseStruct):
    alarms: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    hooks: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_HooksPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    role: typing.Optional[str] = pydantic.Field(None, description='')
    type: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['alarms', 'enabled', 'hooks', 'role', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.DeploymentPreferenceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.DestinationConfigProperty
class CfnFunction_DestinationConfigPropertyDef(BaseStruct):
    on_failure: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_sam.CfnFunction_DestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['on_failure']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.DestinationConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.DestinationProperty
class CfnFunction_DestinationPropertyDef(BaseStruct):
    destination: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    type: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['destination', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.DestinationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.DomainSAMPTProperty
class CfnFunction_DomainSAMPTPropertyDef(BaseStruct):
    domain_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['domain_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.DomainSAMPTProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.DynamoDBEventProperty
class CfnFunction_DynamoDBEventPropertyDef(BaseStruct):
    starting_position: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    stream: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    batch_size: typing.Union[int, float, None] = pydantic.Field(None, description='')
    bisect_batch_on_function_error: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    destination_config: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_DestinationConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    maximum_batching_window_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    maximum_record_age_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    maximum_retry_attempts: typing.Union[int, float, None] = pydantic.Field(None, description='')
    parallelization_factor: typing.Union[int, float, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['starting_position', 'stream', 'batch_size', 'bisect_batch_on_function_error', 'destination_config', 'enabled', 'maximum_batching_window_in_seconds', 'maximum_record_age_in_seconds', 'maximum_retry_attempts', 'parallelization_factor']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.DynamoDBEventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.EmptySAMPTProperty
class CfnFunction_EmptySAMPTPropertyDef(BaseStruct):
    _init_params: typing.ClassVar[list[str]] = []
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.EmptySAMPTProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.EphemeralStorageProperty
class CfnFunction_EphemeralStoragePropertyDef(BaseStruct):
    size: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['size']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.EphemeralStorageProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.EventBridgeRuleEventProperty
class CfnFunction_EventBridgeRuleEventPropertyDef(BaseStruct):
    pattern: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    event_bus_name: typing.Optional[str] = pydantic.Field(None, description='')
    input: typing.Optional[str] = pydantic.Field(None, description='')
    input_path: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['pattern', 'event_bus_name', 'input', 'input_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.EventBridgeRuleEventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.EventInvokeConfigProperty
class CfnFunction_EventInvokeConfigPropertyDef(BaseStruct):
    destination_config: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EventInvokeDestinationConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    maximum_event_age_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    maximum_retry_attempts: typing.Union[int, float, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['destination_config', 'maximum_event_age_in_seconds', 'maximum_retry_attempts']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.EventInvokeConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.EventInvokeDestinationConfigProperty
class CfnFunction_EventInvokeDestinationConfigPropertyDef(BaseStruct):
    on_failure: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_sam.CfnFunction_DestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    on_success: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_sam.CfnFunction_DestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['on_failure', 'on_success']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.EventInvokeDestinationConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.EventSourceProperty
class CfnFunction_EventSourcePropertyDef(BaseStruct):
    properties: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_sam.CfnFunction_AlexaSkillEventPropertyDef, dict[str, typing.Any], models.aws_sam.CfnFunction_ApiEventPropertyDef, models.aws_sam.CfnFunction_CloudWatchEventEventPropertyDef, models.aws_sam.CfnFunction_CloudWatchLogsEventPropertyDef, models.aws_sam.CfnFunction_CognitoEventPropertyDef, models.aws_sam.CfnFunction_DynamoDBEventPropertyDef, models.aws_sam.CfnFunction_EventBridgeRuleEventPropertyDef, models.aws_sam.CfnFunction_HttpApiEventPropertyDef, models.aws_sam.CfnFunction_IoTRuleEventPropertyDef, models.aws_sam.CfnFunction_KinesisEventPropertyDef, models.aws_sam.CfnFunction_S3EventPropertyDef, models.aws_sam.CfnFunction_ScheduleEventPropertyDef, models.aws_sam.CfnFunction_SNSEventPropertyDef, models.aws_sam.CfnFunction_SQSEventPropertyDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['properties', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.EventSourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.FileSystemConfigProperty
class CfnFunction_FileSystemConfigPropertyDef(BaseStruct):
    arn: typing.Optional[str] = pydantic.Field(None, description='')
    local_mount_path: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['arn', 'local_mount_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.FileSystemConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.FunctionEnvironmentProperty
class CfnFunction_FunctionEnvironmentPropertyDef(BaseStruct):
    variables: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Mapping[str, str]] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['variables']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.FunctionEnvironmentProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.FunctionSAMPTProperty
class CfnFunction_FunctionSAMPTPropertyDef(BaseStruct):
    function_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['function_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.FunctionSAMPTProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.FunctionUrlConfigProperty
class CfnFunction_FunctionUrlConfigPropertyDef(BaseStruct):
    auth_type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    cors: typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnFunction_CorsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    invoke_mode: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['auth_type', 'cors', 'invoke_mode']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.FunctionUrlConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.HooksProperty
class CfnFunction_HooksPropertyDef(BaseStruct):
    post_traffic: typing.Optional[str] = pydantic.Field(None, description='')
    pre_traffic: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['post_traffic', 'pre_traffic']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.HooksProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.HttpApiEventProperty
class CfnFunction_HttpApiEventPropertyDef(BaseStruct):
    api_id: typing.Optional[str] = pydantic.Field(None, description='')
    auth: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_HttpApiFunctionAuthPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    method: typing.Optional[str] = pydantic.Field(None, description='')
    path: typing.Optional[str] = pydantic.Field(None, description='')
    payload_format_version: typing.Optional[str] = pydantic.Field(None, description='')
    route_settings: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_RouteSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    timeout_in_millis: typing.Union[int, float, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['api_id', 'auth', 'method', 'path', 'payload_format_version', 'route_settings', 'timeout_in_millis']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.HttpApiEventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.HttpApiFunctionAuthProperty
class CfnFunction_HttpApiFunctionAuthPropertyDef(BaseStruct):
    authorization_scopes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    authorizer: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['authorization_scopes', 'authorizer']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.HttpApiFunctionAuthProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.IAMPolicyDocumentProperty
class CfnFunction_IAMPolicyDocumentPropertyDef(BaseStruct):
    statement: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    version: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['statement', 'version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.IAMPolicyDocumentProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.IdentitySAMPTProperty
class CfnFunction_IdentitySAMPTPropertyDef(BaseStruct):
    identity_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['identity_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.IdentitySAMPTProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.ImageConfigProperty
class CfnFunction_ImageConfigPropertyDef(BaseStruct):
    command: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    entry_point: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    working_directory: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['command', 'entry_point', 'working_directory']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.ImageConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.IoTRuleEventProperty
class CfnFunction_IoTRuleEventPropertyDef(BaseStruct):
    sql: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    aws_iot_sql_version: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['sql', 'aws_iot_sql_version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.IoTRuleEventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.KeySAMPTProperty
class CfnFunction_KeySAMPTPropertyDef(BaseStruct):
    key_id: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['key_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.KeySAMPTProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.KinesisEventProperty
class CfnFunction_KinesisEventPropertyDef(BaseStruct):
    starting_position: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    stream: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    batch_size: typing.Union[int, float, None] = pydantic.Field(None, description='')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    function_response_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['starting_position', 'stream', 'batch_size', 'enabled', 'function_response_types']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.KinesisEventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.LogGroupSAMPTProperty
class CfnFunction_LogGroupSAMPTPropertyDef(BaseStruct):
    log_group_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['log_group_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.LogGroupSAMPTProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.ParameterNameSAMPTProperty
class CfnFunction_ParameterNameSAMPTPropertyDef(BaseStruct):
    parameter_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['parameter_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.ParameterNameSAMPTProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.ProvisionedConcurrencyConfigProperty
class CfnFunction_ProvisionedConcurrencyConfigPropertyDef(BaseStruct):
    provisioned_concurrent_executions: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['provisioned_concurrent_executions']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.ProvisionedConcurrencyConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.QueueSAMPTProperty
class CfnFunction_QueueSAMPTPropertyDef(BaseStruct):
    queue_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['queue_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.QueueSAMPTProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.RequestModelProperty
class CfnFunction_RequestModelPropertyDef(BaseStruct):
    model: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    validate_body: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    validate_parameters: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['model', 'required', 'validate_body', 'validate_parameters']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.RequestModelProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.RequestParameterProperty
class CfnFunction_RequestParameterPropertyDef(BaseStruct):
    caching: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['caching', 'required']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.RequestParameterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.RouteSettingsProperty
class CfnFunction_RouteSettingsPropertyDef(BaseStruct):
    data_trace_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    detailed_metrics_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    logging_level: typing.Optional[str] = pydantic.Field(None, description='')
    throttling_burst_limit: typing.Union[int, float, None] = pydantic.Field(None, description='')
    throttling_rate_limit: typing.Union[int, float, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['data_trace_enabled', 'detailed_metrics_enabled', 'logging_level', 'throttling_burst_limit', 'throttling_rate_limit']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.RouteSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.S3EventProperty
class CfnFunction_S3EventPropertyDef(BaseStruct):
    bucket: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    events: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    filter: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_S3NotificationFilterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['bucket', 'events', 'filter']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.S3EventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.S3KeyFilterProperty
class CfnFunction_S3KeyFilterPropertyDef(BaseStruct):
    rules: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_S3KeyFilterRulePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['rules']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.S3KeyFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.S3KeyFilterRuleProperty
class CfnFunction_S3KeyFilterRulePropertyDef(BaseStruct):
    name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    value: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['name', 'value']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.S3KeyFilterRuleProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.S3LocationProperty
class CfnFunction_S3LocationPropertyDef(BaseStruct):
    bucket: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    version: typing.Union[int, float, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['bucket', 'key', 'version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.S3LocationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.S3NotificationFilterProperty
class CfnFunction_S3NotificationFilterPropertyDef(BaseStruct):
    s3_key: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_sam.CfnFunction_S3KeyFilterPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['s3_key']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.S3NotificationFilterProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.SAMPolicyTemplateProperty
class CfnFunction_SAMPolicyTemplatePropertyDef(BaseStruct):
    ami_describe_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EmptySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    aws_secrets_manager_get_secret_value_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_SecretArnSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    cloud_formation_describe_stacks_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EmptySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    cloud_watch_put_metric_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EmptySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    dynamo_db_crud_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_TableSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    dynamo_db_read_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_TableSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    dynamo_db_stream_read_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_TableStreamSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    dynamo_db_write_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_TableSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ec2_describe_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EmptySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    elasticsearch_http_post_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_DomainSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    filter_log_events_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_LogGroupSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    kinesis_crud_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_StreamSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    kinesis_stream_read_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_StreamSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    kms_decrypt_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_KeySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    lambda_invoke_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_FunctionSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    rekognition_detect_only_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EmptySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    rekognition_labels_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EmptySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    rekognition_no_data_access_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_CollectionSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    rekognition_read_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_CollectionSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    rekognition_write_only_access_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_CollectionSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    s3_crud_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_BucketSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    s3_read_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_BucketSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    s3_write_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_BucketSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ses_bulk_templated_crud_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_IdentitySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ses_crud_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_IdentitySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ses_email_template_crud_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EmptySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ses_send_bounce_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_IdentitySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sns_crud_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_TopicSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sns_publish_message_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_TopicSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sqs_poller_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_QueueSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sqs_send_message_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_QueueSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ssm_parameter_read_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_ParameterNameSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    step_functions_execution_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_StateMachineSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    vpc_access_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EmptySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['ami_describe_policy', 'aws_secrets_manager_get_secret_value_policy', 'cloud_formation_describe_stacks_policy', 'cloud_watch_put_metric_policy', 'dynamo_db_crud_policy', 'dynamo_db_read_policy', 'dynamo_db_stream_read_policy', 'dynamo_db_write_policy', 'ec2_describe_policy', 'elasticsearch_http_post_policy', 'filter_log_events_policy', 'kinesis_crud_policy', 'kinesis_stream_read_policy', 'kms_decrypt_policy', 'lambda_invoke_policy', 'rekognition_detect_only_policy', 'rekognition_labels_policy', 'rekognition_no_data_access_policy', 'rekognition_read_policy', 'rekognition_write_only_access_policy', 's3_crud_policy', 's3_read_policy', 's3_write_policy', 'ses_bulk_templated_crud_policy', 'ses_crud_policy', 'ses_email_template_crud_policy', 'ses_send_bounce_policy', 'sns_crud_policy', 'sns_publish_message_policy', 'sqs_poller_policy', 'sqs_send_message_policy', 'ssm_parameter_read_policy', 'step_functions_execution_policy', 'vpc_access_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.SAMPolicyTemplateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.ScheduleEventProperty
class CfnFunction_ScheduleEventPropertyDef(BaseStruct):
    schedule: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    input: typing.Optional[str] = pydantic.Field(None, description='')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['schedule', 'description', 'enabled', 'input', 'name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.ScheduleEventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.SecretArnSAMPTProperty
class CfnFunction_SecretArnSAMPTPropertyDef(BaseStruct):
    secret_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['secret_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.SecretArnSAMPTProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.SNSEventProperty
class CfnFunction_SNSEventPropertyDef(BaseStruct):
    topic: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['topic']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.SNSEventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.SQSEventProperty
class CfnFunction_SQSEventPropertyDef(BaseStruct):
    queue: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    batch_size: typing.Union[int, float, None] = pydantic.Field(None, description='')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['queue', 'batch_size', 'enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.SQSEventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.StateMachineSAMPTProperty
class CfnFunction_StateMachineSAMPTPropertyDef(BaseStruct):
    state_machine_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['state_machine_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.StateMachineSAMPTProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.StreamSAMPTProperty
class CfnFunction_StreamSAMPTPropertyDef(BaseStruct):
    stream_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['stream_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.StreamSAMPTProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.TableSAMPTProperty
class CfnFunction_TableSAMPTPropertyDef(BaseStruct):
    table_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['table_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.TableSAMPTProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.TableStreamSAMPTProperty
class CfnFunction_TableStreamSAMPTPropertyDef(BaseStruct):
    stream_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    table_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['stream_name', 'table_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.TableStreamSAMPTProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.TopicSAMPTProperty
class CfnFunction_TopicSAMPTPropertyDef(BaseStruct):
    topic_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['topic_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.TopicSAMPTProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunction.VpcConfigProperty
class CfnFunction_VpcConfigPropertyDef(BaseStruct):
    security_group_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    subnet_ids: typing.Union[typing.Sequence[str], _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['security_group_ids', 'subnet_ids']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction.VpcConfigProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnHttpApi.AccessLogSettingProperty
class CfnHttpApi_AccessLogSettingPropertyDef(BaseStruct):
    destination_arn: typing.Optional[str] = pydantic.Field(None, description='')
    format: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['destination_arn', 'format']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnHttpApi.AccessLogSettingProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnHttpApi.CorsConfigurationObjectProperty
class CfnHttpApi_CorsConfigurationObjectPropertyDef(BaseStruct):
    allow_credentials: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    allow_headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    allow_methods: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    allow_origins: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    expose_headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    max_age: typing.Union[int, float, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['allow_credentials', 'allow_headers', 'allow_methods', 'allow_origins', 'expose_headers', 'max_age']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnHttpApi.CorsConfigurationObjectProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnHttpApi.HttpApiAuthProperty
class CfnHttpApi_HttpApiAuthPropertyDef(BaseStruct):
    authorizers: typing.Any = pydantic.Field(None, description='')
    default_authorizer: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['authorizers', 'default_authorizer']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnHttpApi.HttpApiAuthProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnHttpApi.HttpApiDomainConfigurationProperty
class CfnHttpApi_HttpApiDomainConfigurationPropertyDef(BaseStruct):
    certificate_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    domain_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    base_path: typing.Optional[str] = pydantic.Field(None, description='')
    endpoint_configuration: typing.Optional[str] = pydantic.Field(None, description='')
    mutual_tls_authentication: typing.Union[models.UnsupportedResource, models.aws_sam.CfnHttpApi_MutualTlsAuthenticationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    route53: typing.Union[models.UnsupportedResource, models.aws_sam.CfnHttpApi_Route53ConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    security_policy: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['certificate_arn', 'domain_name', 'base_path', 'endpoint_configuration', 'mutual_tls_authentication', 'route53', 'security_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnHttpApi.HttpApiDomainConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnHttpApi.MutualTlsAuthenticationProperty
class CfnHttpApi_MutualTlsAuthenticationPropertyDef(BaseStruct):
    truststore_uri: typing.Optional[str] = pydantic.Field(None, description='')
    truststore_version: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['truststore_uri', 'truststore_version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnHttpApi.MutualTlsAuthenticationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnHttpApi.Route53ConfigurationProperty
class CfnHttpApi_Route53ConfigurationPropertyDef(BaseStruct):
    distributed_domain_name: typing.Optional[str] = pydantic.Field(None, description='')
    evaluate_target_health: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    hosted_zone_id: typing.Optional[str] = pydantic.Field(None, description='')
    hosted_zone_name: typing.Optional[str] = pydantic.Field(None, description='')
    ip_v6: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['distributed_domain_name', 'evaluate_target_health', 'hosted_zone_id', 'hosted_zone_name', 'ip_v6']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnHttpApi.Route53ConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnHttpApi.RouteSettingsProperty
class CfnHttpApi_RouteSettingsPropertyDef(BaseStruct):
    data_trace_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    detailed_metrics_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    logging_level: typing.Optional[str] = pydantic.Field(None, description='')
    throttling_burst_limit: typing.Union[int, float, None] = pydantic.Field(None, description='')
    throttling_rate_limit: typing.Union[int, float, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['data_trace_enabled', 'detailed_metrics_enabled', 'logging_level', 'throttling_burst_limit', 'throttling_rate_limit']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnHttpApi.RouteSettingsProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnHttpApi.S3LocationProperty
class CfnHttpApi_S3LocationPropertyDef(BaseStruct):
    bucket: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    version: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['bucket', 'key', 'version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnHttpApi.S3LocationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnLayerVersion.S3LocationProperty
class CfnLayerVersion_S3LocationPropertyDef(BaseStruct):
    bucket: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    version: typing.Union[int, float, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['bucket', 'key', 'version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnLayerVersion.S3LocationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnSimpleTable.PrimaryKeyProperty
class CfnSimpleTable_PrimaryKeyPropertyDef(BaseStruct):
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['type', 'name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnSimpleTable.PrimaryKeyProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnSimpleTable.ProvisionedThroughputProperty
class CfnSimpleTable_ProvisionedThroughputPropertyDef(BaseStruct):
    write_capacity_units: typing.Union[_REQUIRED_INIT_PARAM, int, float] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    read_capacity_units: typing.Union[int, float, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['write_capacity_units', 'read_capacity_units']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnSimpleTable.ProvisionedThroughputProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnSimpleTable.SSESpecificationProperty
class CfnSimpleTable_SSESpecificationPropertyDef(BaseStruct):
    sse_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['sse_enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnSimpleTable.SSESpecificationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnStateMachine.ApiEventProperty
class CfnStateMachine_ApiEventPropertyDef(BaseStruct):
    method: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    path: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    rest_api_id: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['method', 'path', 'rest_api_id']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnStateMachine.ApiEventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnStateMachine.CloudWatchEventEventProperty
class CfnStateMachine_CloudWatchEventEventPropertyDef(BaseStruct):
    pattern: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    event_bus_name: typing.Optional[str] = pydantic.Field(None, description='')
    input: typing.Optional[str] = pydantic.Field(None, description='')
    input_path: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['pattern', 'event_bus_name', 'input', 'input_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnStateMachine.CloudWatchEventEventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnStateMachine.CloudWatchLogsLogGroupProperty
class CfnStateMachine_CloudWatchLogsLogGroupPropertyDef(BaseStruct):
    log_group_arn: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['log_group_arn']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnStateMachine.CloudWatchLogsLogGroupProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnStateMachine.EventBridgeRuleEventProperty
class CfnStateMachine_EventBridgeRuleEventPropertyDef(BaseStruct):
    pattern: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    event_bus_name: typing.Optional[str] = pydantic.Field(None, description='')
    input: typing.Optional[str] = pydantic.Field(None, description='')
    input_path: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['pattern', 'event_bus_name', 'input', 'input_path']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnStateMachine.EventBridgeRuleEventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnStateMachine.EventSourceProperty
class CfnStateMachine_EventSourcePropertyDef(BaseStruct):
    properties: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_sam.CfnStateMachine_ApiEventPropertyDef, dict[str, typing.Any], models.aws_sam.CfnStateMachine_CloudWatchEventEventPropertyDef, models.aws_sam.CfnStateMachine_EventBridgeRuleEventPropertyDef, models.aws_sam.CfnStateMachine_ScheduleEventPropertyDef] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    type: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['properties', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnStateMachine.EventSourceProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnStateMachine.FunctionSAMPTProperty
class CfnStateMachine_FunctionSAMPTPropertyDef(BaseStruct):
    function_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['function_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnStateMachine.FunctionSAMPTProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnStateMachine.IAMPolicyDocumentProperty
class CfnStateMachine_IAMPolicyDocumentPropertyDef(BaseStruct):
    statement: typing.Union[typing.Any, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    version: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['statement', 'version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnStateMachine.IAMPolicyDocumentProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnStateMachine.LogDestinationProperty
class CfnStateMachine_LogDestinationPropertyDef(BaseStruct):
    cloud_watch_logs_log_group: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, models.aws_sam.CfnStateMachine_CloudWatchLogsLogGroupPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['cloud_watch_logs_log_group']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnStateMachine.LogDestinationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnStateMachine.LoggingConfigurationProperty
class CfnStateMachine_LoggingConfigurationPropertyDef(BaseStruct):
    destinations: typing.Union[_REQUIRED_INIT_PARAM, models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_sam.CfnStateMachine_LogDestinationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    include_execution_data: typing.Union[_REQUIRED_INIT_PARAM, bool, models.UnsupportedResource] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    level: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['destinations', 'include_execution_data', 'level']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnStateMachine.LoggingConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnStateMachine.S3LocationProperty
class CfnStateMachine_S3LocationPropertyDef(BaseStruct):
    bucket: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    key: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    version: typing.Union[int, float, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['bucket', 'key', 'version']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnStateMachine.S3LocationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnStateMachine.SAMPolicyTemplateProperty
class CfnStateMachine_SAMPolicyTemplatePropertyDef(BaseStruct):
    lambda_invoke_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnStateMachine_FunctionSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    step_functions_execution_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnStateMachine_StateMachineSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['lambda_invoke_policy', 'step_functions_execution_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnStateMachine.SAMPolicyTemplateProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnStateMachine.ScheduleEventProperty
class CfnStateMachine_ScheduleEventPropertyDef(BaseStruct):
    schedule: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    input: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['schedule', 'input']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnStateMachine.ScheduleEventProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnStateMachine.StateMachineSAMPTProperty
class CfnStateMachine_StateMachineSAMPTPropertyDef(BaseStruct):
    state_machine_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    _init_params: typing.ClassVar[list[str]] = ['state_machine_name']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnStateMachine.StateMachineSAMPTProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnStateMachine.TracingConfigurationProperty
class CfnStateMachine_TracingConfigurationPropertyDef(BaseStruct):
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['enabled']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnStateMachine.TracingConfigurationProperty'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnApi
class CfnApiDef(BaseCfnResource):
    stage_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    access_log_setting: typing.Union[models.UnsupportedResource, models.aws_sam.CfnApi_AccessLogSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    always_deploy: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    auth: typing.Union[models.UnsupportedResource, models.aws_sam.CfnApi_AuthPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    binary_media_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    cache_cluster_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    cache_cluster_size: typing.Optional[str] = pydantic.Field(None, description='')
    canary_setting: typing.Union[models.UnsupportedResource, models.aws_sam.CfnApi_CanarySettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    cors: typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnApi_CorsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    definition_body: typing.Any = pydantic.Field(None, description='')
    definition_uri: typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnApi_S3LocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    disable_execute_api_endpoint: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    domain: typing.Union[models.UnsupportedResource, models.aws_sam.CfnApi_DomainConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    endpoint_configuration: typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnApi_EndpointConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    gateway_responses: typing.Any = pydantic.Field(None, description='')
    method_settings: typing.Union[typing.Sequence[typing.Any], models.UnsupportedResource, None] = pydantic.Field(None, description='')
    minimum_compression_size: typing.Union[int, float, None] = pydantic.Field(None, description='')
    models_: typing.Any = pydantic.Field(None, description='', alias='models')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    open_api_version: typing.Optional[str] = pydantic.Field(None, description='')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='')
    tracing_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    variables: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['stage_name', 'access_log_setting', 'always_deploy', 'auth', 'binary_media_types', 'cache_cluster_enabled', 'cache_cluster_size', 'canary_setting', 'cors', 'definition_body', 'definition_uri', 'description', 'disable_execute_api_endpoint', 'domain', 'endpoint_configuration', 'gateway_responses', 'method_settings', 'minimum_compression_size', 'models', 'name', 'open_api_version', 'tags', 'tracing_enabled', 'variables']
    _method_names: typing.ClassVar[list[str]] = ['AccessLogSettingProperty', 'AuthProperty', 'CanarySettingProperty', 'CorsConfigurationProperty', 'DomainConfigurationProperty', 'EndpointConfigurationProperty', 'MutualTlsAuthenticationProperty', 'Route53ConfigurationProperty', 'S3LocationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnApi'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_sam.CfnApiDefConfig] = pydantic.Field(None)


class CfnApiDefConfig(pydantic.BaseModel):
    AccessLogSettingProperty: typing.Optional[list[models.aws_sam.CfnApiDefAccesslogsettingpropertyParams]] = pydantic.Field(None, description='')
    AuthProperty: typing.Optional[list[models.aws_sam.CfnApiDefAuthpropertyParams]] = pydantic.Field(None, description='')
    CanarySettingProperty: typing.Optional[list[models.aws_sam.CfnApiDefCanarysettingpropertyParams]] = pydantic.Field(None, description='')
    CorsConfigurationProperty: typing.Optional[list[models.aws_sam.CfnApiDefCorsconfigurationpropertyParams]] = pydantic.Field(None, description='')
    DomainConfigurationProperty: typing.Optional[list[models.aws_sam.CfnApiDefDomainconfigurationpropertyParams]] = pydantic.Field(None, description='')
    EndpointConfigurationProperty: typing.Optional[list[models.aws_sam.CfnApiDefEndpointconfigurationpropertyParams]] = pydantic.Field(None, description='')
    MutualTlsAuthenticationProperty: typing.Optional[list[models.aws_sam.CfnApiDefMutualtlsauthenticationpropertyParams]] = pydantic.Field(None, description='')
    Route53ConfigurationProperty: typing.Optional[list[models.aws_sam.CfnApiDefRoute53ConfigurationpropertyParams]] = pydantic.Field(None, description='')
    S3LocationProperty: typing.Optional[list[models.aws_sam.CfnApiDefS3LocationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_sam.CfnApiDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_sam.CfnApiDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_sam.CfnApiDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_sam.CfnApiDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_sam.CfnApiDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_sam.CfnApiDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_sam.CfnApiDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_sam.CfnApiDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_sam.CfnApiDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_sam.CfnApiDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_sam.CfnApiDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_sam.CfnApiDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_sam.CfnApiDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnApiDefAccesslogsettingpropertyParams(pydantic.BaseModel):
    destination_arn: typing.Optional[str] = pydantic.Field(None, description='')
    format: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApiDefAuthpropertyParams(pydantic.BaseModel):
    add_default_authorizer_to_cors_preflight: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    authorizers: typing.Any = pydantic.Field(None, description='')
    default_authorizer: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApiDefCanarysettingpropertyParams(pydantic.BaseModel):
    deployment_id: typing.Optional[str] = pydantic.Field(None, description='')
    percent_traffic: typing.Union[int, float, None] = pydantic.Field(None, description='')
    stage_variable_overrides: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    use_stage_cache: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnApiDefCorsconfigurationpropertyParams(pydantic.BaseModel):
    allow_origin: str = pydantic.Field(..., description='')
    allow_credentials: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    allow_headers: typing.Optional[str] = pydantic.Field(None, description='')
    allow_methods: typing.Optional[str] = pydantic.Field(None, description='')
    max_age: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApiDefDomainconfigurationpropertyParams(pydantic.BaseModel):
    certificate_arn: str = pydantic.Field(..., description='')
    domain_name: str = pydantic.Field(..., description='')
    base_path: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    endpoint_configuration: typing.Optional[str] = pydantic.Field(None, description='')
    mutual_tls_authentication: typing.Union[models.UnsupportedResource, models.aws_sam.CfnApi_MutualTlsAuthenticationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ownership_verification_certificate_arn: typing.Optional[str] = pydantic.Field(None, description='')
    route53: typing.Union[models.UnsupportedResource, models.aws_sam.CfnApi_Route53ConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    security_policy: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApiDefEndpointconfigurationpropertyParams(pydantic.BaseModel):
    type: typing.Optional[str] = pydantic.Field(None, description='')
    vpc_endpoint_ids: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnApiDefMutualtlsauthenticationpropertyParams(pydantic.BaseModel):
    truststore_uri: typing.Optional[str] = pydantic.Field(None, description='')
    truststore_version: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnApiDefRoute53ConfigurationpropertyParams(pydantic.BaseModel):
    distributed_domain_name: typing.Optional[str] = pydantic.Field(None, description='')
    evaluate_target_health: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    hosted_zone_id: typing.Optional[str] = pydantic.Field(None, description='')
    hosted_zone_name: typing.Optional[str] = pydantic.Field(None, description='')
    ip_v6: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnApiDefS3LocationpropertyParams(pydantic.BaseModel):
    bucket: str = pydantic.Field(..., description='')
    key: str = pydantic.Field(..., description='')
    version: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnApiDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnApiDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApiDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnApiDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApiDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnApiDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnApiDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnApiDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnApiDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnApiDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApiDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnApiDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnApiDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApiDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sam.CfnApplication
class CfnApplicationDef(BaseCfnResource):
    location: typing.Union[_REQUIRED_INIT_PARAM, str, models.UnsupportedResource, models.aws_sam.CfnApplication_ApplicationLocationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    notification_arns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    parameters: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='')
    timeout_in_minutes: typing.Union[int, float, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['location', 'notification_arns', 'parameters', 'tags', 'timeout_in_minutes']
    _method_names: typing.ClassVar[list[str]] = ['ApplicationLocationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnApplication'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_sam.CfnApplicationDefConfig] = pydantic.Field(None)


class CfnApplicationDefConfig(pydantic.BaseModel):
    ApplicationLocationProperty: typing.Optional[list[models.aws_sam.CfnApplicationDefApplicationlocationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_sam.CfnApplicationDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_sam.CfnApplicationDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_sam.CfnApplicationDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_sam.CfnApplicationDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_sam.CfnApplicationDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_sam.CfnApplicationDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_sam.CfnApplicationDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_sam.CfnApplicationDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_sam.CfnApplicationDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_sam.CfnApplicationDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_sam.CfnApplicationDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_sam.CfnApplicationDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_sam.CfnApplicationDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnApplicationDefApplicationlocationpropertyParams(pydantic.BaseModel):
    application_id: str = pydantic.Field(..., description='')
    semantic_version: str = pydantic.Field(..., description='')
    ...

class CfnApplicationDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnApplicationDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApplicationDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnApplicationDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApplicationDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnApplicationDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnApplicationDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnApplicationDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnApplicationDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnApplicationDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnApplicationDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnApplicationDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnApplicationDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnApplicationDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sam.CfnFunction
class CfnFunctionDef(BaseCfnResource):
    architectures: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    assume_role_policy_document: typing.Any = pydantic.Field(None, description='')
    auto_publish_alias: typing.Optional[str] = pydantic.Field(None, description='')
    auto_publish_code_sha256: typing.Optional[str] = pydantic.Field(None, description='')
    code_signing_config_arn: typing.Optional[str] = pydantic.Field(None, description='')
    code_uri: typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnFunction_S3LocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    dead_letter_queue: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_DeadLetterQueuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    deployment_preference: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_DeploymentPreferencePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    environment: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_FunctionEnvironmentPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ephemeral_storage: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EphemeralStoragePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    event_invoke_config: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EventInvokeConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    events: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EventSourcePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    file_system_configs: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_FileSystemConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    function_name: typing.Optional[str] = pydantic.Field(None, description='')
    function_url_config: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_FunctionUrlConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    handler: typing.Optional[str] = pydantic.Field(None, description='')
    image_config: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_ImageConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    image_uri: typing.Optional[str] = pydantic.Field(None, description='')
    inline_code: typing.Optional[str] = pydantic.Field(None, description='')
    kms_key_arn: typing.Optional[str] = pydantic.Field(None, description='')
    layers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    memory_size: typing.Union[int, float, None] = pydantic.Field(None, description='')
    package_type: typing.Optional[str] = pydantic.Field(None, description='')
    permissions_boundary: typing.Optional[str] = pydantic.Field(None, description='')
    policies: typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnFunction_IAMPolicyDocumentPropertyDef, dict[str, typing.Any], typing.Sequence[typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnFunction_IAMPolicyDocumentPropertyDef, dict[str, typing.Any], models.aws_sam.CfnFunction_SAMPolicyTemplatePropertyDef]], None] = pydantic.Field(None, description='')
    provisioned_concurrency_config: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_ProvisionedConcurrencyConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    reserved_concurrent_executions: typing.Union[int, float, None] = pydantic.Field(None, description='')
    role: typing.Optional[str] = pydantic.Field(None, description='')
    runtime: typing.Optional[str] = pydantic.Field(None, description='')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='')
    timeout: typing.Union[int, float, None] = pydantic.Field(None, description='')
    tracing: typing.Optional[str] = pydantic.Field(None, description='')
    version_description: typing.Optional[str] = pydantic.Field(None, description='')
    vpc_config: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_VpcConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['architectures', 'assume_role_policy_document', 'auto_publish_alias', 'auto_publish_code_sha256', 'code_signing_config_arn', 'code_uri', 'dead_letter_queue', 'deployment_preference', 'description', 'environment', 'ephemeral_storage', 'event_invoke_config', 'events', 'file_system_configs', 'function_name', 'function_url_config', 'handler', 'image_config', 'image_uri', 'inline_code', 'kms_key_arn', 'layers', 'memory_size', 'package_type', 'permissions_boundary', 'policies', 'provisioned_concurrency_config', 'reserved_concurrent_executions', 'role', 'runtime', 'tags', 'timeout', 'tracing', 'version_description', 'vpc_config']
    _method_names: typing.ClassVar[list[str]] = ['AlexaSkillEventProperty', 'ApiEventProperty', 'AuthProperty', 'AuthResourcePolicyProperty', 'BucketSAMPTProperty', 'CloudWatchEventEventProperty', 'CloudWatchLogsEventProperty', 'CognitoEventProperty', 'CollectionSAMPTProperty', 'CorsConfigurationProperty', 'DeadLetterQueueProperty', 'DeploymentPreferenceProperty', 'DestinationConfigProperty', 'DestinationProperty', 'DomainSAMPTProperty', 'DynamoDBEventProperty', 'EmptySAMPTProperty', 'EphemeralStorageProperty', 'EventBridgeRuleEventProperty', 'EventInvokeConfigProperty', 'EventInvokeDestinationConfigProperty', 'EventSourceProperty', 'FileSystemConfigProperty', 'FunctionEnvironmentProperty', 'FunctionSAMPTProperty', 'FunctionUrlConfigProperty', 'HooksProperty', 'HttpApiEventProperty', 'HttpApiFunctionAuthProperty', 'IAMPolicyDocumentProperty', 'IdentitySAMPTProperty', 'ImageConfigProperty', 'IoTRuleEventProperty', 'KeySAMPTProperty', 'KinesisEventProperty', 'LogGroupSAMPTProperty', 'ParameterNameSAMPTProperty', 'ProvisionedConcurrencyConfigProperty', 'QueueSAMPTProperty', 'RequestModelProperty', 'RequestParameterProperty', 'RouteSettingsProperty', 'S3EventProperty', 'S3KeyFilterProperty', 'S3KeyFilterRuleProperty', 'S3LocationProperty', 'S3NotificationFilterProperty', 'SAMPolicyTemplateProperty', 'SNSEventProperty', 'SQSEventProperty', 'ScheduleEventProperty', 'SecretArnSAMPTProperty', 'StateMachineSAMPTProperty', 'StreamSAMPTProperty', 'TableSAMPTProperty', 'TableStreamSAMPTProperty', 'TopicSAMPTProperty', 'VpcConfigProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunction'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_sam.CfnFunctionDefConfig] = pydantic.Field(None)


class CfnFunctionDefConfig(pydantic.BaseModel):
    AlexaSkillEventProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefAlexaskilleventpropertyParams]] = pydantic.Field(None, description='')
    ApiEventProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefApieventpropertyParams]] = pydantic.Field(None, description='')
    AuthProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefAuthpropertyParams]] = pydantic.Field(None, description='')
    AuthResourcePolicyProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefAuthresourcepolicypropertyParams]] = pydantic.Field(None, description='')
    BucketSAMPTProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefBucketsamptpropertyParams]] = pydantic.Field(None, description='')
    CloudWatchEventEventProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefCloudwatcheventeventpropertyParams]] = pydantic.Field(None, description='')
    CloudWatchLogsEventProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefCloudwatchlogseventpropertyParams]] = pydantic.Field(None, description='')
    CognitoEventProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefCognitoeventpropertyParams]] = pydantic.Field(None, description='')
    CollectionSAMPTProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefCollectionsamptpropertyParams]] = pydantic.Field(None, description='')
    CorsConfigurationProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefCorsconfigurationpropertyParams]] = pydantic.Field(None, description='')
    DeadLetterQueueProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefDeadletterqueuepropertyParams]] = pydantic.Field(None, description='')
    DeploymentPreferenceProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefDeploymentpreferencepropertyParams]] = pydantic.Field(None, description='')
    DestinationConfigProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefDestinationconfigpropertyParams]] = pydantic.Field(None, description='')
    DestinationProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefDestinationpropertyParams]] = pydantic.Field(None, description='')
    DomainSAMPTProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefDomainsamptpropertyParams]] = pydantic.Field(None, description='')
    DynamoDBEventProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefDynamodbeventpropertyParams]] = pydantic.Field(None, description='')
    EmptySAMPTProperty: typing.Optional[bool] = pydantic.Field(None, description='')
    EphemeralStorageProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefEphemeralstoragepropertyParams]] = pydantic.Field(None, description='')
    EventBridgeRuleEventProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefEventbridgeruleeventpropertyParams]] = pydantic.Field(None, description='')
    EventInvokeConfigProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefEventinvokeconfigpropertyParams]] = pydantic.Field(None, description='')
    EventInvokeDestinationConfigProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefEventinvokedestinationconfigpropertyParams]] = pydantic.Field(None, description='')
    EventSourceProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefEventsourcepropertyParams]] = pydantic.Field(None, description='')
    FileSystemConfigProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefFilesystemconfigpropertyParams]] = pydantic.Field(None, description='')
    FunctionEnvironmentProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefFunctionenvironmentpropertyParams]] = pydantic.Field(None, description='')
    FunctionSAMPTProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefFunctionsamptpropertyParams]] = pydantic.Field(None, description='')
    FunctionUrlConfigProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefFunctionurlconfigpropertyParams]] = pydantic.Field(None, description='')
    HooksProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefHookspropertyParams]] = pydantic.Field(None, description='')
    HttpApiEventProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefHttpapieventpropertyParams]] = pydantic.Field(None, description='')
    HttpApiFunctionAuthProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefHttpapifunctionauthpropertyParams]] = pydantic.Field(None, description='')
    IAMPolicyDocumentProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefIampolicydocumentpropertyParams]] = pydantic.Field(None, description='')
    IdentitySAMPTProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefIdentitysamptpropertyParams]] = pydantic.Field(None, description='')
    ImageConfigProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefImageconfigpropertyParams]] = pydantic.Field(None, description='')
    IoTRuleEventProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefIotruleeventpropertyParams]] = pydantic.Field(None, description='')
    KeySAMPTProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefKeysamptpropertyParams]] = pydantic.Field(None, description='')
    KinesisEventProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefKinesiseventpropertyParams]] = pydantic.Field(None, description='')
    LogGroupSAMPTProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefLoggroupsamptpropertyParams]] = pydantic.Field(None, description='')
    ParameterNameSAMPTProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefParameternamesamptpropertyParams]] = pydantic.Field(None, description='')
    ProvisionedConcurrencyConfigProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefProvisionedconcurrencyconfigpropertyParams]] = pydantic.Field(None, description='')
    QueueSAMPTProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefQueuesamptpropertyParams]] = pydantic.Field(None, description='')
    RequestModelProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefRequestmodelpropertyParams]] = pydantic.Field(None, description='')
    RequestParameterProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefRequestparameterpropertyParams]] = pydantic.Field(None, description='')
    RouteSettingsProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefRoutesettingspropertyParams]] = pydantic.Field(None, description='')
    S3EventProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefS3EventpropertyParams]] = pydantic.Field(None, description='')
    S3KeyFilterProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefS3KeyfilterpropertyParams]] = pydantic.Field(None, description='')
    S3KeyFilterRuleProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefS3KeyfilterrulepropertyParams]] = pydantic.Field(None, description='')
    S3LocationProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefS3LocationpropertyParams]] = pydantic.Field(None, description='')
    S3NotificationFilterProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefS3NotificationfilterpropertyParams]] = pydantic.Field(None, description='')
    SAMPolicyTemplateProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefSampolicytemplatepropertyParams]] = pydantic.Field(None, description='')
    SNSEventProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefSnseventpropertyParams]] = pydantic.Field(None, description='')
    SQSEventProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefSqseventpropertyParams]] = pydantic.Field(None, description='')
    ScheduleEventProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefScheduleeventpropertyParams]] = pydantic.Field(None, description='')
    SecretArnSAMPTProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefSecretarnsamptpropertyParams]] = pydantic.Field(None, description='')
    StateMachineSAMPTProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefStatemachinesamptpropertyParams]] = pydantic.Field(None, description='')
    StreamSAMPTProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefStreamsamptpropertyParams]] = pydantic.Field(None, description='')
    TableSAMPTProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefTablesamptpropertyParams]] = pydantic.Field(None, description='')
    TableStreamSAMPTProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefTablestreamsamptpropertyParams]] = pydantic.Field(None, description='')
    TopicSAMPTProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefTopicsamptpropertyParams]] = pydantic.Field(None, description='')
    VpcConfigProperty: typing.Optional[list[models.aws_sam.CfnFunctionDefVpcconfigpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_sam.CfnFunctionDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_sam.CfnFunctionDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_sam.CfnFunctionDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_sam.CfnFunctionDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_sam.CfnFunctionDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_sam.CfnFunctionDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_sam.CfnFunctionDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_sam.CfnFunctionDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_sam.CfnFunctionDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_sam.CfnFunctionDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_sam.CfnFunctionDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_sam.CfnFunctionDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_sam.CfnFunctionDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnFunctionDefAlexaskilleventpropertyParams(pydantic.BaseModel):
    skill_id: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefApieventpropertyParams(pydantic.BaseModel):
    method: str = pydantic.Field(..., description='')
    path: str = pydantic.Field(..., description='')
    auth: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_AuthPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    request_model: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_RequestModelPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    request_parameters: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnFunction_RequestParameterPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    rest_api_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefAuthpropertyParams(pydantic.BaseModel):
    api_key_required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    authorization_scopes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    authorizer: typing.Optional[str] = pydantic.Field(None, description='')
    resource_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_AuthResourcePolicyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefAuthresourcepolicypropertyParams(pydantic.BaseModel):
    aws_account_blacklist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    aws_account_whitelist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    custom_statements: typing.Union[typing.Sequence[typing.Any], models.UnsupportedResource, None] = pydantic.Field(None, description='')
    intrinsic_vpc_blacklist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    intrinsic_vpce_blacklist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    intrinsic_vpce_whitelist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    intrinsic_vpc_whitelist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ip_range_blacklist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ip_range_whitelist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    source_vpc_blacklist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    source_vpc_whitelist: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefBucketsamptpropertyParams(pydantic.BaseModel):
    bucket_name: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefCloudwatcheventeventpropertyParams(pydantic.BaseModel):
    pattern: typing.Any = pydantic.Field(..., description='')
    input: typing.Optional[str] = pydantic.Field(None, description='')
    input_path: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefCloudwatchlogseventpropertyParams(pydantic.BaseModel):
    filter_pattern: str = pydantic.Field(..., description='')
    log_group_name: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefCognitoeventpropertyParams(pydantic.BaseModel):
    trigger: str = pydantic.Field(..., description='')
    user_pool: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefCollectionsamptpropertyParams(pydantic.BaseModel):
    collection_id: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefCorsconfigurationpropertyParams(pydantic.BaseModel):
    allow_origin: str = pydantic.Field(..., description='')
    allow_credentials: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    allow_headers: typing.Optional[str] = pydantic.Field(None, description='')
    allow_methods: typing.Optional[str] = pydantic.Field(None, description='')
    max_age: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefDeadletterqueuepropertyParams(pydantic.BaseModel):
    target_arn: str = pydantic.Field(..., description='')
    type: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefDeploymentpreferencepropertyParams(pydantic.BaseModel):
    alarms: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    hooks: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_HooksPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    role: typing.Optional[str] = pydantic.Field(None, description='')
    type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefDestinationconfigpropertyParams(pydantic.BaseModel):
    on_failure: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_DestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnFunctionDefDestinationpropertyParams(pydantic.BaseModel):
    destination: str = pydantic.Field(..., description='')
    type: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefDomainsamptpropertyParams(pydantic.BaseModel):
    domain_name: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefDynamodbeventpropertyParams(pydantic.BaseModel):
    starting_position: str = pydantic.Field(..., description='')
    stream: str = pydantic.Field(..., description='')
    batch_size: typing.Union[int, float, None] = pydantic.Field(None, description='')
    bisect_batch_on_function_error: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    destination_config: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_DestinationConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    maximum_batching_window_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    maximum_record_age_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    maximum_retry_attempts: typing.Union[int, float, None] = pydantic.Field(None, description='')
    parallelization_factor: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefEphemeralstoragepropertyParams(pydantic.BaseModel):
    size: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnFunctionDefEventbridgeruleeventpropertyParams(pydantic.BaseModel):
    pattern: typing.Any = pydantic.Field(..., description='')
    event_bus_name: typing.Optional[str] = pydantic.Field(None, description='')
    input: typing.Optional[str] = pydantic.Field(None, description='')
    input_path: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefEventinvokeconfigpropertyParams(pydantic.BaseModel):
    destination_config: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EventInvokeDestinationConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    maximum_event_age_in_seconds: typing.Union[int, float, None] = pydantic.Field(None, description='')
    maximum_retry_attempts: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefEventinvokedestinationconfigpropertyParams(pydantic.BaseModel):
    on_failure: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_DestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    on_success: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_DestinationPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnFunctionDefEventsourcepropertyParams(pydantic.BaseModel):
    properties: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_AlexaSkillEventPropertyDef, dict[str, typing.Any], models.aws_sam.CfnFunction_ApiEventPropertyDef, models.aws_sam.CfnFunction_CloudWatchEventEventPropertyDef, models.aws_sam.CfnFunction_CloudWatchLogsEventPropertyDef, models.aws_sam.CfnFunction_CognitoEventPropertyDef, models.aws_sam.CfnFunction_DynamoDBEventPropertyDef, models.aws_sam.CfnFunction_EventBridgeRuleEventPropertyDef, models.aws_sam.CfnFunction_HttpApiEventPropertyDef, models.aws_sam.CfnFunction_IoTRuleEventPropertyDef, models.aws_sam.CfnFunction_KinesisEventPropertyDef, models.aws_sam.CfnFunction_S3EventPropertyDef, models.aws_sam.CfnFunction_ScheduleEventPropertyDef, models.aws_sam.CfnFunction_SNSEventPropertyDef, models.aws_sam.CfnFunction_SQSEventPropertyDef] = pydantic.Field(..., description='')
    type: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefFilesystemconfigpropertyParams(pydantic.BaseModel):
    arn: typing.Optional[str] = pydantic.Field(None, description='')
    local_mount_path: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefFunctionenvironmentpropertyParams(pydantic.BaseModel):
    variables: typing.Union[models.UnsupportedResource, typing.Mapping[str, str]] = pydantic.Field(..., description='')
    ...

class CfnFunctionDefFunctionsamptpropertyParams(pydantic.BaseModel):
    function_name: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefFunctionurlconfigpropertyParams(pydantic.BaseModel):
    auth_type: str = pydantic.Field(..., description='')
    cors: typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnFunction_CorsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    invoke_mode: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefHookspropertyParams(pydantic.BaseModel):
    post_traffic: typing.Optional[str] = pydantic.Field(None, description='')
    pre_traffic: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefHttpapieventpropertyParams(pydantic.BaseModel):
    api_id: typing.Optional[str] = pydantic.Field(None, description='')
    auth: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_HttpApiFunctionAuthPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    method: typing.Optional[str] = pydantic.Field(None, description='')
    path: typing.Optional[str] = pydantic.Field(None, description='')
    payload_format_version: typing.Optional[str] = pydantic.Field(None, description='')
    route_settings: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_RouteSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    timeout_in_millis: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefHttpapifunctionauthpropertyParams(pydantic.BaseModel):
    authorization_scopes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    authorizer: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefIampolicydocumentpropertyParams(pydantic.BaseModel):
    statement: typing.Any = pydantic.Field(..., description='')
    version: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefIdentitysamptpropertyParams(pydantic.BaseModel):
    identity_name: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefImageconfigpropertyParams(pydantic.BaseModel):
    command: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    entry_point: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    working_directory: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefIotruleeventpropertyParams(pydantic.BaseModel):
    sql: str = pydantic.Field(..., description='')
    aws_iot_sql_version: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefKeysamptpropertyParams(pydantic.BaseModel):
    key_id: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefKinesiseventpropertyParams(pydantic.BaseModel):
    starting_position: str = pydantic.Field(..., description='')
    stream: str = pydantic.Field(..., description='')
    batch_size: typing.Union[int, float, None] = pydantic.Field(None, description='')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    function_response_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefLoggroupsamptpropertyParams(pydantic.BaseModel):
    log_group_name: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefParameternamesamptpropertyParams(pydantic.BaseModel):
    parameter_name: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefProvisionedconcurrencyconfigpropertyParams(pydantic.BaseModel):
    provisioned_concurrent_executions: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefQueuesamptpropertyParams(pydantic.BaseModel):
    queue_name: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefRequestmodelpropertyParams(pydantic.BaseModel):
    model: str = pydantic.Field(..., description='')
    required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    validate_body: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    validate_parameters: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefRequestparameterpropertyParams(pydantic.BaseModel):
    caching: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    required: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefRoutesettingspropertyParams(pydantic.BaseModel):
    data_trace_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    detailed_metrics_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    logging_level: typing.Optional[str] = pydantic.Field(None, description='')
    throttling_burst_limit: typing.Union[int, float, None] = pydantic.Field(None, description='')
    throttling_rate_limit: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefS3EventpropertyParams(pydantic.BaseModel):
    bucket: str = pydantic.Field(..., description='')
    events: str = pydantic.Field(..., description='')
    filter: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_S3NotificationFilterPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefS3KeyfilterpropertyParams(pydantic.BaseModel):
    rules: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_S3KeyFilterRulePropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    ...

class CfnFunctionDefS3KeyfilterrulepropertyParams(pydantic.BaseModel):
    name: str = pydantic.Field(..., description='')
    value: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefS3LocationpropertyParams(pydantic.BaseModel):
    bucket: str = pydantic.Field(..., description='')
    key: str = pydantic.Field(..., description='')
    version: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefS3NotificationfilterpropertyParams(pydantic.BaseModel):
    s3_key: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_S3KeyFilterPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnFunctionDefSampolicytemplatepropertyParams(pydantic.BaseModel):
    ami_describe_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EmptySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    aws_secrets_manager_get_secret_value_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_SecretArnSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    cloud_formation_describe_stacks_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EmptySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    cloud_watch_put_metric_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EmptySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    dynamo_db_crud_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_TableSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    dynamo_db_read_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_TableSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    dynamo_db_stream_read_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_TableStreamSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    dynamo_db_write_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_TableSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ec2_describe_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EmptySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    elasticsearch_http_post_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_DomainSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    filter_log_events_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_LogGroupSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    kinesis_crud_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_StreamSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    kinesis_stream_read_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_StreamSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    kms_decrypt_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_KeySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    lambda_invoke_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_FunctionSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    rekognition_detect_only_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EmptySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    rekognition_labels_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EmptySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    rekognition_no_data_access_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_CollectionSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    rekognition_read_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_CollectionSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    rekognition_write_only_access_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_CollectionSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    s3_crud_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_BucketSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    s3_read_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_BucketSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    s3_write_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_BucketSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ses_bulk_templated_crud_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_IdentitySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ses_crud_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_IdentitySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ses_email_template_crud_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EmptySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ses_send_bounce_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_IdentitySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sns_crud_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_TopicSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sns_publish_message_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_TopicSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sqs_poller_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_QueueSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sqs_send_message_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_QueueSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ssm_parameter_read_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_ParameterNameSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    step_functions_execution_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_StateMachineSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    vpc_access_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EmptySAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefSnseventpropertyParams(pydantic.BaseModel):
    topic: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefSqseventpropertyParams(pydantic.BaseModel):
    queue: str = pydantic.Field(..., description='')
    batch_size: typing.Union[int, float, None] = pydantic.Field(None, description='')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefScheduleeventpropertyParams(pydantic.BaseModel):
    schedule: str = pydantic.Field(..., description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    input: typing.Optional[str] = pydantic.Field(None, description='')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnFunctionDefSecretarnsamptpropertyParams(pydantic.BaseModel):
    secret_arn: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefStatemachinesamptpropertyParams(pydantic.BaseModel):
    state_machine_name: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefStreamsamptpropertyParams(pydantic.BaseModel):
    stream_name: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefTablesamptpropertyParams(pydantic.BaseModel):
    table_name: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefTablestreamsamptpropertyParams(pydantic.BaseModel):
    stream_name: str = pydantic.Field(..., description='')
    table_name: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefTopicsamptpropertyParams(pydantic.BaseModel):
    topic_name: str = pydantic.Field(..., description='')
    ...

class CfnFunctionDefVpcconfigpropertyParams(pydantic.BaseModel):
    security_group_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    subnet_ids: typing.Sequence[str] = pydantic.Field(..., description='')
    ...

class CfnFunctionDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnFunctionDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFunctionDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnFunctionDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFunctionDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnFunctionDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnFunctionDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnFunctionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnFunctionDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnFunctionDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnFunctionDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnFunctionDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnFunctionDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnFunctionDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sam.CfnHttpApi
class CfnHttpApiDef(BaseCfnResource):
    access_log_setting: typing.Union[models.UnsupportedResource, models.aws_sam.CfnHttpApi_AccessLogSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    auth: typing.Union[models.UnsupportedResource, models.aws_sam.CfnHttpApi_HttpApiAuthPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    cors_configuration: typing.Union[bool, models.UnsupportedResource, models.aws_sam.CfnHttpApi_CorsConfigurationObjectPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    default_route_settings: typing.Union[models.UnsupportedResource, models.aws_sam.CfnHttpApi_RouteSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    definition_body: typing.Any = pydantic.Field(None, description='')
    definition_uri: typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnHttpApi_S3LocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    disable_execute_api_endpoint: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    domain: typing.Union[models.UnsupportedResource, models.aws_sam.CfnHttpApi_HttpApiDomainConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    fail_on_warnings: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    route_settings: typing.Union[models.UnsupportedResource, models.aws_sam.CfnHttpApi_RouteSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    stage_name: typing.Optional[str] = pydantic.Field(None, description='')
    stage_variables: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['access_log_setting', 'auth', 'cors_configuration', 'default_route_settings', 'definition_body', 'definition_uri', 'description', 'disable_execute_api_endpoint', 'domain', 'fail_on_warnings', 'route_settings', 'stage_name', 'stage_variables', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['AccessLogSettingProperty', 'CorsConfigurationObjectProperty', 'HttpApiAuthProperty', 'HttpApiDomainConfigurationProperty', 'MutualTlsAuthenticationProperty', 'Route53ConfigurationProperty', 'RouteSettingsProperty', 'S3LocationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnHttpApi'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_sam.CfnHttpApiDefConfig] = pydantic.Field(None)


class CfnHttpApiDefConfig(pydantic.BaseModel):
    AccessLogSettingProperty: typing.Optional[list[models.aws_sam.CfnHttpApiDefAccesslogsettingpropertyParams]] = pydantic.Field(None, description='')
    CorsConfigurationObjectProperty: typing.Optional[list[models.aws_sam.CfnHttpApiDefCorsconfigurationobjectpropertyParams]] = pydantic.Field(None, description='')
    HttpApiAuthProperty: typing.Optional[list[models.aws_sam.CfnHttpApiDefHttpapiauthpropertyParams]] = pydantic.Field(None, description='')
    HttpApiDomainConfigurationProperty: typing.Optional[list[models.aws_sam.CfnHttpApiDefHttpapidomainconfigurationpropertyParams]] = pydantic.Field(None, description='')
    MutualTlsAuthenticationProperty: typing.Optional[list[models.aws_sam.CfnHttpApiDefMutualtlsauthenticationpropertyParams]] = pydantic.Field(None, description='')
    Route53ConfigurationProperty: typing.Optional[list[models.aws_sam.CfnHttpApiDefRoute53ConfigurationpropertyParams]] = pydantic.Field(None, description='')
    RouteSettingsProperty: typing.Optional[list[models.aws_sam.CfnHttpApiDefRoutesettingspropertyParams]] = pydantic.Field(None, description='')
    S3LocationProperty: typing.Optional[list[models.aws_sam.CfnHttpApiDefS3LocationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_sam.CfnHttpApiDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_sam.CfnHttpApiDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_sam.CfnHttpApiDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_sam.CfnHttpApiDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_sam.CfnHttpApiDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_sam.CfnHttpApiDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_sam.CfnHttpApiDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_sam.CfnHttpApiDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_sam.CfnHttpApiDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_sam.CfnHttpApiDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_sam.CfnHttpApiDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_sam.CfnHttpApiDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_sam.CfnHttpApiDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnHttpApiDefAccesslogsettingpropertyParams(pydantic.BaseModel):
    destination_arn: typing.Optional[str] = pydantic.Field(None, description='')
    format: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnHttpApiDefCorsconfigurationobjectpropertyParams(pydantic.BaseModel):
    allow_credentials: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    allow_headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    allow_methods: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    allow_origins: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    expose_headers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    max_age: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnHttpApiDefHttpapiauthpropertyParams(pydantic.BaseModel):
    authorizers: typing.Any = pydantic.Field(None, description='')
    default_authorizer: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnHttpApiDefHttpapidomainconfigurationpropertyParams(pydantic.BaseModel):
    certificate_arn: str = pydantic.Field(..., description='')
    domain_name: str = pydantic.Field(..., description='')
    base_path: typing.Optional[str] = pydantic.Field(None, description='')
    endpoint_configuration: typing.Optional[str] = pydantic.Field(None, description='')
    mutual_tls_authentication: typing.Union[models.UnsupportedResource, models.aws_sam.CfnHttpApi_MutualTlsAuthenticationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    route53: typing.Union[models.UnsupportedResource, models.aws_sam.CfnHttpApi_Route53ConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    security_policy: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnHttpApiDefMutualtlsauthenticationpropertyParams(pydantic.BaseModel):
    truststore_uri: typing.Optional[str] = pydantic.Field(None, description='')
    truststore_version: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnHttpApiDefRoute53ConfigurationpropertyParams(pydantic.BaseModel):
    distributed_domain_name: typing.Optional[str] = pydantic.Field(None, description='')
    evaluate_target_health: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    hosted_zone_id: typing.Optional[str] = pydantic.Field(None, description='')
    hosted_zone_name: typing.Optional[str] = pydantic.Field(None, description='')
    ip_v6: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnHttpApiDefRoutesettingspropertyParams(pydantic.BaseModel):
    data_trace_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    detailed_metrics_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    logging_level: typing.Optional[str] = pydantic.Field(None, description='')
    throttling_burst_limit: typing.Union[int, float, None] = pydantic.Field(None, description='')
    throttling_rate_limit: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnHttpApiDefS3LocationpropertyParams(pydantic.BaseModel):
    bucket: str = pydantic.Field(..., description='')
    key: str = pydantic.Field(..., description='')
    version: typing.Union[int, float] = pydantic.Field(..., description='')
    ...

class CfnHttpApiDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnHttpApiDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnHttpApiDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnHttpApiDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnHttpApiDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnHttpApiDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnHttpApiDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnHttpApiDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnHttpApiDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnHttpApiDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnHttpApiDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnHttpApiDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnHttpApiDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnHttpApiDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sam.CfnLayerVersion
class CfnLayerVersionDef(BaseCfnResource):
    compatible_runtimes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    content_uri: typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnLayerVersion_S3LocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    layer_name: typing.Optional[str] = pydantic.Field(None, description='')
    license_info: typing.Optional[str] = pydantic.Field(None, description='')
    retention_policy: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['compatible_runtimes', 'content_uri', 'description', 'layer_name', 'license_info', 'retention_policy']
    _method_names: typing.ClassVar[list[str]] = ['S3LocationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnLayerVersion'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_sam.CfnLayerVersionDefConfig] = pydantic.Field(None)


class CfnLayerVersionDefConfig(pydantic.BaseModel):
    S3LocationProperty: typing.Optional[list[models.aws_sam.CfnLayerVersionDefS3LocationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_sam.CfnLayerVersionDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_sam.CfnLayerVersionDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_sam.CfnLayerVersionDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_sam.CfnLayerVersionDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_sam.CfnLayerVersionDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_sam.CfnLayerVersionDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_sam.CfnLayerVersionDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_sam.CfnLayerVersionDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_sam.CfnLayerVersionDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_sam.CfnLayerVersionDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_sam.CfnLayerVersionDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_sam.CfnLayerVersionDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_sam.CfnLayerVersionDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')

class CfnLayerVersionDefS3LocationpropertyParams(pydantic.BaseModel):
    bucket: str = pydantic.Field(..., description='')
    key: str = pydantic.Field(..., description='')
    version: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnLayerVersionDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnLayerVersionDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnLayerVersionDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnLayerVersionDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnLayerVersionDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnLayerVersionDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnLayerVersionDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnLayerVersionDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnLayerVersionDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnLayerVersionDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnLayerVersionDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnLayerVersionDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnLayerVersionDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnLayerVersionDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sam.CfnSimpleTable
class CfnSimpleTableDef(BaseCfnResource):
    primary_key: typing.Union[models.UnsupportedResource, models.aws_sam.CfnSimpleTable_PrimaryKeyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    provisioned_throughput: typing.Union[models.UnsupportedResource, models.aws_sam.CfnSimpleTable_ProvisionedThroughputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sse_specification: typing.Union[models.UnsupportedResource, models.aws_sam.CfnSimpleTable_SSESpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    table_name: typing.Optional[str] = pydantic.Field(None, description='')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['primary_key', 'provisioned_throughput', 'sse_specification', 'table_name', 'tags']
    _method_names: typing.ClassVar[list[str]] = ['PrimaryKeyProperty', 'ProvisionedThroughputProperty', 'SSESpecificationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnSimpleTable'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_sam.CfnSimpleTableDefConfig] = pydantic.Field(None)


class CfnSimpleTableDefConfig(pydantic.BaseModel):
    PrimaryKeyProperty: typing.Optional[list[models.aws_sam.CfnSimpleTableDefPrimarykeypropertyParams]] = pydantic.Field(None, description='')
    ProvisionedThroughputProperty: typing.Optional[list[models.aws_sam.CfnSimpleTableDefProvisionedthroughputpropertyParams]] = pydantic.Field(None, description='')
    SSESpecificationProperty: typing.Optional[list[models.aws_sam.CfnSimpleTableDefSsespecificationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_sam.CfnSimpleTableDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_sam.CfnSimpleTableDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_sam.CfnSimpleTableDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_sam.CfnSimpleTableDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_sam.CfnSimpleTableDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_sam.CfnSimpleTableDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_sam.CfnSimpleTableDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_sam.CfnSimpleTableDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_sam.CfnSimpleTableDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_sam.CfnSimpleTableDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_sam.CfnSimpleTableDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_sam.CfnSimpleTableDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_sam.CfnSimpleTableDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnSimpleTableDefPrimarykeypropertyParams(pydantic.BaseModel):
    type: str = pydantic.Field(..., description='')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnSimpleTableDefProvisionedthroughputpropertyParams(pydantic.BaseModel):
    write_capacity_units: typing.Union[int, float] = pydantic.Field(..., description='')
    read_capacity_units: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnSimpleTableDefSsespecificationpropertyParams(pydantic.BaseModel):
    sse_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnSimpleTableDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnSimpleTableDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSimpleTableDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnSimpleTableDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSimpleTableDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnSimpleTableDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnSimpleTableDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnSimpleTableDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnSimpleTableDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnSimpleTableDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnSimpleTableDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnSimpleTableDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnSimpleTableDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnSimpleTableDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sam.CfnStateMachine
class CfnStateMachineDef(BaseCfnResource):
    definition: typing.Any = pydantic.Field(None, description='')
    definition_substitutions: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    definition_uri: typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnStateMachine_S3LocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    events: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_sam.CfnStateMachine_EventSourcePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    logging: typing.Union[models.UnsupportedResource, models.aws_sam.CfnStateMachine_LoggingConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    permissions_boundaries: typing.Optional[str] = pydantic.Field(None, description='')
    policies: typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnStateMachine_IAMPolicyDocumentPropertyDef, dict[str, typing.Any], typing.Sequence[typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnStateMachine_IAMPolicyDocumentPropertyDef, dict[str, typing.Any], models.aws_sam.CfnStateMachine_SAMPolicyTemplatePropertyDef]], None] = pydantic.Field(None, description='')
    role: typing.Optional[str] = pydantic.Field(None, description='')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='')
    tracing: typing.Union[models.UnsupportedResource, models.aws_sam.CfnStateMachine_TracingConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    type: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['definition', 'definition_substitutions', 'definition_uri', 'events', 'logging', 'name', 'permissions_boundaries', 'policies', 'role', 'tags', 'tracing', 'type']
    _method_names: typing.ClassVar[list[str]] = ['ApiEventProperty', 'CloudWatchEventEventProperty', 'CloudWatchLogsLogGroupProperty', 'EventBridgeRuleEventProperty', 'EventSourceProperty', 'FunctionSAMPTProperty', 'IAMPolicyDocumentProperty', 'LogDestinationProperty', 'LoggingConfigurationProperty', 'S3LocationProperty', 'SAMPolicyTemplateProperty', 'ScheduleEventProperty', 'StateMachineSAMPTProperty', 'TracingConfigurationProperty', 'add_deletion_override', 'add_dependency', 'add_depends_on', 'add_metadata', 'add_override', 'add_property_deletion_override', 'add_property_override', 'apply_removal_policy', 'get_att', 'get_metadata', 'inspect', 'obtain_dependencies', 'obtain_resource_dependencies', 'override_logical_id', 'remove_dependency', 'replace_dependency']
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnStateMachine'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...


    resource_config: typing.Optional[models.aws_sam.CfnStateMachineDefConfig] = pydantic.Field(None)


class CfnStateMachineDefConfig(pydantic.BaseModel):
    ApiEventProperty: typing.Optional[list[models.aws_sam.CfnStateMachineDefApieventpropertyParams]] = pydantic.Field(None, description='')
    CloudWatchEventEventProperty: typing.Optional[list[models.aws_sam.CfnStateMachineDefCloudwatcheventeventpropertyParams]] = pydantic.Field(None, description='')
    CloudWatchLogsLogGroupProperty: typing.Optional[list[models.aws_sam.CfnStateMachineDefCloudwatchlogsloggrouppropertyParams]] = pydantic.Field(None, description='')
    EventBridgeRuleEventProperty: typing.Optional[list[models.aws_sam.CfnStateMachineDefEventbridgeruleeventpropertyParams]] = pydantic.Field(None, description='')
    EventSourceProperty: typing.Optional[list[models.aws_sam.CfnStateMachineDefEventsourcepropertyParams]] = pydantic.Field(None, description='')
    FunctionSAMPTProperty: typing.Optional[list[models.aws_sam.CfnStateMachineDefFunctionsamptpropertyParams]] = pydantic.Field(None, description='')
    IAMPolicyDocumentProperty: typing.Optional[list[models.aws_sam.CfnStateMachineDefIampolicydocumentpropertyParams]] = pydantic.Field(None, description='')
    LogDestinationProperty: typing.Optional[list[models.aws_sam.CfnStateMachineDefLogdestinationpropertyParams]] = pydantic.Field(None, description='')
    LoggingConfigurationProperty: typing.Optional[list[models.aws_sam.CfnStateMachineDefLoggingconfigurationpropertyParams]] = pydantic.Field(None, description='')
    S3LocationProperty: typing.Optional[list[models.aws_sam.CfnStateMachineDefS3LocationpropertyParams]] = pydantic.Field(None, description='')
    SAMPolicyTemplateProperty: typing.Optional[list[models.aws_sam.CfnStateMachineDefSampolicytemplatepropertyParams]] = pydantic.Field(None, description='')
    ScheduleEventProperty: typing.Optional[list[models.aws_sam.CfnStateMachineDefScheduleeventpropertyParams]] = pydantic.Field(None, description='')
    StateMachineSAMPTProperty: typing.Optional[list[models.aws_sam.CfnStateMachineDefStatemachinesamptpropertyParams]] = pydantic.Field(None, description='')
    TracingConfigurationProperty: typing.Optional[list[models.aws_sam.CfnStateMachineDefTracingconfigurationpropertyParams]] = pydantic.Field(None, description='')
    add_deletion_override: typing.Optional[list[models.aws_sam.CfnStateMachineDefAddDeletionOverrideParams]] = pydantic.Field(None, description='Syntactic sugar for ``addOverride(path, undefined)``.')
    add_dependency: typing.Optional[list[models.aws_sam.CfnStateMachineDefAddDependencyParams]] = pydantic.Field(None, description='Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.\nThis can be used for resources across stacks (or nested stack) boundaries\nand the dependency will automatically be transferred to the relevant scope.')
    add_depends_on: typing.Optional[list[models.aws_sam.CfnStateMachineDefAddDependsOnParams]] = pydantic.Field(None, description='(deprecated) Indicates that this resource depends on another resource and cannot be provisioned unless the other resource has been successfully provisioned.')
    add_metadata: typing.Optional[list[models.aws_sam.CfnStateMachineDefAddMetadataParams]] = pydantic.Field(None, description='Add a value to the CloudFormation Resource Metadata.')
    add_override: typing.Optional[list[models.aws_sam.CfnStateMachineDefAddOverrideParams]] = pydantic.Field(None, description='Adds an override to the synthesized CloudFormation resource.\nTo add a\nproperty override, either use ``addPropertyOverride`` or prefix ``path`` with\n"Properties." (i.e. ``Properties.TopicName``).\n\nIf the override is nested, separate each nested level using a dot (.) in the path parameter.\nIf there is an array as part of the nesting, specify the index in the path.\n\nTo include a literal ``.`` in the property name, prefix with a ``\\``. In most\nprogramming languages you will need to write this as ``"\\\\."`` because the\n``\\`` itself will need to be escaped.\n\nFor example::\n\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.0.Projection.NonKeyAttributes", ["myattribute"])\n   cfn_resource.add_override("Properties.GlobalSecondaryIndexes.1.ProjectionType", "INCLUDE")\n\nwould add the overrides Example::\n\n   "Properties": {\n     "GlobalSecondaryIndexes": [\n       {\n         "Projection": {\n           "NonKeyAttributes": [ "myattribute" ]\n           ...\n         }\n         ...\n       },\n       {\n         "ProjectionType": "INCLUDE"\n         ...\n       },\n     ]\n     ...\n   }\n\nThe ``value`` argument to ``addOverride`` will not be processed or translated\nin any way. Pass raw JSON values in here with the correct capitalization\nfor CloudFormation. If you pass CDK classes or structs, they will be\nrendered with lowercased key names, and CloudFormation will reject the\ntemplate.')
    add_property_deletion_override: typing.Optional[list[models.aws_sam.CfnStateMachineDefAddPropertyDeletionOverrideParams]] = pydantic.Field(None, description='Adds an override that deletes the value of a property from the resource definition.')
    add_property_override: typing.Optional[list[models.aws_sam.CfnStateMachineDefAddPropertyOverrideParams]] = pydantic.Field(None, description='Adds an override to a resource property.\nSyntactic sugar for ``addOverride("Properties.<...>", value)``.')
    apply_removal_policy: typing.Optional[list[models.GenericApplyRemovalPolicyParams]] = pydantic.Field(None)
    get_att: typing.Optional[list[models.aws_sam.CfnStateMachineDefGetAttParams]] = pydantic.Field(None, description='Returns a token for an runtime attribute of this resource.\nIdeally, use generated attribute accessors (e.g. ``resource.arn``), but this can be used for future compatibility\nin case there is no generated attribute.')
    get_metadata: typing.Optional[list[models.aws_sam.CfnStateMachineDefGetMetadataParams]] = pydantic.Field(None, description='Retrieve a value value from the CloudFormation Resource Metadata.')
    inspect: typing.Optional[list[models.aws_sam.CfnStateMachineDefInspectParams]] = pydantic.Field(None, description='Examines the CloudFormation resource and discloses attributes.')
    obtain_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Retrieves an array of resources this resource depends on.\nThis assembles dependencies on resources across stacks (including nested stacks)\nautomatically.')
    obtain_resource_dependencies: typing.Optional[bool] = pydantic.Field(None, description='Get a shallow copy of dependencies between this resource and other resources in the same stack.')
    override_logical_id: typing.Optional[list[models.aws_sam.CfnStateMachineDefOverrideLogicalIdParams]] = pydantic.Field(None, description='Overrides the auto-generated logical ID with a specific ID.')
    remove_dependency: typing.Optional[list[models.aws_sam.CfnStateMachineDefRemoveDependencyParams]] = pydantic.Field(None, description='Indicates that this resource no longer depends on another resource.\nThis can be used for resources across stacks (including nested stacks)\nand the dependency will automatically be removed from the relevant scope.')
    replace_dependency: typing.Optional[list[models.aws_sam.CfnStateMachineDefReplaceDependencyParams]] = pydantic.Field(None, description='Replaces one dependency with another.')
    tags_config: typing.Optional[models.core.TagManagerDefConfig] = pydantic.Field(None)

class CfnStateMachineDefApieventpropertyParams(pydantic.BaseModel):
    method: str = pydantic.Field(..., description='')
    path: str = pydantic.Field(..., description='')
    rest_api_id: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnStateMachineDefCloudwatcheventeventpropertyParams(pydantic.BaseModel):
    pattern: typing.Any = pydantic.Field(..., description='')
    event_bus_name: typing.Optional[str] = pydantic.Field(None, description='')
    input: typing.Optional[str] = pydantic.Field(None, description='')
    input_path: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnStateMachineDefCloudwatchlogsloggrouppropertyParams(pydantic.BaseModel):
    log_group_arn: str = pydantic.Field(..., description='')
    ...

class CfnStateMachineDefEventbridgeruleeventpropertyParams(pydantic.BaseModel):
    pattern: typing.Any = pydantic.Field(..., description='')
    event_bus_name: typing.Optional[str] = pydantic.Field(None, description='')
    input: typing.Optional[str] = pydantic.Field(None, description='')
    input_path: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnStateMachineDefEventsourcepropertyParams(pydantic.BaseModel):
    properties: typing.Union[models.UnsupportedResource, models.aws_sam.CfnStateMachine_ApiEventPropertyDef, dict[str, typing.Any], models.aws_sam.CfnStateMachine_CloudWatchEventEventPropertyDef, models.aws_sam.CfnStateMachine_EventBridgeRuleEventPropertyDef, models.aws_sam.CfnStateMachine_ScheduleEventPropertyDef] = pydantic.Field(..., description='')
    type: str = pydantic.Field(..., description='')
    ...

class CfnStateMachineDefFunctionsamptpropertyParams(pydantic.BaseModel):
    function_name: str = pydantic.Field(..., description='')
    ...

class CfnStateMachineDefIampolicydocumentpropertyParams(pydantic.BaseModel):
    statement: typing.Any = pydantic.Field(..., description='')
    version: str = pydantic.Field(..., description='')
    ...

class CfnStateMachineDefLogdestinationpropertyParams(pydantic.BaseModel):
    cloud_watch_logs_log_group: typing.Union[models.UnsupportedResource, models.aws_sam.CfnStateMachine_CloudWatchLogsLogGroupPropertyDef, dict[str, typing.Any]] = pydantic.Field(..., description='')
    ...

class CfnStateMachineDefLoggingconfigurationpropertyParams(pydantic.BaseModel):
    destinations: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_sam.CfnStateMachine_LogDestinationPropertyDef, dict[str, typing.Any]]]] = pydantic.Field(..., description='')
    include_execution_data: typing.Union[bool, models.UnsupportedResource] = pydantic.Field(..., description='')
    level: str = pydantic.Field(..., description='')
    ...

class CfnStateMachineDefS3LocationpropertyParams(pydantic.BaseModel):
    bucket: str = pydantic.Field(..., description='')
    key: str = pydantic.Field(..., description='')
    version: typing.Union[int, float, None] = pydantic.Field(None, description='')
    ...

class CfnStateMachineDefSampolicytemplatepropertyParams(pydantic.BaseModel):
    lambda_invoke_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnStateMachine_FunctionSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    step_functions_execution_policy: typing.Union[models.UnsupportedResource, models.aws_sam.CfnStateMachine_StateMachineSAMPTPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ...

class CfnStateMachineDefScheduleeventpropertyParams(pydantic.BaseModel):
    schedule: str = pydantic.Field(..., description='')
    input: typing.Optional[str] = pydantic.Field(None, description='')
    ...

class CfnStateMachineDefStatemachinesamptpropertyParams(pydantic.BaseModel):
    state_machine_name: str = pydantic.Field(..., description='')
    ...

class CfnStateMachineDefTracingconfigurationpropertyParams(pydantic.BaseModel):
    enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    ...

class CfnStateMachineDefAddDeletionOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='The path of the value to delete.')
    ...

class CfnStateMachineDefAddDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStateMachineDefAddDependsOnParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-\n\n:deprecated: use addDependency\n\n:stability: deprecated\n')
    ...

class CfnStateMachineDefAddMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n')
    value: typing.Any = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStateMachineDefAddOverrideParams(pydantic.BaseModel):
    path: str = pydantic.Field(..., description='- The path of the property, you can use dot notation to override values in complex types. Any intermediate keys will be created as needed.\n')
    value: typing.Any = pydantic.Field(..., description='- The value. Could be primitive or complex.')
    ...

class CfnStateMachineDefAddPropertyDeletionOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path to the property.')
    ...

class CfnStateMachineDefAddPropertyOverrideParams(pydantic.BaseModel):
    property_path: str = pydantic.Field(..., description='The path of the property.\n')
    value: typing.Any = pydantic.Field(..., description='The value.')
    ...

class CfnStateMachineDefApplyRemovalPolicyParams(pydantic.BaseModel):
    policy: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description='-\n')
    apply_to_update_replace_policy: typing.Optional[bool] = pydantic.Field(None, description='Apply the same deletion policy to the resource\'s "UpdateReplacePolicy". Default: true\n')
    default: typing.Optional[aws_cdk.RemovalPolicy] = pydantic.Field(None, description="The default policy to apply in case the removal policy is not defined. Default: - Default value is resource specific. To determine the default value for a resource, please consult that specific resource's documentation.\n\n:see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html#aws-attribute-deletionpolicy-options\n")
    ...

class CfnStateMachineDefGetAttParams(pydantic.BaseModel):
    attribute_name: str = pydantic.Field(..., description='The name of the attribute.\n')
    type_hint: typing.Optional[aws_cdk.ResolutionTypeHint] = pydantic.Field(None, description='-')
    return_config: typing.Optional[list[models.core.ReferenceDefConfig]] = pydantic.Field(None)
    ...

class CfnStateMachineDefGetMetadataParams(pydantic.BaseModel):
    key: str = pydantic.Field(..., description='-\n\n:see:\n\nhttps://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/metadata-section-structure.html\n\nNote that this is a different set of metadata from CDK node metadata; this\nmetadata ends up in the stack template under the resource, whereas CDK\nnode metadata ends up in the Cloud Assembly.\n')
    ...

class CfnStateMachineDefInspectParams(pydantic.BaseModel):
    inspector: models.TreeInspectorDef = pydantic.Field(..., description='tree inspector to collect and process attributes.')
    ...

class CfnStateMachineDefOverrideLogicalIdParams(pydantic.BaseModel):
    new_logical_id: str = pydantic.Field(..., description='The new logical ID to use for this stack element.')
    ...

class CfnStateMachineDefRemoveDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='-')
    ...

class CfnStateMachineDefReplaceDependencyParams(pydantic.BaseModel):
    target: models.CfnResourceDef = pydantic.Field(..., description='The dependency to replace.\n')
    new_target: models.CfnResourceDef = pydantic.Field(..., description='The new dependency to add.')
    ...


#  autogenerated from aws_cdk.aws_sam.CfnApiProps
class CfnApiPropsDef(BaseCfnProperty):
    stage_name: typing.Union[str, _REQUIRED_INIT_PARAM] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    access_log_setting: typing.Union[models.UnsupportedResource, models.aws_sam.CfnApi_AccessLogSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    always_deploy: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    auth: typing.Union[models.UnsupportedResource, models.aws_sam.CfnApi_AuthPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    binary_media_types: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    cache_cluster_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    cache_cluster_size: typing.Optional[str] = pydantic.Field(None, description='')
    canary_setting: typing.Union[models.UnsupportedResource, models.aws_sam.CfnApi_CanarySettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    cors: typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnApi_CorsConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    definition_body: typing.Any = pydantic.Field(None, description='')
    definition_uri: typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnApi_S3LocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    disable_execute_api_endpoint: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    domain: typing.Union[models.UnsupportedResource, models.aws_sam.CfnApi_DomainConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    endpoint_configuration: typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnApi_EndpointConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    gateway_responses: typing.Any = pydantic.Field(None, description='')
    method_settings: typing.Union[typing.Sequence[typing.Any], models.UnsupportedResource, None] = pydantic.Field(None, description='')
    minimum_compression_size: typing.Union[int, float, None] = pydantic.Field(None, description='')
    models_: typing.Any = pydantic.Field(None, description='', alias='models')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    open_api_version: typing.Optional[str] = pydantic.Field(None, description='')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='')
    tracing_enabled: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    variables: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['stage_name', 'access_log_setting', 'always_deploy', 'auth', 'binary_media_types', 'cache_cluster_enabled', 'cache_cluster_size', 'canary_setting', 'cors', 'definition_body', 'definition_uri', 'description', 'disable_execute_api_endpoint', 'domain', 'endpoint_configuration', 'gateway_responses', 'method_settings', 'minimum_compression_size', 'models', 'name', 'open_api_version', 'tags', 'tracing_enabled', 'variables']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnApiProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnApplicationProps
class CfnApplicationPropsDef(BaseCfnProperty):
    location: typing.Union[_REQUIRED_INIT_PARAM, str, models.UnsupportedResource, models.aws_sam.CfnApplication_ApplicationLocationPropertyDef, dict[str, typing.Any]] = pydantic.Field(REQUIRED_INIT_PARAM, description='')
    notification_arns: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    parameters: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='')
    timeout_in_minutes: typing.Union[int, float, None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['location', 'notification_arns', 'parameters', 'tags', 'timeout_in_minutes']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnApplicationProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnFunctionProps
class CfnFunctionPropsDef(BaseCfnProperty):
    architectures: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    assume_role_policy_document: typing.Any = pydantic.Field(None, description='')
    auto_publish_alias: typing.Optional[str] = pydantic.Field(None, description='')
    auto_publish_code_sha256: typing.Optional[str] = pydantic.Field(None, description='')
    code_signing_config_arn: typing.Optional[str] = pydantic.Field(None, description='')
    code_uri: typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnFunction_S3LocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    dead_letter_queue: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_DeadLetterQueuePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    deployment_preference: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_DeploymentPreferencePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    environment: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_FunctionEnvironmentPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    ephemeral_storage: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EphemeralStoragePropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    event_invoke_config: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EventInvokeConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    events: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_EventSourcePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    file_system_configs: typing.Union[models.UnsupportedResource, typing.Sequence[typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_FileSystemConfigPropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    function_name: typing.Optional[str] = pydantic.Field(None, description='')
    function_url_config: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_FunctionUrlConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    handler: typing.Optional[str] = pydantic.Field(None, description='')
    image_config: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_ImageConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    image_uri: typing.Optional[str] = pydantic.Field(None, description='')
    inline_code: typing.Optional[str] = pydantic.Field(None, description='')
    kms_key_arn: typing.Optional[str] = pydantic.Field(None, description='')
    layers: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    memory_size: typing.Union[int, float, None] = pydantic.Field(None, description='')
    package_type: typing.Optional[str] = pydantic.Field(None, description='')
    permissions_boundary: typing.Optional[str] = pydantic.Field(None, description='')
    policies: typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnFunction_IAMPolicyDocumentPropertyDef, dict[str, typing.Any], typing.Sequence[typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnFunction_IAMPolicyDocumentPropertyDef, dict[str, typing.Any], models.aws_sam.CfnFunction_SAMPolicyTemplatePropertyDef]], None] = pydantic.Field(None, description='')
    provisioned_concurrency_config: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_ProvisionedConcurrencyConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    reserved_concurrent_executions: typing.Union[int, float, None] = pydantic.Field(None, description='')
    role: typing.Optional[str] = pydantic.Field(None, description='')
    runtime: typing.Optional[str] = pydantic.Field(None, description='')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='')
    timeout: typing.Union[int, float, None] = pydantic.Field(None, description='')
    tracing: typing.Optional[str] = pydantic.Field(None, description='')
    version_description: typing.Optional[str] = pydantic.Field(None, description='')
    vpc_config: typing.Union[models.UnsupportedResource, models.aws_sam.CfnFunction_VpcConfigPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['architectures', 'assume_role_policy_document', 'auto_publish_alias', 'auto_publish_code_sha256', 'code_signing_config_arn', 'code_uri', 'dead_letter_queue', 'deployment_preference', 'description', 'environment', 'ephemeral_storage', 'event_invoke_config', 'events', 'file_system_configs', 'function_name', 'function_url_config', 'handler', 'image_config', 'image_uri', 'inline_code', 'kms_key_arn', 'layers', 'memory_size', 'package_type', 'permissions_boundary', 'policies', 'provisioned_concurrency_config', 'reserved_concurrent_executions', 'role', 'runtime', 'tags', 'timeout', 'tracing', 'version_description', 'vpc_config']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnFunctionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnHttpApiProps
class CfnHttpApiPropsDef(BaseCfnProperty):
    access_log_setting: typing.Union[models.UnsupportedResource, models.aws_sam.CfnHttpApi_AccessLogSettingPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    auth: typing.Union[models.UnsupportedResource, models.aws_sam.CfnHttpApi_HttpApiAuthPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    cors_configuration: typing.Union[bool, models.UnsupportedResource, models.aws_sam.CfnHttpApi_CorsConfigurationObjectPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    default_route_settings: typing.Union[models.UnsupportedResource, models.aws_sam.CfnHttpApi_RouteSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    definition_body: typing.Any = pydantic.Field(None, description='')
    definition_uri: typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnHttpApi_S3LocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    disable_execute_api_endpoint: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    domain: typing.Union[models.UnsupportedResource, models.aws_sam.CfnHttpApi_HttpApiDomainConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    fail_on_warnings: typing.Union[bool, models.UnsupportedResource, None] = pydantic.Field(None, description='')
    route_settings: typing.Union[models.UnsupportedResource, models.aws_sam.CfnHttpApi_RouteSettingsPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    stage_name: typing.Optional[str] = pydantic.Field(None, description='')
    stage_variables: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['access_log_setting', 'auth', 'cors_configuration', 'default_route_settings', 'definition_body', 'definition_uri', 'description', 'disable_execute_api_endpoint', 'domain', 'fail_on_warnings', 'route_settings', 'stage_name', 'stage_variables', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnHttpApiProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnLayerVersionProps
class CfnLayerVersionPropsDef(BaseCfnProperty):
    compatible_runtimes: typing.Optional[typing.Sequence[str]] = pydantic.Field(None, description='')
    content_uri: typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnLayerVersion_S3LocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    description: typing.Optional[str] = pydantic.Field(None, description='')
    layer_name: typing.Optional[str] = pydantic.Field(None, description='')
    license_info: typing.Optional[str] = pydantic.Field(None, description='')
    retention_policy: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['compatible_runtimes', 'content_uri', 'description', 'layer_name', 'license_info', 'retention_policy']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnLayerVersionProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnSimpleTableProps
class CfnSimpleTablePropsDef(BaseCfnProperty):
    primary_key: typing.Union[models.UnsupportedResource, models.aws_sam.CfnSimpleTable_PrimaryKeyPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    provisioned_throughput: typing.Union[models.UnsupportedResource, models.aws_sam.CfnSimpleTable_ProvisionedThroughputPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    sse_specification: typing.Union[models.UnsupportedResource, models.aws_sam.CfnSimpleTable_SSESpecificationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    table_name: typing.Optional[str] = pydantic.Field(None, description='')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['primary_key', 'provisioned_throughput', 'sse_specification', 'table_name', 'tags']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnSimpleTableProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




#  autogenerated from aws_cdk.aws_sam.CfnStateMachineProps
class CfnStateMachinePropsDef(BaseCfnProperty):
    definition: typing.Any = pydantic.Field(None, description='')
    definition_substitutions: typing.Union[models.UnsupportedResource, typing.Mapping[str, str], None] = pydantic.Field(None, description='')
    definition_uri: typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnStateMachine_S3LocationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    events: typing.Union[models.UnsupportedResource, typing.Mapping[str, typing.Union[models.UnsupportedResource, models.aws_sam.CfnStateMachine_EventSourcePropertyDef, dict[str, typing.Any]]], None] = pydantic.Field(None, description='')
    logging: typing.Union[models.UnsupportedResource, models.aws_sam.CfnStateMachine_LoggingConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    name: typing.Optional[str] = pydantic.Field(None, description='')
    permissions_boundaries: typing.Optional[str] = pydantic.Field(None, description='')
    policies: typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnStateMachine_IAMPolicyDocumentPropertyDef, dict[str, typing.Any], typing.Sequence[typing.Union[str, models.UnsupportedResource, models.aws_sam.CfnStateMachine_IAMPolicyDocumentPropertyDef, dict[str, typing.Any], models.aws_sam.CfnStateMachine_SAMPolicyTemplatePropertyDef]], None] = pydantic.Field(None, description='')
    role: typing.Optional[str] = pydantic.Field(None, description='')
    tags: typing.Optional[typing.Mapping[str, str]] = pydantic.Field(None, description='')
    tracing: typing.Union[models.UnsupportedResource, models.aws_sam.CfnStateMachine_TracingConfigurationPropertyDef, dict[str, typing.Any], None] = pydantic.Field(None, description='')
    type: typing.Optional[str] = pydantic.Field(None, description='')
    _init_params: typing.ClassVar[list[str]] = ['definition', 'definition_substitutions', 'definition_uri', 'events', 'logging', 'name', 'permissions_boundaries', 'policies', 'role', 'tags', 'tracing', 'type']
    _method_names: typing.ClassVar[list[str]] = []
    _classmethod_names: typing.ClassVar[list[str]] = []
    _cdk_class_fqn: typing.ClassVar[str] = 'aws_cdk.aws_sam.CfnStateMachineProps'
    _alternate_constructor_method_names: typing.ClassVar[list[str]] = []
    ...




class ModuleModel(pydantic.BaseModel):
    CfnApi_AccessLogSettingProperty: typing.Optional[dict[str, models.aws_sam.CfnApi_AccessLogSettingPropertyDef]] = pydantic.Field(None)
    CfnApi_AuthProperty: typing.Optional[dict[str, models.aws_sam.CfnApi_AuthPropertyDef]] = pydantic.Field(None)
    CfnApi_CanarySettingProperty: typing.Optional[dict[str, models.aws_sam.CfnApi_CanarySettingPropertyDef]] = pydantic.Field(None)
    CfnApi_CorsConfigurationProperty: typing.Optional[dict[str, models.aws_sam.CfnApi_CorsConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApi_DomainConfigurationProperty: typing.Optional[dict[str, models.aws_sam.CfnApi_DomainConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApi_EndpointConfigurationProperty: typing.Optional[dict[str, models.aws_sam.CfnApi_EndpointConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApi_MutualTlsAuthenticationProperty: typing.Optional[dict[str, models.aws_sam.CfnApi_MutualTlsAuthenticationPropertyDef]] = pydantic.Field(None)
    CfnApi_Route53ConfigurationProperty: typing.Optional[dict[str, models.aws_sam.CfnApi_Route53ConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApi_S3LocationProperty: typing.Optional[dict[str, models.aws_sam.CfnApi_S3LocationPropertyDef]] = pydantic.Field(None)
    CfnApplication_ApplicationLocationProperty: typing.Optional[dict[str, models.aws_sam.CfnApplication_ApplicationLocationPropertyDef]] = pydantic.Field(None)
    CfnFunction_AlexaSkillEventProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_AlexaSkillEventPropertyDef]] = pydantic.Field(None)
    CfnFunction_ApiEventProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_ApiEventPropertyDef]] = pydantic.Field(None)
    CfnFunction_AuthProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_AuthPropertyDef]] = pydantic.Field(None)
    CfnFunction_AuthResourcePolicyProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_AuthResourcePolicyPropertyDef]] = pydantic.Field(None)
    CfnFunction_BucketSAMPTProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_BucketSAMPTPropertyDef]] = pydantic.Field(None)
    CfnFunction_CloudWatchEventEventProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_CloudWatchEventEventPropertyDef]] = pydantic.Field(None)
    CfnFunction_CloudWatchLogsEventProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_CloudWatchLogsEventPropertyDef]] = pydantic.Field(None)
    CfnFunction_CognitoEventProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_CognitoEventPropertyDef]] = pydantic.Field(None)
    CfnFunction_CollectionSAMPTProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_CollectionSAMPTPropertyDef]] = pydantic.Field(None)
    CfnFunction_CorsConfigurationProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_CorsConfigurationPropertyDef]] = pydantic.Field(None)
    CfnFunction_DeadLetterQueueProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_DeadLetterQueuePropertyDef]] = pydantic.Field(None)
    CfnFunction_DeploymentPreferenceProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_DeploymentPreferencePropertyDef]] = pydantic.Field(None)
    CfnFunction_DestinationConfigProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_DestinationConfigPropertyDef]] = pydantic.Field(None)
    CfnFunction_DestinationProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_DestinationPropertyDef]] = pydantic.Field(None)
    CfnFunction_DomainSAMPTProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_DomainSAMPTPropertyDef]] = pydantic.Field(None)
    CfnFunction_DynamoDBEventProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_DynamoDBEventPropertyDef]] = pydantic.Field(None)
    CfnFunction_EmptySAMPTProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_EmptySAMPTPropertyDef]] = pydantic.Field(None)
    CfnFunction_EphemeralStorageProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_EphemeralStoragePropertyDef]] = pydantic.Field(None)
    CfnFunction_EventBridgeRuleEventProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_EventBridgeRuleEventPropertyDef]] = pydantic.Field(None)
    CfnFunction_EventInvokeConfigProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_EventInvokeConfigPropertyDef]] = pydantic.Field(None)
    CfnFunction_EventInvokeDestinationConfigProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_EventInvokeDestinationConfigPropertyDef]] = pydantic.Field(None)
    CfnFunction_EventSourceProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_EventSourcePropertyDef]] = pydantic.Field(None)
    CfnFunction_FileSystemConfigProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_FileSystemConfigPropertyDef]] = pydantic.Field(None)
    CfnFunction_FunctionEnvironmentProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_FunctionEnvironmentPropertyDef]] = pydantic.Field(None)
    CfnFunction_FunctionSAMPTProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_FunctionSAMPTPropertyDef]] = pydantic.Field(None)
    CfnFunction_FunctionUrlConfigProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_FunctionUrlConfigPropertyDef]] = pydantic.Field(None)
    CfnFunction_HooksProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_HooksPropertyDef]] = pydantic.Field(None)
    CfnFunction_HttpApiEventProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_HttpApiEventPropertyDef]] = pydantic.Field(None)
    CfnFunction_HttpApiFunctionAuthProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_HttpApiFunctionAuthPropertyDef]] = pydantic.Field(None)
    CfnFunction_IAMPolicyDocumentProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_IAMPolicyDocumentPropertyDef]] = pydantic.Field(None)
    CfnFunction_IdentitySAMPTProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_IdentitySAMPTPropertyDef]] = pydantic.Field(None)
    CfnFunction_ImageConfigProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_ImageConfigPropertyDef]] = pydantic.Field(None)
    CfnFunction_IoTRuleEventProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_IoTRuleEventPropertyDef]] = pydantic.Field(None)
    CfnFunction_KeySAMPTProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_KeySAMPTPropertyDef]] = pydantic.Field(None)
    CfnFunction_KinesisEventProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_KinesisEventPropertyDef]] = pydantic.Field(None)
    CfnFunction_LogGroupSAMPTProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_LogGroupSAMPTPropertyDef]] = pydantic.Field(None)
    CfnFunction_ParameterNameSAMPTProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_ParameterNameSAMPTPropertyDef]] = pydantic.Field(None)
    CfnFunction_ProvisionedConcurrencyConfigProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_ProvisionedConcurrencyConfigPropertyDef]] = pydantic.Field(None)
    CfnFunction_QueueSAMPTProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_QueueSAMPTPropertyDef]] = pydantic.Field(None)
    CfnFunction_RequestModelProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_RequestModelPropertyDef]] = pydantic.Field(None)
    CfnFunction_RequestParameterProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_RequestParameterPropertyDef]] = pydantic.Field(None)
    CfnFunction_RouteSettingsProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_RouteSettingsPropertyDef]] = pydantic.Field(None)
    CfnFunction_S3EventProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_S3EventPropertyDef]] = pydantic.Field(None)
    CfnFunction_S3KeyFilterProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_S3KeyFilterPropertyDef]] = pydantic.Field(None)
    CfnFunction_S3KeyFilterRuleProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_S3KeyFilterRulePropertyDef]] = pydantic.Field(None)
    CfnFunction_S3LocationProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_S3LocationPropertyDef]] = pydantic.Field(None)
    CfnFunction_S3NotificationFilterProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_S3NotificationFilterPropertyDef]] = pydantic.Field(None)
    CfnFunction_SAMPolicyTemplateProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_SAMPolicyTemplatePropertyDef]] = pydantic.Field(None)
    CfnFunction_ScheduleEventProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_ScheduleEventPropertyDef]] = pydantic.Field(None)
    CfnFunction_SecretArnSAMPTProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_SecretArnSAMPTPropertyDef]] = pydantic.Field(None)
    CfnFunction_SNSEventProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_SNSEventPropertyDef]] = pydantic.Field(None)
    CfnFunction_SQSEventProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_SQSEventPropertyDef]] = pydantic.Field(None)
    CfnFunction_StateMachineSAMPTProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_StateMachineSAMPTPropertyDef]] = pydantic.Field(None)
    CfnFunction_StreamSAMPTProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_StreamSAMPTPropertyDef]] = pydantic.Field(None)
    CfnFunction_TableSAMPTProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_TableSAMPTPropertyDef]] = pydantic.Field(None)
    CfnFunction_TableStreamSAMPTProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_TableStreamSAMPTPropertyDef]] = pydantic.Field(None)
    CfnFunction_TopicSAMPTProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_TopicSAMPTPropertyDef]] = pydantic.Field(None)
    CfnFunction_VpcConfigProperty: typing.Optional[dict[str, models.aws_sam.CfnFunction_VpcConfigPropertyDef]] = pydantic.Field(None)
    CfnHttpApi_AccessLogSettingProperty: typing.Optional[dict[str, models.aws_sam.CfnHttpApi_AccessLogSettingPropertyDef]] = pydantic.Field(None)
    CfnHttpApi_CorsConfigurationObjectProperty: typing.Optional[dict[str, models.aws_sam.CfnHttpApi_CorsConfigurationObjectPropertyDef]] = pydantic.Field(None)
    CfnHttpApi_HttpApiAuthProperty: typing.Optional[dict[str, models.aws_sam.CfnHttpApi_HttpApiAuthPropertyDef]] = pydantic.Field(None)
    CfnHttpApi_HttpApiDomainConfigurationProperty: typing.Optional[dict[str, models.aws_sam.CfnHttpApi_HttpApiDomainConfigurationPropertyDef]] = pydantic.Field(None)
    CfnHttpApi_MutualTlsAuthenticationProperty: typing.Optional[dict[str, models.aws_sam.CfnHttpApi_MutualTlsAuthenticationPropertyDef]] = pydantic.Field(None)
    CfnHttpApi_Route53ConfigurationProperty: typing.Optional[dict[str, models.aws_sam.CfnHttpApi_Route53ConfigurationPropertyDef]] = pydantic.Field(None)
    CfnHttpApi_RouteSettingsProperty: typing.Optional[dict[str, models.aws_sam.CfnHttpApi_RouteSettingsPropertyDef]] = pydantic.Field(None)
    CfnHttpApi_S3LocationProperty: typing.Optional[dict[str, models.aws_sam.CfnHttpApi_S3LocationPropertyDef]] = pydantic.Field(None)
    CfnLayerVersion_S3LocationProperty: typing.Optional[dict[str, models.aws_sam.CfnLayerVersion_S3LocationPropertyDef]] = pydantic.Field(None)
    CfnSimpleTable_PrimaryKeyProperty: typing.Optional[dict[str, models.aws_sam.CfnSimpleTable_PrimaryKeyPropertyDef]] = pydantic.Field(None)
    CfnSimpleTable_ProvisionedThroughputProperty: typing.Optional[dict[str, models.aws_sam.CfnSimpleTable_ProvisionedThroughputPropertyDef]] = pydantic.Field(None)
    CfnSimpleTable_SSESpecificationProperty: typing.Optional[dict[str, models.aws_sam.CfnSimpleTable_SSESpecificationPropertyDef]] = pydantic.Field(None)
    CfnStateMachine_ApiEventProperty: typing.Optional[dict[str, models.aws_sam.CfnStateMachine_ApiEventPropertyDef]] = pydantic.Field(None)
    CfnStateMachine_CloudWatchEventEventProperty: typing.Optional[dict[str, models.aws_sam.CfnStateMachine_CloudWatchEventEventPropertyDef]] = pydantic.Field(None)
    CfnStateMachine_CloudWatchLogsLogGroupProperty: typing.Optional[dict[str, models.aws_sam.CfnStateMachine_CloudWatchLogsLogGroupPropertyDef]] = pydantic.Field(None)
    CfnStateMachine_EventBridgeRuleEventProperty: typing.Optional[dict[str, models.aws_sam.CfnStateMachine_EventBridgeRuleEventPropertyDef]] = pydantic.Field(None)
    CfnStateMachine_EventSourceProperty: typing.Optional[dict[str, models.aws_sam.CfnStateMachine_EventSourcePropertyDef]] = pydantic.Field(None)
    CfnStateMachine_FunctionSAMPTProperty: typing.Optional[dict[str, models.aws_sam.CfnStateMachine_FunctionSAMPTPropertyDef]] = pydantic.Field(None)
    CfnStateMachine_IAMPolicyDocumentProperty: typing.Optional[dict[str, models.aws_sam.CfnStateMachine_IAMPolicyDocumentPropertyDef]] = pydantic.Field(None)
    CfnStateMachine_LogDestinationProperty: typing.Optional[dict[str, models.aws_sam.CfnStateMachine_LogDestinationPropertyDef]] = pydantic.Field(None)
    CfnStateMachine_LoggingConfigurationProperty: typing.Optional[dict[str, models.aws_sam.CfnStateMachine_LoggingConfigurationPropertyDef]] = pydantic.Field(None)
    CfnStateMachine_S3LocationProperty: typing.Optional[dict[str, models.aws_sam.CfnStateMachine_S3LocationPropertyDef]] = pydantic.Field(None)
    CfnStateMachine_SAMPolicyTemplateProperty: typing.Optional[dict[str, models.aws_sam.CfnStateMachine_SAMPolicyTemplatePropertyDef]] = pydantic.Field(None)
    CfnStateMachine_ScheduleEventProperty: typing.Optional[dict[str, models.aws_sam.CfnStateMachine_ScheduleEventPropertyDef]] = pydantic.Field(None)
    CfnStateMachine_StateMachineSAMPTProperty: typing.Optional[dict[str, models.aws_sam.CfnStateMachine_StateMachineSAMPTPropertyDef]] = pydantic.Field(None)
    CfnStateMachine_TracingConfigurationProperty: typing.Optional[dict[str, models.aws_sam.CfnStateMachine_TracingConfigurationPropertyDef]] = pydantic.Field(None)
    CfnApi: typing.Optional[dict[str, models.aws_sam.CfnApiDef]] = pydantic.Field(None)
    CfnApplication: typing.Optional[dict[str, models.aws_sam.CfnApplicationDef]] = pydantic.Field(None)
    CfnFunction: typing.Optional[dict[str, models.aws_sam.CfnFunctionDef]] = pydantic.Field(None)
    CfnHttpApi: typing.Optional[dict[str, models.aws_sam.CfnHttpApiDef]] = pydantic.Field(None)
    CfnLayerVersion: typing.Optional[dict[str, models.aws_sam.CfnLayerVersionDef]] = pydantic.Field(None)
    CfnSimpleTable: typing.Optional[dict[str, models.aws_sam.CfnSimpleTableDef]] = pydantic.Field(None)
    CfnStateMachine: typing.Optional[dict[str, models.aws_sam.CfnStateMachineDef]] = pydantic.Field(None)
    CfnApiProps: typing.Optional[dict[str, models.aws_sam.CfnApiPropsDef]] = pydantic.Field(None)
    CfnApplicationProps: typing.Optional[dict[str, models.aws_sam.CfnApplicationPropsDef]] = pydantic.Field(None)
    CfnFunctionProps: typing.Optional[dict[str, models.aws_sam.CfnFunctionPropsDef]] = pydantic.Field(None)
    CfnHttpApiProps: typing.Optional[dict[str, models.aws_sam.CfnHttpApiPropsDef]] = pydantic.Field(None)
    CfnLayerVersionProps: typing.Optional[dict[str, models.aws_sam.CfnLayerVersionPropsDef]] = pydantic.Field(None)
    CfnSimpleTableProps: typing.Optional[dict[str, models.aws_sam.CfnSimpleTablePropsDef]] = pydantic.Field(None)
    CfnStateMachineProps: typing.Optional[dict[str, models.aws_sam.CfnStateMachinePropsDef]] = pydantic.Field(None)
    ...

import models
